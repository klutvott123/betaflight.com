[{"title":"New Speed Record for “Fastest ground speed by a battery-powered remote-controlled (RC) quadcopter.”","type":0,"sectionRef":"#","url":"/betaflight.com/blog/New World Record for Fastest Drone","content":"Its simply a case of &quot;ICYMI&quot;. Yes folks Betaflight, albeit an earlier version than current, was the firmware behind the most recent record breaking success story for the “Fastest ground speed by a battery-powered remote-controlled (RC) quadcopter.”. The Guinness World Records has granted the title to Ryan Lademann (USA), using his custom built drone called the XLR V3 Red. This drone powered its way to the record books by hitting 224mph (360kmh). Yes thats right folks this drone nearly hit 200knots (195knots). Many light aircraft would love to reach those speeds. The record attempt was made in Scottsdale, Arizona, USA, on 8 November 2022. What a way to finish out the year. The team here at Betaflight congratulate Ryan on his successful attempt, and are very happy the firmware played a small part in that success. now how can we get Ryan to update his firmware ;). For some more details on the attempt: For a clip of the attempt: https://youtu.be/J3WwtByvSI0?t=21 If your are so inclined the black box log of the attempt can be analysed here: https://drive.google.com/file/d/1K1JLV_f3W0z1dRSP84hw3UEqv5Fc_b5P/view Don't forget to check out Ryan's page for more details on the drone: https://quad-star-drones.com/xlr-v3/ And last but not least, the details from GWR themselves: https://www.guinnessworldrecords.com/world-records/464800-fastest-ground-speed-by-a-battery-powered-remote-controlled-quadcopter","keywords":""},{"title":"Welcome to the Development section","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development","content":"","keywords":""},{"title":"Find everything betaflight related​","type":1,"pageTitle":"Welcome to the Development section","url":"/betaflight.com/docs/development#find-everything-betaflight-related","content":"Work in progress This site is still new. Very new. As of writing this, it's only 5 days since we started working on it. So it's still very much a work in progress. Pages going to be added, updated and improved pretty every day in the weeks to come. So if you're missing something, please be patient. It will come! You can also help us out, check out the #documentation channel on the Discord serverfor more info. "},{"title":"Contributing​","type":1,"pageTitle":"Welcome to the Development section","url":"/betaflight.com/docs/development#contributing","content":"Contributions are welcome and encouraged. You can contribute in many ways: implement a new feature in the firmware or in configurator (see below);documentation updates and corrections;How-To guides - received help? Help others!bug reporting &amp; fixes;new feature ideas &amp; suggestions;provide a new translation for configurator, or help us maintain the existing ones (see below). The best place to start is the Betaflight Slack (registration here). Next place is the github issue tracker: https://github.com/betaflight/betaflight/issueshttps://github.com/betaflight/betaflight-configurator/issues Before creating new issues please check to see if there is an existing one, search first otherwise you waste people's time when they could be coding instead! If you want to contribute to our efforts financially, please consider making a donation to us through PayPal. If you want to contribute financially on an ongoing basis, you should consider becoming a patron for us on Patreon. "},{"title":"Developers​","type":1,"pageTitle":"Welcome to the Development section","url":"/betaflight.com/docs/development#developers","content":"Contribution of bugfixes and new features is encouraged. Please be aware that we have a thorough review process for pull requests, and be prepared to explain what you want to achieve with your pull request. Before starting to write code, please read our development guidelines and coding style definition. GitHub actions are used to run automatic builds "},{"title":"Translators​","type":1,"pageTitle":"Welcome to the Development section","url":"/betaflight.com/docs/development#translators","content":"We want to make Betaflight accessible for pilots who are not fluent in English, and for this reason we are currently maintaining translations into 21 languages for Betaflight Configurator: Català, Dansk, Deutsch, Español, Euskera, Français, Galego, Hrvatski, Bahasa Indonesia, Italiano, 日本語, 한국어, Latviešu, Português, Português Brasileiro, polski, Русский язык, Svenska, 简体中文, 繁體中文. We have got a team of volunteer translators who do this work, but additional translators are always welcome to share the workload, and we are keen to add additional languages. If you would like to help us with translations, you have got the following options: if you help by suggesting some updates or improvements to translations in a language you are familiar with, head to crowdin and add your suggested translations there;if you would like to start working on the translation for a new language, or take on responsibility for proof-reading the translation for a language you are very familiar with, please head to the Betaflight Discord chat (registration here), and join the 'translation' channel - the people in there can help you to get a new language added, or set you up as a proof reader. "},{"title":"Bus and External Device Drivers","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/API/BusDrivers","content":"","keywords":""},{"title":"Bus Agnostic Device Access Routines​","type":1,"pageTitle":"Bus and External Device Drivers","url":"/betaflight.com/docs/development/API/BusDrivers#bus-agnostic-device-access-routines","content":"There are a common set of device access functions which are bus agnostic. In each case the device instance handle dev is passed to indicate the device to access, and from this the appropriate bus instance is selected. "},{"title":"Betaflight 4.4 cloud build API","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/API/Cloud-Build-API","content":"","keywords":""},{"title":"API​","type":1,"pageTitle":"Betaflight 4.4 cloud build API","url":"/betaflight.com/docs/development/API/Cloud-Build-API#api","content":"Avoiding EOL on 512K targets we have introduced a cloud build API saving around 25% of firmware flash usage. Unified targets define hardware drivers to be included in the firmware as described in the Hardware specification The build log has information about the build in case of failure. "},{"title":"Usage​","type":1,"pageTitle":"Betaflight 4.4 cloud build API","url":"/betaflight.com/docs/development/API/Cloud-Build-API#usage","content":"For optimal use please select ONLY the appropiate hardware for the flight controller after selecting the right target (using auto-detect button). "},{"title":"Radio Protocols​","type":1,"pageTitle":"Betaflight 4.4 cloud build API","url":"/betaflight.com/docs/development/API/Cloud-Build-API#radio-protocols","content":"CRSF EXPRESSLRS FPORT GHOST IBUS JETIEXBUS PPM SBUS SPECTRUM SRXL2 SUMD SUMH XBUS  "},{"title":"Telemetry Protocols​","type":1,"pageTitle":"Betaflight 4.4 cloud build API","url":"/betaflight.com/docs/development/API/Cloud-Build-API#telemetry-protocols","content":"FRSKY_HUB GHOST HOTT IBUS_EXTENDED JETIEXBUS LTM MAVLINK SMARTPORT SRXL  Note: telemetry for CRSF, ELRS, FPORT and GHST are included during the build. "},{"title":"Other Options​","type":1,"pageTitle":"Betaflight 4.4 cloud build API","url":"/betaflight.com/docs/development/API/Cloud-Build-API#other-options","content":"AKK (SA FIX) FLASH GPS LED LED64 MAG OSD OSD (HD) PINIO VTX  "},{"title":"Motor Protocols​","type":1,"pageTitle":"Betaflight 4.4 cloud build API","url":"/betaflight.com/docs/development/API/Cloud-Build-API#motor-protocols","content":"BRUSHED DSHOT MULTISHOT ONESHOT PROSHOT PWM  "},{"title":"Custom Defines​","type":1,"pageTitle":"Betaflight 4.4 cloud build API","url":"/betaflight.com/docs/development/API/Cloud-Build-API#custom-defines","content":"BATTERY_CONTINUE DASHBOARD EMFAT_AUTORUN EMFAT_ICON ESCSERIAL_SIMONK GPS GPS_PLUS_CODES LED_STRIP SERIAL_4WAY_SK_BOOTLOADER  "},{"title":"Access routines where the register is accessed directly​","type":1,"pageTitle":"Bus and External Device Drivers","url":"/betaflight.com/docs/development/API/BusDrivers#access-routines-where-the-register-is-accessed-directly","content":"These write routines do not mask the value in reg. bool busRawWriteRegister(const extDevice_t *dev, uint8_t reg, uint8_t data);  Write the value data to the register offset reg. bool busRawWriteRegisterStart(const extDevice_t *dev, uint8_t reg, uint8_t data);  Write the value data to the register offset reg. If the device is on an I2C bus this call is non-blocking and merely starts the access, hence the name suffix, but care should be taken not to call this a second time before the first access has completed. bool busRawReadRegisterBuffer(const extDevice_t *dev, uint8_t reg, uint8_t *data, uint8_t length);  Read length bytes into the buffer at *data from the register offset reg. bool busRawReadRegisterBufferStart(const extDevice_t *dev, uint8_t reg, uint8_t *data, uint8_t length);  Read length bytes into the buffer at *data from the register offset reg. If the device is on an I2C bus this call is non-blocking and merely starts the access, hence the name suffix. "},{"title":"Write routines where the register number is masked with 0x7f​","type":1,"pageTitle":"Bus and External Device Drivers","url":"/betaflight.com/docs/development/API/BusDrivers#write-routines-where-the-register-number-is-masked-with-0x7f","content":"It is common to indicate a read from an SPI register by setting but 7 (0x80) of the register number. There are therefore a number of routines which clear this bit to indicate a write. I2C register addresses are only 7 bits with an explicit read/write bit. bool busWriteRegister(const extDevice_t *dev, uint8_t reg, uint8_t data);  Write the value data to the register offset reg logically anded with 0x7f. bool busWriteRegisterStart(const extDevice_t *dev, uint8_t reg, uint8_t data);  Write the value data to the register offset reg logically anded with 0x7f. If the device is on an I2C bus this call is non-blocking and merely starts the access, hence the name suffix. "},{"title":"Read routines where the register is ORed with 0x80​","type":1,"pageTitle":"Bus and External Device Drivers","url":"/betaflight.com/docs/development/API/BusDrivers#read-routines-where-the-register-is-ored-with-0x80","content":"It is common to indicate a read from an SPI register by setting but 7 (0x80) of the register number. There are therefore a number of routines which set this bit to indicate a read. I2C register addresses are only 7 bits with an explicit read/write bit. uint8_t busReadRegister(const extDevice_t *dev, uint8_t reg);  Read a single byte from the register offset reg logically anded with 0x80. bool busReadRegisterBuffer(const extDevice_t *dev, uint8_t reg, uint8_t *data, uint8_t length);  Read length bytes into the buffer at *data from the register offset reg logically anded with 0x80. bool busReadRegisterBufferStart(const extDevice_t *dev, uint8_t reg, uint8_t *data, uint8_t length);  Read length bytes into the buffer at *data from the register offset reg logically anded with 0x80. If the device is on an I2C bus this call is non-blocking and merely starts the access, hence the name suffix. "},{"title":"I2C Specific Access​","type":1,"pageTitle":"Bus and External Device Drivers","url":"/betaflight.com/docs/development/API/BusDrivers#i2c-specific-access","content":"I2C bus accesses are slow and therefore, except during startup device initialisation, the use of blocking accesses should be avoided. Therefore the bus...Start() routines should be used which use interrupts to handle the transfer in the background. The barometer driver is a good example of how I2C devices accesses should be performed, with a state machine used so that accesses are started in one state, and the processing of the result of a read, or launching the next write waits until the next state. It is necessary to register a device as being on an I2C bus in order that it can be accessed. bool i2cBusSetInstance(const extDevice_t *dev, uint32_t device);  This registers the external device dev with an I2C bus device instance device. void i2cBusDeviceRegister(const extDevice_t *dev);  A call to i2cBusDeviceRegister simply increments a count of the number of I2C devices in use. "},{"title":"SPI Specific Access​","type":1,"pageTitle":"Bus and External Device Drivers","url":"/betaflight.com/docs/development/API/BusDrivers#spi-specific-access","content":"SPI attached devices are accessed at higher speed and therefore may be accessed using blocking read/writes, however longer transfers or accesses requiring multiple transfers are better performed using DMA transfers under interrupt control. There are a number of SPI specific bus access routines to facilitate such optimisation. As with I2C it is possible to have multiple devices share a common SPI bus. It is necessary to register a device as being on an SPI bus in order that it can be accessed. bool spiSetBusInstance(extDevice_t *dev, uint32_t device);  This registers the external device dev with an SPI bus device instance device. void spiSetClkDivisor(const extDevice_t *dev, uint16_t divider);  Each device on an SPI bus can use a different SPI bus clock speed and this sets the clock divisor to be used for accesses by the given device. Two utility routines are provided to determine the divider value to use in order to achieve a max SPI clock speed, and to return the actual clock speed corresponding to that divisor. // Determine the divisor to use for a given bus frequency uint16_t spiCalculateDivider(uint32_t freq); // Return the SPI clock based on the given divisor uint32_t spiCalculateClock(uint16_t spiClkDivisor);  Access to SPI devices requires that the clock phase/polarity be set appropriately. See https://en.wikipedia.org/wiki/Serial_Peripheral_Interface. void spiSetClkPhasePolarity(const extDevice_t *dev, bool leadingEdge);  If leadingEdge is set to true, the default, then data will be clocked on the first rising edge of the clock, or if false, on the second falling edge. void spiDmaEnable(const extDevice_t *dev, bool enable);  Certain devices, such as the CC2500 cannot handle the timing of sequential accesses which are being DMAed, so this enables DMA to be enabled (default) or disabled on a per device basis. In order to support efficient use of SPI it is possible to perform not only single accesses as described above, but also to define a sequence of transfers using an array of busSegment_t elements which then comprise a complete transaction. These may be complex, support polling bus status for example before performing a write. Each busSegment_t element passes a union of either a pair of buffer pointers for write/read respectively, a null link structure used to terminate the list. Following is the number of bytes in the transfer, a boolean, negateCS, indicating if the SPI CS line should be negated at the end of the segment, and an optional callback routine. A good example of this is in m25p16_readBytes() where a segment list is defined thus:  busSegment_t segments[] = { {.u.buffers = {readStatus, readyStatus}, sizeof(readStatus), true, m25p16_callbackReady}, {.u.buffers = {readBytes, NULL}, fdevice-&gt;isLargeFlash ? 5 : 4, false, NULL}, {.u.buffers = {NULL, buffer}, length, true, NULL}, {.u.link = {NULL, NULL}, 0, true, NULL}, };  In the above example the busy status of the FLASH memory is polled in the first element and then m25p16_callbackReady() is called which checks the read status. If the device is busy the value BUS_BUSY is returned and the element will be repeated under interrupt/DMA control. If the device is ready to accept a new command then BUS_READY is returned and the next element is processed. BUS_ABORT may also be returned in abort the whole transaction, although this is not currently used. It can be faster to perform short transfers using polled access rather than setting up DMAs and the rules are as follows to determine if DMA should be use. DMA is enabled on the bus and deviceAll transmit/receive buffers are in memory supporting DMAsOne of the following: There are are at least SPI_DMA_THRESHOLD bytes to transferThere is more than a single element in the segment listThe negateCS boolean is set to false in the terminating entry of the list. The ELRS driver in rx_sx1280.c is an example of 3.3 where the terminating link has negateCS set to false. This then ensures that all accesses run in the background without blocking. void spiSequence(const extDevice_t *dev, busSegment_t *segments);  This routine queues the given segment list for processing. If the device's bus is already busy then this segment list will be linked to the preceeding one in the queue so that the accesses will automatically proceed one after the other as quickly as possible. void spiWait(const extDevice_t *dev);  Block, waiting for completion of the indicated device's bus activity. bool spiIsBusy(const extDevice_t *dev);  Return true if the device's bus is busy. "},{"title":"DisplayPort MSP Extensions","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/API/DisplayPort","content":"","keywords":""},{"title":"DisplayPort MSP commands​","type":1,"pageTitle":"DisplayPort MSP Extensions","url":"/betaflight.com/docs/development/API/DisplayPort#displayport-msp-commands","content":""},{"title":"MSP_SET_OSD_CANVAS​","type":1,"pageTitle":"DisplayPort MSP Extensions","url":"/betaflight.com/docs/development/API/DisplayPort#msp_set_osd_canvas","content":"The MSP_SET_OSD_CANVAS command is sent by the VTX, or display device, to the FC to indicate the size of the canvas available to the DisplayPort rendering when in HD mode. HD mode, as is indicated by vcd_video_system = HD is automatically set on reception of this command. Command\tMsg Id\tDirection\tNotesMSP_SET_OSD_CANVAS\t188\tto FC\tSets the canvas size Data\tType\tNotescanvas_cols\tuint8\tThe number of columns canvas_rows\tuint8\tThe number of rows "},{"title":"MSP_OSD_CANVAS​","type":1,"pageTitle":"DisplayPort MSP Extensions","url":"/betaflight.com/docs/development/API/DisplayPort#msp_osd_canvas","content":"The MSP_OSD_CANVAS command is sent by the configurator to the FC to determine the size of the canvas available to the DisplayPort rendering when in HD mode. This is then used on the OSD tab to show the correct number of rows/columns when editing the OSD element positions. Command\tMsg Id\tDirection\tNotesMSP_OSD_CANVAS\t189\tto FC\tGets the canvas size Response is two bytes. Data\tType\tNotescanvas_cols\tuint8\tThe number of columns canvas_rows\tuint8\tThe number of rows "},{"title":"MSP_DISPLAYPORT​","type":1,"pageTitle":"DisplayPort MSP Extensions","url":"/betaflight.com/docs/development/API/DisplayPort#msp_displayport","content":"The MSP_DISPLAYPORT command is sent by the FC to the display device/VTX to perform a DisplayPort operation. Command\tMsg Id\tDirection\tNotesMSP_DISPLAYPORT\t182\tfrom FC\tDisplayPort specific commands follow One of the following sub-commands will then follow. "},{"title":"DisplayPort sub-commands​","type":1,"pageTitle":"DisplayPort MSP Extensions","url":"/betaflight.com/docs/development/API/DisplayPort#displayport-sub-commands","content":"MSP_DP_HEARTBEAT​ Command\tMsg Id\tNotesMSP_DP_HEARTBEAT\t0\tPrevent OSD Slave boards from displaying a 'disconnected' status MSP_DP_RELEASE​ Command\tMsg Id\tNotesMSP_DP_RELEASE\t1\tClears the display and allows local rendering on the display device based on telemetry informtation etc. MSP_DP_CLEAR_SCREEN​ Command\tMsg Id\tNotesMSP_DP_CLEAR_SCREEN\t2\tClear the display MSP_DP_WRITE_STRING​ Command\tMsg Id\tNotesMSP_DP_WRITE_STRING\t3\tWrite a string Data\tType\tNotesrow\tuint8\tRow on which to position the first character of the string column\tuint8\tColumn on which to position the first character of the string attribute\tuint8\tByte indicating the font to use and if the text should flash string\tuint8 x n\tNULL terminated string of up to 30 characters in length The attribute parameter is encoded thus. Field\tBits\tCommentVersion\t7\tMust be 0 DISPLAYPORT_MSP_ATTR_BLINK\t6\tSet to have the display device automatically blink the string Reserved\t2 - 5\tMust be 0 Font number\t0 - 1\tSelects one of four fonts, each of 256 8 bit characters MSP_DP_DRAW_SCREEN​ Command\tMsg Id\tNotesMSP_DP_DRAW_SCREEN\t4\tTriggers the display of a frame after it has been cleared/rendered MSP_DP_OPTIONS​ Command\tMsg Id\tNotesMSP_DP_OPTIONS\t5\tNot used by Betaflight. Used by INAV and Ardupilot to set display resolution. MSP_DP_SYS​ Command\tMsg Id\tNotesMSP_DP_SYS\t6\tDisplay system element displayportSystemElement_e at given coordinates Data\tType\tNotesrow\tuint8\tRow on which to position the first character of the string column\tuint8\tColumn on which to position the first character of the string system_element\tuint8\tSystem element to be rendered by the VTX/goggle/display device system_element will be one of the following as defined by displayPortSystemElement_e . Once one MSP_DP_SYS sub-command has been received by the VTX/goggle/display device then the default system elements should no longer be displayed in their default locations, but only explicitly as directed by this command. In this way, the default behaviour is as before, but as soon as any system element is explicitly positioned these OSD elements behave just like any other and can be called up is specific locations by any given OSD profile. // System elements rendered by VTX or Goggles typedef enum { DISPLAYPORT_SYS_GOGGLE_VOLTAGE = 0, DISPLAYPORT_SYS_VTX_VOLTAGE = 1, DISPLAYPORT_SYS_BITRATE = 2, DISPLAYPORT_SYS_DELAY = 3, DISPLAYPORT_SYS_DISTANCE = 4, DISPLAYPORT_SYS_LQ = 5, DISPLAYPORT_SYS_GOGGLE_DVR = 6, DISPLAYPORT_SYS_VTX_DVR = 7, DISPLAYPORT_SYS_WARNINGS = 8, DISPLAYPORT_SYS_VTX_TEMP = 9, DISPLAYPORT_SYS_FAN_SPEED = 10, DISPLAYPORT_SYS_COUNT, } displayPortSystemElement_e;  "},{"title":"MSP Extensions","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/API/MSP-Extensions","content":"","keywords":""},{"title":"Mode Ranges​","type":1,"pageTitle":"MSP Extensions","url":"/betaflight.com/docs/development/API/MSP-Extensions#mode-ranges","content":""},{"title":"MSP_MODE_RANGES​","type":1,"pageTitle":"MSP Extensions","url":"/betaflight.com/docs/development/API/MSP-Extensions#msp_mode_ranges","content":"The MSP_MODE_RANGES returns the current auxiliary mode settings from the flight controller. It should be invoked before any modification is made to the configuration. The message returns a group of 4 unsigned bytes for each 'slot' available in the flight controller. The number of slots should be calculated from the size of the returned message. Command\tMsg Id\tDirection\tNotesMSP_MODE_RANGES\t34\tto FC\tFollowing this command, the FC returns a block of 4 bytes for each auxiliary mode 'slot' Unassigned slots have rangeStartStep == rangeEndStep. Each element contains the following fields. Data\tType\tNotespermanentId\tuint8\tSee Modes.md for a definition of the permanent ids auxChannelIndex\tuint8\tThe Aux switch number (indexed from 0) rangeStartStep\tuint8\tThe start value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100 rangeEndStep\tuint8\tThe end value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100 Thus, for a cleanflight firmware with 40 slots 160 bytes would be returned in response to MSP_MODE_RANGES. "},{"title":"MSP_MODE_RANGES_EXTRA​","type":1,"pageTitle":"MSP Extensions","url":"/betaflight.com/docs/development/API/MSP-Extensions#msp_mode_ranges_extra","content":"The MSP_MODE_RANGES_EXTRA returns the extra mode setting parameters from the flight controller. It should be invoked in conjunction with MSP_MODE_RANGES before any modification is made to the configuration. The message returns the number of extra elements followed by a group of bytes for each 'slot' available in the flight controller. The number of slots should be the same as for MSP_MODE_RANGES, calculated from the size of the returned message and the number of bytes per group. Command\tMsg Id\tDirection\tNotesMSP_MODE_RANGES_EXTRA\t238\tto FC\tFollowing this command, the FC returns a block of bytes for each auxiliary mode 'slot' The return message is prepended with the number of bytes per element (3 bytes). Each element contains the following fields: Data\tType\tNotespermanentId\tuint8\tSee Modes.md for a definition of the permanent ids modeLogic\tuint8\t0 = Logic AND; 1 = Logic OR linkedTo\tuint8\tPermanent id to which this mode is linked. Thus, for a cleanflight firmware with 20 slots, 61 bytes (including prepended size) would be returned in response to MSP_MODE_RANGES_EXTRA. "},{"title":"MSP_SET_MODE_RANGE​","type":1,"pageTitle":"MSP Extensions","url":"/betaflight.com/docs/development/API/MSP-Extensions#msp_set_mode_range","content":"The MSPSET_MODE_RANGE is used to inform the flight controller of auxiliary mode settings. The client _must return all auxiliary elements, including those that have been disabled or are undefined, by sending this message for all auxiliary slots. Command\tMsg Id\tDirectionMSP_SET_MODE_RANGE\t35\tto FC Data\tType\tNotessequence id\tuint8\tA monotonically increasing ID, from 0 to the number of slots -1 permanentId\tuint8\tSee Modes.md for a definition of the permanent ids auxChannelIndex\tuint8\tThe Aux channel number (indexed from 0) rangeStartStep\tuint8\tThe start value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100 rangeEndStep\tuint8\tThe end value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100 "},{"title":"Implementation Notes​","type":1,"pageTitle":"MSP Extensions","url":"/betaflight.com/docs/development/API/MSP-Extensions#implementation-notes","content":"The client should make no assumptions about the number of slots available. Rather, the number should be computed from the size of the MSP_MODE_RANGES message divided by the size of the returned data element (4 bytes);The client should ensure that all changed items are returned to the flight controller, including those where a switch or range has been disabled;A 'null' return, with all values other than the sequence id set to 0, must be made for all unused slots, up to the maximum number of slots calculated from the initial message. "},{"title":"Adjustment Ranges​","type":1,"pageTitle":"MSP Extensions","url":"/betaflight.com/docs/development/API/MSP-Extensions#adjustment-ranges","content":""},{"title":"MSP_ADJUSTMENT_RANGES​","type":1,"pageTitle":"MSP Extensions","url":"/betaflight.com/docs/development/API/MSP-Extensions#msp_adjustment_ranges","content":"The MSP_ADJUSTMENT_RANGES returns the current adjustment range settings from the flight controller. It should be invoked before any modification is made to the configuration. The message returns a group of 6 unsigned bytes for each 'slot' available in the flight controller. The number of slots should be calculated from the size of the returned message. Command\tMsg Id\tDirection\tNotesMSP_ADJUSTMENT_RANGES\t52\tto FC\tFollowing this command, the FC returns a block of 6 bytes for each adjustment range 'slot' Unassigned slots have rangeStartStep == rangeEndStep. Each element contains the following fields. Data\tType\tNotesadjustmentStateIndex\tuint8\tSee below auxChannelIndex\tuint8\tThe Aux channel number (indexed from 0) used to activate the adjustment rangeStartStep\tuint8\tThe start value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100 rangeEndStep\tuint8\tThe end value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100 adjustmentFunction\tuint8\tSee below auxSwitchChannelIndex\tuint8\tThe Aux channel number used to perform the function (indexed from 0) Thus, for a cleanflight firmware with 12 slots 72 bytes would be returned in response to MSP_ADJUSTMENT_RANGES, "},{"title":"MSP_SET_ADJUSTMENT_RANGE​","type":1,"pageTitle":"MSP Extensions","url":"/betaflight.com/docs/development/API/MSP-Extensions#msp_set_adjustment_range","content":"The MSPSET_ADJUSTMENT_RANGE is used to inform the flight controller of adjustment range settings. The client _must return all adjustment range elements, including those that have been disabled or are undefined, by sending this message for all adjustment range slots. Command\tMsg Id\tDirectionMSP_SET_ADJUSTMENT_RANGE\t53\tto FC Data\tType\tNotessequence id\tuint8\tA monotonically increasing ID, from 0 to the number of slots -1 adjustmentStateIndex\tuint8\tSee below auxChannelIndex\tuint8\tThe Aux channel number (indexed from 0) rangeStartStep\tuint8\tThe start value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100 rangeEndStep\tuint8\tThe end value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100 adjustmentFunction\tuint8\tSee below auxSwitchChannelIndex\tuint8\tThe Aux channel number used to perform the function (indexed from 0) "},{"title":"MSP_SET_1WIRE​","type":1,"pageTitle":"MSP Extensions","url":"/betaflight.com/docs/development/API/MSP-Extensions#msp_set_1wire","content":"The MSP_SET_1WIRE is used to enable serial1wire passthrough note: it would be ideal to disable this when armed Command\tMsg Id\tDirectionMSP_SET_1WIRE\t243\tto FC Data\tType\tNotesesc id\tuint8\tA monotonically increasing ID, from 0 to the number of escs -1 AdjustmentIndex​ The FC maintains internal state for each adjustmentStateIndex, currently 4 simultaneous adjustment states are maintained. Multiple adjustment ranges can be configured to use the same state but care should be taken not to send multiple adjustment ranges that when active would confict. e.g. Configuring two identical adjustment ranges using the same slot would conflict, but configuring two adjustment ranges that used only one half of the possible channel range each but used the same adjustmentStateIndex would not conflict. The FC does NOT check for conflicts. AdjustmentFunction​ There are many adjustments that can be made, the numbers of them and their use is found in the documentation of the cli adjrange command in the 'Inflight Adjustents' section. "},{"title":"Implementation Notes​","type":1,"pageTitle":"MSP Extensions","url":"/betaflight.com/docs/development/API/MSP-Extensions#implementation-notes-1","content":"The client should make no assumptions about the number of slots available. Rather, the number should be computed from the size of the MSP_ADJUSTMENT_RANGES message divided by the size of the returned data element (6 bytes);The client should ensure that all changed items are returned to the flight controller, including those where a switch or range has been disabled;A 'null' return, with all values except for the sequence id set to 0, must be made for all unused slots, up to the maximum number of slots calculated from the initial message. "},{"title":"Deprecated MSP​","type":1,"pageTitle":"MSP Extensions","url":"/betaflight.com/docs/development/API/MSP-Extensions#deprecated-msp","content":"The following MSP commands are replaced by the MSP_MODE_RANGES and MSP_SET_MODE_RANGE extensions, and are not recognised by cleanflight. MSP_BOXMSP_SET_BOX "},{"title":"See also​","type":1,"pageTitle":"MSP Extensions","url":"/betaflight.com/docs/development/API/MSP-Extensions#see-also","content":"Modes.md describes the user visible implementation for the cleanflight modes extension. "},{"title":"Blackbox flight data recorder","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Blackbox","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#introduction","content":"This feature transmits your flight data information on every control loop iteration over a serial port to an external logging device like an OpenLog to be recorded, to an onboard dataflash chip which is present on some flight controllers, or to an onboard SD card socket. After your flight, you can view the resulting logs using the interactive log viewer: https://github.com/cleanflight/blackbox-log-viewer You can also use the blackbox_decode tool to turn the logs into CSV files for analysis, or render your flight log as a video using the blackbox_render tool. Those tools can be found in this repository: https://github.com/cleanflight/blackbox-tools "},{"title":"Logged data​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#logged-data","content":"The blackbox records flight data on every iteration of the flight control loop. It records the current time in microseconds, P, I and D corrections for each axis, your RC command stick positions (after applying expo curves), gyroscope data, accelerometer data (after your configured low-pass filtering), barometer and sonar readings, 3-axis magnetometer readings, raw VBAT and current measurements, RSSI, and the command being sent to each motor speed controller. This is all stored without any approximation or loss of precision, so even quite subtle problems should be detectable from the fight data log. GPS data is logged whenever new GPS data is available. Although the CSV decoder will decode this data, the video renderer does not yet show any of the GPS information (this will be added later). "},{"title":"Supported configurations​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#supported-configurations","content":"The maximum data rate that can be recorded to the flight log is fairly restricted, so anything that increases the load can cause the flight log to drop frames and contain errors. The Blackbox is typically used on tricopters and quadcopters. Although it will work on hexacopters and octocopters, because these craft have more motors to record, they must transmit more data to the flight log. This can increase the number of dropped frames. Although the browser-based log viewer supports hexacopters and octocopters, the command-lineblackbox_render tool currently only supports tri- and quadcopters. Cleanflight's looptime setting decides how frequently an update is saved to the flight log. The default looptime on Cleanflight is 3500. If you're using a looptime smaller than about 2400, you may experience some dropped frames due to the high required data rate. In that case you will need to reduce the sampling rate in the Blackbox settings, or increase your logger's baudrate to 250000. See the later section on configuring the Blackbox feature for details. "},{"title":"Setting up logging​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#setting-up-logging","content":"First, you must enable the Blackbox feature. In the Cleanflight Configurator enter the Configuration tab, tick the &quot;BLACKBOX&quot; feature at the bottom of the page, and click &quot;Save and reboot&quot; Now you must decide which device to store your flight logs on. You can either transmit the log data over a serial port to an external logging device like the OpenLog serial data logger to be recorded to a microSDHC card, or if you have a compatible flight controller you can store the logs on the onboard dataflash storage instead. "},{"title":"OpenLog serial data logger​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#openlog-serial-data-logger","content":"The OpenLog is a small logging device which attaches to your flight controller using a serial port and logs your flights to a MicroSD card. The OpenLog ships from SparkFun with standard &quot;OpenLog 3&quot; firmware installed. Although this original OpenLog firmware will work with the Blackbox, in order to reduce the number of dropped frames it should be reflashed with the higher performance OpenLog Blackbox firmware. The special Blackbox variant of the OpenLog firmware also ensures that the OpenLog is using Cleanflight compatible settings, and defaults to 115200 baud. You can find the Blackbox version of the OpenLog firmware here, along with instructions for installing it onto your OpenLog. microSDHC​ Your choice of microSDHC card is very important to the performance of the system. The OpenLog relies on being able to make many small writes to the card with minimal delay, which not every card is good at. A faster SD-card speed rating is not a guarantee of better performance. microSDHC cards known to have poor performance​ Generic 4GB Class 4 microSDHC card - the rate of missing frames is about 1%, and is concentrated around the most interesting parts of the log!Sandisk Ultra 32GB (unlike the smaller 16GB version, this version has poor write latency) microSDHC cards known to have good performance​ Transcend 16GB Class 10 UHS-I microSDHC (typical error rate &lt; 0.1%)Sandisk Extreme 16GB Class 10 UHS-I microSDHC (typical error rate &lt; 0.1%)Sandisk Ultra 16GB (it performs only half as well as the Extreme in theory, but still very good) You should format any card you use with the SD Association's special formatting tool , as it will give the OpenLog the best chance of writing at high speed. You must format it with either FAT, or with FAT32 (recommended). "},{"title":"Choosing a serial port for the OpenLog​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#choosing-a-serial-port-for-the-openlog","content":"First, tell the Blackbox to log using a serial port (rather than to an onboard dataflash chip). Go to the Configurator's CLI tab, enter set blackbox_device=SERIAL to switch logging to serial, and save. You need to let Cleanflight know which of your serial ports you connect your OpenLog to (i.e. the Blackbox port), which you can do on the Configurator's Ports tab. You should use a hardware serial port (such as UART1 on the Naze32, the two-pin Tx/Rx header in the center of the board). SoftSerial ports can be used for the Blackbox. However, because they are limited to 19200 baud, your logging rate will need to be severely reduced to compensate. Therefore the use of SoftSerial is not recommended. When using a hardware serial port, Blackbox should be set to at least 115200 baud on that port. When using fast looptimes (&lt;2500), a baud rate of 250000 should be used instead in order to reduce dropped frames. The serial port used for Blackbox cannot be shared with any other function (e.g. GPS, telemetry) except the MSP protocol. If MSP is used on the same port as Blackbox, then MSP will be active when the board is disarmed, and Blackbox will be active when the board is armed. This will mean that you can't use the Configurator or any other function that requires MSP, such as an OSD or a Bluetooth wireless configuration app, while the board is armed. Connect the &quot;TX&quot; pin of the serial port you've chosen to the OpenLog's &quot;RXI&quot; pin. Don't connect the serial port's RX pin to the OpenLog, as this will cause the OpenLog to interfere with any shared functions on the serial port while disarmed. Naze32 serial port choices​ On the Naze32, the TX/RX pins on top of the board are connected to UART1, and are shared with the USB connector. Therefore, MSP must be enabled on UART1 in order to use the Configurator over USB. If Blackbox is connected to the pins on top of the Naze32, the Configurator will stop working once the board is armed. This configuration is usually a good choice if you don't already have an OSD installed which is using those pins while armed, and aren't using the FrSky telemetry pins. Pin RC3 on the side of the board is UART2's Tx pin. If Blackbox is configured on UART2, MSP can still be used on UART1 when the board is armed, which means that the Configurator will continue to work simultaneously with Blackbox logging. Note that in PARALLEL_PWM mode this leaves the board with 6 input channels as RC3 and RC4 pins are used by UART2 as Tx and Rx. Cleanflight automatically shifts logical channel mapping for you when UART2 is enabled in Ports tab so you'll have to shift receiver pins that are connected to Naze32 pins 3 to 6 by two. The OpenLog tolerates a power supply of between 3.3V and 12V. If you are powering your Naze32 with a standard 5V BEC, then you can use a spare motor header's +5V and GND pins to power the OpenLog with. Other flight controller hardware​ Boards other than the Naze32 may have more accessible hardware serial devices, in which case refer to their documentation to decide how to wire up the logger. The key criteria are: Should be a hardware serial port rather than SoftSerial.Cannot be shared with any other function (GPS, telemetry) except MSP.If MSP is used on the same UART, MSP will stop working when the board is armed. OpenLog configuration​ Power up the OpenLog with a microSD card inside, wait 10 seconds or so, then power it down and plug the microSD card into your computer. You should find a &quot;CONFIG.TXT&quot; file on the card, open it up in a text editor. You should see the baud rate that the OpenLog has been configured for (usually 115200 or 9600 from the factory). Set the baud rate to match the rate you entered for the Blackbox in the Configurator's Port tab (typically 115200 or 250000). Save the file and put the card back into your OpenLog, it will use those settings from now on. If your OpenLog didn't write a CONFIG.TXT file, create a CONFIG.TXT file with these contents and store it in the root of the MicroSD card: 115200 baud  If you are using the original OpenLog firmware, use this configuration instead: 115200,26,0,0,1,0,1 baud,escape,esc#,mode,verb,echo,ignoreRX  OpenLog protection​ The OpenLog can be wrapped in black electrical tape or heat-shrink in order to insulate it from conductive frames (like carbon fiber), but this makes its status LEDs impossible to see. I recommend wrapping it with some clear heatshrink tubing instead.  "},{"title":"Onboard dataflash storage​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#onboard-dataflash-storage","content":"Some flight controllers have an onboard SPI NOR dataflash chip which can be used to store flight logs instead of using an OpenLog. The full version of the Naze32 and the CC3D have an onboard &quot;m25p16&quot; 2 megabyte dataflash storage chip. This is a small chip with 8 fat legs, which can be found at the base of the Naze32's direction arrow. This chip is not present on the &quot;Acro&quot; version of the Naze32. The SPRacingF3 has a larger 8 megabyte dataflash chip onboard which allows for longer recording times. These chips are also supported: Micron/ST M25P16 - 16 Mbit / 2 MByte (datasheet)Micron/ST N25Q064 - 64 Mbit / 8 MByte (datasheet)Winbond W25Q64 - 64 Mbit / 8 MByte (datasheet)Macronix MX25L64 - 64 Mbit / 8 MByte (datasheet)Micron/ST N25Q128 - 128 Mbit / 16 MByte (datasheet)Winbond W25Q128 - 128 Mbit / 16 MByte (datasheet) Enable recording to dataflash​ On the Configurator's CLI tab, you must enter set blackbox_device=SPIFLASH to switch to logging to an onboard dataflash chip, then save. "},{"title":"Onboard SD card socket​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#onboard-sd-card-socket","content":"Some flight controllers have an SD or Micro SD card socket on their circuit boards. This allows for very high speed logging (1KHz or faster, which is a looptime of 1000 or lower) on suitable cards. The card can be either Standard (SDSC) or High capacity (SDHC), and must be formatted with the FAT16 or FAT32 filesystems. This covers a range of card capacities from 1 to 32GB. Extended capacity cards (SDXC) are not supported. The first time you power up Cleanflight with a new card inserted, the flight controller will spend a few seconds scanning the disk for free space and collecting this space together into a file called &quot;FREESPAC.E&quot;. During flight, Cleanflight will carve chunks from this file to create new log files. You must not edit this file on your computer (i.e. open it in a program and save changes) because this may cause it to become fragmented. Don't run any defragmentation tools on the card either. You can delete the FREESPAC.E file if you want to free up space on the card to fit non-Blackbox files (Cleanflight will recreate the FREESPAC.E file next time it starts, using whatever free space was left over). The maximum size of the FREESPAC.E file is currently 4GB. Once 4GB worth of logs have been recorded, the FREESPAC.E file will be nearly empty and no more logs will be able to be recorded. At this point you should either delete the FREESPAC.E file (and any logs left on the card to free up space), or just reformat the card. A new FREESPAC.E file will be created by Cleanflight on its next boot. Enable recording to SD card​ On the Configurator's CLI tab, you must enter set blackbox_device=SDCARD to switch to logging to an onboard SD card, then save. "},{"title":"Configuring the Blackbox​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#configuring-the-blackbox","content":"The Blackbox currently provides two settings (blackbox_rate_num and blackbox_rate_denom) that allow you to control the rate at which data is logged. These two together form a fraction (blackbox_rate_num / blackbox_rate_denom) which decides what portion of the flight controller's control loop iterations should be logged. The default is 1/1 which logs every iteration. If you're using a slower MicroSD card, you may need to reduce your logging rate to reduce the number of corrupted logged frames that blackbox_decode complains about. A rate of 1/2 is likely to work for most craft. You can change the logging rate settings by entering the CLI tab in the Cleanflight Configurator and using the setcommand, like so: set blackbox_rate_num = 1 set blackbox_rate_denom = 2  The data rate for my quadcopter using a looptime of 2400 and a rate of 1/1 is about 10.25kB/s. This allows about 18 days of flight logs to fit on my OpenLog's 16GB MicroSD card, which ought to be enough for anybody :). If you are logging using SoftSerial, you will almost certainly need to reduce your logging rate to 1/32. Even at that logging rate, looptimes faster than about 1000 cannot be successfully logged. If you're logging to an onboard dataflash chip instead of an OpenLog, be aware that the 2MB of storage space it offers is pretty small. At the default 1/1 logging rate, and a 2400 looptime, this is only enough for about 3 minutes of flight. This could be long enough for you to investigate some flying problem with your craft, but you may want to reduce the logging rate in order to extend your recording time. To maximize your recording time, you could drop the rate all the way down to 1/32 (the smallest possible rate) which would result in a logging rate of about 10-20Hz and about 650 bytes/second of data. At that logging rate, a 2MB dataflash chip can store around 50 minutes of flight data, though the level of detail is severely reduced and you could not diagnose flight problems like vibration or PID setting issues. "},{"title":"Usage​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#usage","content":"The Blackbox starts recording data as soon as you arm your craft, and stops when you disarm. If your craft has a buzzer attached, you can use Cleanflight's arming beep to synchronize your Blackbox log with your flight video. Cleanflight's arming beep is a &quot;long, short&quot; pattern. The beginning of the first long beep will be shown as a blue line in the flight data log, which you can sync against your recorded audio track. You should wait a few seconds after disarming your craft to allow the Blackbox to finish saving its data. "},{"title":"Usage - OpenLog​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#usage---openlog","content":"Each time the OpenLog is power-cycled, it begins a fresh new log file. If you arm and disarm several times without cycling the power (recording several flights), those logs will be combined together into one file. The command line tools will ask you to pick which one of these flights you want to display/decode. Don't insert or remove the SD card while the OpenLog is powered up. "},{"title":"Usage - Dataflash chip​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#usage---dataflash-chip","content":"After your flights, you can use the Cleanflight Configurator to download the contents of the dataflash to your computer. Go to the &quot;dataflash&quot; tab and click the &quot;save flash to file...&quot; button. Saving the log can take 2 or 3 minutes.  After downloading the log, be sure to erase the chip to make it ready for reuse by clicking the &quot;erase flash&quot; button. If you try to start recording a new flight when the dataflash is already full, Blackbox logging will be disabled and nothing will be recorded. "},{"title":"Usage - Onboard SD card socket​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#usage---onboard-sd-card-socket","content":"You must insert your SD card before powering on your flight controller. You can remove the SD card while the board is powered up, but you must wait 5 seconds after disarming before you do so in order to give Cleanflight a chance to finish saving your log (otherwise the filesystem may become corrupted). Cleanflight will create a new log file in the &quot;LOG&quot; directory each time the craft is armed. If you are using a Blackbox logging switch and you keep it paused for the entire flight, the resulting empty log file will be deleted after disarming. To read your logs, you must remove the SD card and insert it into a card reader on your computer (Cleanflight doesn't support reading these logs directly through the Configurator). "},{"title":"Usage - Logging switch​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#usage---logging-switch","content":"If you're recording to an onboard flash chip, you probably want to disable Blackbox recording when not required in order to save storage space. To do this, you can add a Blackbox flight mode to one of your AUX channels on the Configurator's modes tab. Once you've added a mode, Blackbox will only log flight data when the mode is active. A log header will always be recorded at arming time, even if logging is paused. You can freely pause and resume logging while in flight. "},{"title":"Viewing recorded logs​","type":1,"pageTitle":"Blackbox flight data recorder","url":"/betaflight.com/docs/development/Blackbox#viewing-recorded-logs","content":"After your flights, you'll have a series of flight log files with a .TXT extension. You can view these .TXT flight log files interactively using your web browser with the Cleanflight Blackbox Explorer: https://github.com/cleanflight/blackbox-log-viewer This allows you to scroll around a graphed version of your log and examine your log in detail. You can also export a video of your log to share it with others! You can decode your logs with the blackbox_decode tool to create CSV (comma-separated values) files for analysis, or render them into a series of PNG frames with blackbox_render tool, which you could then convert into a video using another software package. You'll find those tools along with instructions for using them in this repository: https://github.com/cleanflight/blackbox-tools "},{"title":"Battery Monitoring","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Battery","content":"","keywords":""},{"title":"Supported targets​","type":1,"pageTitle":"Battery Monitoring","url":"/betaflight.com/docs/development/Battery#supported-targets","content":"All targets support battery voltage monitoring unless status. "},{"title":"Connections​","type":1,"pageTitle":"Battery Monitoring","url":"/betaflight.com/docs/development/Battery#connections","content":"When dealing with batteries ALWAYS CHECK POLARITY! Measure expected voltages first and then connect to the flight controller. Powering the flight controller with incorrect voltage or reversed polarity will likely fry your flight controller. Ensure your flight controller has a voltage divider capable of measuring your particular battery voltage. "},{"title":"Naze32​","type":1,"pageTitle":"Battery Monitoring","url":"/betaflight.com/docs/development/Battery#naze32","content":"The Naze32 has an on-board battery divider circuit; just connect your main battery to the VBAT connector. CAUTION: When installing the connection from main battery to the VBAT connector, be sure to first disconnect the main battery from the frame/power distribution board. Check the wiring very carefully before connecting battery again. Incorrect connections can immediately and completely destroy the flight controller and connected peripherals (ESC, GPS, Receiver etc.). "},{"title":"CC3D​","type":1,"pageTitle":"Battery Monitoring","url":"/betaflight.com/docs/development/Battery#cc3d","content":"The CC3D has no battery divider. To use voltage monitoring, you must create a divider that gives a 3.3v MAXIMUM output when the main battery is fully charged. Connect the divider output to S5_IN/PA0/RC5. Notes: S5_IN/PA0/RC5 is Pin 7 on the 8 pin connector, second to last pin, on the opposite end from the GND/+5/PPM signal input. When battery monitoring is enabled on the CC3D, RC5 can no-longer be used for PWM input. "},{"title":"Sparky​","type":1,"pageTitle":"Battery Monitoring","url":"/betaflight.com/docs/development/Battery#sparky","content":"See the Sparky board chapter. "},{"title":"Configuration​","type":1,"pageTitle":"Battery Monitoring","url":"/betaflight.com/docs/development/Battery#configuration","content":"Enable the VBAT feature. Configure min/max cell voltages using the following CLI setting: vbat_scale - Adjust this to match actual measured battery voltage to reported value (which may be displayed via the status command) vbat_max_cell_voltage - Maximum voltage per cell, used for auto-detecting battery voltage in 0.01V units, i.e. 430 = 4.3V vbat_min_cell_voltage - Minimum voltage per cell; this triggers battery-critical alarms, in 0.01V units, i.e. 330 = 3.3V vbat_warning_cell_voltage - Warning voltage per cell; this triggers battery-warning alarms, in 0.01V units, i.e. 340 = 3.4V vbat_hysteresis - Sets the hysteresis value for low-battery alarms, in 0.01V units, i.e. 10 = 0.10V vbat_duration_for_warning - Period voltage has to sustain before the battery state is set to battery-warning, in 0.1 s, i.e. 60 = 6.0 seconds vbat_duration_for_critical - Period voltage has to sustain before the battery state is set to battery-critical, in 0.1 s, i.e. 21 = 2.1 seconds e.g. set vbat_scale = 110 set vbat_max_cell_voltage = 430 set vbat_min_cell_voltage = 330 set vbat_warning_cell_voltage = 340 set vbat_hysteresis = 1 set vbat_duration_for_warning = 60 set vbat_duration_for_critical = 20  Current Monitoring Current monitoring (amperage) is supported by connecting a current meter to the appropriate current meter ADC input (see the documentation for your particular board). When enabled, the following values calculated and used by the telemetry and OLED display subsystems: AmpsmAh usedCapacity remaining "},{"title":"Configuration​","type":1,"pageTitle":"Battery Monitoring","url":"/betaflight.com/docs/development/Battery#configuration-1","content":"Enable current monitoring using the CLI command: feature CURRENT_METER  Configure the current meter type using the amperage_meter_type settings here: Value\tSensor TypeNONE\tNone ADC\tADC/hardware sensor VIRTUAL\tVirtual sensor Configure capacity using the bat_capacity setting, in mAh units. If you're using an OSD that expects the multiwii current meter output value, then set multiwii_amperage_meter_output to ON (this multiplies amperage sent to MSP by 10 and truncates negative values)). "},{"title":"ADC Sensor​","type":1,"pageTitle":"Battery Monitoring","url":"/betaflight.com/docs/development/Battery#adc-sensor","content":"The current meter needs to be configured so the value read at the Analog to Digital Converter (ADC) input matches actual current draw. Just like you need a voltmeter to correctly calibrate your voltage reading you also need an ammeter to calibrate the current sensor. Unlike voltage sensing which is usually quite good from the factory, current sensing varies significantly from board to board and should be calibrated. It is recommended to set multiwii_amperage_meter_output to OFF when calibrating ADC current sensor. To measure the current a linear response device is used that converts the current traveling through it to a voltage to be read by the ADC on your flight controller. The maximum voltage that the flight controller can read is 3.3V (3300 mV), this is usually the limiting factor on the maximum measurable current. Most sensors use a shunt resistor to measure current however there are a few that use hall effect sensors. The flight controller uses the following equation to convert the measured ADC voltage to a current. Current(Amps) = ADC (mV) / amperage_meter_scale * 10 + amperage_meter_offset / 1000  Where the calibrations are: Setting\tDescriptionamperage_meter_scale\tThe scaling factor in mV/10A amperage_meter_offset\tThe offset in mA This is in the mathematical form of y = x/m + b and with a few measurements along this line you can calibrate any combination of sensor and flight controller to a high accuracy. Calibrate using an ammeter​ !!Important: Always take off your props before doing any testing!! To calibrate your flight controller with a current meter follow these steps. Make a copy of this google sheet. It will do all the math for you.Hook your ammeter up in series with your drone and a charged battery. I suggest an XT60 extender with one lead cut. Now your ammeter will be displaying the true current draw of your system.Connect to your flight controller through the configurator and check your current calibrations. Change them in the google sheet if needed.Use the motor tab to increase the throttle and change the current draw of the drone to around 1 A on the ammeter (it does not matter if it is not exact).Switch back to the power and battery tab and record current from the ammeter in the measured current column and the current reported by Betaflight in the flight controller current column (both in amps, to 2 decimal places).Repeat this measurement (steps 4 and 5) 3 or more times at various currents from 0 to 5 Amps (make sure not to go over your ammeter rated current).Once this is done make sure the results are linear on the graph and that the regression value is green. You can now update to the new calibration values and enjoy accurate battery usage information. The same method can be applied to both hall effect sensors and shunt resistors. Shunt resistors will usually have an offset of less than +/- 1000 mA however hall effect sensors offsets will be much higher. Note that while your calibration may be correct there is still a maximum current measure that you may exceed at maximum throttle, this will cause the current recorded by the flight controller to ceiling at this value even if the actual current is higher. As a result the reported mAh used may be less than is actually used, always keep an eye on the battery voltage as well. If you do not want to use google sheets then simply use some other tool that preforms a linear regression on the dataset. Multiply amperage_meter_scale used in testing by the slope and subtract the intercept in mA from amperage_meter_offset to get the corrected calibration values. "},{"title":"Virtual Sensor​","type":1,"pageTitle":"Battery Monitoring","url":"/betaflight.com/docs/development/Battery#virtual-sensor","content":"The virtual sensor uses the throttle position to calculate an estimated current value. This is useful when a real sensor is not available. The following settings adjust the virtual sensor calibration: Setting\tDescriptionamperage_meter_scale\tThe throttle scaling factor [centiamps, i.e. 1/100th A] amperage_meter_offset\tThe current at zero throttle (while disarmed) [centiamps, i.e. 1/100th A] There are two simple methods to tune these parameters: one uses a battery charger and another depends on actual current measurements. Tuning Using Actual Current Measurements​ If you know your craft's current draw (in Amperes) while disarmed (Imin) and at maximum throttle while armed (Imax), calculate the scaling factors as follows: amperage_meter_scale = (Imax - Imin) * 100000 / (Tmax + (Tmax * Tmax / 50)) amperage_meter_offset = Imin * 100  Note: Tmax is maximum throttle offset (i.e. for max_throttle = 1850, Tmax = 1850 - 1000 = 850) For example, assuming a maximum current of 34.2A, a minimum current of 2.8A, and a Tmax max_throttle = 1850: amperage_meter_scale = (Imax - Imin) * 100000 / (Tmax + (Tmax * Tmax / 50)) = (34.2 - 2.8) * 100000 / (850 + (850 * 850 / 50)) = 205 amperage_meter_offset = Imin * 100 = 280  Measuring Imax requires a battery and an ESC that can both deliver and support max current for the duration of the measurement, so it's prone to big inaccuracies. Alternatively, current can be measured at a much lower throttle position and be taken into account in the calculations. Following the previous example, if we measured an Ibench current of 6A at 30% of throttle (1255 in the motors tab because (0.3*(max_throttle-1000))+1000)) Tbench = Tmax * bench_throttle = 850 * 0.3 = 255 amperage_meter_scale = (Ibench - Imin) * 100000 / (Tbench + (Tbench * Tbench / 50)) = (6 - 2.8) * 100000 / (255 + (255 * 255 / 50)) = 205 amperage_meter_offset = Imin * 100 = 280  Tuning Using Battery Charger Measurement​ If you cannot measure current draw directly, you can approximate it indirectly using your battery charger. However, note it may be difficult to adjust amperage_meter_offset using this method unless you can measure the actual current draw with the craft disarmed. Note: This method depends on the accuracy of your battery charger; results may vary.If you add or replace equipment that changes the in-flight current draw (e.g. video transmitter, camera, gimbal, motors, prop pitch/sizes, ESCs, etc.), you should recalibrate. The general method is: Fully charge your flight batteryFly your craft, using &gt;50% of your battery pack capacity (estimated)Note Cleanflight's reported mAh drawnFully charge your flight battery again, noting the amount of mAh rechargedAdjust amperage_meter_scale to according to the formula given belowRepeat and test Given (a) the mAh recharged and (b) the cleanflight reported mAh drawn, calculate a new amperage_meter_scale value as follows: amperage_meter_scale = old_amperage_meter_scale * (mAh_recharged / cleanflight_reported_mAh_drawn)  For example, assuming: An amount recharged of 1500 mAhA Cleanflight reported current drawn of 2000 mAhAn existing amperage_meter_scale value of 400 (the default) Then the updated amperage_meter_scale is: amperage_meter_scale = old_amperage_meter_scale * (mAh_recharged / cleanflight_reported_mAh_drawn) = 400 * (1500 / 2000) = 300  "},{"title":"Flight controller hardware","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Boards","content":"Flight controller hardware The current focus is geared towards flight controller hardware that use the STM32F303 and legacy STM32F103 series processors. The core logic is separated from the hardware drivers, porting to other processors is possible. If you want a fully featured version of Cleanflight then the recommendation for new purchases is an STM32 F3 based board with 256KB of flash memory. The F3 processor is faster, has built in USB support and supports more hardware without the need for additional adaptors and cables. The core set of recommended boards are: Seriously Pro SPRacingF3MiniSeriously Pro SPRacingF3Seriously Pro SPRacingF3EVOTBS Colibri RaceAlienFlightF3TauLabs Sparky The core set of legacy boards are: AlienFlightF1OpenPilot CC3DCJMCUFlip32+AbuseMark Naze32RMRC Dodo Cleanflight also runs on the following developer boards: STM32F3Discovery - Recommended for developers.Port103R - Recommended for F1 developers. There is also limited support for the following boards which may be removed due to lack of users or commercial availability. STM32F3Discovery with Chebuzz F3 shield. NOTE: Users are advised against purhasing boards that have CPUs with less than 256KB of EEPROM space - available features may be limited. NOTE: Hardware developers should not design new boards that have CPUs with less than 256KB EEPROM space. Each board has it's pros and cons, before purchasing hardware the main thing to check is if the board offers enough serial ports and input/output pins for the hardware you want to use with it and that you can use them at the same time. On some boards some features are mutually exclusive. Please see the board-specific chapters in the manual for wiring details. There are off-shoots (forks) of the project that support the STM32F4 processors as found on the Revo and Quanton boards. Where applicable the chapters also provide links to other hardware that is known to work with Cleanflight, such as receivers, buzzers, etc.","keywords":""},{"title":"Buzzer","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Buzzer","content":"","keywords":""},{"title":"Tone sequences​","type":1,"pageTitle":"Buzzer","url":"/betaflight.com/docs/development/Buzzer#tone-sequences","content":"Buzzer tone sequences (square wave generation) are made so that : 1st, 3rd, 5th, .. are the delays how long the beeper is on and 2nd, 4th, 6th, .. are the delays how long beeper is off. Delays are in milliseconds/10 (i.e., 5 =&gt; 50ms). Sequences available in Cleanflight v1.9 and above are : 0 GYRO_CALIBRATED 20, 10, 20, 10, 20, 10 Gyro is calibrated 1 RX_LOST_LANDING 10, 10, 10, 10, 10, 40, 40, 10, 40, 10, 40, 40, 10, 10, 10, 10, 10, 70 SOS morse code 2 RX_LOST 50, 50 TX off or signal lost (repeats until TX is okay) 3 DISARMING 15, 5, 15, 5 Disarming the board 4 ARMING 30, 5, 5, 5 Arming the board 5 ARMING_GPS_FIX 5, 5, 15, 5, 5, 5, 15, 30 Arming and GPS has fix 6 BAT_CRIT_LOW 50, 2 Battery is critically low (repeats) 7 BAT_LOW 25, 50 Battery is getting low (repeats) 8 NULL multi beeps GPS status (sat count) 9 RX_SET 10, 10 RX is set (when aux channel is set for beep or beep sequence how many satellites has found if GPS enabled) 10 ACC_CALIBRATION 5, 5, 5, 5 ACC inflight calibration completed 11 ACC_CALIBRATION_FAIL 20, 15, 35, 5 ACC inflight calibration failed 12 READY_BEEP 4, 5, 4, 5, 8, 5, 15, 5, 8, 5, 4, 5, 4, 5 GPS locked and copter ready 13 NULL multi beeps Variable # of beeps (confirmation, GPS sat count, etc) 14 DISARM_REPEAT 0, 100, 10 Stick held in disarm position (after pause) 15 ARMED 0, 245, 10, 5 Board is armed (after pause ; repeats until board is disarmed or throttle is increased)  "},{"title":"Types of buzzer supported​","type":1,"pageTitle":"Buzzer","url":"/betaflight.com/docs/development/Buzzer#types-of-buzzer-supported","content":"The buzzers are enabled/disabled by simply enabling or disabling a GPIO output pin on the board. This means the buzzer must be able to generate its own tone simply by having power applied to it. Buzzers that need an analog or PWM signal do not work and will make clicking noises or no sound at all. Examples of a known-working buzzers. Hcm1205x Miniature Buzzer 5v5V Electromagnetic Active Buzzer Continuous BeepRadio Shack Model: 273-074 PC-BOARD 12VDC (3-16v) 70DB PIEZO BUZZERMultiComp MCKPX-G1205A-3700 TRANSDUCER, THRU-HOLE, 4V, 30MA3-24V Piezo Electronic Tone Buzzer Alarm 95DB "},{"title":"Connections​","type":1,"pageTitle":"Buzzer","url":"/betaflight.com/docs/development/Buzzer#connections","content":""},{"title":"Naze32​","type":1,"pageTitle":"Buzzer","url":"/betaflight.com/docs/development/Buzzer#naze32","content":"Connect a supported buzzer directly to the BUZZ pins. Observe polarity. Also if you are working with flight controller outside of a craft, on a bench for example, you need to supply 5 volts and ground to one of the ESC connections or the buzzer will not function. "},{"title":"CC3D​","type":1,"pageTitle":"Buzzer","url":"/betaflight.com/docs/development/Buzzer#cc3d","content":"Buzzer support on the CC3D requires that a buzzer circuit be created to which the input is PA15. PA15 is unused and not connected according to the CC3D Revision A schematic. Connecting to PA15 requires careful soldering. See the CC3D - buzzer circuit.pdf for details. "},{"title":"CLI parameter <gyro_offset_yaw>","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/CLI/gyro_offset_yaw","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"CLI parameter <gyro_offset_yaw>","url":"/betaflight.com/docs/development/CLI/gyro_offset_yaw#introduction","content":"This parameter allows to manually compensate YAW gyro drift over time. "},{"title":"Audience​","type":1,"pageTitle":"CLI parameter <gyro_offset_yaw>","url":"/betaflight.com/docs/development/CLI/gyro_offset_yaw#audience","content":"This parameter is intended for LOS flyers who use the HEADFREE feature of betaflight. It reduces the usage of on sight realignment HEADADJ from 3-6 times to 0-1 during a flight. "},{"title":"Warnings​","type":1,"pageTitle":"CLI parameter <gyro_offset_yaw>","url":"/betaflight.com/docs/development/CLI/gyro_offset_yaw#warnings","content":"Users with exotic board alignment configurations !!! this feature may not work as intended for your purpose !!! The gyro drift depends on many factors, so the results of manual calibration have a big variance Factors: gyro (mpu6000 ICM260X ...)sampling ratetemperatureLiPo (3S ... 5S)Flight styleFlight timeand many more ... "},{"title":"Setup​","type":1,"pageTitle":"CLI parameter <gyro_offset_yaw>","url":"/betaflight.com/docs/development/CLI/gyro_offset_yaw#setup","content":"The basic setup can be done on the bench without LiPo, USB powered power on, do not move the quad for 10 minutes on CW drift 70° --&gt; gyro_offset_yaw = 70 on CCW drift 70° --&gt; gyro_offset_yaw = -70 This is only a coarse adjustment. Fine tuning requires real flights and some fingertip. Basically you have to measure the drift at the end of the flight, and modify the parameter accordingly. "},{"title":"Wishes​","type":1,"pageTitle":"CLI parameter <gyro_offset_yaw>","url":"/betaflight.com/docs/development/CLI/gyro_offset_yaw#wishes","content":"Happy flight ! "},{"title":"Configuration","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Configuration","content":"","keywords":""},{"title":"Command Line Interface (CLI)","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Cli","content":"","keywords":""},{"title":"Accessing the CLI.​","type":1,"pageTitle":"Command Line Interface (CLI)","url":"/betaflight.com/docs/development/Cli#accessing-the-cli","content":"The CLI can be accessed via the GUI tool or via a terminal emulator connected to the CLI serial port. Connect your terminal emulator to the CLI serial port (which, by default, is the same as the MSP serial port)Use the baudrate specified by msp_baudrate (115200 by default).Send a # character. To save your settings type in 'save', saving will reboot the flight controller. To exit the CLI without saving power off the flight controller or type in 'exit'. To see a list of other commands type in 'help' and press return. To dump your configuration (including the current profile), use the 'dump' command. See the other documentation sections for details of the cli commands and settings that are available. "},{"title":"Backup via CLI​","type":1,"pageTitle":"Command Line Interface (CLI)","url":"/betaflight.com/docs/development/Cli#backup-via-cli","content":"Disconnect main power, connect to cli via USB/FTDI. dump using cli rateprofile 0 profile 0 dump  dump profiles using cli if you use them profile 1 dump profile profile 2 dump profile  dump rate profiles using cli if you use them rateprofile 1 dump rates rateprofile 2 dump rates  copy screen output to a file and save it. "},{"title":"Restore via CLI.​","type":1,"pageTitle":"Command Line Interface (CLI)","url":"/betaflight.com/docs/development/Cli#restore-via-cli","content":"Use the cli defaults command first. When restoring from a backup it is a good idea to do a dump of the latest defaults so you know what has changed - if you do this each time a firmware release is created you will be able to see the cli changes between firmware versions. For instance, in December 2014 the default GPS navigation PIDs changed. If you blindly restore your backup you would not benefit from these new defaults. Use the CLI and send all the output from the saved backup commands. Do not send the file too fast, if you do the FC might not be able to keep up when using USART adapters (including built in ones) since there is no hardware serial flow control. You may find you have to copy/paste a few lines at a time. Repeat the backup process again! Compare the two backups to make sure you are happy with your restored settings. Re-apply any new defaults as desired. "},{"title":"CLI Command Reference​","type":1,"pageTitle":"Command Line Interface (CLI)","url":"/betaflight.com/docs/development/Cli#cli-command-reference","content":"Click on a command to jump to the relevant documentation page. Command\tDescription1wire &lt;esc&gt;\tpassthrough 1wire to the specified ESC adjrange\tshow/set adjustment ranges settings aux\tshow/set aux settings mmix\tdesign custom motor mixer smix\tdesign custom servo mixer color\tconfigure colors defaults\treset to defaults and reboot dump\tprint configurable settings in a pastable form dma\tconfigure direct memory access channel exit feature\tlist or -val or val get\tget variable value gpspassthrough\tpassthrough GPS to serial help led\tconfigure leds map\tmapping of RC channel order mixer\tmixer name or list mode_color\tconfigure mode colors motor\tget/set motor output value play_sound\tindex, or none for next profile\tindex (0 to 2) rateprofile\tindex (0 to 2) rxrange\tconfigure rx channel ranges (end-points) rxfail\tshow/set rx failsafe settings save\tsave and reboot serialpassthrough\tserial passthrough mode, reset board to exit set\tname=value or blank or * for list status\tshow system status timer\tconfigure timer version\tshow version serial\tconfigure serial ports servo\tconfigure servos sd_info\tsdcard info tasks\tshow task stats "},{"title":"CLI Variable Reference​","type":1,"pageTitle":"Command Line Interface (CLI)","url":"/betaflight.com/docs/development/Cli#cli-variable-reference","content":"Click on a variable to jump to the relevant documentation page. Variable\tDescription/Units\tMin\tMax\tDefault\tType\tDatatypelooptime\tThis is the main loop time (in us). Changing this affects PID effect with some PID controllers (see PID section for details). Default of 3500us/285Hz should work for everyone. Setting it to zero does not limit loop time, so it will go as fast as possible.\t0\t9000\t3500\tMaster\tUINT16 emf_avoidance\tDefault value is OFF for 72MHz processor speed. Setting this to ON increases the processor speed, to move the 6th harmonic away from 432MHz.\tOFF\tON\tOFF\tMaster\tUINT8 i2c_highspeed\tEnabling this feature speeds up IMU speed significantly and faster looptimes are possible.\tOFF\tON\tON\tMaster\tUINT8 gyro_sync\tThis option enables gyro_sync feature. In this case the loop will be synced to gyro refresh rate. Loop will always wait for the newest gyro measurement. Use gyro_lpf and gyro_sync_denom determine the gyro refresh rate. Note that different targets have different limits. Setting too high refresh rate can mean that FC cannot keep up with the gyro and higher gyro_sync_denom is needed.\tOFF\tON\tON\tMaster\tUINT8 mid_rc\tThis is an important number to set in order to avoid trimming receiver/transmitter. Most standard receivers will have this at 1500, however Futaba transmitters will need this set to 1520. A way to find out if this needs to be changed, is to clear all trim/subtrim on transmitter, and connect to GUI. Note the value most channels idle at - this should be the number to choose. Once midrc is set, use subtrim on transmitter to make sure all channels (except throttle of course) are centered at midrc value.\t1200\t1700\t1500\tMaster\tUINT16 min_check\tThese are min/max values (in us) which, when a channel is smaller (min) or larger (max) than the value will activate various RC commands, such as arming, or stick configuration. Normally, every RC channel should be set so that min = 1000us, max = 2000us. On most transmitters this usually means 125% endpoints. Default check values are 100us above/below this value.\t0\t2000\t1100\tMaster\tUINT16 max_check\tThese are min/max values (in us) which, when a channel is smaller (min) or larger (max) than the value will activate various RC commands, such as arming, or stick configuration. Normally, every RC channel should be set so that min = 1000us, max = 2000us. On most transmitters this usually means 125% endpoints. Default check values are 100us above/below this value.\t0\t2000\t1900\tMaster\tUINT16 rssi_channel\tRX channel containing the RSSI signal\t0\t18\t0\tMaster\tINT8 rssi_scale\tWhen using ADC RSSI, the raw ADC value will be divided by rssi_scale in order to get the RSSI percentage. RSSI scale is therefore the ADC raw value for 100% RSSI.\t1\t255\t30\tMaster\tUINT8 rssi_invert\tWhen using PWM RSSI or ADC RSSI, determines if the signal is inverted (Futaba, FrSKY)\tOFF\tON\tON\tMaster\tINT8 rc_smoothing\tInterpolation of Rc data during looptimes when there are no new updates. This gives smoother RC input to PID controller and cleaner PIDsum\tOFF\tON\tON\tMaster\tINT8 rx_min_usec\tDefines the shortest pulse width value used when ensuring the channel value is valid. If the receiver gives a pulse value lower than this value then the channel will be marked as bad and will default to the value of mid_rc.\t750\t2250\t885\tMaster\tUINT16 rx_max_usec\tDefines the longest pulse width value used when ensuring the channel value is valid. If the receiver gives a pulse value higher than this value then the channel will be marked as bad and will default to the value of mid_rc.\t750\t2250\t2115\tMaster\tUINT16 serialrx_provider\tWhen feature SERIALRX is enabled, this allows connection to several receivers which output data via digital interface resembling serial. Possible values: SPEK1024, SPEK2048, SBUS, SUMD, XB-B, XB-B-RJ01, IBUS SPEK1024\tMaster\tUINT8 sbus_inversion\tStandard SBUS (Futaba, FrSKY) uses an inverted signal. Some OpenLRS receivers produce a non-inverted SBUS signal. This setting is to support this type of receivers (including modified FrSKY). This only works on supported hardware (mainly F3 based flight controllers).\tOFF\tON\tON\tMaster\tUINT8 spektrum_sat_bind\t0 = disabled. Used to bind the spektrum satellite to RX\t0\t10\t0\tMaster\tUINT8 input_filtering_mode\tFilter out noise from OpenLRS Telemetry RX\tOFF\tON\tON\tMaster\tINT8 min_throttle\tThese are min/max values (in us) that are sent to ESC when armed. Defaults of 1150/1850 are OK for everyone, for use with AfroESC, they could be set to 1064/1864.\t0\t2000\t1150\tMaster\tUINT16 max_throttle\tThese are min/max values (in us) that are sent to ESC when armed. Defaults of 1150/1850 are OK for everyone, for use with AfroESC, they could be set to 1064/1864. If you have brushed motors, the value should be set to 2000.\t0\t2000\t1850\tMaster\tUINT16 min_command\tThis is the PWM value sent to ESCs when they are not armed. If ESCs beep slowly when powered up, try decreasing this value. It can also be used for calibrating all ESCs at once.\t0\t2000\t1000\tMaster\tUINT16 servo_center_pulse\tServo midpoint\t0\t2000\t1500\tMaster\tUINT16 motor_pwm_rate\tOutput frequency (in Hz) for motor pins. Defaults are 400Hz for motor. If setting above 500Hz, will switch to brushed (direct drive) motors mode. For example, setting to 8000 will use brushed mode at 8kHz switching frequency. Up to 32kHz is supported. Default is 16000 for boards with brushed motors. Note, that in brushed mode, minthrottle is offset to zero. For brushed mode, set max_throttle to 2000.\t50\t32000\t400\tMaster\tUINT16 servo_pwm_rate\tOutput frequency (in Hz) servo pins. Default is 50Hz. When using tricopters or gimbal with digital servo, this rate can be increased. Max of 498Hz (for 500Hz pwm period), and min of 50Hz. Most digital servos will support for example 330Hz.\t50\t498\t50\tMaster\tUINT16 3d_deadband_low\tLow value of throttle deadband for 3D mode (when stick is in the 3d_deadband_throttle range, the fixed values of 3d_deadband_low / _high are used instead)\t0\t2000\t1406\tMaster\tUINT16 3d_deadband_high\tHigh value of throttle deadband for 3D mode (when stick is in the deadband range, the value in 3d_neutral is used instead)\t0\t2000\t1514\tMaster\tUINT16 3d_neutral\tNeutral (stop) throttle value for 3D mode\t0\t2000\t1460\tMaster\tUINT16 retarded_arm\tDisabled by default, enabling (setting to 1) allows disarming by throttle low + roll. This could be useful for mode-1 users and non-acro tricopters, where default arming by yaw could move tail servo too much.\tOFF\tON\tOFF\tMaster\tUINT8 disarm_kill_switch\tEnabled by default. Disarms the motors independently of throttle value. Setting to 0 reverts to the old behaviour of disarming only when the throttle is low. Only applies when arming and disarming with an AUX channel.\tOFF\tON\tON\tMaster\tUINT8 auto_disarm_delay\tDelay before automatic disarming\t0\t60\t5\tMaster\tUINT8 max_arm_angle\tMaximum horizontal angle before arming is disabled\t0\t180\t25\tMaster\tUINT8 small_angle\tIf the copter tilt angle exceed this value the copter will refuse to arm. default is 25°.\t0\t180\t25\tMaster\tUINT8 fixedwing_althold_dir\tUsed for fixed-wing aircrafts. Determines of the correction value applied to throttle in alititude hold mode should be inverted.\t-1\t1\t1\tMaster\tINT8 reboot_character\tSpecial character used to trigger reboot\t48\t126\t82\tMaster\tUINT8 gps_provider\tGPS standard. Possible values: NMEA, UBLOX NMEA\tMaster\tUINT8 gps_sbas_mode\tGround assistance type. Possible values: AUTO, EGNOS, WAAS, MSAS, GAGAN AUTO\tMaster\tUINT8 gps_auto_config\tEnable automatic configuration of UBlox GPS receivers.\tOFF\tON\tON\tMaster\tUINT8 gps_auto_baud\tEnable automatic detection of GPS baudrate.\tOFF\tON\tOFF\tMaster\tUINT8 gps_pos_p\tGPS Position hold: P parameter\t0\t200\t15\tProfile\tUINT8 gps_pos_i\tGPS Position hold: I parameter\t0\t200\t0\tProfile\tUINT8 gps_pos_d\tGPS Position hold: D parameter\t0\t200\t0\tProfile\tUINT8 gps_posr_p\tGPS Position hold rate: P parameter\t0\t200\t34\tProfile\tUINT8 gps_posr_i\tGPS Position hold rate: I parameter\t0\t200\t14\tProfile\tUINT8 gps_posr_d\tGPS Position hold rate: D parameter\t0\t200\t53\tProfile\tUINT8 gps_nav_p\tGPS Navigation: P parameter\t0\t200\t25\tProfile\tUINT8 gps_nav_i\tGPS Navigation: I parameter\t0\t200\t33\tProfile\tUINT8 gps_nav_d\tGPS Navigation: D parameter\t0\t200\t83\tProfile\tUINT8 gps_wp_radius\tGPS Navigation: waypoint radius\t0\t2000\t200\tProfile\tUINT16 nav_controls_heading\tGPS Navigation: should the craft's heading follow the flying direction.\tOFF\tON\tON\tProfile\tUINT8 nav_speed_min\tGPS Navigation: minimum moving speed\t10\t2000\t100\tProfile\tUINT16 nav_speed_max\tGPS Navigation: maximum moving speed\t10\t2000\t300\tProfile\tUINT16 nav_slew_rate\tGPS Navigation: maximum angle correction value. Lower slew rate stops the craft from rotating too quickly.\t0\t100\t30\tProfile\tUINT8 telemetry_switch\tWhen an AUX channel is used to change serial output &amp; baud rate (MSP / Telemetry). OFF: Telemetry is activated when armed. ON: Telemetry is activated by the AUX channel.\tOFF\tON\tOFF\tMaster\tUINT8 report_cell_voltage\tDetermines if the voltage reported is Vbatt or calculated average cell voltage.\tOFF\tON\tOFF\tMaster\tUINT8 telemetry_inversion\tDetermines if the telemetry signal is inverted (Futaba, FrSKY)\tOFF\tON\tOFF\tMaster\tUINT8 telemetry_send_cells\tEmulates FrSky FLVSS individual cell voltages telemetry\tOFF\tON\tOFF\tMaster\tUINT8 frsky_default_lattitude\tOpenTX needs a valid set of coordinates to show compass value. A fake value defined in this setting is sent while no fix is acquired.\t-90\t90\t0\tMaster\tFLOAT frsky_default_longitude\tOpenTX needs a valid set of coordinates to show compass value. A fake value defined in this setting is sent while no fix is acquired.\t-180\t180\t0\tMaster\tFLOAT frsky_coordinates_format\tFRSKY_FORMAT_DMS (default), FRSKY_FORMAT_NMEA FRSKY_FORMAT_DMS\tMaster\tUINT8 frsky_unit\tIMPERIAL (default), METRIC IMPERIAL\tMaster\tUINT8 frsky_vfas_precision\tSet to 1 to send raw VBat value in 0.1V resolution for receivers that can handle it, or 0 (default) to use the standard method\t0\t1\t0\tMaster\tUINT8 hott_alarm_sound_interval\tBattery alarm delay in seconds for Hott telemetry\t0\t120\t5\tMaster\tUINT8 bat_capacity\tBattery capacity in mAH. This value is used in conjunction with the current meter to determine remaining battery capacity.\t0\t20000\t0\tMaster\tUINT16 vbat_scale\tResult is Vbatt in 0.1V steps. 3.3V = ADC Vref, 4095 = 12bit adc, 110 = 11:1 voltage divider (10k:1k) x 10 for 0.1V. Adjust this slightly if reported pack voltage is different from multimeter reading. You can get current voltage by typing &quot;status&quot; in cli.\t0\t255\t110\tMaster\tUINT8 vbat_max_cell_voltage\tMaximum voltage per cell, used for auto-detecting battery voltage in 0.01V units, default is 430 (4.3V)\t100\t500\t430\tMaster\tUINT16 vbat_min_cell_voltage\tMinimum voltage per cell, this triggers battery-critical alarms, in 0.01V units, default is 330 (3.3V)\t100\t500\t330\tMaster\tUINT16 vbat_warning_cell_voltage\tWarning voltage per cell, this triggers battery-warning alarms, in 0.01V units, default is 350 (3.5V)\t100\t500\t350\tMaster\tUINT16 vbat_hysteresis\tSets the hysteresis value for low-battery alarms, in 0.01V units, default is 1 (0.01V)\t10\t250\t1\tMaster\tUINT8 current_meter_scale\tThis sets the output voltage to current scaling for the current sensor in 0.1 mV/A steps. 400 is 40mV/A such as the ACS756 sensor outputs. 183 is the setting for the uberdistro with a 0.25mOhm shunt.\t-10000\t10000\t400\tMaster\tINT16 current_meter_offset\tThis sets the output offset voltage of the current sensor in millivolts.\t0\t3300\t0\tMaster\tUINT16 multiwii_current_meter_output\tDefault current output via MSP is in 0.01A steps. Setting this to 1 causes output in default multiwii scaling (1mA steps).\tOFF\tON\tOFF\tMaster\tUINT8 current_meter_type\tADC (default), VIRTUAL, NONE. The virtual current sensor, once calibrated, estimates the current value from throttle position. ADC\tMaster\tUINT8 align_gyro\tWhen running on non-default hardware or adding support for new sensors/sensor boards, these values are used for sensor orientation. When carefully understood, these values can also be used to rotate (in 90deg steps) or flip the board. Possible values are: DEFAULT, CW0, CW90, CW180, CW270, CW0FLIP, CW90FLIP, CW180FLIP, CW270FLIP. DEFAULT\tMaster\tUINT8 align_acc\tWhen running on non-default hardware or adding support for new sensors/sensor boards, these values are used for sensor orientation. When carefully understood, these values can also be used to rotate (in 90deg steps) or flip the board. Possible values are: DEFAULT, CW0, CW90, CW180, CW270, CW0FLIP, CW90FLIP, CW180FLIP, CW270FLIP. DEFAULT\tMaster\tUINT8 align_mag\tWhen running on non-default hardware or adding support for new sensors/sensor boards, these values are used for sensor orientation. When carefully understood, these values can also be used to rotate (in 90deg steps) or flip the board. Possible values are: DEFAULT, CW0, CW90, CW180, CW270, CW0FLIP, CW90FLIP, CW180FLIP, CW270FLIP. DEFAULT\tMaster\tUINT8 align_board_roll\tArbitrary board rotation in degrees, to allow mounting it sideways / upside down / rotated etc\t-180\t360\t0\tMaster\tINT16 align_board_pitch\tArbitrary board rotation in degrees, to allow mounting it sideways / upside down / rotated etc\t-180\t360\t0\tMaster\tINT16 align_board_yaw\tArbitrary board rotation in degrees, to allow mounting it sideways / upside down / rotated etc\t-180\t360\t0\tMaster\tINT16 max_angle_inclination\tThis setting controls max inclination (tilt) allowed in angle (level) mode. default 500 (50 degrees).\t100\t900\t500\tMaster\tUINT16 gyro_lpf\tHardware lowpass filter cutoff frequency for gyro. Allowed values depend on the driver - For example MPU6050 allows 10HZ,20HZ,42HZ,98HZ,188HZ. If you have to set gyro lpf below 42Hz generally means the frame is vibrating too much, and that should be fixed first.\t10HZ\t188HZ\t42HZ\tMaster\tUINT16 gyro_soft_lpf\tSoftware lowpass filter cutoff frequency for gyro. Default is 60Hz. Set to 0 to disable.\t0\t500\t60\tMaster\tUINT16 moron_threshold\tWhen powering up, gyro bias is calculated. If the model is shaking/moving during this initial calibration, offsets are calculated incorrectly, and could lead to poor flying performance. This threshold (default of 32) means how much average gyro reading could differ before re-calibration is triggered.\t0\t128\t32\tMaster\tUINT8 imu_dcm_kp\tInertial Measurement Unit KP Gain\t0\t20000\t2500\tMaster\tUINT16 imu_dcm_ki\tInertial Measurement Unit KI Gain\t0\t20000\t0\tMaster\tUINT16 alt_hold_deadband\tAltitude will be held when throttle is centered with an error margin defined in this parameter.\t1\t250\t40\tProfile\tUINT8 alt_hold_fast_change\tAuthorise fast altitude changes. Should be disabled when slow changes are preferred, for example for aerial photography.\tOFF\tON\tON\tProfile\tUINT8 deadband\tThese are values (in us) by how much RC input can be different before it's considered valid for roll and pitch axis. For transmitters with jitter on outputs, this value can be increased. Defaults are zero, but can be increased up to 10 or so if rc inputs twitch while idle. This value is applied either side of the centrepoint.\t0\t32\t0\tProfile\tUINT8 yaw_deadband\tThese are values (in us) by how much RC input can be different before it's considered valid for the yaw axis. For transmitters with jitter on outputs, this value can be increased. Defaults are zero, but can be increased up to 10 or so if rc inputs twitch while idle. This value is applied either side of the centrepoint.\t0\t100\t0\tProfile\tUINT8 yaw_control_direction\tUse if you need to inverse yaw control direction.\t-1\t1\t1\tProfile\tINT8 3d_deadband_throttle\tThrottle signal will be held to a fixed value when throttle is centered with an error margin defined in this parameter.\t0\t2000\t50\tProfile\tUINT16 throttle_correction_value\tThe throttle_correction_value will be added to the throttle input. It will be maximal at the throttle_correction_angle and over, null when the copter is leveled and proportional in bewteen. The angle is set with 0.1 deg steps from 1 to 900, i.e. : 300 = 30.0 deg, 225 = 22.5 deg.\t0\t150\t0\tProfile\tUINT8 throttle_correction_angle\tThe throttle_correction_value will be added to the throttle input. It will be maximal at the throttle_correction_angle and over, null when the copter is leveled and proportional in bewteen. The angle is set with 0.1 deg steps from 1 to 900, i.e. : 300 = 30.0 deg, 225 = 22.5 deg.\t1\t900\t800\tProfile\tUINT16 pid_at_min_throttle\tIf enabled, the copter will process the PID algorithm at minimum throttle. Cannot be used when retarded_arm is enabled.\tOFF\tON\tON\tMaster\tUINT8 yaw_motor_direction\tUse if you need to inverse yaw motor direction.\t-1\t1\t1\tMaster\tINT8 yaw_jump_prevention_limit\tPrevent yaw jumps during yaw stops and rapid YAW input. To disable set to 500. Adjust this if your aircraft 'skids out'. Higher values increases YAW authority but can cause roll/pitch instability in case of underpowered UAVs. Lower values makes yaw adjustments more gentle but can cause UAV unable to keep heading\t80\t500\t200\tMaster\tUINT16 tri_unarmed_servo\tOn tricopter mix only, if this is set to 1, servo will always be correcting regardless of armed state. to disable this, set it to 0.\tOFF\tON\tON\tMaster\tINT8 servo_lowpass_freq\tSelects the servo PWM output cutoff frequency. Valid values range from 10 to 400. This is a fraction of the loop frequency in 1/1000ths. For example, 40 means 0.040. The cutoff frequency can be determined by the following formula: Frequency = 1000 * servo_lowpass_freq / looptime\t10\t400\t400\tMaster\tFLOAT servo_lowpass_enable\tDisabled by default.\tOFF\tON\tOFF\tMaster\tINT8 default_rate_profile\tDefault = profile number\t0\t2\t0\tProfile\tUINT8 rc_rate\tRate value for all RC directions\t0\t250\t90\tRate Profile\tUINT8 rc_expo\tExposition value for all RC directions\t0\t100\t65\tRate Profile\tUINT8 rc_yaw_expo\tYaw exposition value\t0\t100\t0\tRate Profile\tUINT8 thr_mid\tThrottle value when the stick is set to mid-position. Used in the throttle curve calculation.\t0\t100\t50\tRate Profile\tUINT8 thr_expo\tThrottle exposition value\t0\t100\t0\tRate Profile\tUINT8 roll_rate\tRoll rate value 100\t40\tRate Profile\tUINT8 pitch_rate\tPitch rate value 100\t40\tRate Profile\tUINT8 yaw_rate\tYaw rate value\t0\t255\t0\tRate Profile\tUINT8 tpa_rate\tThrottle PID attenuation reduces influence of P on ROLL and PITCH as throttle increases. For every 1% throttle after the TPA breakpoint, P is reduced by the TPA rate.\t0\t100\t0\tRate Profile\tUINT8 tpa_breakpoint\tSee tpa_rate.\t1000\t2000\t1500\tRate Profile\tUINT16 failsafe_delay\tTime in deciseconds to wait before activating failsafe when signal is lost. See Failsafe documentation.\t0\t200\t10\tMaster\tUINT8 failsafe_off_delay\tTime in deciseconds to wait before turning off motors when failsafe is activated. See Failsafe documentation.\t0\t200\t200\tMaster\tUINT8 failsafe_throttle\tThrottle level used for landing when failsafe is enabled. See Failsafe documentation.\t1000\t2000\t1000\tMaster\tUINT16 failsafe_kill_switch\tSet to ON to use an AUX channel as a faisafe kill switch.\tOFF\tON\tOFF\tMaster\tUINT8 failsafe_throttle_low_delay\tActivate failsafe when throttle is low and no RX data has been received since this value, in 10th of seconds\t0\t300\t100\tMaster\tUINT16 failsafe_procedure\t0 = Autolanding (default). 1 = Drop.\t0\t1\t0\tMaster\tUINT8 gimbal_mode\tWhen feature SERVO_TILT is enabled, this can be either NORMAL or MIXTILT NORMAL\tProfile\tUINT8 acc_hardware\tThis is used to suggest which accelerometer driver should load, or to force no accelerometer in case gyro-only flight is needed. Default (0) will attempt to auto-detect among enabled drivers. Otherwise, to force a particular device, set it to 2 for ADXL345, 3 for MPU6050 integrated accelerometer, 4 for MMA8452, 5 for BMA280, 6 for LSM303DLHC, 7 for MPU6000, 8 for MPU6500 or 1 to disable accelerometer alltogether - resulting in gyro-only operation.\t0\t9\t0\tMaster\tUINT8 accz_lpf_cutoff\tCutoff frequency used in the low-pass filtering of accelerometer measurements.\t1\t20\t5\tProfile\tFLOAT acc_trim_pitch\tAccelerometer trim (Pitch)\t-300\t300\t0\tProfile\tINT16 acc_trim_roll\tAccelerometer trim (Roll)\t-300\t300\t0\tProfile\tINT16 baro_tab_size\tPressure sensor sample count.\t0\t48\t21\tProfile\tUINT8 baro_noise_lpf\tbarometer low-pass filter cut-off frequency in Hz. Ranges from 0 to 1 ; default 0.6\t0\t1\t0.6\tProfile\tFLOAT baro_cf_vel\tVelocity sensor mix in altitude hold. Determines the influence accelerometer and barometer sensors have in the velocity estimation. Values from 0 to 1; 1 for pure accelerometer altitude, 0 for pure barometer altitude.\t0\t1\t0.985\tProfile\tFLOAT baro_cf_alt\tAltitude sensor mix in altitude hold. Determines the influence accelerometer and barometer sensors have in the altitude estimation. Values from 0 to 1; 1 for pure accelerometer altitude, 0 for pure barometer altitude.\t0\t1\t0.965\tProfile\tFLOAT baro_hardware\t0 = Default, use whatever mag hardware is defined for your board type ; 1 = None, 2 = BMP085, 3 = MS5611, 4 = BMP280\t0\t4\t0\tMaster\tUINT8 mag_hardware\t0 = Default, use whatever mag hardware is defined for your board type ; 1 = None, disable mag ; 2 = HMC5883 ; 3 = AK8975 ; 4 = AK8963 (for versions &lt;= 1.7.1: 1 = HMC5883 ; 2 = AK8975 ; 3 = None, disable mag)\t0\t4\t0\tMaster\tUINT8 mag_declination\tCurrent location magnetic declination in dddmm format. For example, -6deg 37min = -637 for Japan. Leading zeros not required. Get your local magnetic declination here: http://magnetic-declination.com/\t-18000\t18000\t0\tProfile\tINT16 p_pitch\tPitch P parameter\t0\t200\t40\tProfile\tUINT8 i_pitch\tPitch I parameter\t0\t200\t30\tProfile\tUINT8 d_pitch\tPitch D parameter\t0\t200\t23\tProfile\tUINT8 p_roll Roll P parameter\t0\t200\t40\tProfile\tUINT8 i_roll Roll I parameter\t0\t200\t30\tProfile\tUINT8 d_roll Roll D parameter\t0\t200\t23\tProfile\tUINT8 p_yaw\tYaw P parameter\t0\t200\t85\tProfile\tUINT8 i_yaw\tYaw I parameter\t0\t200\t45\tProfile\tUINT8 d_yaw\tYaw D parameter\t0\t200\t0\tProfile\tUINT8 p_alt\tAltitude P parameter (Baro / Sonar altitude hold)\t0\t200\t50\tProfile\tUINT8 i_alt\tAltitude I parameter (Baro / Sonar altitude hold)\t0\t200\t0\tProfile\tUINT8 d_alt\tAltitude D parameter (Baro / Sonar altitude hold)\t0\t200\t0\tProfile\tUINT8 p_level\tLevel P parameter (Angle / horizon modes)\t0\t200\t20\tProfile\tUINT8 i_level\tLevel I parameter (Angle / horizon modes)\t0\t200\t10\tProfile\tUINT8 d_level\tLevel D parameter (Angle / horizon modes)\t0\t200\t100\tProfile\tUINT8 p_vel\tVelocity P parameter (Baro / Sonar altitude hold)\t0\t200\t120\tProfile\tUINT8 i_vel\tVelocity I parameter (Baro / Sonar altitude hold)\t0\t200\t45\tProfile\tUINT8 d_vel\tVelocity D parameter (Baro / Sonar altitude hold)\t0\t200\t1\tProfile\tUINT8 yaw_p_limit\tLimiter for yaw P term. This parameter is only affecting PID controller MW23. To disable set to 500 (actual default).\t100\t500\t500\tProfile\tUINT16 dterm_cut_hz\tLowpass cutoff filter for Dterm for all PID controllers\t0\t500\t0\tProfile\tUINT16 gtune_loP_rll\tGTune: Low Roll P limit\t10\t200\t10\tProfile\tUINT8 gtune_loP_ptch\tGTune: Low Pitch P limit\t10\t200\t10\tProfile\tUINT8 gtune_loP_yw\tGTune: Low Yaw P limit\t10\t200\t10\tProfile\tUINT8 gtune_hiP_rll\tGTune: High Roll P limit\t0\t200\t100\tProfile\tUINT8 gtune_hiP_ptch\tGTune: High Pitch P limit\t0\t200\t100\tProfile\tUINT8 gtune_hiP_yw\tGTune: High Yaw P limit\t0\t200\t100\tProfile\tUINT8 gtune_pwr\tStrength of each Gtune adjustment\t0\t10\t0\tProfile\tUINT8 gtune_settle_time\tGTune settling time in milliseconds\t200 450\tProfile\tUINT16 gtune_average_cycles\tLooptime cycles for gyro average calculation. Default = 16.\t8\t128\t16\tProfile\tUINT8 blackbox_rate_num\tBlackbox logging rate numerator. Use num/denom settings to decide if a frame should be logged, allowing control of the portion of logged loop iterations\t1\t32\t1\tMaster\tUINT8 blackbox_rate_denom\tBlackbox logging rate denominator. See blackbox_rate_num.\t1\t32\t1\tMaster\tUINT8 blackbox_device\tSERIAL, SPIFLASH, SDCARD (default) SDCARD\tMaster\tUINT8 magzero_x\tMagnetometer calibration X offset\t-32768\t32767\t0\tMaster\tINT16 magzero_y\tMagnetometer calibration Y offset\t-32768\t32767\t0\tMaster\tINT16 magzero_z\tMagnetometer calibration Z offset\t-32768\t32767\t0\tMaster\tINT16 vtx_band\tConfigure the VTX band. Set to zero to use vtx_freq. Bands: 1: A, 2: B, 3: E, 4: F, 5: Race.\t0\t5\t4\tMaster\tUINT8 vtx_channel\tChannel to use within the configured vtx_band. Valid values are [1, 8].\t1\t8\t1\tMaster\tUINT8 vtx_freq\tSet the VTX frequency using raw MHz. This parameter is ignored unless vtx_band is 0.\t0\t5900\t5740\tMaster\tUINT16 vtx_halfduplex\tUse half duplex UART to communicate with the VTX, using only a TX pin in the FC.\tOFF\tON\tON\tMaster\tUINT8 vtx_low_power_disarm\tWhen the craft is disarmed, set the VTX to its lowest power. ON will set the power to its minimum value on startup, increase it to vtx_power when arming and change it back to its lowest setting after disarming. UNTIL_FIRST_ARM will start with minimum power, but once the craft is armed it will increase to vtx_power and it will never decrease until the craft is power cycled. OFF\tMaster\tUINT8 vtx_pit_mode_freq\tFrequency to use (in MHz) when the VTX is in pit mode.\t0\t5900\t0\tMaster\tUINT16 vtx_power\tVTX RF power level to use. The exact number of mw depends on the VTX hardware.\t0\t3\t1\tMaster\tUINT8 "},{"title":"GUI​","type":1,"pageTitle":"Configuration","url":"/betaflight.com/docs/development/Configuration#gui","content":" The GUI tool is the preferred way of configuration. The GUI tool also includes a terminal which can be used to interact with the CLI. Cleanflight Configurator on Chrome store If you cannot use the latest version of the GUI to access the FC due to firmware compatibility issues you can still access the FC via the CLI to backup your settings, or you can install an old version of the configurator. Old versions of the configurator can be downloaded from the configurator releases page: https://github.com/cleanflight/cleanflight-configurator/releasesSee the README file that comes with the configurator for installation instructions. "},{"title":"CLI​","type":1,"pageTitle":"Configuration","url":"/betaflight.com/docs/development/Configuration#cli","content":"Cleanflight can also be configured by a command line interface. See the CLI section of the documentation for more details. "},{"title":"Custom Board Configuration","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Custom-Board-Configuration","content":"Custom Board Configuration Warning: This section covers beyond the normal use-case for Betaflight. It's recommended that you use a pre-made target configuration for a flight controller that has been thoroughly tested before. Those configurations can be found in the unified targets list. However, Betaflight can provide support for custom-made flight controllers, assuming it contains supported hardware. Before using Betaflight at all, it's highly recommended that you, first, check to make sure your MCU and your peripherals are supported. Checking the Supported Sensors and Hardware Reference wiki pages are good places to look. Betaflight is supported across many STM32 processors. Second, thoroughly test the functionality of your hardware by programming your board in an IDE (i.e. STMCube) or using any other hardware debugging methods/tools. Assuming your hardware is supported and you've thoroughly tested your peripherals, flash generic firmware into your board. It's recommended to flash betaflight firmware using the configurator and USB Flashing. To create your own configuration, you must first use the resource command in the command line interface to map your peripheral pins on your controller. Use the CLI documentation linked above and other wiki pages for command reference. Then, you use the set command to set the bus type, i2c address, lowpass filter frequency/type, baro_hardware, gyro_hardware, etc. This will mainly be dependent on your hardware and will involve a lot of trial and error. Use the save command to save your configuration and reboot the controller. If your hardware is not detected, then you need to modify or create more settings in the CLI to accurately describe your hardware to Betaflight to detect it. Use your custom board's and respective peripherals' datasheets and schematics to help you. Alongside resource and set commands, there are timer and dma commands. For certain functions, such as battery voltage monitoring and motor output, you need to associate a timer and/or a Direct Memory Access (DMA) channel to those pins for those to work. # timertimer &lt;pin&gt; AF(x) [1-3]# dmadma [SPI_TX|ADC|pin] [index|pin] [0|1] For custom configuration like this outside the normal use-case, it's recommended that you use the pre-made configs as a source of reference.","keywords":""},{"title":"Controls","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Controls","content":"","keywords":""},{"title":"Arming​","type":1,"pageTitle":"Controls","url":"/betaflight.com/docs/development/Controls#arming","content":"When armed, the aircraft is ready to fly and the motors will spin when throttle is applied. The motors will spin at a slow speed when armed (this feature may be disabled by setting MOTOR_STOP, but for safety reasons, that is not recommended). By default, arming and disarming is done using stick positions. (NOTE: this feature is disabled when using a switch to arm.) Some conditions will disable arming. In this case the Warning LED on the board will flash a certain number of times, indicating what the condition is: Reason for disabled Arming\tLED FlashesCLI is active in the configurator\t2 Failsafe mode is active\t3 The aircraft has landed in failsafe mode\t3 Maximum arming angle is exceeded\t4 Calibration is active\t5 The system is overloaded\t6 "},{"title":"Stick Positions​","type":1,"pageTitle":"Controls","url":"/betaflight.com/docs/development/Controls#stick-positions","content":"The three stick positions are: Position\tApprox. Channel InputLOW\t1000 CENTER\t1500 HIGH\t2000 The stick positions are combined to activate different functions: Function\tThrottle\tYaw\tPitch\tRollARM\tLOW\tHIGH\tCENTER\tCENTER DISARM\tLOW\tLOW\tCENTER\tCENTER Profile 1\tLOW\tLOW\tCENTER\tLOW Profile 2\tLOW\tLOW\tHIGH\tCENTER Profile 3\tLOW\tLOW\tCENTER\tHIGH Calibrate Gyro\tLOW\tLOW\tLOW\tCENTER Calibrate Acc\tHIGH\tLOW\tLOW\tCENTER Calibrate Mag/Compass\tHIGH\tHIGH\tLOW\tCENTER Inflight calibration controls\tLOW\tLOW\tHIGH\tHIGH Trim Acc Left\tHIGH\tCENTER\tCENTER\tLOW Trim Acc Right\tHIGH\tCENTER\tCENTER\tHIGH Trim Acc Forwards\tHIGH\tCENTER\tHIGH\tCENTER Trim Acc Backwards\tHIGH\tCENTER\tLOW\tCENTER Disable LCD Page Cycling\tLOW\tCENTER\tHIGH\tLOW Enable LCD Page Cycling\tLOW\tCENTER\tHIGH\tHIGH Save setting\tLOW\tLOW\tLOW\tHIGH  "},{"title":"History​","type":1,"pageTitle":"Controls","url":"/betaflight.com/docs/development/Controls#history","content":"Intial stick commands, came from MultiWII but the original code no-longer has direct links. The original documents as listed below can be found here https://code.google.com/archive/p/multiwii/source/default/source svn/branches/Hamburger/MultiWii-StickConfiguration-23_v0-5772156649.pdfmultiwii/branches/Hamburger/MultiWii-StickConfiguration-23_v0-5772156649.odp "},{"title":"Yaw control​","type":1,"pageTitle":"Controls","url":"/betaflight.com/docs/development/Controls#yaw-control","content":"While arming/disarming with sticks, your yaw stick will be moving to extreme values. In order to prevent your craft from trying to yaw during arming/disarming while on the ground, your yaw input will not cause the craft to yaw when the throttle is LOW (i.e. below the min_check setting). For tricopters, you may want to retain the ability to yaw while on the ground, so that you can verify that your tail servo is working correctly before takeoff. You can do this by setting tri_unarmed_servo to ON on the CLI (this is the default). If you are having issues with your tail rotor contacting the ground during arm/disarm, you can set this to0 instead. Check this table to decide which setting will suit you: Is yaw control of the tricopter allowed? Disarmed\tArmed Throttle low\tThrottle normal\tThrottle low\tThrottle normal tri_unarmed_servo = OFF\tNo\tNo\tNo\tYes No\tNo\tNo\tYes tri_unarmed_servo = ON\tYes\tYes\tYes\tYes Yes\tYes\tYes\tYes "},{"title":"Throttle settings and their interaction​","type":1,"pageTitle":"Controls","url":"/betaflight.com/docs/development/Controls#throttle-settings-and-their-interaction","content":"min_command - With motor stop enabled this is the command sent to the esc's when the throttle is below min_check or disarmed. With motor stop disabled, this is the command sent only when the copter is disarmed. This must be set well below motors spinning for safety. min_check - With switch arming mode is in use, lowering your throttle below min_check will result in motors spinning at min_throttle. When using the default stick arming, lowering your throttle below min_check will result in motors spinning at min_throttle and yaw being disabled so that you may arm/disarm. With motor stop enabled, lowering your throttle below min_check will also result in motors off and the esc's being sent min_command. Min_check must be set to a level that is 100% reliably met by the throttle throw. A setting too low may result in a dangerous condition where the copter can’t be disarmed. It is ok to set this below min_throttle because the FC will automaticly scale the output to the esc's min_throttle - Typically set to just above reliable spin up of all motors. Sometimes this is set slightly higher for prop stall prevention during advanced maneuvers or sometimes considerably higher to produce a desired result. When armed with motor stop off, your motors will spin at this command so keep that in mind from a safety stand point. max_check - Throttle positions above this level will send max_command to the esc's. max_throttle - This is the max command to the esc's from the flight controller. In depth videos explaining these terms are available from Joshua Bardwell here: https://www.youtube.com/watch?v=WFU3VewGbbA https://www.youtube.com/watch?v=YNRl0OTKRGA "},{"title":"Deadband​","type":1,"pageTitle":"Controls","url":"/betaflight.com/docs/development/Controls#deadband","content":"If yaw, roll or pitch sticks do not reliably return to centre or the radio has a lot of jitter around the centrepoint, deadband can be applied. The whole deadband value is applied either side of the center point rather than half the value above and half the value below. The deadband value will have an effect on stick endpoint values as the axis value will be reduced by the amount of deadband applied. deadband - Applied to roll, pitch. yaw_deadbandOnly applied to yaw. "},{"title":"Create a Customized Version","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Customized-Version","content":"","keywords":""},{"title":"Build the firmware​","type":1,"pageTitle":"Create a Customized Version","url":"/betaflight.com/docs/development/Customized-Version#build-the-firmware","content":"This document is aimed to people who has some knowledge about programming skills and can build its own firmware. You can find information about this process in the development documentation page. Once you are able to compile your own firmware, you can continue to the next section of this document. When you compile the firmware, the make process ends with an info summary of the firmware created, something like this:  text data bss dec hex filename 126312 1444 18260 146016 23a60 ./obj/main/cleanflight_NAZE.elf  The 'text + data' gives you the flash size, and the 'data + bss' is the (static) ram usage. It's recommended to keep the customized version under the values of the unmodified version. "},{"title":"Commons features for all Flight Controllers​","type":1,"pageTitle":"Create a Customized Version","url":"/betaflight.com/docs/development/Customized-Version#commons-features-for-all-flight-controllers","content":"The first file where the developers specify the features that are activated or not for a flight controller, is the target/common_pre.h. This file specifies the features enabled/disabled depending on the memory flash size of the flight controller, or other conditions. The first interesting part is where it specifies the features activated for all flight controllers. In the actual version, for example: #define USE_CLI #define USE_RX_PPM #define USE_RX_PWM #define USE_SERIALRX #define USE_SERIALRX_CRSF // Team Black Sheep Crossfire protocol #define USE_SERIALRX_IBUS // FlySky and Turnigy receivers #define USE_SERIALRX_SBUS // Frsky and Futaba receivers #define USE_SERIALRX_SPEKTRUM // SRXL, DSM2 and DSMX protocol #define USE_SERIALRX_SUMD // Graupner Hott protocol #define USE_SERIALRX_SUMH // Graupner legacy protocol #define USE_SERIALRX_XBUS // JR  The next part are features enabled if your memory flash size is bigger than 64 megabits. #if (FLASH_SIZE &gt; 64) #define BLACKBOX #define LED_STRIP #define TELEMETRY #define TELEMETRY_FRSKY #define TELEMETRY_HOTT #define TELEMETRY_LTM #define TELEMETRY_SMARTPORT #define USE_RESOURCE_MGMT #define USE_SERVOS #endif  And bigger than 128 megabits: #if (FLASH_SIZE &gt; 128) #define GPS #define CMS #define TELEMETRY_CRSF #define TELEMETRY_IBUS #define TELEMETRY_JETIEXBUS #define TELEMETRY_MAVLINK #define TELEMETRY_SRXL #define USE_DASHBOARD #define USE_MSP_DISPLAYPORT #define USE_RX_MSP #define USE_SERIALRX_JETIEXBUS #define USE_SENSOR_NAMES #define VTX_COMMON #define VTX_CONTROL #define VTX_SMARTAUDIO #define VTX_TRAMP #endif  Another interesting thing of this file, are others features deactivated by the computing capacity of the flight controller, or the model of the processor. For example: #if (__FPU_PRESENT == 1) &amp;&amp; (__FPU_USED == 1) #define DEFAULT_AUX_CHANNEL_COUNT MAX_AUX_CHANNEL_COUNT #else #define DEFAULT_AUX_CHANNEL_COUNT 6 #endif  If the flight controller hasn't a FPU (F1 processors for example) you can use only 6 auxiliary channels of the receiver. After looking carefully to this file, you must know what features you want to disable or enable in your customized build. NOTE: It is better to not change this file, but it's useful to see what features you can activate or deactivate in your custom build. "},{"title":"Specific features for each Flight Controller​","type":1,"pageTitle":"Create a Customized Version","url":"/betaflight.com/docs/development/Customized-Version#specific-features-for-each-flight-controller","content":"Each flight controller has its own file to specify what features are enabled or disabled only for it. Sometimes they have been disabled by space limitations, but other times it's for limited computing capacity or a bug, so enable them at your own risk. This file is located in target/[FLIGHT_CONTROLLER_NAME]/target.h and it's loaded after the target/common_pre.h. Any changes in this file will overwrite the default settings, so this file is the place where you must touch to create your custom firmware. The first thing to do is to #undef all the features that we want to disable from the common_pre.h. For example, in a NAZE32, if we're using Serial RX, with a FlySky receiver (that uses de iBus protocol) and we don't have a led strip we will add all this #undef to the file. #undef USE_RX_PPM #undef USE_RX_PWM #undef USE_SERIALRX_CRSF // Team Black Sheep Crossfire protocol #undef USE_SERIALRX_SBUS // Frsky and Futaba receivers #undef USE_SERIALRX_SPEKTRUM // SRXL, DSM2 and DSMX protocol #undef USE_SERIALRX_SUMD // Graupner Hott protocol #undef USE_SERIALRX_SUMH // Graupner legacy protocol #undef USE_SERIALRX_XBUS // JR #undef LED_STRIP #undef TELEMETRY_FRSKY #undef TELEMETRY_HOTT #undef TELEMETRY_LTM #undef TELEMETRY_SMARTPORT #undef USE_SERVOS  With this change, we have won space to add some missing features. With this space, we will add GPS and telemetry by iBus too, adding some #define that are only activated by default for flight controllers with more than 128 megabits: #define GPS #define TELEMETRY_IBUS  Be careful, some features are dependent, for example, the TELEMETRY_IBUS needs the TELEMETRY enabled. To customize more if needed, this file defines all the hardware supported by different versions of the flight controller, for example, in the NAZE file: #define GYRO #define USE_GYRO_MPU3050 #define USE_GYRO_MPU6050 #define USE_GYRO_MPU6500 #define USE_GYRO_SPI_MPU6500 #define ACC #define USE_ACC_ADXL345 #define USE_ACC_BMA280 #define USE_ACC_MMA8452 #define USE_ACC_MPU6050 #define USE_ACC_MPU6500 #define USE_ACC_SPI_MPU6500 #define BARO #define USE_BARO_MS5611 // needed for Flip32 board #define USE_BARO_BMP280  Here you have different gyroscopes, accelerometers and barometers defined, to support all the variants of the flight controller. You can comment all the models that you're sure that your flight controller is not using and you will get some free space. You can find too some features disabled for this flight controller, in this case, for example: /* #define MAG #define USE_MAG_HMC5883 #define MAG_HMC5883_ALIGN CW180_DEG */  The magnetometer is commented. If you uncomment it, then it will be activated and you can use it in the NAZE flight controller. After modifying this file, you only need to build your firmware again and you will have your own customized version with all and only the features that you need. "},{"title":"Final considerations​","type":1,"pageTitle":"Create a Customized Version","url":"/betaflight.com/docs/development/Customized-Version#final-considerations","content":"As has been said several times in this document, when you activate a feature disabled by the developers, you can overcharge the processor, or include a bug in your firmware version. So be careful and do it at your own risk. "},{"title":"Development","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development","content":"","keywords":""},{"title":"General principles​","type":1,"pageTitle":"Development","url":"/betaflight.com/docs/development/development#general-principles","content":"Name everything well.Strike a balance between simplicity and not-repeating code.Methods that start with the word 'find' can return a null, methods that start with 'get' should not.Keep methods short - it makes it easier to test.Don't be afraid of moving code to a new file - it helps to reduce test dependencies.Avoid noise-words in variable names, like 'data' or 'info'. Think about what you're naming and name it well. Don't be afraid to rename anything.Avoid comments that describe what the code is doing, the code should describe itself. Comments are useful however for big-picture purposes and to document content of variables.If you need to document a variable do it at the declaration, don't copy the comment to the extern usage since it will lead to comment rot.Seek advice from other developers - know you can always learn more.Be professional - attempts at humor or slating existing code in the codebase itself is not helpful when you have to change/fix it.Know that there's always more than one way to do something and that code is never final - but it does have to work. It is also advised to read about clean code, here are some useful links: http://cleancoders.com/http://en.wikipedia.org/wiki/SOLID_%28object-oriented_design%29http://en.wikipedia.org/wiki/Code_smellhttp://en.wikipedia.org/wiki/Code_refactoringhttp://www.amazon.co.uk/Working-Effectively-Legacy-Robert-Martin/dp/0131177052 "},{"title":"Unit testing​","type":1,"pageTitle":"Development","url":"/betaflight.com/docs/development/development#unit-testing","content":"Ideally, there should be tests for any new code. However, since this is a legacy codebase which was not designed to be tested this might be a bit difficult. If you want to make changes and want to make sure it's tested then focus on the minimal set of changes required to add a test. Tests currently live in the test folder and they use the google test framework. The tests are compiled and run natively on your development machine and not on the target platform. This allows you to develop tests and code and actually execute it to make sure it works without needing a development board or simulator. This project could really do with some functional tests which test the behaviour of the application. All pull requests to add/improve the testability of the code or testing methods are highly sought! Note: Tests are written in C++ and linked with with firmware's C code. All code is also instrumented using gcov to make test coverage analysis possible. "},{"title":"Running the tests.​","type":1,"pageTitle":"Development","url":"/betaflight.com/docs/development/development#running-the-tests","content":"The tests and test build system is very simple and based off the googletest example files, it will be improved in due course. From the root folder of the project simply do: make test  You can also do: make junittest  This will build a set of executable files in the obj/test folder, one for each *_unittest.cc file. It will stop after first compile/build error. If you want it to continue with the next test module you can use make -k test. After they have been executed by the make invocation, you can still run them on the command line to execute the tests and to see the test report. Test reports will also be produced in form of junit XML files, if tests are built and run with the &quot;junittest&quot; goal. Junit report files are saved in obj/test directory and has the following naming pattern test_name_results.xml, for example: obj/test/battery_unittest_results.xml You can also step-debug the tests in eclipse and you can use the GoogleTest test runner to make building and re-running the tests simple. The tests are currently always compiled with debugging information enabled, there may be additional warnings, if you see any warnings please attempt to fix them and submit pull requests with the fixes. Tests are verified and working with GCC 4.9.3 "},{"title":"Using git and github​","type":1,"pageTitle":"Development","url":"/betaflight.com/docs/development/development#using-git-and-github","content":"Ensure you understand the github workflow: https://guides.github.com/introduction/flow/index.html Please keep pull requests focused on one thing only, since this makes it easier to merge and test in a timely manner. If you need help with pull requests there are guides on github here: https://help.github.com/articles/creating-a-pull-request/ The main flow for a contributing is as follows: Login to github, go to the betaflight repository and press fork;Then using the command line/terminal on your computer: git clone &lt;url to YOUR fork&gt;;cd betaflight;git checkout master;git checkout -b my-new-code;Make changes;git add &lt;files that have changed&gt;;git commit;git push origin my-new-code;Create pull request using github UI to merge your changes from your new branch into betaflight/master;Repeat from step 4 for new other changes. The primary thing to remember is that separate pull requests should be created for separate branches. Never create a pull request from your master branch. Once you have created the PR, every new commit/push in your branch will propagate from your fork into the PR in the main github/betaflight repo. Checkout another branch first if you want something else. Push will often fail if you edit or squash commits in a branch already pushed. Never do such things after creating the PR. Later, you can get the changes from the betaflight repo into your master branch by adding betaflight as a git remote and merging from it as follows: git remote add betaflight https://github.com/betaflight/betaflight.gitgit checkout mastergit fetch betaflightgit merge betaflight/mastergit push origin master is an optional step that will update your fork on github You can also perform the git commands using the git client inside Eclipse. Refer to the Eclipse git manual. "},{"title":"Providing Test Targets for Pull Requests​","type":1,"pageTitle":"Development","url":"/betaflight.com/docs/development/development#providing-test-targets-for-pull-requests","content":"If you open a pull request for the betaflight repository that contains a change that can be tested by other users, please build a set of test firmware files for all Unified Targets and attach them to the pull request. The required firmware files can be built in zipped form ready for upload to GitHub with make unified_zip. When attaching test firmware files, you can point users to this video for instructions on how to install the test firmware: https://youtu.be/I1uN9CN30gw Example of a pull request with test firmware attached:  "},{"title":"IDEs and .gitignore​","type":1,"pageTitle":"Development","url":"/betaflight.com/docs/development/development#ides-and-gitignore","content":"The projects .gitignore already ignores certain artifacts from some IDEs, but if you'd like to use something else, you can set up git to ignore the necessary files at a global level (all git projects on the computer) It is always good to check that you haven't done this already: git config --global --get core.excludesfile For Linux/BSD/OSX: git config --global core.excludesfile '~/.gitignore' For Windows: git config --global core.excludesfile '%USERPROFILE%\\.gitignore' When you git config --global --get core.excludesfile a second time, you should get a file location back. "},{"title":"Custom Defaults - for developers​","type":1,"pageTitle":"Development","url":"/betaflight.com/docs/development/development#custom-defaults---for-developers","content":"As all targets are now MCU based (and cloud built), this poses a problem for developers in flashing and running a fully baked &quot;hex&quot; using the standard debugger. The board scratch space (located at the /src/main/board directory) allows developers to setup their environment like they were running a fully baked unified target. Once setup, you can simply execute make with make BOARD=BETAFLIGHTF7 where BETAFLIGHTF7 is the sub directory name under /src/main/board i.e. /src/main/board/BETAFLIGHTF7. For example if you were developing and you had the BETAFLIGHTF7 target: Create the directory /src/main/board/BETAFLIGHTF7 Create files, board.c, board.h, and board.mk in the directory created (in #1 above). board.c is where you will insert the custom defaults so they are baked into the board already (and do not need to be loaded separately). This is great for debugging as they will already be present in the flash. So the board.c for BETAFLIGHTF7 is: board.c #include &quot;board.h&quot; const char __attribute__ ((section(&quot;.custom_defaults&quot;), used, aligned(4))) customDefaults[] = &quot;# Betaflight\\n&quot; &quot;board_name BETAFLIGHTF7\\n&quot; &quot;manufacturer_id FPVM\\n&quot; &quot;resource BEEPER 1 D15\\n&quot;, &quot;resource MOTOR 1 B00\\n&quot;, &quot;resource MOTOR 2 B01\\n&quot;, &quot;resource MOTOR 3 E09\\n&quot;, &quot;resource MOTOR 4 E11\\n&quot;, &quot;resource PPM 1 A03\\n&quot;, &quot;resource SONAR_TRIGGER 1 B10\\n&quot;, &quot;resource SONAR_ECHO 1 B11\\n&quot;, &quot;resource LED_STRIP 1 D12\\n&quot;, &quot;resource SERIAL_TX 1 A09\\n&quot;, &quot;resource SERIAL_TX 2 A02\\n&quot;, &quot;resource SERIAL_TX 3 B10\\n&quot;, &quot;resource SERIAL_TX 6 C06\\n&quot;, &quot;resource SERIAL_RX 1 A10\\n&quot;, &quot;resource SERIAL_RX 2 A03\\n&quot;, &quot;resource SERIAL_RX 3 B11\\n&quot;, &quot;resource SERIAL_RX 6 C07\\n&quot;, &quot;resource LED 1 E00\\n&quot;, &quot;resource SPI_SCK 1 A05\\n&quot;, &quot;resource SPI_SCK 2 B13\\n&quot;, &quot;resource SPI_SCK 3 C10\\n&quot;, &quot;resource SPI_SCK 4 E02\\n&quot;, &quot;resource SPI_MISO 1 A06\\n&quot;, &quot;resource SPI_MISO 2 B14\\n&quot;, &quot;resource SPI_MISO 3 C11\\n&quot;, &quot;resource SPI_MISO 4 E05\\n&quot;, &quot;resource SPI_MOSI 1 A07\\n&quot;, &quot;resource SPI_MOSI 2 B15\\n&quot;, &quot;resource SPI_MOSI 3 C12\\n&quot;, &quot;resource SPI_MOSI 4 E06\\n&quot;, &quot;resource CAMERA_CONTROL 1 C08\\n&quot;, &quot;resource ADC_BATT 1 C03\\n&quot;, &quot;resource ADC_RSSI 1 C05\\n&quot;, &quot;resource ADC_CURR 1 C02\\n&quot;, &quot;resource BARO_CS 1 A01\\n&quot;, &quot;resource FLASH_CS 1 E04\\n&quot;, &quot;resource OSD_CS 1 B12\\n&quot;, &quot;resource GYRO_EXTI 1 D00\\n&quot;, &quot;resource GYRO_EXTI 2 E08\\n&quot;, &quot;resource GYRO_CS 1 A04\\n&quot;, &quot;resource GYRO_CS 2 A15\\n&quot;, &quot;resource USB_DETECT 1 C04\\n&quot;, &quot;timer C08 AF3\\n&quot;, &quot;timer E13 AF1\\n&quot;, &quot;timer B00 AF2\\n&quot;, &quot;timer B01 AF2\\n&quot;, &quot;timer E09 AF1\\n&quot;, &quot;timer E11 AF1\\n&quot;, &quot;timer D12 AF2\\n&quot;, &quot;timer B10 AF1\\n&quot;, &quot;timer B11 AF1\\n&quot;, &quot;timer C06 AF3\\n&quot;, &quot;timer C07 AF3\\n&quot;, &quot;timer A03 AF1\\n&quot;, &quot;timer A02 AF3\\n&quot;, &quot;dma ADC 1 1\\n&quot;, &quot;dma pin C08 1\\n&quot;, &quot;dma pin E13 1\\n&quot;, &quot;dma pin B00 0\\n&quot;, &quot;dma pin B01 0\\n&quot;, &quot;dma pin E09 2\\n&quot;, &quot;dma pin E11 1\\n&quot;, &quot;dma pin D12 0\\n&quot;, &quot;dma pin B10 0\\n&quot;, &quot;dma pin B11 0\\n&quot;, &quot;dma pin C06 0\\n&quot;, &quot;dma pin C07 1\\n&quot;, &quot;dma pin A03 0\\n&quot;, &quot;feature OSD\\n&quot;, &quot;set mag_bustype = I2C\\n&quot;, &quot;set mag_i2c_device = 2\\n&quot;, &quot;set baro_spi_device = 1\\n&quot;, &quot;set blackbox_device = SPIFLASH\\n&quot;, &quot;set current_meter = ADC\\n&quot;, &quot;set battery_meter = ADC\\n&quot;, &quot;set beeper_inversion = ON\\n&quot;, &quot;set beeper_od = OFF\\n&quot;, &quot;set max7456_spi_bus = 2\\n&quot;, &quot;set dashboard_i2c_bus = 2\\n&quot;, &quot;set flash_spi_bus = 4\\n&quot;, &quot;set gyro_1_bustype = SPI\\n&quot;, &quot;set gyro_1_spibus = 1\\n&quot;, &quot;set gyro_1_sensor_align = CW90\\n&quot;, &quot;set gyro_1_align_yaw = 900\\n&quot;, &quot;set gyro_2_spibus = 3\\n&quot;, &quot;set gyro_2_sensor_align = CW270\\n&quot;, &quot;set gyro_2_align_yaw = 2700\\n&quot; &quot;\\0&quot;;  NOTE: When wanting to do this for other boards, the contents is replaced with everything you need for the custom defaults configuration you want to &quot;bake&quot; into the board when flashed. You can get this from the unified targets repository if needed. DO NOT forget the firstline # Betaflight\\n, the \\0 terminator (one at the very end of the list), and the \\n line termination (one at the end of each line) need to be added. board.h allows for any defines that you are working on as developers rather than specify via command line in EXTRA_FLAGS (as the cloud build system does). Therefore for board.h for the BETAFLIGHTF7 insert the following: board.h #define USE_GYRO_SPI_MPU6000 #define USE_ACC_SPI_MPU6000 #define USE_GYRO_SPI_MPU6500 #define USE_ACC_SPI_MPU6500 #define USE_MAX7456 #define USE_DSHOT #define USE_SERIALRX #define USE_SERIALRX_CRSF #define USE_SERIALRX_GHST #define USE_SERIALRX_SBUS #define USE_TELEMETRY #define USE_FLASH #define USE_OSD #define USE_VTX #define USE_TELEMETRY_CRSF #define USE_TELEMETRY_GHST  board.mk allows for any additional source files, and to specify the target. The minimum requirement is the target (unless you specify this on the command line for make). So the contents of board.mk for BETAFLIGHTF7 is as follows: board.mk TARGET := STM32F7X2  You should now be able to successfully make a debuggable version of Betaflight for the BETAFLIGHTF7 board, using the command line: make BOARD=BETAFLIGHTF7. Other command line options all remain valid also. e.g. make BOARD=BETAFLIGHTF7 TARGET=STM32F7X2 EXTRA_FLAGS=&quot;-DUSE_BATTERY_CONTINUE&quot;. NOTE: The /src/main/board directory is GIT IGNORED. This is because it is a developers scratch space for this very purpose, so code you include will not be picked up for committing. You can create as many board &quot;profiles&quot; as you like in this directory. "},{"title":"Atomic Barrier implementation","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Atomic Barrier","content":"Atomic Barrier implementation static int markme_bar = 0; static int markme = 0; markme++; // (1) markme is read into register, but not changed markme_bar++; // markme_bar is read from memory and incremented ATOMIC_BLOCK_NB(NVIC_PRIO_TIMER) { ATOMIC_BARRIER(markme_bar); // start of ATOMIC_BLOCK_NB scope: // markme_bar is stored into memory (it is input/output - &quot;+m&quot; output operand - of asm volatile) // BASEPRI is saved into temporary variable // BASEPRI_MAX is decremented to NVIC_PRIO_TIMER (if it is higher than NVIC_PRIO_TIMER or zero; lower number means higher priority on ARM) markme++; // nothing happens, markme value is not needed yet markme_bar++; // (2) markme_bar re-read from memory (ATOMIC_BARRIER marked it as modified - &quot;+m&quot; output operand of asm volatile) // and incremented // end of ATOMIC_BLOCK_NB scope: // markme_bar is stored into memory (cleanup function from ATOMIC_BARRIER) / input &quot;m&quot; operand), but kept for later use in register // (actually markme_bar+1 is stored and pre-increment value kept in register) // BASEPRI value is restored }; markme++; // register value read in (1) is incremented by 3 markme_bar++; // register value read in (2) is incremented (actually +=2, because register contains pre-increment value) // markme and markme_bar are stored into memory Atomic Barrier Warning The ATOMIC_BLOCK/ATOMIC_BARRIER construction is dependent on gcc extensions. I relies on gcc cleanup function (attribute ((cleanup))) and assumes that cleanup handler is called, when leaving block, even when associated variable is eliminated. There is (a bit paranoid) safeguard warning to make sure that generated assembly is hand-checked on new gcc version. It is assumed that only major gcc version versions need to be checked. If GCC is upgraded and a warning appears when compiling then the generated asm source must be verified. e.g. %% serial_softserial.c warning &quot;Please verify that ATOMIC_BARRIER works as intended&quot; To perform the verification, proceed as per discusson on issue #167 which reads: I hope it's enough to check that optimized-away variable still has cleanup code at end of scope. static int markme=0; markme++; ATOMIC_BLOCK_NB(0xff) { ATOMIC_BARRIER(markme); markme++; }; markme++; pass -save-temps=obj (or -save-temps=cwd, but lots of files will end up in same directory as makefile) to gcc link step (LTO is in use), find resulting *.ltrans*.ltrans.s (grep for markme, on linux it ends up in /tmp) and check that generated assembly sequence is: MSR basepri_max, r3 # (possibly markme address load) # barier (markme) start # (increment markme, load and store to memory) ldr r2, [r3] adds r0, r2, #1 str r0, [r3] # barier(markme) end MSR basepri, r3 # (markme value should be cached in register on next increment) The # barrier(markme) must surround access code and must be inside MSR basepri instructions . Similar approach is used for ATOMIC_BLOCK in avr libraries, so gcc should not break this behavior. IMO attribute(cleanup) and asm volatile is defined in a way that should guarantee this. attribute(cleanup) is probably safer way to implement atomic sections - another possibility is to explicitly place barriers in code, but that can (and will eventually) lead to missed barrier/basepri restore on same path creating very hard to find bug. The 'MEMORY_BARRIER()' code can be omitted when 'ATOMIC_BLOCK' (with full memory barriers) is used, but it is better to explicitly state what memory is protected by barrier. gcc 5 can use this knowledge to greatly improve generated code.","keywords":""},{"title":"Contributing to Betaflight","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Betaflight-Contribution","content":"","keywords":""},{"title":"Clone your fork to your development machine.​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#clone-your-fork-to-your-development-machine","content":"git clone https://github.com/yourname/betaflight.git  "},{"title":"Global configuration​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#global-configuration","content":"Please configure this to have the correct author in your commits git config --global user.name &quot;Your Name&quot; git config --global user.email &quot;your@email.domain&quot;  If you omit to configure this you get a warning and have to use the following commands to rectify: git config --global --edit git commit --amend --reset-author  "},{"title":"Setup remotes​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#setup-remotes","content":"git remote add upstream https://github.com/betaflight/betaflight.git git remote -v  "},{"title":"Create a branch and start making changes​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#create-a-branch-and-start-making-changes","content":"git checkout -b branch  "},{"title":"Stage files for commit​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#stage-files-for-commit","content":"Commit your changes after making initial changes: git add . git commit -m &quot;message&quot; git push origin branch  Note: git commit -am or specify the files. "},{"title":"Make more changes and commit on top of last commit​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#make-more-changes-and-commit-on-top-of-last-commit","content":"git commit --amend git push origin +branch  "},{"title":"Update master branch with upstream updates and update your fork​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#update-master-branch-with-upstream-updates-and-update-your-fork","content":"git checkout master git pull --rebase upstream master git push origin +master  "},{"title":"Update your local branch with upstream changes​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#update-your-local-branch-with-upstream-changes","content":"git checkout branch git branch --set-upstream-to=upstream/master branch git pull --rebase  or git pull upstream master git rebase -i master  If you look at git reflog --oneline you will see these lines: shacode HEAD@{0}: rebase (finish): returning to refs/head/branch shacode HEAD@{1}: rebase (pick): your branch commit description shacode (upstream/master, origin/master, origin/HEAD, master) HEAD@{2}: rebase (start): checkout longsha  "},{"title":"Unstage file from working area​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#unstage-file-from-working-area","content":"git restore --staged &lt;file&gt; to unstage a file from working area.  or git checkout --&lt;filename&gt;  "},{"title":"Recover from unwanted commit without push​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#recover-from-unwanted-commit-without-push","content":"git reset HEAD^  "},{"title":"If you want to completely remove the unstaged changes run​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#if-you-want-to-completely-remove-the-unstaged-changes-run","content":"git reset --hard HEAD  "},{"title":"Unwanted commits in your latest push.​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#unwanted-commits-in-your-latest-push","content":"First try: git rebase -i origin/branch~2 branch git push origin +branch  If this fails, backup your changed files (maybe also could use git stash) git reset HEAD~ --hard git checkout branch  And restore your saved files (or use git stash pop) git add . git commit -m &quot;Make new commit&quot; git push origin +branch  "},{"title":"See general changes​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#see-general-changes","content":"git diff  "},{"title":"See changes in particular file​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#see-changes-in-particular-file","content":"git log -- src/main/cms/cms` .c  "},{"title":"Checkout work on another machine​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#checkout-work-on-another-machine","content":"git checkout origin/branch git switch -c branch  "},{"title":"Quickly testing a PR​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#quickly-testing-a-pr","content":"git fetch upstream pull/2500/head:2500 git checkout 2500  "},{"title":"Squash your commits​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#squash-your-commits","content":"From the project folder you can use somethink like: https://www.scraggo.com/how-to-squash-commits. Note the number of commits in your PR. git rebase -i HEAD~17  You should see a list of commits, each commit starting with the word “pick”.Make sure the topmost, first commit says “pick” and change the rest below from “pick” to “squash”. This will squash each commit into the previous commit, which will continue until every commit is squashed into the first commit.Save and close the editor.It will give you the opportunity to change the commit message. What you see is a single message containing all of the commit messages. Edit these as you wish.Save and close the editor again.Important: If you’ve already pushed commits to origin, and then squash them locally, you will have to force the push to your branch. Finally update with: git push origin +branch  "},{"title":"Commit to a PR from another contributor​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#commit-to-a-pr-from-another-contributor","content":"Sometimes you want to make changes to an existing PR. Before doing so please ask permission from the contributor. In the example please substitute the contributor, betaflight_project and branch: git remote add contributor https://github.com/contributor/betaflight_project.git git remote -v git fetch contributor git switch branch  The original author now can pull the changes to the local branch with: git fetch origin branch:branch --update-head-ok  Now you can make more changes and commit again. (This should just work with git pull - have to check this) Advanced "},{"title":"How to sign your commits with PGP​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#how-to-sign-your-commits-with-pgp","content":"See https://docs.github.com/en/github/authenticating-to-github/managing-commit-signature-verification/generating-a-new-gpg-key When using commit just add the -S flag to verify the commit and enter the passphrase you have chosen before. "},{"title":"Bisection​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#bisection","content":"Do bisection: git bisect reset git bisect start git checkout 4.1.1  Build and make sure it works git bisect good git checkout 4.1.2  Build and make sure it fails git bisect bad  Then git will automatically bisects commits between the two versions, checks out a new bisecting commit. You will build and test it, and tell git if the commit was good or bad. "},{"title":"Links​","type":1,"pageTitle":"Contributing to Betaflight","url":"/betaflight.com/docs/development/development/Betaflight-Contribution#links","content":"https://devconnected.com/how-to-remove-files-from-git-commit/ "},{"title":"Building in Arch Linux","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Building in Arch Linux","content":"","keywords":""},{"title":"Setup GNU ARM Toolchain​","type":1,"pageTitle":"Building in Arch Linux","url":"/betaflight.com/docs/development/development/Building in Arch Linux#setup-gnu-arm-toolchain","content":"pacman -S arm-none-eabi-gcc arm-none-eabi-newlib arm-none-eabi-binutils  For running tests, the libblocksruntime package from the AUR also has to be installed: trizen -S libblocksruntime  At the time of writing, the repository version of GCC is 9.2.0, unlike 9.2.1 which BetaFlight expects. If you get the following error, you can override the GCC version in make/locak.mk before proceeding: $ make make/tools.mk:301: *** **ERROR** your arm-none-eabi-gcc is '9.2.0', but '9.2.1' is expected. Override with 'GCC_REQUIRED_VERSION' in make/local.mk or run 'make arm_sdk_install' to install the right version automatically in the tools folder of this repo. Stop. $ echo &quot;GCC_REQUIRED_VERSION = 9.2.0&quot; &gt;&gt; make/local.mk  "},{"title":"Building​","type":1,"pageTitle":"Building in Arch Linux","url":"/betaflight.com/docs/development/development/Building in Arch Linux#building","content":"After the ARM toolchain is installed, you should be able to build from source. cd src git clone git@github.com:betaflight/betaflight.git cd betaflight make MATEKF411  You'll see a set of files being compiled, and finally linked, yielding both an ELF and then a HEX: ... $ ls -l obj/ total 1516 -rwxr-xr-x 1 s-ol s-ol 428584 Jan 11 12:04 betaflight_4.2.0_MATEKF411.bin* -rw-r--r-- 1 s-ol s-ol 1136991 Jan 11 12:04 betaflight_4.2.0_MATEKF411.hex drwxr-xr-x 3 s-ol s-ol 4096 Jan 11 12:04 main/  You can use the Betaflight-Configurator to flash the obj/betaflight_4.2.0_MATEKF411.hex file. "},{"title":"Updating and rebuilding​","type":1,"pageTitle":"Building in Arch Linux","url":"/betaflight.com/docs/development/development/Building in Arch Linux#updating-and-rebuilding","content":"Navigate to the local betaflight repository and use the following steps to pull the latest changes and rebuild your version of betaflight: cd src/betaflight git reset --hard git pull make clean make  "},{"title":"Building in Eclipse","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Building in Eclipse","content":"","keywords":""},{"title":"Checklist​","type":1,"pageTitle":"Building in Eclipse","url":"/betaflight.com/docs/development/development/Building in Eclipse#checklist","content":"Use this checklist to make sure you didn't miss a step. Versions mandated below are current and correct as of January 2016.  Download and Install the latest (currently 1.8) 64bit Oracle JDK read more Download and Install Eclipse Luna (4.4) 64bit CDT edition, NB: not Mars or Neon read more Download and Install the GCC ARM Embedded toolchain 4.9-2015-q3-update read more Windows platform only: Download and Install the latest GNU ARM Eclipse Windows Build Tools Windows platform only: Download and Install either Cygwin or MinGW MSYS Optionally Download and Install the latest GNU ARM Eclipse OpenOCD read more Linux platform only: Configure UDEV to recognise USB JTAG probes Windows platform only: Download and Install the ST-Link / ST-LinkV2 drivers. These drivers do work on Windows 10 even if not yet mentioned by ST. Optionally Download and Install the latest GNU ARM Eclipse QEMU read more Add a new update site to Eclipse named &quot;GNU ARM Eclipse Plugins&quot; with the URL &quot;http://gnuarmeclipse.sourceforge.net/updates&quot; and install all the features offered Configure the recommended workspace settings Checkout the betaflight source code read more Windows platform only: Add the msys or cygwin bin directory to the project path Build the code by going to Project menu -&gt; Build All read more Run the tests by creating and running a make target named &quot;test&quot; Configure debugging read more "},{"title":"Extended Notes​","type":1,"pageTitle":"Building in Eclipse","url":"/betaflight.com/docs/development/development/Building in Eclipse#extended-notes","content":""},{"title":"Install the JDK​","type":1,"pageTitle":"Building in Eclipse","url":"/betaflight.com/docs/development/development/Building in Eclipse#install-the-jdk","content":"The minimum JDK version supported by GNU Arm Eclipse is 1.7 but the current latest, 1.8, is recommended instead. While Oracle JDK is the recommended version, they do also support the OpenJDK. "},{"title":"Install Eclipse​","type":1,"pageTitle":"Building in Eclipse","url":"/betaflight.com/docs/development/development/Building in Eclipse#install-eclipse","content":"Eclipse Luna v4.4 is the preferred version for GNU Arm Tools currently. The minimum Eclipse version is Kepler 4.3. The maximum is Mars 4.5 although it is not tested by GNU Arm Eclipse and some things are known to be broken. Eclipse Neon is currently not released. CDT v8.6.0, as shipped in the Eclipse Luna CDT download, is recommended. The minimum CDT version is 8.3. The 64bit Eclipse is preferred but a 32bit Eclipse can be used; ensure you run it on a 32bit JDK. "},{"title":"Install ARM Toolchain​","type":1,"pageTitle":"Building in Eclipse","url":"/betaflight.com/docs/development/development/Building in Eclipse#install-arm-toolchain","content":"The minimum version is 4.8-2014-q2. The maximum, and currently recommended version, is 4_9-2015q3. GNU ARM Tools recommends that you don't add the toolchain to your path environment variable. This means you can install multiple versions of the toolchain without conflict. If you'll install only one version, it can make life easier when working outside Eclipse to add it to your path. Retain the default installation directories so that the GNU ARM Plugins can locate the toolchain. "},{"title":"Install OpenOCD​","type":1,"pageTitle":"Building in Eclipse","url":"/betaflight.com/docs/development/development/Building in Eclipse#install-openocd","content":"You should install OpenOCD If you will be debugging on real hardware, such as the STM32F3DISCOVERY dev board. It is not required to simply build Betaflight or run the tests. "},{"title":"Install QEMU​","type":1,"pageTitle":"Building in Eclipse","url":"/betaflight.com/docs/development/development/Building in Eclipse#install-qemu","content":"No tests currently run on the QEMU emulator therefore this install is entirely optional. It is useful to test your installation, since you can compile and run a blinky demo. "},{"title":"Checkout Betaflight​","type":1,"pageTitle":"Building in Eclipse","url":"/betaflight.com/docs/development/development/Building in Eclipse#checkout-betaflight","content":"If you'll be submitting changes to betaflight, fork the repository on GitHub and checkout your copy. In Eclipse go to File -&gt; Import choose Git -&gt; Projects from Git  Choose Clone URI  Enter the URI https://github.com/betaflight/betaflight or if you've forked the repo, enter your URI instead. With a fork, you will need to specify your authentication details  On the branch selection dialog, de-select all branches and select only master  Select the default destination directory  When the download completes, choose Use the New Project wizard and click Finish  Choose C/C++ -&gt; Makefile Project with Existing Code  Enter betaflight as the project name and browse to your home directory -&gt; git -&gt; betaflight for the existing code location. Ensure the C (betaflight) and C++ (tests) languages are checked. Choose the Cross ARM GCC toolchain for the Indexer Settings. Click finish.  Set your build and debug targets by going to project properties -&gt; C/C++ Build and choose the Behaviour tab. Replace &quot;all&quot; in the build box with &quot;TARGET=xxx DEBUG=GDB&quot; where xxx is your platform such as NAZE  On Windows only, add msys or cygwin bin directory to the project's path by right clicking the project and choosing properties  Edit the path variable in C/C++ Build -&gt; Environment  Append the full path to the relevant bin dir  "},{"title":"Build​","type":1,"pageTitle":"Building in Eclipse","url":"/betaflight.com/docs/development/development/Building in Eclipse#build","content":"Choose project -&gt; build all  "},{"title":"Configure Debugging​","type":1,"pageTitle":"Building in Eclipse","url":"/betaflight.com/docs/development/development/Building in Eclipse#configure-debugging","content":"Choose debug -&gt; debug configurations  Create a new OpenOCD configuration for the obj\\main\\betaflight_XXX.elf application (this file is generated by the build step above)  Add the appropriate openocd board configuration parameter for your dev platform  Add the target to your debug menu favourites  "},{"title":"Blackbox logging internals","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Blackbox Internals","content":"","keywords":""},{"title":"References​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#references","content":"Please refer to the source code to clarify anything this document leaves unclear: Cleanflight's Blackbox logger: blackbox.c,blackbox_io.c,blackbox_fielddefs.hC implementation of the Blackbox log decoderJavaScript implementation of the Blackbox log decoder "},{"title":"Logging cycle​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#logging-cycle","content":"Blackbox is designed for flight controllers that are based around the concept of a &quot;main loop&quot;. During each main loop iteration, the flight controller will read some state from sensors, run some flight control algorithms, and produce some outputs. For each of these loop iterations, a Blackbox &quot;logging iteration&quot; will be executed. This will read data that was stored during the execution of the main loop and log this data to an attached logging device. The data will include algorithm inputs such as sensor and RC data, intermediate results from flight control algorithms, and algorithm outputs such as motor commands. "},{"title":"Log frame types​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#log-frame-types","content":"Each event which is recorded to the log is packaged as a &quot;log frame&quot;. Blackbox only uses a handful of different types of log frames. Each frame type is identified by a single capital letter. "},{"title":"Main frames: I, P​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#main-frames-i-p","content":"The most basic kind of logged frames are the &quot;main frames&quot;. These record the primary state of the flight controller (RC input, gyroscopes, flight control algorithm intermediates, motor outputs), and are logged during every logging iteration. Each main frame must contain at least two fields, &quot;loopIteration&quot; which records the index of the current main loop iteration (starting at zero for the first logged iteration), and &quot;time&quot; which records the timestamp of the beginning of the main loop in microseconds (this needn't start at zero, on Cleanflight it represents the system uptime). There are two kinds of main frames, &quot;I&quot; and &quot;P&quot;. &quot;I&quot;, or &quot;intra&quot; frames are like video keyframes. They can be decoded without reference to any previous frame, so they allow log decoding to be resynchronized in the event of log damage. &quot;P&quot; or &quot;inter&quot; frames use an encoding which references previously logged frames in order to reduce the required datarate. When one interframe fails to decode, all following interframes will be undecodable up until the next intraframe. "},{"title":"GPS frames: G, H​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#gps-frames-g-h","content":"Because the GPS is updated so infrequently, GPS data is logged in its own dedicated frames. These are recorded whenever the GPS data changes (not necessarily alongside every main frame). Like the main frames, the GPS frames have their own intra/inter encoding system. The &quot;H&quot; or &quot;home&quot; frame records the lat/lon of a reference point. The &quot;G&quot; or &quot;GPS&quot; frame records the current state of the GPS system (current position, altitude etc.) based on the reference point. The reference point can be updated (infrequently) during the flight, and is logged whenever it changes. To allow &quot;G&quot; frames to continue be decoded in the event that an &quot;H&quot; update is dropped from the log, the &quot;H&quot; frame is logged periodically even if it has not changed (say, every 10 seconds). This caps the duration of unreadble &quot;G&quot; frames that will result from a single missed &quot;H&quot; change. "},{"title":"Slow frames: S​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#slow-frames-s","content":"Some flight controller state is updated very infrequently (on the order of once or twice a minute). Logging the fact that this data had not been updated during every single logging iteration would be a waste of bandwidth, so these frames are only logged when the &quot;slow&quot; state actually changes. All Slow frames are logged as intraframes. An interframe encoding scheme can't be used for Slow frames, because one damaged frame causes all subsequent interframes to be undecodable. Because Slow frames are written so infrequently, one missing Slow frame could invalidate minutes worth of Slow state. On Cleanflight, Slow frames are currently used to log data like the user-chosen flight mode and the current failsafe state. "},{"title":"Event frames: E​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#event-frames-e","content":"Some flight controller data is updated so infrequently or exists so transiently that we do not log it as a flight controller &quot;state&quot;. Instead, we log it as a state transition . This data is logged in &quot;E&quot; or &quot;event&quot; frames. Each event frame payload begins with a single byte &quot;event type&quot; field. The format of the rest of the payload is not encoded in the flight log, so its interpretation is left up to an agreement of the writer and the decoder. For example, one event that Cleanflight logs is that the user has adjusted a system setting (such as a PID setting) using Cleanflight's inflight adjustments feature. The event payload notes which setting was adjusted and the new value for the setting. Because these setting updates are so rare, it would be wasteful to treat the settings as &quot;state&quot; and log the fact that the setting had not been changed during every logging iteration. It would be infeasible to periodically log the system settings using an intra/interframe scheme, because the intraframes would be so large. Instead we only log the transitions as events, accept the small probability that any one of those events will be damaged/absent in the log, and leave it up to log readers to decide the extent to which they are willing to assume that the state of the setting between successfully-decoded transition events was truly unchanged. "},{"title":"Log field format​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#log-field-format","content":"For every field in a given frame type, there is an associated name, predictor, and encoding. When a field is written, the chosen predictor is computed for the field, then this predictor value is subtracted from the raw field value. Finally, the encoder is used to transform the value into bytes to be written to the logging device. "},{"title":"Field predictors​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#field-predictors","content":"The job of the predictor is to bring the value to be encoded as close to zero as possible. The predictor may be based on the values seen for the field in a previous frame, or some other value such as a fixed value or a value recorded in the log headers. For example, the battery voltage values in &quot;I&quot; intraframes in Cleanflight use a reference voltage that is logged as part of the headers as a predictor. This assumes that battery voltages will be broadly similar to the initial pack voltage of the flight (e.g. 4S battery voltages are likely to lie within a small range for the whole flight). In &quot;P&quot; interframes, the battery voltage will instead use the previously-logged voltage as a predictor, because the correlation between successive voltage readings is high. These predictors are presently available: Predict zero (0)​ This predictor is the null-predictor which doesn't modify the field value at all. It is a common choice for fields which are already close to zero, or where no better history is available (e.g. in intraframes which may not rely on the previous value of fields). Predict last value (1)​ This is the most common predictor in interframes. The last-logged value of the field will be used as the predictor, and subtracted from the raw field value. For fields which don't change very often, this will make their encoded value be normally zero. Most fields have some time-correlation, so this predictor should reduce the magnitude of all but the noisiest fields. Predict straight line (2)​ This predictor assumes that the slope between the current measurement and the previous one will be similar to the slope between the previous measurement and the one before that. This is common for fields which increase at a steady rate, such as the &quot;time&quot; field. The predictor is history_age_2 - 2 * history_age_1. Predict average 2 (3)​ This predictor is the average of the two previously logged values of the field (i.e. (history_age_1 + history_age_2) / 2). It is used when there is significant random noise involved in the field, which means that the average of the recent history is a better predictor of the next value than the previous value on its own would be (for example, in gyroscope or motor measurements). Predict minthrottle (4)​ This predictor subtracts the value of &quot;minthrottle&quot; which is included in the log header. In Cleanflight, motors always lie in the range of [minthrottle ... maxthrottle] when the craft is armed, so this predictor is used for the first motor value in intraframes. Predict motor[0] (5)​ This predictor is set to the value of motor[0] which was decoded earlier within the current frame. It is used in intraframes for every motor after the first one, because the motor commands typically lie in a tight grouping. Predict increment (6)​ This predictor assumes that the field will be incremented by 1 unit for every main loop iteration. This is used to predict the loopIteration field, which increases by 1 for every loop iteration. Predict home-coord (7)​ This predictor is set to the corresponding latitude or longitude field from the GPS home coordinate (which was logged in a preceding &quot;H&quot; frame). If no preceding &quot;H&quot; frame exists, the value is marked as invalid. Predict 1500 (8)​ This predictor is set to a fixed value of 1500. It is preferred for logging servo values in intraframes, since these typically lie close to the midpoint of 1500us. Predict vbatref (9)​ This predictor is set to the &quot;vbatref&quot; field written in the log header. It is used when logging intraframe battery voltages in Cleanflight, since these are expected to be broadly similar to the first battery voltage seen during arming. Predict last main-frame time (10)​ This predictor is set to the last logged time field from the main frame. This is used when predicting timestamps of non-main frames (e.g. that might be logging the timing of an event that happened during the main loop cycle, like a GPS reading). "},{"title":"Field encoders​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#field-encoders","content":"The field encoder's job is to use fewer bits to represent values which are closer to zero than for values that are further from zero. Blackbox supports a range of different encoders, which should be chosen on a per-field basis in order to minimize the encoded data size. The choice of best encoder is based on the probability distribution of the values which are to be encoded. For example, if a field is almost always zero, then an encoding should be chosen for it which can encode that case into a very small number of bits, such as one. Conversely, if a field is normally 8-16 bits large, it would be wasteful to use an encoder which provided a special short encoded representation for zero values, because this will increase the encoded length of larger values. These encoders are presently available: Unsigned variable byte (1)​ This is the most straightforward encoding. This encoding uses the lower 7 bits of an encoded byte to store the lower 7 bits of the field's value. The high bit of that encoded byte is set to one if more than 7 bits are required to store the value. If the value did exceed 7 bits, the lower 7 bits of the value (which were written to the log) are removed from the value (by right shift), and the encoding process begins again with the new value. This can be represented by the following algorithm: while (value &gt; 127) { writeByte((uint8_t) (value | 0x80)); // Set the high bit to mean &quot;more bytes follow&quot; value &gt;&gt;= 7; } writeByte(value);  Here are some example values encoded using variable-byte encoding: Input value\tOutput encoding1\t0x01 42\t0x2A 127\t0x7F 128\t0x80 0x01 129\t0x81 0x01 23456\t0xA0 0xB7 0x01 Signed variable byte (0)​ This encoding applies a pre-processing step to fold negative values into positive ones, then the resulting unsigned number is encoded using unsigned variable byte encoding. The folding is accomplished by &quot;ZigZag&quot; encoding, which is represented by: unsigned32 = (signed32 &lt;&lt; 1) ^ (signed32 &gt;&gt; 31)  ZigZag encoding is preferred against simply casting the signed integer to unsigned, because casting would cause small negative quantities to appear to be very large unsigned integers, causing the encoded length to be similarly large. ZigZag encoding ensures that values near zero are still near zero after encoding. Here are some example integers encoded using ZigZag encoding: Input value\tZigZag encoding0\t0 -1\t1 1\t2 -2\t3 2147483647\t4294967294 -2147483648\t4294967295 Neg 14-bit (3)​ The value is negated, treated as an unsigned 14 bit integer, then encoded using unsigned variable byte encoding. This bizarre encoding is used in Cleanflight for battery pack voltages. This is because battery voltages are measured using a 14-bit ADC, with a predictor which is set to the battery voltage during arming, which is expected to be higher than any voltage experienced during flight. After the predictor is subtracted, the battery voltage will almost certainly be below zero. This results in small encoded values when the voltage is closely below the initial one, at the expense of very large encoded values if the voltage rises higher than the initial one. Elias delta unsigned 32-bit (4)​ Because this encoding produces a bitstream, this is the only encoding for which the encoded value might not be a whole number of bytes. If the bitstream isn't aligned on a byte boundary by the time the next non-Elias Delta field arrives, or the end of the frame is reached, the final byte is padded with zeros byte-align the stream. This encoding requires more CPU time than the other encodings because of the bit juggling involved in writing the bitstream. When this encoder is chosen to encode all of the values in Cleanflight interframes, it saves about 10% bandwidth compared to using a mixture of the other encodings, but uses too much CPU time to be practical. The basic encoding algorithm is defined on Wikipedia. Given these utility functions: /* Write `bitCount` bits from the least-significant end of the `bits` integer to the bitstream. The most-significant bit * will be written first */ void writeBits(uint32_t bits, unsigned int bitCount); /* Returns the number of bits needed to hold the top-most 1-bit of the integer 'i'. 'i' must not be zero. */ unsigned int numBitsToStoreInteger(uint32_t i);  This is our reference implementation of Elias Delta: // Value must be more than zero void writeU32EliasDeltaInternal(uint32_t value) { unsigned int valueLen, lengthOfValueLen; valueLen = numBitsToStoreInteger(value); lengthOfValueLen = numBitsToStoreInteger(valueLen); // Use unary to encode the number of bits we'll need to write the length of the value writeBits(0, lengthOfValueLen - 1); // Now write the length of the value writeBits(valueLen, lengthOfValueLen); // Having now encoded the position of the top bit of value, write its remaining bits writeBits(value, valueLen - 1); }  To this we add a wrapper which allows encoding both the value zero and MAXINT: void writeU32EliasDelta(uint32_t value) { /* We can't encode value==0, so we need to add 1 to the value before encoding * * That would make it impossible to encode MAXINT, so use 0xFFFFFFFF as an escape * code with an additional bit to choose between MAXINT-1 or MAXINT. */ if (value &gt;= 0xFFFFFFFE) { // Write the escape code writeU32EliasDeltaInternal(0xFFFFFFFF); // Add a one bit after the escape code if we wanted &quot;MAXINT&quot;, or a zero if we wanted &quot;MAXINT - 1&quot; writeBits(value - 0xFFFFFFFE, 1); } else { writeU32EliasDeltaInternal(value + 1); } }  Here are some reference encoded bit patterns produced by writeU32EliasDelta: Input value\tEncoded bit string0\t1 1\t0100 2\t0101 3\t01100 4\t01101 5\t01110 6\t01111 7\t00100000 8\t00100001 9\t00100010 10\t00100011 11\t00100100 12\t00100101 13\t00100110 14\t00100111 15\t001010000 225\t00010001100010 4294967292\t000001000001111111111111111111111111111101 4294967293\t000001000001111111111111111111111111111110 4294967294\t0000010000011111111111111111111111111111110 4294967295\t0000010000011111111111111111111111111111111 Note that the very common value of zero encodes to a single bit, medium-sized values like 225 encode to 14 bits (an overhead of 4 bits over writing a plain 8 bit value), and typical 32-bit values like 4294967293 encode into 42 bits, an overhead of 10 bits. Elias delta signed 32-bit (5)​ The value is first converted to unsigned using ZigZag encoding, then unsigned Elias-delta encoding is applied. TAG8_8SVB (6)​ First, an 8-bit (one byte) header is written. This header has its bits set to zero when the corresponding field (from a maximum of 8 fields) is set to zero, otherwise the bit is set to one. The least-signficant bit in the header corresponds to the first field to be written. This header is followed by the values of only the fields which are non-zero, written using signed variable byte encoding. This encoding is preferred for groups of fields in interframes which are infrequently updated by the flight controller. This will mean that their predictions are usually perfect, and so the value to be encoded for each field will normally be zero. This is common for values like RC inputs and barometer readings, which are updated in only a fraction of main loop iterations. For example, given these field values to encode: 0, 0, 4, 0, 8  This would be encoded: 0b00010100, 0x04, 0x08  TAG2_3S32 (7)​ A 2-bit header is written, followed by 3 signed field values of up to 32 bits each. The header value is based on the maximum size in bits of the three values to be encoded as follows: Header value\tMaximum field value size\tField range0\t2 bits\t[-2...1] 1\t4 bits\t[-8...7] 2\t6 bits\t[-32...31] 3\tUp to 32 bits\t[-2147483648...2147483647] If any of the three values requires more than 6 bits to encode, a second, 6-bit header value is written in the lower bits of the initial header byte. This second header has 2 bits for each of the encoded values which represents how many bytes are required to encode that value. The least-significant bits of the header represent the first field which is encoded. The values for each possibility are as follows: Header value\tField size\tField range0\t1 byte\t[-127...128] 1\t2 bytes\t[-32768...32767] 2\t3 bytes\t[-8388608...8388607] 3\t4 bytes\t[-2147483648...2147483647] This header is followed by the actual field values in order, written least-significant byte first, using the byte lengths specified in the header. So bringing it all together, these encoded bit patterns are possible, where &quot;0&quot; and &quot;1&quot; mean bits fixed to be those values, &quot;A&quot;, &quot;B&quot;, and &quot;C&quot; represent the first, second and third fields, and &quot;s&quot; represents the bits of the secondary header in the case that any field is larger than 6 bits: 00AA BBCC, 0100 AAAA BBBB CCCC 10AA AAAA 00BB BBBB 00CC CCCC 11ss ssss (followed by fields of byte lengths specified in the &quot;s&quot; header)  This encoding is useful for fields like 3-axis gyroscopes, which are frequently small and typically have similar magnitudes. TAG8_4S16 (8)​ An 8-bit header is written, followed by 4 signed field values of up to 16 bits each. The 8-bit header value has 2 bits for each of the encoded fields (the least-significant bits represent the first field) which represent the number of bits required to encode that field as follows: Header value\tField value size\tField range0\t0 bits\t[0...0] 1\t4 bits\t[-8...7] 2\t8 bits\t[-128...127] 3\t16 bits\t[-32768...32767] This header is followed by the actual field values in order, written as if the output stream was a bit-stream, with the most-significant bit of the first field ending up in the most-significant bits of the first written byte. If the number of nibbles written is odd, the final byte has its least-significant nibble set to zero. For example, given these field values: 13, 0, 4, 2  Choosing from the allowable field value sizes, they may be encoded using this many bits each: 8, 0, 4, 4  The corresponding header values for these lengths would be: 2, 0, 1, 1  So the header and fields would be encoded together as: 0b01010010, 0x0D, 0x42  NULL (9)​ This encoding does not write any bytes to the file. It is used when the predictor will always perfectly predict the value of the field, so the remainder is always zero. In practice this is only used for the &quot;loopIteration&quot; field in interframes, which is always perfectly predictable based on the logged frame's position in the sequence of frames and the &quot;P interval&quot; setting from the header. "},{"title":"Log file structure​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#log-file-structure","content":"A logging session begins with a log start marker, then a header section which describes the format of the log, then the log payload data, and finally an optional &quot;log end&quot; event (&quot;E&quot; frame). A single log file can be comprised of one or more logging sessions. Each session may be preceded and followed by any amount of non-Blackbox data. This data is ignored by the Blackbox log decoding tools. This allows for the logging device to be alternately used by the Blackbox and some other system (such as MSP) without requiring the ability to begin a separate log file for each separate activity. "},{"title":"Log start marker​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#log-start-marker","content":"The log start marker is &quot;H Product:Blackbox flight data recorder by Nicholas Sherlock\\n&quot;. This marker is used to discover the beginning of the flight log if the log begins partway through a file. Because it is such a long string, it is not expected to occur by accident in any sequence of random bytes from other log device users. "},{"title":"Log header​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#log-header","content":"The header is comprised of a sequence of lines of plain ASCII text. Each header line has the format H fieldname:valueand ends with a '\\n'. The overall header does not have a terminator to separate it from the log payload (the header implicitly ends when a line does not begin with an 'H' character). The header can contain some of these fields: Data version (required)​ When the interpretation of the Blackbox header changes due to Blackbox specification updates, the log version is incremented to allow backwards-compatibility in the decoder: H Data version:2  Logging interval​ Not every main loop iteration needs to result in a Blackbox logging iteration. When a loop iteration is not logged, Blackbox is not called, no state is read from the flight controller, and nothing is written to the log. Two header lines are included to note which main loop iterations will be logged: I interval​ This header notes which of the main loop iterations will record an &quot;I&quot; intraframe to the log. If main loop iterations with indexes divisible by 32 will be logged as &quot;I&quot; frames, the header will be: H I interval: 32  The first main loop iteration seen by Blackbox will be numbered with index 0, so the first main loop iteration will always be logged as an intraframe. P interval​ Not every &quot;P&quot; interframe needs to be logged. Blackbox will log a portion of iterations in order to bring the total portion of logged main frames to a user-chosen fraction. This fraction is called the logging rate. The smallest possible logging rate is (1/I interval) which corresponds to logging only &quot;I&quot; frames at the &quot;I&quot; interval and discarding all other loop iterations. The maximum logging rate is 1/1, where every main loop iteration that is not an &quot;I&quot; frame is logged as a &quot;P&quot; frame. The header records the logging rate fraction in numerator/denominator format like so: H P interval:1/2  The logging fraction given by num/denom should be simplified (i.e. rather than 2/6, a logging rate of 1/3 should be used). Given a logging rate of num/denom and an I-frame interval of I_INTERVAL, the frame type to log for an iteration of index iteration is given by: if (iteration % I_INTERVAL == 0) return 'I'; if ((iteration % I_INTERVAL + num - 1) % denom &lt; num) return 'P'; return '.'; // i.e. don't log this iteration  For an I-interval of 32, these are the resulting logging patterns at some different P logging rates. Logging rate\tMain frame pattern\tActual portion logged1 / 32\tI...............................I...............................I\t0.03 1 / 6\tI.....P.....P.....P.....P.....P.I.....P.....P.....P.....P.....P.I\t0.19 1 / 3\tI..P..P..P..P..P..P..P..P..P..P.I..P..P..P..P..P..P..P..P..P..P.I\t0.34 1 / 2\tI.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.I.P.P.P.P.P.P.P.P.P.P.P.P.P.P.P.I\t0.50 2 / 3\tI.PP.PP.PP.PP.PP.PP.PP.PP.PP.PP.I.PP.PP.PP.PP.PP.PP.PP.PP.PP.PP.I\t0.66 5 / 6\tI.PPPPP.PPPPP.PPPPP.PPPPP.PPPPP.I.PPPPP.PPPPP.PPPPP.PPPPP.PPPPP.I\t0.81 1 / 1\tIPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPIPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPI\t1.00 Firmware type (optional)​ Because Blackbox records the internal flight controller state, the interpretation of the logged data will depend on knowing which flight controller recorded it. To accomodate this, the name of the flight controller should be recorded: H Firmware type:Cleanflight  More details should be included to help narrow down the precise flight-controller version (but these are not required): H Firmware revision:c49bd40 H Firmware date:Aug 28 2015 16:49:11  Field X name (required)​ This header is a comma-separated list of the names for the fields in the 'X' frame type: H Field I name:loopIteration,time,axisP[0],axisP[1]...  The decoder assumes that the fields in the 'P' frame type will all have the same names as those in the 'I' frame, so a &quot;Field P name&quot; header does not need to be supplied. Field X signed (optional)​ This is a comma-separated list of integers which are set to '1' when their corresponding field's value should be interpreted as signed after decoding, or '0' otherwise: H Field I signed:0,0,1,1...  Field X predictor (required)​ This is a comma-separated list of integers which specify the predictors for each field in the specified frame type: H Field I predictor:0,0,0,0...  Field X encoding (required)​ This is a comma-separated list of integers which specify the encoding used for each field in the specified frame type: H Field X encoding:1,1,0,0...  vbatref​ This header provides the reference voltage that will be used by predictor #9. minthrottle​ This header provides the minimum value sent by Cleanflight to the ESCs when armed, it is used by predictor #4. Additional headers​ The decoder ignores headers that it does not understand, so you can freely add any headers that you require in order to properly interpret the meaning of the logged values. For example, to create a graphical displays of RC sticks and motor percentages, the Blackbox rendering tool requires the additional headers &quot;rcRate&quot; and &quot;maxthrottle&quot;. In order to convert raw gyroscope, accelerometer and voltage readings into real-world units, the Blackbox decoder requires the calibration constants &quot;gyro.scale&quot;, &quot;acc_1G&quot; and &quot;vbatscale&quot;. These headers might look like: H rcRate:100 H maxthrottle:1980 H gyro.scale:0x3d79c190 H acc_1G:4096 H vbatscale:110  "},{"title":"Log payload​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#log-payload","content":"The log payload is a concatenated sequence of logged frames. Each frame type which is present in the log payload must have been previously described in the log header (with Frame X name, etc. headers). Each frame begins with a single capital letter to specify the type of frame (I, P, etc), which is immediately followed by the frame's field data. There is no frame length field, checksum, or trailer. The field data is encoded by taking an array of raw field data, computing the predictor for each field, subtrating this predictor from the field, then applying the field encoders to each field in sequence to serialize them to the log. For example, imagine that we are encoding three fields in an intraframe, are using zero-predictors for each field (#0), and are encoding the values using the unsigned variable byte encoding (#1). For these field values: 1, 2, 3  We would encode a frame: 'I', 0x01, 0x02, 0x03  Imagine that we are encoding an array of motor commands in an interframe. We will use the previous motor commands as a predictor, and encode the resulting values using signed variable byte encoding. The motor command values seen in the previous logged iteration were: 1430, 1500, 1470, 1490  And the motor commands to be logged in this iteration are: 1635, 1501, 1469, 1532  After subtracting the predictors for each field, we will be left with: 205, 1, -1, 42  We will apply ZigZag encoding to each field, which will give us: 410, 2, 1, 84  We will use unsigned variable byte encoding to write the resulting values to the log, which will give us: 'P', 0x9A, 0x03, 0x02, 0x01, 0x54  "},{"title":"Log end marker​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#log-end-marker","content":"The log end marker is an optional Event (&quot;E&quot;) frame of type 0xFF whose payload is the string &quot;End of log\\0&quot;. The payload ensures that random data does not look like an end-of-log marker by chance. This event signals the tidy ending of the log. All following bytes until the next log-begin marker (or end of file) should be ignored by the log decoder. 'E', 0xFF, &quot;End of log&quot;, 0x00  "},{"title":"Log validation​","type":1,"pageTitle":"Blackbox logging internals","url":"/betaflight.com/docs/development/development/Blackbox Internals#log-validation","content":"Any damage experienced to the log during recording is overwhelmingly due to subsequences of bytes being dropped by the logging device due to overflowing buffers. Accordingly, Blackbox logs do not bother to include any checksums (bytes are not expected to be damaged by the logging device without changing the length of the message). Because of the tight bandwidth requirements of logging, neither a frame length field nor frame trailer is recorded that would allow for the detection of missing bytes. Instead, the decoder uses a heuristic in order to detect damaged frames. The decoder reads an entire frame from the log (using the decoder for each field which is the counterpart of the encoder specified in the header), then it checks to see if the byte immediately following the frame, which should be the beginning of a next frame, is a recognized frame-type byte (e.g. 'I', 'P', 'E', etc). If that following byte represents a valid frame type, it is assumed that the decoded frame was the correct length (so was unlikely to have had random ranges of bytes removed from it, which would have likely altered the frame length). Otherwise, the frame is rejected, and a valid frame-type byte is looked for immediately after the frame-start byte of the frame that was rejected. A rejected frame causes all subsequent interframes to be rejected as well, up until the next intraframe. A frame is also rejected if the &quot;loopIteration&quot; or &quot;time&quot; fields have made unreasonable leaps forward, or moved at all backwards. This suffices to detect almost all log corruption. "},{"title":"Building in Fedora 35","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Building in Fedora","content":"","keywords":""},{"title":"Building Configurator in Fedora 35​","type":1,"pageTitle":"Building in Fedora 35","url":"/betaflight.com/docs/development/development/Building in Fedora#building-configurator-in-fedora-35","content":"$ sudo dnf check-update $ sudo dnf install libatomic rpm-build dpkg $ sudo dnf module list nodejs $ sudo dnf module install nodejs:14/default $ sudo npm install -g gulp-cli yarn $ yarn install $ yarn gulp debug  Note: Please check this link for the required Node version: https://github.com/betaflight/betaflight-configurator#development "},{"title":"Serial permissions​","type":1,"pageTitle":"Building in Fedora 35","url":"/betaflight.com/docs/development/development/Building in Fedora#serial-permissions","content":"Remove ModemManager. Add yourself to the dialout group: $ sudo dnf remove ModemManager $ sudo usermod -aG dialout $(whoami)  Save and reboot after adding the following contents: $ sudo nano /etc/udev/rules.d/45-stdfu-permissions.rules # Notify ModemManager this device should be ignored ACTION!=&quot;add|change|move&quot;, GOTO=&quot;mm_usb_device_blacklist_end&quot; SUBSYSTEM!=&quot;usb&quot;, GOTO=&quot;mm_usb_device_blacklist_end&quot; ENV{DEVTYPE}!=&quot;usb_device&quot;, GOTO=&quot;mm_usb_device_blacklist_end&quot; ATTRS{idVendor}==&quot;0483&quot;, ATTRS{idProduct}==&quot;df11&quot;, ENV{ID_MM_DEVICE_IGNORE}=&quot;1&quot; LABEL=&quot;mm_usb_device_blacklist_end&quot; #STM32 DFU Access SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0483&quot;, ATTRS{idProduct}==&quot;df11&quot;, TAG+=&quot;uaccess&quot;  "},{"title":"Building in Mac OS X","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Building in Mac OS X","content":"","keywords":""},{"title":"Install general development tools (clang, make, git)​","type":1,"pageTitle":"Building in Mac OS X","url":"/betaflight.com/docs/development/development/Building in Mac OS X#install-general-development-tools-clang-make-git","content":"Open up a terminal and run make. If it is installed already, you should see a message like this, which means that you already have the required development tools installed: make: *** No targets specified and no makefile found. Stop.  If it isn't installed yet, you might get a popup like this. If so, click the &quot;install&quot; button to install the commandline developer tools:  If you just get an error like this instead of a helpful popup prompt: -bash: make: command not found  Try running xcode-select --install instead to trigger the popup. If that doesn't work, you'll need to install the XCode development environment from the App Store. After installation, open up XCode and enter its preferences menu. Go to the &quot;downloads&quot; tab and install the &quot;command line tools&quot; package. "},{"title":"Checkout Betaflight sourcecode through git​","type":1,"pageTitle":"Building in Mac OS X","url":"/betaflight.com/docs/development/development/Building in Mac OS X#checkout-betaflight-sourcecode-through-git","content":"Enter your development directory and clone the Betaflight repository using the &quot;HTTPS clone URL&quot; which is shown on the right side of the Betaflight GitHub page, like so: git clone https://github.com/betaflight/betaflight.git  This will download the entire betaflight repository for you into a new folder called &quot;betaflight&quot;. "},{"title":"Install ARM GCC compiler​","type":1,"pageTitle":"Building in Mac OS X","url":"/betaflight.com/docs/development/development/Building in Mac OS X#install-arm-gcc-compiler","content":"To install the needed compiler you just need to enter the betaflight directory and run make arm_sdk_install "},{"title":"Build the code​","type":1,"pageTitle":"Building in Mac OS X","url":"/betaflight.com/docs/development/development/Building in Mac OS X#build-the-code","content":"Enter the betaflight directory and run make TARGET=BETAFLIGHTF4 to build firmware for the BETAFLIGHTF4. When the build completes, the .hex firmware should be available as obj/betaflight_3.5.2_BETAFLIGHTF4.hex for you to flash using the Betaflight Configurator. "},{"title":"Updating to the latest source​","type":1,"pageTitle":"Building in Mac OS X","url":"/betaflight.com/docs/development/development/Building in Mac OS X#updating-to-the-latest-source","content":"If you want to erase your local changes and update to the latest version of the Betaflight source, enter your betaflight directory and run these commands to first erase your local changes, fetch and merge the latest changes from the repository, then rebuild the firmware: git reset --hard git pull make clean TARGET=BETAFLIGHTF4 make TARGET=BETAFLIGHTF4  "},{"title":"Building in windows","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Building in Windows","content":"","keywords":""},{"title":"Building on Windows 10 using the Linux subsystem​","type":1,"pageTitle":"Building in windows","url":"/betaflight.com/docs/development/development/Building in Windows#building-on-windows-10-using-the-linux-subsystem","content":"A new feature in Windows 10 allows any developer to quickly and easily run an entire linux subsystem in Windows and access it via a bash terminal. This gives developers full use of the entire Linux OS and all of the great existing linux tools and programs. When Bash for Windows is up and running it feels like you sshed into a full Linux box, except the linux distro is actually running alongside Windows locally. If you use Bash on Windows you can easily build Betaflight exactly as you would for Ubuntu. For instructions follow the official guide here. https://msdn.microsoft.com/commandline/wsl/install_guide Once you have Bash On Windows running you can follow the &quot;Building in Ubuntu&quot; instructions for building Betaflight. "},{"title":"Building on Windows 7/8/10 using the Cygwin environment​","type":1,"pageTitle":"Building in windows","url":"/betaflight.com/docs/development/development/Building in Windows#building-on-windows-7810-using-the-cygwin-environment","content":"The Cygwin environment provides some functionality similar to a Linux distribution, allowing to build Betaflight in a relatively small (~1 Gb) environment within Windows. "},{"title":"Installing Cygwin and required packages​","type":1,"pageTitle":"Building in windows","url":"/betaflight.com/docs/development/development/Building in Windows#installing-cygwin-and-required-packages","content":"Download the Setup*.exe from https://www.cygwin.com/  Execute the downloaded Setup*.exe and step through the installation wizard (no need to customize the settings here). Stop at the &quot;Select Packages&quot; Screen and select the following Packages for Installation: Archive/unzipDevel/gitDevel/bash-completion (was git-completion, Optional)Devel/makeDevel/binutilsEditors/vim or Editors/nano (file editors, nano is most straightforward while vim offers more advanced options)Shells/mintty (should be already selected)Archive/unzip      Continue with the Installation and accept all autodetected dependencies.  The Cygwin environment is now installed and can be used with the Cygwin-Terminal application. "},{"title":"Clone the Betaflight repository​","type":1,"pageTitle":"Building in windows","url":"/betaflight.com/docs/development/development/Building in Windows#clone-the-betaflight-repository","content":"Head over to the Betaflight Github page and grab the URL of the GIT Repository: &quot;https://github.com/betaflight/betaflight.git&quot;  Open the Cygwin-Terminal, navigate to the /dev folder and use the git command git clone to checkout the repository. cd /dev git clone https://github.com/betaflight/betaflight.git   The /dev/betaflight folder now holds a copy of the current Betaflight source code repository. "},{"title":"Setup GNU ARM Toolchain​","type":1,"pageTitle":"Building in windows","url":"/betaflight.com/docs/development/development/Building in Windows#setup-gnu-arm-toolchain","content":"To compile the Betafligth source code for the ARM processors used on the various flight controllers, the GNU ARM Toolchain is required. Versions are important, current Betaflight (4.0.0) requires at least arm-none-eabi-gcc version 7.3.1. The toolchain can be installed in two ways: Using the provided arm_sdk_install scriptManual installation The provided script will install the correct version of the ARM toolchain to the /dev/betaflight/ directory, which will thus only be avaialble to this project. This method ensures the corerct version is installed and prevents collision with possible other projects you might have. The manual installation option will install the ARM toolchain system-wide, allowing it to also be used for other projects on the system, should that be necesary. Scripted installation​ To install the ARM toolchain, use the make arm_sdk_install command within the /dev/betaflight directory: Stefan@DESKTOP-U5FUCGO /dev $ cd /dev/betaflight Stefan@DESKTOP-U5FUCGO /dev/betaflight $ make arm_sdk_install mkdir -p tools mkdir -p downloads % Total % Received % Xferd Average Speed Time Time Time Current Dload Upload Total Spent Left Speed 100 241 100 241 0 0 241 0 0:00:01 --:--:-- 0:00:01 1288 100 124M 100 124M 0 0 1965k 0 0:01:05 0:01:05 --:--:-- 2014k  The ARM toolchain is now installed. Note the toolchain can be removed with make arm_sdk_clean from the /dev/betaflight directory. Manual Installation​ Manual installation requires you download the Windows zip 7.3.1 (7-2018-q2-update), which can be obtained here: https://developer.arm.com/open-source/gnu-toolchain/gnu-rm/downloads (7-2018-q2-update) Or via direct link: https://armkeil.blob.core.windows.net/developer/Files/downloads/gnu-rm/7-2018q2/gcc-arm-none-eabi-7-2018-q2-update-win32.zip Extract the contents of this archive to any folder of your choice, for instance C:\\dev\\gcc-arm.  Add the &quot;bin&quot; subdirectory to the PATH Windows environment variable: %PATH%;C:\\dev\\gcc-arm\\bin   The ARM toolchain is now available within the Cygwin environment. Building the firmware​ To compile your Betaflight binaries; open the Cygwin terminal, enter the Betaflight directory and build the project using the make command. You can append TARGET=[HARDWARE] if you want to build anything other than the default NAZE target: cd /dev/betaflight make TARGET=NAZE   Within few moments you should have your binary ready: Stefan@DESKTOP-U5FUCGO /dev/betaflight $ cd /dev/betaflight Stefan@DESKTOP-U5FUCGO /dev/betaflight $ make TARGET=BETAFLIGHTF3 make -j ./obj/betaflight_4.1.0_BETAFLIGHTF3.hex make[1]: Entering directory '/dev/betaflight' %% startup_stm32f30x_md_gcc.S %% (optimised) ./src/main/startup/system_stm32f30x.c ... ... %% (optimised) ./src/main/drivers/usb_io.c Linking BETAFLIGHTF3 Memory region Used Size Region Size %age Used FLASH: 241016 B 252 KB 93.40% FLASH_CONFIG: 0 GB 4 KB 0.00% RAM: 33568 B 40 KB 81.95% CCM: 2 KB 8 KB 25.00% MEMORY_B1: 0 GB 0 GB -1.#J% text data bss dec hex filename 237600 3416 32200 273216 42b40 ./obj/main/betaflight_BETAFLIGHTF3.elf Creating HEX ./obj/betaflight_4.1.0_BETAFLIGHTF3.hex  Note that the final message will also inform you about flash space use You can use the Betaflight-Configurator to flash the obj/betaflight_NAZE.hex file. "},{"title":"Updating and rebuilding​","type":1,"pageTitle":"Building in windows","url":"/betaflight.com/docs/development/development/Building in Windows#updating-and-rebuilding","content":"In order to update your local copy of the source code, navigate to the local betaflight repository and use the following steps to pull the latest changes and rebuild your version of betaflight: cd /dev/betaflight git reset --hard git pull make clean TARGET=NAZE make TARGET=NAZE  "},{"title":"Building in Ubuntu","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Building in Ubuntu","content":"","keywords":""},{"title":"Clone betaflight repository and install toolchain​","type":1,"pageTitle":"Building in Ubuntu","url":"/betaflight.com/docs/development/development/Building in Ubuntu#clone-betaflight-repository-and-install-toolchain","content":"$ sudo apt update &amp;&amp; apt upgrade $ sudo apt install build-essential libblocksruntime-dev git curl clang $ git clone https://github.com/betaflight/betaflight.git $ cd betaflight $ make arm_sdk_install  "},{"title":"Updating and Rebuilding Firmware​","type":1,"pageTitle":"Building in Ubuntu","url":"/betaflight.com/docs/development/development/Building in Ubuntu#updating-and-rebuilding-firmware","content":"Navigate to your local betaflight repository and use the following steps to pull the latest changes and rebuild your version of betaflight: $ git pull $ make MATEKF405 [OPTIONS=RANGEFINDER] [DEBUG=DBG]  Using the optional OPTIONS parameters you can specify options like RANGEFINDER. Using the optional DEBUG parameter you can specify the debugger. You'll see a set of files being compiled, and finally linked, yielding both an ELF and then a HEX. You can use the Betaflight-Configurator to flash the obj/betaflight_MATEKF405.hex file. Make sure to remove obj/ and make clean, before building again. "},{"title":"Building Betaflight Configurator​","type":1,"pageTitle":"Building in Ubuntu","url":"/betaflight.com/docs/development/development/Building in Ubuntu#building-betaflight-configurator","content":"$ sudo apt update &amp;&amp; apt upgrade $ sudo apt install libatomic1 npm $ sudo npm install -g gulp-cli yarn $ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash $ source ~/.bashrc $ nvm install v16.15.1 (for exact version please check link below)  See Betaflight Configurator Development for how to build the Betaflight Configurator. "},{"title":"Flashing a target with Betaflight Configurator on Ubuntu 22.04​","type":1,"pageTitle":"Building in Ubuntu","url":"/betaflight.com/docs/development/development/Building in Ubuntu#flashing-a-target-with-betaflight-configurator-on-ubuntu-2204","content":"In most Linux distributions the user won't have access to serial interfaces by default. Flashing a target requires configuration of usb for dfu mode. To add this access right type the following command in a terminal: $ sudo usermod -a -G dialout $USER $ sudo usermod -a -G plugdev $USER $ sudo apt-get remove modemmanager $ (echo '# DFU (Internal bootloader for STM32 MCUs)' echo 'ACTION==&quot;add&quot;, SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0483&quot;, ATTRS{idProduct}==&quot;df11&quot;, MODE=&quot;0664&quot;, GROUP=&quot;plugdev&quot;') | sudo tee /etc/udev/rules.d/45-stdfu-permissions.rules &gt; /dev/null  Please log out and log in to active the settings. You should now be able to flash your target using Betaflight Configurator. Credit goes to K.C. Budd, AKfreak for testing, and pulsar for doing the long legwork that yielded the original content of this document. "},{"title":"Installing the Linux subsystem","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Building-Betaflight-on-Windows,-the-Linux-subsystem-way","content":"Installing the Linux subsystem Your PC must be running a 64-bit version of Windows 10 Anniversary Update or later (build 1607+). You will need to restart your PC at least once, so be mentally prepared for that. Listening to Kraftwerk is known to increase the success rate of this process. First, install the Linux subsystem from this great guide (from which I stole the first sentence): https://msdn.microsoft.com/en-us/commandline/wsl/install-win10 Note for absolute newbs regarding Ubuntu (maybe applies to others, but IDK), when prompted to enter a new UNIX user, be sure to use only lower case. The user name is compared to a regular expression that only allows lower case, but not upper. It should look like this: If you don't see this screen, open a Windows command prompt and enter bash. Note the Ubuntu app installer can pin shortcuts to the Start Menu, or the Task Bar. I tried opening these and I did not get the above screenshot; it was missing the path (/mnt/c/Users/username$), and only showed my username@desktop. Running bash from Windows CMD included the expected path. Configuring the Linux subsystem You will have to install a few Linux packages. First, the basics. We need Python and Curl. To install those, enter sudo apt install python curl -y You can install multiple packages at once. The -Y option says yes to all questions during installation. So far so good, eh? Cloning betaflight If you already have the repository cloned to your computer and do not wish to use git, you can skip this step. To install git, enter: sudo apt install git Once that's done, navigate to the folder you want to have the repository cloned to. Use cd [folder name] to enter a folder, cd .. to go up a folder and ls to see the current folder's contents. Use mkdir [foldername] to create a new folder. Once that's done, enter git clone https://www.github.com/betaflight/betaflight [foldername] (be sure to have your GitHub login info ready). This will create a new folder within the folder you are in with the name you specified and clone (=download) the Betaflight repo into it. Building Betaflight Note: The file system mapping of WSL is still somewhat experimental, and currently all files on the local disk are mounted into /mnt/c on the linux side. They are accessible, but they are mounted with root:root permissions. This causes permissioning issues with a lot of things, and amongst them is that it leads to errors when trying to build Betaflight from a repository that was cloned onto the local disk under Windows. Rather than doing this, create a fresh clone in linux under /home/\\&lt;username\\&gt;, and build from there. To build Betaflight, you have two things left to install. Enter the folder you cloned the Betaflight repo into. The ls command should output something like this:If it doesn't match, you are in the wrong folder. Use the Windows file manager to help if you are lost. If you are missing a few folders, don't worry, we are going to solve that right now. First, enter sudo apt install build-essential. This is the package that will actually build Betaflight. Then, enter sudo make arm_sdk_install. UPDATE/NOTE: Using Ubuntu, I had to run sudo apt-get update which installed a few updates, prior to running sudo apt install build-essential. Without the updates, sudo apt install build-essential only produced 404 errors. Once that is done, your system is ready to spit out those sweet hex files. Enter make &lt;targetname&gt; to build Betaflight for your chosen board. For example make BETAFLIGHTF3 or even make BETAFLIGHTF3 BETAFLIGHTF4 for multiple targets. make help is also your friend. Alternatively, you can try make all if you have some spare time. The hex files will be in the /obj folder of the betaflight folder TIP: To find your board (and how it should be referenced from the make command), see here: https://github.com/betaflight/betaflight/tree/master/src/main/target UPDATE/NOTE 2: In order to run make test or make junittest you will have to install clang (version 10). If you type which clang-10 in console and get no output, it's not installed. In order to install enter sudo apt-get install clang-10. Additionally, you may need to run sudo apt-get install libblocksruntime-dev to install a missing library for linking. Optional items If you do not like the default Windows console, you can always install for example xterm. This will however also require an X-server running in the Windows host environment. Get it here: https://sourceforge.net/projects/xming/ Then do the following in the Linux subsystem: $ sudo apt install xterm$ sudo apt-get install dbus-x11$ sudo dbus-uuidgen --ensure$ xterm --display :0.0 &amp; Root file system location The root file system for the Linux Subsystem is available from Windows here:C:\\Users\\\\&lt;username\\&gt;\\AppData\\Local\\Packages\\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\\LocalState\\rootfs In earlier iterations of Windows Subsystem for Linux, the Ubuntu file system was at %localappdata%\\Lxss (e.g., C:\\Users\\&lt;username&gt;\\AppData\\Local\\Lxss But it has now moved to the location mentioned above. Beware there are still a lot of incorrect information about this floating around. Even on MS own site. Under normal circumstances, avoid doing anything in these folder as much as possible, it might mess up the Linux subsystem. Compiling unit tests To compile unit tests, you need to install two additional packages: $ sudo apt-get install clang$ sudo apt-get install libblocksruntime-dev Then run the following command to compile all unit tests: $ make test You can also compile them individually as well. For more usage information run this command: $ cd ./src/test &amp;&amp; make help","keywords":""},{"title":"Building Manual.","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Building Manual","content":"","keywords":""},{"title":"Requirements & Installation​","type":1,"pageTitle":"Building Manual.","url":"/betaflight.com/docs/development/development/Building Manual#requirements--installation","content":"The PDF manual generation uses the Gimli for the conversion. It can be installed via ruby gems. On Debian based systems the installation steps are:  sudo apt-get install ruby1.9.1 ruby1.9.1-dev rubygems zlib1g-dev wkhtmltopdf libxml2-dev libxslt-dev sudo gem1.9.1 install gimli  "},{"title":"Configuration​","type":1,"pageTitle":"Building Manual.","url":"/betaflight.com/docs/development/development/Building Manual#configuration","content":"All markdown files need to be registered in the build_manual.sh file individually by modifying the doc_files variable / array: doc_files=( 'Configuration.md' 'Board - CC3D.md' '...' '...' )  "},{"title":"Configuration Format","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Configuration Format","content":"","keywords":""},{"title":"Initialiion function.​","type":1,"pageTitle":"Configuration Format","url":"/betaflight.com/docs/development/development/Configuration Format#initialiion-function","content":"All fields are reset to 0 upon initialisation and then if a reset function is defined for the group then initial settings can be defined by the system. "},{"title":"Upgrading​","type":1,"pageTitle":"Configuration Format","url":"/betaflight.com/docs/development/development/Configuration Format#upgrading","content":"Upgrades are done at the PG level and are detected by a difference in size or version. New fields can be added to the end of the parameter group. The reset and initialisation function is called before upgrading so new fields will first be reset to 0 and then initialised by the system if defined. Note: Currently the code does not check the version field. "},{"title":"Downgrading​","type":1,"pageTitle":"Configuration Format","url":"/betaflight.com/docs/development/development/Configuration Format#downgrading","content":"Downgrades are done at the PG level. Any trailing, unrecognised fields will be silently dropped on load. Saving the config back to flash will discard these unrecognised fields. "},{"title":"Incompatible changes​","type":1,"pageTitle":"Configuration Format","url":"/betaflight.com/docs/development/development/Configuration Format#incompatible-changes","content":"An incompatible change is where a field is inserted, deleted from the middle, reordered, resized (including changing the size of a contained array), or has the meaning changed. Such changes should be handled by bumping the PG version field or allocating a new PGN. "},{"title":"Configuration","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Configuration Storage","content":"","keywords":""},{"title":"Erasing​","type":1,"pageTitle":"Configuration","url":"/betaflight.com/docs/development/development/Configuration Storage#erasing","content":"Generate a 2-4kb blank file. 2kb: dd if=/dev/zero of=obj/blankconfig.bin bs=1024 count=2  4kb: dd if=/dev/zero of=obj/blankconfig.bin bs=1024 count=4  Overwrite configuration using JLink Run JLink (OSX: /Applications/SEGGER/JLink/JLinkExe) Execute commandsdevice &lt;your device&gt;, e.g. STM32F303CBrhloadbin obj/blankconfig.bin, &lt;address&gt;r to Reboot FC.q to quit the address is the address of the end of the flash ram minus the size of the configuration. example addresses: 64k device/2kb config = 0x800F800 128k device/2kb config = 0x801F800 128k device/4kb config = 0x801F000 256k device/2kb config = 0x803f800 256k device/4kb config = 0x803f000  Example session $ /Applications/SEGGER/JLink/JLinkExe SEGGER J-Link Commander V4.90c ('?' for help) Compiled Aug 29 2014 09:52:38 DLL version V4.90c, compiled Aug 29 2014 09:52:33 Firmware: J-Link ARM-OB STM32 compiled Aug 22 2012 19:52:04 Hardware: V7.00 S/N: -1 Feature(s): RDI,FlashDL,FlashBP,JFlash,GDBFull VTarget = 3.300V Info: Could not measure total IR len. TDO is constant high. Info: Could not measure total IR len. TDO is constant high. No devices found on JTAG chain. Trying to find device on SWD. Info: Found SWD-DP with ID 0x2BA01477 Info: Found Cortex-M4 r0p1, Little endian. Info: FPUnit: 6 code (BP) slots and 2 literal slots Info: TPIU fitted. Info: ETM fitted. Cortex-M4 identified. Target interface speed: 100 kHz J-Link&gt;device STM32F303CC Info: Device &quot;STM32F303CC&quot; selected (256 KB flash, 32 KB RAM). Reconnecting to target... Info: Found SWD-DP with ID 0x2BA01477 Info: Found SWD-DP with ID 0x2BA01477 Info: Found Cortex-M4 r0p1, Little endian. Info: FPUnit: 6 code (BP) slots and 2 literal slots Info: TPIU fitted. Info: ETM fitted. J-Link&gt;r Reset delay: 0 ms Reset type NORMAL: Resets core &amp; peripherals via SYSRESETREQ &amp; VECTRESET bit. J-Link&gt;h PC = 08001154, CycleCnt = 00000000 R0 = 00000000, R1 = 00000000, R2 = 00000000, R3 = 00000000 R4 = 00000000, R5 = 00000000, R6 = 00000000, R7 = 00000000 R8 = 00000000, R9 = 00000000, R10= 00000000, R11= 00000000 R12= 00000000 SP(R13)= 2000A000, MSP= 2000A000, PSP= 00000000, R14(LR) = FFFFFFFF XPSR = 01000000: APSR = nzcvq, EPSR = 01000000, IPSR = 000 (NoException) CFBP = 00000000, CONTROL = 00, FAULTMASK = 00, BASEPRI = 00, PRIMASK = 00 FPU regs: FPU not enabled / not implemented on connected CPU. J-Link&gt;loadbin obj/blankconfig.bin, 0x803f800 Downloading file [obj/blankconfig.bin]... WARNING: CPU is running at low speed (7989 kHz). Info: J-Link: Flash download: Flash programming performed for 1 range (2048 bytes) Info: J-Link: Flash download: Total time needed: 1.254s (Prepare: 0.698s, Compare: 0.009s, Erase: 0.075s, Program: 0.405s, Verify: 0.005s, Restore: 0.059s) O.K. J-Link&gt;r Reset delay: 0 ms Reset type NORMAL: Resets core &amp; peripherals via SYSRESETREQ &amp; VECTRESET bit. J-Link&gt;q  "},{"title":"General","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/CodingStyle","content":"","keywords":""},{"title":"Indentation​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#indentation","content":"1TBS (based K&amp;R) indent style with 4 space indent, NO hard tabs (all tabs replaced by spaces). "},{"title":"Tool support​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#tool-support","content":"Any of these tools can get you pretty close: Eclipse built in &quot;K&amp;R&quot; style, after changing the indent to 4 spaces and change Braces after function declarations to Next line. astyle --style=kr --indent=spaces=4 --min-conditional-indent=0 --max-instatement-indent=80 --pad-header --pad-oper --align-pointer=name --align-reference=name --max-code-length=120 --convert-tabs --preserve-date --suffix=none --mode=c  indent -kr -i4 -nut  (the options for these commands can be tuned more to comply even better) Note: These tools are not authorative. Sometimes, for example, you may want other columns and line breaks so it looks like a matrix. Note2: The Astyle settings have been tested and will produce a nice result. Many files will be changed, mostly to the better but maybe not always, so use with care. "},{"title":"Curly Braces​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#curly-braces","content":""},{"title":"Functions​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#functions","content":"Functions shall have the opening and closing braces at the beginning of the next line, and followed by a line break. int function(int x) { body of function }  "},{"title":"Non-function statement blocks​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#non-function-statement-blocks","content":"Opening braces​ All non-function statement blocks (i.e. if, switch, for, as well as any others) shall have the opening brace last on the same line, with the following statement on the next line. Closing braces​ Closing braces shall be but on the line after the last statement in the block. if (x is true) { we do y ... }  switch (action) { case ADD: return &quot;add&quot;; case REMOVE: return &quot;remove&quot;; case CHANGE: return &quot;change&quot;; default: return NULL; }  If the closing brace is followed by an else or else if that shall be on the same line, again with the opening brace on the same line. if (x is true) { we do y ... } else { we do z ... }  ###Braces are required Omission of &quot;unnecessary&quot; braces in cases where an if or else block consists only of a single statement is not permissible in any case. These &quot;single statement blocks&quot; are future bugs waiting to happen when more statements are added without enclosing the block in braces. "},{"title":"Spaces​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#spaces","content":"Use a space after (most) keywords. The notable exceptions are sizeof, typeof, alignof, and attribute, which look somewhat like functions (and are usually used with parentheses). So use a space after these keywords: if, switch, case, for, do, while  but not with sizeof, typeof, alignof, or attribute. E.g., s = sizeof(struct file);  When declaring pointer data or a function that returns a pointer type, the preferred use of '*' is adjacent to the data name or function name and not adjacent to the type name. Examples: char *linux_banner; memparse(char *ptr, char **retptr); char *match_strdup(substring_t *s);  Use one space around (on each side of) most binary and ternary operators, such as any of these: = + - &lt; &gt; * / % | &amp; ^ &lt;= &gt;= == != ? :  but no space after unary operators: &amp; * + - ~ ! sizeof typeof alignof __attribute__ defined  no space before the postfix increment &amp; decrement unary operators: ++ --  no space after the prefix increment &amp; decrement unary operators: ++ --  and no space around the '.' and &quot;-&gt;&quot; structure member operators. '*' and '&amp;', when used for pointer and reference, shall have no space between it and the following variable name. typedef enums that do not have a count or some other form of terminator element shall have a comma after their last element: typedef enum { MSP_RESULT_ACK = 1, MSP_RESULT_ERROR = -1, MSP_RESULT_NO_REPLY = 0, MSP_RESULT_CMD_UNKNOWN = -2, } mspResult_e;  This ensures that, if more elements are added at a later stage, only the additional lines show up in the review, making it easier to review. enums with a count should have that count declared as the last item in the enumeration list, so that it is automatically maintained, e.g.: typedef enum { PID_CONTROLLER_MW23 = 0, PID_CONTROLLER_MWREWRITE, PID_CONTROLLER_LUX_FLOAT, PID_COUNT } pidControllerType_e;  It shall not be calculated afterwards, e.g. using PID_CONTROLLER_LUX_FLOAT + 1; typedef struct definitions should include the struct name, so that the type can be forward referenced, that is in: typedef struct motorMixer_s { float throttle; ... float yaw; } motorMixer_t;  the motorMixer_s name is required. Variables "},{"title":"Naming​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#naming","content":"Generally, descriptive lowerCamelCase names are preferred for function names, variables, arguments, etc. For configuration variables that are user accessible via CLI or similar, all_lowercase with underscore is preferred. Variable names should be nouns. Simple temporary variables with a very small scope may be short where it aligns with common practice. Such as &quot;i&quot; as a temporary counter in a for loop, like for (int i = 0; i &lt; 4; i++). Using &quot;temporaryCounter&quot; in that case would not improve readability. "},{"title":"Declarations​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#declarations","content":"Avoid global variables. Variables should be declared at the top of the smallest scope where the variable is used. Variable re-use should be avoided - use distinct variabes when their use is unrelated. One blank line should follow the declaration(s). Hint: Sometimes you can create a block, i.e. add curly braces, to reduce the scope further. For example to limit variable scope to a single case branch. Variables with limited use may be declared at the point of first use. It makes PR-review easier (but that point is lost if the variable is used everywhere anyway). "},{"title":"Initialisation​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#initialisation","content":"The pattern with &quot;lazy initialisation&quot; may be advantageous in the Configurator to speed up the start when the initialisation is &quot;expensive&quot; in some way. In the FC, however, it’s always better to use some milliseconds extra before take-off than to use them while flying. So don't use &quot;lazy initialisation&quot;. An explicit &quot;init&quot; function, is preferred. "},{"title":"Data types​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#data-types","content":"Be aware of the data types you use and do not trust implicit type casting to be correct. Angles are sometimes represented as degrees in a float. Sometimes as decidegrees in a uint8_t. You have been warned. Avoid implicit double conversions and only use float-argument functions. Check .map file to make sure no conversions sneak in, and use -Wdouble-promotion warning for the compiler Instead of sin() and cos(), use sin_approx() and cos_approx() from common/math.h. Float constants should be defined with &quot;f&quot; suffix, like 1.0f and 3.1415926f, otherwise double conversion might occur. Functions "},{"title":"Naming​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#naming-1","content":"Methods that return a boolean should be named as a question, and should not change any state. e.g. 'isOkToArm()'. Methods should have verb or verb-phrase names, like deletePage or save. Tell the system to 'do' something 'with' something. e.g. deleteAllPages(pageList). Non-static functions should be prefixed by their class. Eg baroUpdate and not updateCompass . Groups of functions acting on an 'object' should share the same prefix, e.g. float biQuadFilterApply(...); void biQuadFilterInit(...); boolean biQuadIsReady();  rather than float applyBiQuadFilter(...); void newBiQuadLpf(...); boolean isBiQuadReady();  "},{"title":"Parameter order​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#parameter-order","content":"Data should move from right to left, as in memcpy(void *dst, const void *src, size_t size). This also mimics the assignment operator (e.g. dst = src;) When a group of functions act on an 'object' then that object should be the first parameter for all the functions, e.g.: float biQuadFilterApply(biquad_t *state, float sample); void biQuadNewLpf(biquad_t *state, float filterCutFreq, uint32_t refreshRate);  rather than float biQuadFilterApply(float sample, biquad_t *state); void biQuadNewLpf(float filterCutFreq, biquad_t *state, uint32_t refreshRate);  "},{"title":"Declarations​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#declarations-1","content":"Functions not used outside their containing .c file should be declared static (or STATIC_UNIT_TESTED so they can be used in unit tests). Non-static functions should have their declaration in a single .h file. Don't make more than necessary visible for other modules, not even types. Pre-processor macros may be used to declare module internal things that must be shared with the modules test code but otherwise hidden. In the .h file: #ifdef MODULENAME_INTERNALS_ … declarations … #endif  In the module .c file, and in the test file but nowhere else, put #define MODULENAME_INTERNALS_ just before including the .h file. Note: You can get the same effect by putting the internals in a separate .h file. "},{"title":"Implementation​","type":1,"pageTitle":"General","url":"/betaflight.com/docs/development/development/CodingStyle#implementation","content":"Keep functions short and distinctive. Think about unit test when you define your functions. Ideally you should implement the test cases before implementing the function. Never put multiple statements on a single line. Never put multiple assignments on a single line. Never put multiple assignments in a single statement. Defining constants using pre-processor macros is not preferred. Const-correctness should be enforced. This allows some errors to be picked up at compile time (for example getting the order of the parameters wrong in a call to memcpy). A function should only read data from the HW once in each call, and preferably all at one place. For example, if gyro angle or time is needed multiple times, read once and store in a local variable. Use for loops (rather than do or while loops) for iteration. The use of continue or goto should be avoided. Same for multiple return from a function and multiple break inside a case. In general, they reduce readability and maintainability. In rare cases such constructs can be justified but only when you have considered and understood the alternatives and still have a strong reason. In expressions, parentheses should only be used where they are required, i.e. where operator precedence will not evaluate in the right order, or where a compiler warning is triggered without parentheses. This brings all expressions into a canonical form, and avoids the problem of different developers having different ideas of what 'easy to read' expressions are. One exception to this rule is the ternary conditional operator pidStabilisationEnabled = (pidControllerState == PID_STABILISATION_ON) ? true : false  Here, the condition shall be enclosed in braces, to make the ternary operator easier to spot when reading left to right. Includes All files must include their own dependencies and not rely on includes from the included files or that some other file was included first. Do not include things you are not using. #pragma once (see wiki) is preferred over #include guards to avoid multiple includes. Documentation comments All new code files, structs, enums, and functions should include a comment at its top describing its purpose. All PRs that modify existing items should add a comment if not already present, and update it if applicable due to changes made by the PR. These comments may be ommitted if the item is trivial or self-explanatory. Example file-level comment: /* This file contains code used to send DSHOT commands using the STM timer's burst DMA functionality. * It uses DMA to alter timer PWM duty cycle. For an alternative approach, see `drivers/dshot_bitbang.c` for a DSHOT implementation that uses GPIO bitbanging. */  Example enum-level comment: /* * Describes allocation of ELRS telemetry packets, and is associated with time between telemetry * packet transmission. * See [ELRS: Telemetry Bandwidth](https://www.expresslrs.org/1.0/info/telem-bandwidth/) for more information. */ typedef enum { TLM_RATIO_NO_TLM = 0, // ..  Other details No trailing whitespace at the end of lines or at blank lines. Stay within 120 columns, unless exceeding 120 columns significantly increases readability and does not hide information. (Less is acceptable. More than 140 makes it difficult to read on Github so that shall never be exceeded.) Take maximum possible advantage of compile time checking, so generally warnings should be as strict as possible. Don't call or reference &quot;upwards&quot;. That is don't call or use anything in a software layer that is above the current layer. The software layers are not that obvious in Betaflight, but we can certainly say that device drivers are the bottom layer and so should not call or use anything outside the device drivers. Target specific code (e.g. #ifdef CC3D) is not permissible outside of the src/main/target directory. typedef void handlerFunc(void); is easier to read than typedef void (*handlerFuncPtr)(void);. Code should be spherical. That is its surface area (public interfaces) relative to its functionality should be minimised. Which is another way of saying that the public interfaces shall be easy to use, do something essential and all implementation should be hidden and unimportant to the user Code should work in theory as well as in practice. It should be based on sound mathematical, physical or computer science principles rather than just heuristics. This is important for test code too. Tests shall be based on such principles and real-world properties so they don't just test the current implementation as it happens to be. Guidelines not tramlines: guidelines are not totally rigid - they can be broken when there is good reason. "},{"title":"What is DSHOT?","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Dshot","content":"","keywords":""},{"title":"What is the difference to current protocols?​","type":1,"pageTitle":"What is DSHOT?","url":"/betaflight.com/docs/development/development/Dshot#what-is-the-difference-to-current-protocols","content":"Non-digital PWM protocols, such as Multishot, Oneshot42, Oneshot125 etc., simply rely on the width of the pulse to indicate throttle position. This has a number of significant drawbacks. In those analogue protocols subtle timing variations are a phenomenon we all know as jitter. This is where the signal jumps around the desired point. The shorter the pulse width the higher the likelihood and impact of this jitter. We have all seen an example of jitter in the receiver tab of the respective xFlight configurators. Variations in the pulse width also result in an unknown zero throttle, and an unknown maximum throttle. It is this reason that calibration of ESCs is required when using PWM. Pretty much all digital communications use timing and voltage levels against some form of reference (usually a ground) to indicate bit values. Serial (e.g. RS232, RS485 etc) uses the high (voltage &gt; reference) to indicate a bit value of 1, and a low (voltage closely approximating reference or &lt; reference) to represent a bit value of 0. In the case of serial each end of the communication needs to know the timing to utilise as consecutive bits in a 1 state are merely continuously highs (no pulses). The baud rate is therefore critical. In the case of DSHOT the timing is less critical. The reason for this is that the pulse width (duration) as a proportion of the total period denotes the bit value. This is very similar to the way in which WS2811/2 LED Strips work. In fact aside from the different timings, it would be pretty much identical. "},{"title":"What is in a name?​","type":1,"pageTitle":"What is DSHOT?","url":"/betaflight.com/docs/development/development/Dshot#what-is-in-a-name","content":"For DSHOT600 the 600 signifies the bit-rate (in kilo-bits), so it can send 600 kilo-bits per second). For DSHOT300, and DSHOT150 it is essentially the same, but the bit-rate is slowed, for 300 (300 kilo-bits per second) it is 2x slower, for 150 (150 kilo-bits per second) it is 4 times slower. This means the timing above is simply x2 for 300, and x4 for 150. DSHOT300 and DSHOT150 were introduced to ensure that support for older less capable ESCs exists so flyers can get the benefit of digital accuracy. DSHOT bucks the trend, the higher number is faster than the lower numbers. The oneshot protocols (including Multishot) have used increasingly lower numbers to signify faster speeds. "},{"title":"What are the technical details?​","type":1,"pageTitle":"What is DSHOT?","url":"/betaflight.com/docs/development/development/Dshot#what-are-the-technical-details","content":"For DSHOT600 the timing output is as follows: "},{"title":"dshot-sequence​","type":1,"pageTitle":"What is DSHOT?","url":"/betaflight.com/docs/development/development/Dshot#dshot-sequence","content":"Bit length (total timing period) is 1.67 microseconds (T0H + T0L or T1H + T1L). For a bit to be 0, the pulse width is 625 nanoseconds (T0H – time the pulse is high for a bit value of ZERO) For a bit to be 1, the pulse width is 1250 nanoseconds (T1H – time the pulse is high for a bit value of ONE) The reason for the difference in pulse length for bit 0 and bit 1 values is that it allows for considerable tolerance in determining the value. So these timings can be off slightly and the result will still be the same. As with any protocol there needs to be a communication stream of bits, that will be interpreted for some outcome to occur. For the case of DSHOT the signal for a motor update consists of 16 bits (a frame). The first 11 bits are the actual throttle value. The next bit is to signal the ESC to provide a telemetry update (using a separate return channel), and the remaining 4 bits are a checksum. "},{"title":"dshot-output​","type":1,"pageTitle":"What is DSHOT?","url":"/betaflight.com/docs/development/development/Dshot#dshot-output","content":"The throttle value with 11 bits gives a resolution of 2048. It has been suggested the first values be reserved (possibly for startup tones or commands), so 0 means disarmed. So if 1 to 47 are reserved, and then 48-2047 is the throttle position – giving 2000 steps of resolution. In the throttle value portion of the frame the most significant bits are first, so the first bit having a value of 1 means the throttle is at least half way, i.e. 1024, the second bit represents 512, the third 256 and so on until bit 11 represents the value of 1. So the bit sequence 11111111111 represents full throttle, and 10000000000 represents half throttle. The following image is a capture of DSHOT600 in action on a BluejayF4: "},{"title":"dshot-capture​","type":1,"pageTitle":"What is DSHOT?","url":"/betaflight.com/docs/development/development/Dshot#dshot-capture","content":"There is normally a pause between frames of at least 2 microseconds to indicate a frame reset. A reset simply indicates the end of one frame and thus any future bits are the start of a new frame. With DSHOT occurring at the end of a PID loop this pause is actually considerably longer. If DSHOT were to be made to continuously output a signal then this delay would be required. "},{"title":"Is it the most efficient?​","type":1,"pageTitle":"What is DSHOT?","url":"/betaflight.com/docs/development/development/Dshot#is-it-the-most-efficient","content":"It should of course be noted that DSHOT is not the absolute most efficient protocol for representing bit values in a serial stream, but the reason for the approach taken rather than other options is to ensure accuracy in the very noisy environment found on a multi-rotor. That said it is certainly no slouch. It takes it to the current crop, with DSHOT600 being a mere 1 microsecond slower than Multishot at full throttle. Even DSHOT150 is on a par with Oneshot42. The following graph represents the full throttle timing of the current protocols: DSHOT has no real concept of minimum and maximum durations for timing, it is a digital protocol afterall. A disarmed throttle value of 0 takes the same amount of time to communicate as a full throttle value. "},{"title":"Will my ESCs or flight controller be supported?​","type":1,"pageTitle":"What is DSHOT?","url":"/betaflight.com/docs/development/development/Dshot#will-my-escs-or-flight-controller-be-supported","content":"Work is being done in KISS firmware and in Betaflight to support this new protocol, and so far testing is looking very promising. It is unlikely that F1 processors (Naze, CC3D etc) will be able to support it, due to the direct memory access requirements of the hardware. Those processors just don’t have enough DMA channels available. F3, F4 and F7 all have more than enough. However inside those processors certain mappings exist – between timers, DMA and the actual pins – and so it is possible we will find a target where you won’t be able to simply use motor outputs 1 to 4, but may have to move to motors 1, 2, 4 and 5 (as an example). Resource remapping in Betaflight 3.1 when released will make this task nice and easy (aside from any soldering if needed). For ESCs the hardware requirements will mean BLHeli_s or better. There are also ARM based ESCs, such as KISS 24A RACE, that will support DSHOT or are able to be upgraded to support it. Unfortunately the old ATMEL and slower SILABs based ESCs are unlikely to ever have the power nor timing hardware needed to support DSHOT. Either way it will mean a firmware upgrade, and in some cases this will mean soldering if the ESC does not have a boot loader that allows simplified firmware updates. "},{"title":"Ok – so what are the benefits?​","type":1,"pageTitle":"What is DSHOT?","url":"/betaflight.com/docs/development/development/Dshot#ok--so-what-are-the-benefits","content":"The key benefit to digital is there is absolutely no increase in value through repeating the same information, more than once. Digital is simply accurate. There is no jitter (variations in throttle value created due to timing). If the signal is corrupted the ESC can detect it through the checksum. Many will have found motor updates of 32khz appear smoother. This is most likely to do with the repeating signal being “averaged” out effectively and thus effectively filtering (smoothing) the jitter. DSHOT eliminates this PWM jitter, and therefore motor updates need not occur anymore frequently than a motor can actually physically adjust – and make no mistake there is a physical limit as to how quick a motor can change its speed. Another benefit is of course, no calibration required. In the digital world a zero is just that, a zero. So really now it is just a case of rest in peace PWM, for we have a new friend, and that friend goes by the name of DSHOT! "},{"title":"Joe Lucid took it further and introduced bidirectional Dshot​","type":1,"pageTitle":"What is DSHOT?","url":"/betaflight.com/docs/development/development/Dshot#joe-lucid-took-it-further-and-introduced-bidirectional-dshot","content":"Dshot bidir uses inverted signal levels (idle is 1). FC to ESC uses dshot frames but the lowest 4 bits hold the complement of the other nibbles xor'd together (normal dshot does not complement the xor sum). The ESC detects based on the inversion that telemetry packets have to be sent. 30us after receiving the dshot frame the esc responds with a telemetry frame. Logically the telemetry frame is a 16 bit value and the lowest 4 bits hold the complemented xor'd nibbles again. The upper 12 bit contain the eperiod (1/erps) in the following bitwise encoding: e e e m m m m m m m m m The 9 bit value M needs to shifted left E times to get the period in micro seconds. This gives a range of 1 us to 65408 us. Which translates to a min e-frequency of 15.29 hz or for 14 pole motors 3.82 hz. This 16 bit value is then GCR encoded to a 20 bit value by applying the following map nibble-wise: 0 -&gt; 19 1 -&gt; 1b 2 -&gt; 12 3 -&gt; 13 4 -&gt; 1d 5 -&gt; 15 6 -&gt; 16 7 -&gt; 17 8 -&gt; 1a 9 -&gt; 09 a -&gt; 0a b -&gt; 0b c -&gt; 1e d -&gt; 0d e -&gt; 0e f -&gt; 0f  This creates a 20 bit value which has no more than two consecutive zeros. This value is mapped to a new 21 bit value by starting with a bit value of 0 and changing the bit value in the next bit if the current bit in the incoming value is a 1, but repeating the previous bit value otherwise. Example: 1 0 1 1 1 0 0 1 1 0 would become 0 1 1 0 1 0 0 0 1 0 0. This 21 bit value is then sent uninverted at a bitrate of 5/4 * the dshot bitrate. So Dshot 3 uses 375 kbit, dshot 600 uses 750 kbit. The esc needs to be ready after 40us + one dshot frame length to receive the next dshot packet. See https://en.wikipedia.org/wiki/Run-length_limited#GCR:_(0,2)_RLL for more details on the GCR encoding. See https://github.com/betaflight/betaflight/pull/8554 "},{"title":"Flight-Controller-Design","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Flight-Controller-Design","content":"","keywords":""},{"title":"Preliminary Storage for Flight Controller Design Resources​","type":1,"pageTitle":"Flight-Controller-Design","url":"/betaflight.com/docs/development/development/Flight-Controller-Design#preliminary-storage-for-flight-controller-design-resources","content":" "},{"title":"Open Source Designs​","type":1,"pageTitle":"Flight-Controller-Design","url":"/betaflight.com/docs/development/development/Flight-Controller-Design#open-source-designs","content":"FENIX F405​ https://easyeda.com/jyesmith/fenix-f405 ModdQuad F7​ https://www.moddquad.com/p/fc.html AlienFlight​ https://alienflight.com AlienFightNG​ https://www.alienflightng.com OpenPilot Revo​ Fury F3, F4 and F7 by kc10kevin​ https://www.rcgroups.com/forums/showthread.php?2628430-Kopter-Kontrol-Next-Generation-New-F3-and-F4-Flight-Controllers AnyFC Series by sambas​ https://github.com/sambas/hw FF4Nano by nppc​ https://github.com/nppc/FF4Nano tinyFish FC by fishpepper​ https://fishpepper.de/projects/tinyfish/ AlienWhoopF7 by brucesdad13​ https://github.com/brucesdad13/AlienWhoopF7 OpenFC Project by DroneMesh​ http://dronemeshforum.com/viewforum.php?f=33&amp;sid=c2c2708fe551f2214d6d2290c62a3e91  "},{"title":"MCU data sheet and reference manuals​","type":1,"pageTitle":"Flight-Controller-Design","url":"/betaflight.com/docs/development/development/Flight-Controller-Design#mcu-data-sheet-and-reference-manuals","content":"STM32F303CC​ https://www.st.com/resource/en/datasheet/stm32f303cc.pdfhttps://www.st.com/resource/en/reference_manual/dm00043574.pdf STM32F405RG​ https://www.st.com/resource/en/datasheet/stm32f405rg.pdfhttps://www.st.com/resource/en/reference_manual/dm00031020.pdf STM32F411CE​ https://www.st.com/resource/en/datasheet/stm32f411ce.pdfhttps://www.st.com/resource/en/reference_manual/dm00119316.pdf STM32F722RE​ https://www.st.com/resource/en/datasheet/stm32f722ic.pdfhttps://www.st.com/resource/en/reference_manual/dm00083560.pdf STM32F745​ https://www.st.com/resource/en/datasheet/DM00166116.pdfhttps://www.st.com/resource/en/reference_manual/dm00124865.pdf STM32H743/H750​ https://www.st.com/resource/en/datasheet/stm32h743bi.pdfhttps://www.st.com/resource/en/datasheet/stm32h750ib.pdfhttps://www.stmicroelectronics.com.cn/resource/en/reference_manual/dm00314099.pdf "},{"title":"Hardware debugging","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Hardware Debugging","content":"","keywords":""},{"title":"Hardware​","type":1,"pageTitle":"Hardware debugging","url":"/betaflight.com/docs/development/development/Hardware Debugging#hardware","content":"Various debugging hardware solutions exist, the Segger J-Link clones are cheap and are known to work on Windows with both the Naze and Olimexino platforms. "},{"title":"J-Link devices​","type":1,"pageTitle":"Hardware debugging","url":"/betaflight.com/docs/development/development/Hardware Debugging#j-link-devices","content":"Segger make excellent debuggers and debug software. The Segger J-Link GDB server can be obtained from here. http://www.segger.com/jlink-software.html Segger J-Link EDU EDU version, for hobbyists and educational use.​  https://www.segger.com/j-link-edu.html USB-MiniJTAG J-Link JTAG/SWD Debugger/Emulator​ http://www.hotmcu.com/usbminijtag-jlink-jtagswd-debuggeremula%E2%80%8Btor-p-29.html?cPath=3_25&amp;zenid=fdefvpnod186umrhsek225dc10  ARM-JTAG-20-10 adapter​ https://www.olimex.com/Products/ARM/JTAG/ARM-JTAG-20-10/http://uk.farnell.com/jsp/search/productdetail.jsp?sku=2144328  CJMCU-STM32 Singlechip Development Board Jlink Downloader Jlink ARM Programmer​   http://www.goodluckbuy.com/cjmcu-stm32-singlechip-development-board-jlink-downloader-jlink-arm-programmer.html "},{"title":"STLink V2 devices​","type":1,"pageTitle":"Hardware debugging","url":"/betaflight.com/docs/development/development/Hardware Debugging#stlink-v2-devices","content":"STLink V2 devices can be used too, via OpenOCD. CEPark STLink V2​  http://www.goodluckbuy.com/cepark-stlink-st-link-v2-emulator-programmer-stm8-stm32-downloader.html "},{"title":"Compilation options​","type":1,"pageTitle":"Hardware debugging","url":"/betaflight.com/docs/development/development/Hardware Debugging#compilation-options","content":"use DEBUG=GDB make argument. You may find that if you compile all the files with debug information on that the program is too big to fit on the target device. If this happens you have some options: Compile all files without debug information (make clean, make ...), then re-save or touch the files you want to be able to step though and then run make DEBUG=GDB. This will then re-compile the files you're interested in debugging with debugging symbols and you will get a smaller binary file which should then fit on the device.You could use a development board such as an PORT103R, development boards often have more flash rom. "},{"title":"OSX​","type":1,"pageTitle":"Hardware debugging","url":"/betaflight.com/docs/development/development/Hardware Debugging#osx","content":""},{"title":"Install OpenOCD via Brew​","type":1,"pageTitle":"Hardware debugging","url":"/betaflight.com/docs/development/development/Hardware Debugging#install-openocd-via-brew","content":"ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot; brew install openocd "},{"title":"GDB debug server​","type":1,"pageTitle":"Hardware debugging","url":"/betaflight.com/docs/development/development/Hardware Debugging#gdb-debug-server","content":"J-Link​ Windows​ Run the Launch the J-Link GDB Server program and configure using UI. OpenOCD​ Windows​ STM32F103 targets &quot;C:\\Program Files (x86)\\UTILS\\openocd-0.8.0\\bin-x64\\openocd-x64-0.8.0.exe&quot; -f interface/stlink-v2.cfg -f target/stm32f1x_stlink.cfg  STM32F30x targets &quot;C:\\Program Files (x86)\\UTILS\\openocd-0.8.0\\bin-x64\\openocd-x64-0.8.0.exe&quot; -f scripts\\board\\stm32f3discovery.cfg  OSX/Linux​ STM32F30x targets  openocd -f /usr/share/openocd/scripts/board/stm32vldiscovery.cfg  "},{"title":"Hardware Debugging In Eclipse","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Hardware Debugging in Eclipse","content":"Hardware Debugging In Eclipse Build a binary with debugging information using command line or via Eclipse make target. Example Eclipse make target GDB and OpenOCD start openocd Create a new debug configuration in eclipse : you can control openocd with a telnet connection: telnet localhost 4444 stop the board, flash the firmware, restart: reset halt wait_halt sleep 100 poll flash probe 0 flash write_image erase /home/user/git/cleanflight/obj/cleanflight_NAZE.hex 0x08000000 sleep 200 soft_reset_halt wait_halt poll reset halt A this point you can launch the debug in Eclispe. GDB and J Link Here are some screenshots showing Hydra's configuration of Eclipse (Kepler) If you use cygwin to build the binaries then be sure to have configured your common Source Lookup Path, Path Mappings first, like this: Create a new GDB Hardware Debugging launch configuration from the Run menu It's important to have build the executable compiled with GDB debugging information first. Select the appropriate .elf file (not hex file) - In these examples the target platform is an OLIMEXINO. DISABLE auto-build Choose the appropriate gdb executable - ideally from the same toolchain that you use to build the executable. Configure Startup as follows Initialization commands target remote localhost:2331 monitor interface SWD monitor speed 2000 monitor flash device = STM32F103RB monitor flash download = 1 monitor flash breakpoints = 1 monitor endian little monitor reset It may be useful to specify run commands too: monitor reg r13 = (0x00000000) monitor reg pc = (0x00000004) continue If you use cygwin an additional entry should be shown on the Source tab (not present in this screenshot) Nothing to change from the defaults on the Common tab Start up the J-Link server in USB mode If it connects to your target device it should look like this From Eclipse launch the application using the Run/Debug Configurations..., Eclipse should upload the compiled file to the target device which looks like this When it's running the J-Link server should look like this. Then finally you can use Eclipse debug features to inspect variables, memory, stacktrace, set breakpoints, step over code, etc. If Eclipse can't find your breakpoints and they are ignored then check your path mappings (if using cygwin) or use the other debugging launcher as follows. Note the 'Select other...' at the bottom of the configuration window.","keywords":""},{"title":"Known-Build-Environment-Problems","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Known-Build-Environment-Problems","content":"","keywords":""},{"title":"Cygwin on Windows​","type":1,"pageTitle":"Known-Build-Environment-Problems","url":"/betaflight.com/docs/development/development/Known-Build-Environment-Problems#cygwin-on-windows","content":""},{"title":"ccache​","type":1,"pageTitle":"Known-Build-Environment-Problems","url":"/betaflight.com/docs/development/development/Known-Build-Environment-Problems#ccache","content":"ccache 3.1.9 in Cygwin 2.874 is broken. Returns false cache hits. Do not install. Betaflight build system uses ccache if available. "},{"title":"clang​","type":1,"pageTitle":"Known-Build-Environment-Problems","url":"/betaflight.com/docs/development/development/Known-Build-Environment-Problems#clang","content":"Compiling the unittests using clang may fail on Cygwin. There is a version mismatch with Cygwin supplied &lt;sys/unistd.h&gt; and clang. Not easily fixed, needs a Cygwin patch. Do not run unittests on Cygwin. The error looks like this: /usr/include/sys/unistd.h:53:36: error: __block attribute not allowed, only allowed on local variables void _EXFUN(encrypt, (char *__block, int __edflag));  Using gcc works better with this particular problem, but fails in other places where clang is required. "},{"title":"GNU ARM Toolchain Version​","type":1,"pageTitle":"Known-Build-Environment-Problems","url":"/betaflight.com/docs/development/development/Known-Build-Environment-Problems#gnu-arm-toolchain-version","content":"Using the 4.8-2014-q2 version of the GNU ARM Toolchain with Windows/Cygwin (recommended on the Cleanflight &quot;Building in Windows.md&quot; page) lead to strange results. (When running a 2.9.1 version of Betaflight I built on NAZE the change-flight-mode beep would constantly sound when in Horizon mode.) Updating the toolchain to 4.9-2015-q3 and rebuilding fixed the issue (and also cleared some compiler warnings). BorisB mentions the toolchain version here. Update 2/2017: The Windows/Cygwin 'make' requests toolchain version 6.2.1, gcc-arm-none-eabi-6_2-2016q4-20161216-win32, available here: https://developer.arm.com/open-source/gnu-toolchain/gnu-rm "},{"title":"Running a 32-bit Tool chain on a 64-bit Linux system​","type":1,"pageTitle":"Known-Build-Environment-Problems","url":"/betaflight.com/docs/development/development/Known-Build-Environment-Problems#running-a-32-bit-tool-chain-on-a-64-bit-linux-system","content":"The arm-sdk installation done from the new &quot;make arm_sdk_install&quot; command will install a 32-bit variant of the tool chain. This may fail to execute on a 64-bit Linux system, bash will say &quot;No such file or directory&quot;, if no support for 32-bit 386 program are installed. To install this: $ sudo dpkg --add-architecture i386 $ sudo apt-get update $ sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386  "},{"title":"Linking Unit Tests may fail.​","type":1,"pageTitle":"Known-Build-Environment-Problems","url":"/betaflight.com/docs/development/development/Known-Build-Environment-Problems#linking-unit-tests-may-fail","content":"When trying to build and run the unittests on Linux or WSL, you may encounter this problem: linking ../../obj/test/alignsensor_unittest/alignsensor_unittest /usr/bin/ld: cannot find -lBlocksRuntime clang: error: linker command failed with exit code 1 (use -v to see invocation)  Problem is a missing library, install it this way: $ sudo apt-get install libblocksruntime-dev  "},{"title":"Compiling Unit Tests fails with errors​","type":1,"pageTitle":"Known-Build-Environment-Problems","url":"/betaflight.com/docs/development/development/Known-Build-Environment-Problems#compiling-unit-tests-fails-with-errors","content":"Betaflight has been updated to work with clang version 10 (12 on OS X) and will be the official supported (required) version from now on. The Makefile has been updated to be compatible with this version to run the tests successfully.make test depends on a specific clang compiler. The codebase and tools are updated to work with version 10 on Linux and version 12 on OS X. Ubuntu 20.04 LTS and Windows Subsystem for Linux should work with clang version 7, 8 or 10. OS X should support clang 7, 10 or 12. Install clang on Ubuntu (or Ubuntu using WSL) using: $ sudo apt update $ sudo apt install clang  "},{"title":"GLIBC issues on Alpine​","type":1,"pageTitle":"Known-Build-Environment-Problems","url":"/betaflight.com/docs/development/development/Known-Build-Environment-Problems#glibc-issues-on-alpine","content":"Please see: Apline wiki "},{"title":"How-to-debug-Betaflight-configurator-with-Visual-Studio-Code","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/How-to-debug-Betaflight-configurator-with-Visual-Studio-Code","content":"","keywords":""},{"title":"Debugging Configurator in VSCode on Windows​","type":1,"pageTitle":"How-to-debug-Betaflight-configurator-with-Visual-Studio-Code","url":"/betaflight.com/docs/development/development/How-to-debug-Betaflight-configurator-with-Visual-Studio-Code#debugging-configurator-in-vscode-on-windows","content":"In VSCode, create a launch.json file (in .vscode folder) with this configuration:  { &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;name&quot;: &quot;Launch Betaflight&quot;, &quot;type&quot;: &quot;nwjs&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;runtimeExecutable&quot;: &quot;${workspaceRoot}/debug/betaflight-configurator/win64/betaflight-configurator.exe&quot;, &quot;runtimeArgs&quot;: [ &quot;${workspaceRoot}&quot;, &quot;--remote-debugging-port=9222&quot; ], &quot;port&quot;: 9222, &quot;nwjsVersion&quot;: &quot;any&quot;, &quot;webRoot&quot;:&quot;${workspaceRoot}/src&quot;, &quot;preLaunchTask&quot;: &quot;build and copy package.json&quot;, &quot;postDebugTask&quot;: &quot;delete package.json&quot;, }, { &quot;type&quot;: &quot;nwjs&quot;, &quot;request&quot;: &quot;attach&quot;, &quot;name&quot;: &quot;Attach to Betaflight&quot;, &quot;port&quot;: 9222, &quot;webRoot&quot;:&quot;${workspaceRoot}/src/js&quot;, &quot;verbose&quot;:true, &quot;reloadAfterAttached&quot;: true } ] }   Create tasks.json file in .vscode folder with the following content:  { &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ { &quot;label&quot;: &quot;delete package.json&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;rm .\\\\src\\\\package.json&quot;, &quot;problemMatcher&quot;: [], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true }, &quot;presentation&quot;: { &quot;showReuseMessage&quot;: false } }, { &quot;label&quot;: &quot;build debug no start&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;yarn gulp debug-no-start; copy -Path package.json -Destination .\\\\src\\\\package.json -Force&quot;, &quot;problemMatcher&quot;: [], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true }, &quot;presentation&quot;: { &quot;showReuseMessage&quot;: false } }, { &quot;label&quot;: &quot;copy package.json&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;copy -Path package.json -Destination .\\\\src\\\\package.json -Force&quot;, &quot;problemMatcher&quot;: [], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true }, &quot;presentation&quot;: { &quot;showReuseMessage&quot;: false } }, { &quot;label&quot;: &quot;build and copy package.json&quot;, &quot;dependsOn&quot;: [ &quot;build debug no start&quot;, &quot;copy package.json&quot; ], &quot;presentation&quot;: { &quot;showReuseMessage&quot;: false } } ] }   Press F5 in Visual Studio Code, enjoy debugging right in your code. Files needs a little adjustment "},{"title":"Debugging Configurator in VSCode on Linux​","type":1,"pageTitle":"How-to-debug-Betaflight-configurator-with-Visual-Studio-Code","url":"/betaflight.com/docs/development/development/How-to-debug-Betaflight-configurator-with-Visual-Studio-Code#debugging-configurator-in-vscode-on-linux","content":"In VSCode be sure to install Debugger for NWjsIn your project create in the .vscode folder launch.json and tasks.json Contents of launch.json { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 &quot;version&quot;: &quot;0.2.0&quot;, &quot;configurations&quot;: [ { &quot;name&quot;: &quot;Launch Betaflight&quot;, &quot;type&quot;: &quot;nwjs&quot;, &quot;request&quot;: &quot;launch&quot;, &quot;runtimeExecutable&quot;: &quot;${workspaceRoot}/debug/betaflight-configurator/linux64/betaflight-configurator&quot;, &quot;runtimeArgs&quot;: [ &quot;${workspaceRoot}&quot;, &quot;--remote-debugging-port=9222&quot; ], &quot;port&quot;: 9222, &quot;nwjsVersion&quot;: &quot;any&quot;, &quot;webRoot&quot;: &quot;${workspaceRoot}/src&quot;, &quot;preLaunchTask&quot;: &quot;build and copy package.json&quot;, &quot;postDebugTask&quot;: &quot;delete package.json&quot;, }, { &quot;type&quot;: &quot;nwjs&quot;, &quot;request&quot;: &quot;attach&quot;, &quot;name&quot;: &quot;Attach to Betaflight&quot;, &quot;port&quot;: 9222, &quot;webRoot&quot;: &quot;${workspaceRoot}/src/js&quot;, &quot;verbose&quot;: true, &quot;reloadAfterAttached&quot;: true } ] }  Contents of tasks.json { &quot;version&quot;: &quot;2.0.0&quot;, &quot;tasks&quot;: [ { &quot;label&quot;: &quot;delete package.json&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;rm ./src/package.json&quot;, &quot;problemMatcher&quot;: [], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true }, &quot;presentation&quot;: { &quot;showReuseMessage&quot;: false } }, { &quot;label&quot;: &quot;build debug no start&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;yarn gulp debug-no-start; cp package.json ./src/package.json&quot;, &quot;problemMatcher&quot;: [], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true }, &quot;presentation&quot;: { &quot;showReuseMessage&quot;: false } }, { &quot;label&quot;: &quot;copy package.json&quot;, &quot;type&quot;: &quot;shell&quot;, &quot;command&quot;: &quot;cp package.json ./src/package.json&quot;, &quot;problemMatcher&quot;: [], &quot;group&quot;: { &quot;kind&quot;: &quot;build&quot;, &quot;isDefault&quot;: true }, &quot;presentation&quot;: { &quot;showReuseMessage&quot;: false } }, { &quot;label&quot;: &quot;build and copy package.json&quot;, &quot;dependsOn&quot;: [ &quot;build debug no start&quot;, &quot;copy package.json&quot; ], &quot;presentation&quot;: { &quot;showReuseMessage&quot;: false } } ] }  "},{"title":"Parameter Group IDs","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Parameter-Group-IDs","content":"Parameter Group IDs For the latest information about parameter groups see https://github.com/betaflight/betaflight/blob/master/src/main/pg/pg_ids.h","keywords":""},{"title":"Parameter Groups","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/ParameterGroups","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"Parameter Groups","url":"/betaflight.com/docs/development/development/ParameterGroups#introduction","content":"'Parameter Groups' is the name of the pattern that is used in Betaflight to store (and at a later point transfer) firmware configuration data. With parameter groups, parameters are combined in logical groups (e.g. all the parameters for one particular device / feature go into one parameter group). These groups are modelled as data structures in the firmware. "},{"title":"Rules​","type":1,"pageTitle":"Parameter Groups","url":"/betaflight.com/docs/development/development/ParameterGroups#rules","content":"The following rules have to be taken into consideration when dealing with parameter groups in code: Each feature or group of related features, hardware driver or group of related hardware drivers should use a parameter group of its own;A parameter group of any given ID and version shall be identical across all targets and build configurations - this means that nothing that is contained in a parameter group directly or indirectly can be conditional. The finest granularity for parameters to be available on a given target is by having or not having support for a given parameter group;The only exception to 2. are parameter group arrays. For parameter group arrays, it is permissible to have the length of the array defined conditionally. Because the length of the struct defining the array elements is fixed for any given version, and the overall size of the array is stored with the array, the length of the array can be calculated when reading it. This consideration only applies to parameter group arrays declared with PG_DECLARE_ARRAY, and the length supplied in the declaration. For the length of any arrays inside a parameter group struct (directly or nested), 2. applies;As a consequence of 1. and 2., all of the parameters required for the configuration of the feature or driver should be contained within this parameter group. If a parameter is required by more than one feature or driver, it shall be moved 'upwards' into a generic parameter group that all the features or drivers requiring the parameter depend upon - if necessary such a parameter group has to be created;New parameters should always be appended at the end of the parameter group. If this is the only change to the parameter group, there are no further changes required. Previously stored versions of the data in this parameter group can still be read. New elements will be initialised to 0 in this case. If 0 is an invalid value for a new parameter, this has to be treated as described in 6., in order to ensure the parameter is initialised to a valid value. If the parameter group that the new parameter is appended to is a parameter group array declared with PG_DECLARE_ARRAY, then the version of the parameter group has to be incremented as described in 6. as well, in order get the change in the struct properly handled;Any changes to a parameter group that are not covered in 5. (e.g. removing elements, changing the type of elements), the version of the parameter group (as defined in PG_REGISTER...) has to be incremented in order to make the code handling parameter groups aware that the format of the parameter group has changed and previously stored versions of it are now invalid;All changes to parameter group arrays (declared with PG_DECLARE_ARRAY()) or arrays contained within the struct of a parameter group require that the version of the parameter group (as defined in PG_REGISTER.. has to be incremented as well, and the same considerations as for 6. apply;When creating a new parameter group, the PG_DECLARE() / PG_DECLARE_ARRAY() shall be placed right after the definition of the struct used as the type of the parameter group in the code. This serves the purpose of making it easy for developers to determine when a struct they are working on is used in a parameter group and subject to these rules;Any struct that is used as an element in a struct that is used in a parameter group (directly or indirectly) is subject to constraints 6. and 7. above. In order to make it possible for developers to determine that this is the case, a comment // Used in parameter group &lt;group name&gt; shall be added after the definition of the struct for every parameter group that the struct is used in. "},{"title":"Signal-Flow-Diagram","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Signal-Flow-Diagram","content":"Signal-Flow-Diagram &lt;a target=&quot;_blank&quot; rel=&quot;noopener noreferrer&quot; href=&quot;https://raw.githubusercontent.com/mrRobot62/betaflight_processing/master/bf-4.2_processing-workflow.svg&quot;&gt; &lt;img src=&quot;https://github.com/mrRobot62/betaflight_processing/raw/master/bf-4.2_processing-workflow.svg&quot; alt=&quot;BF 4.2 latest graph version&quot; style=&quot;max-width:100%;&quot; /&gt; &lt;/a&gt; Source: [https://github.com/mrRobot62/betaflight_processing]","keywords":""},{"title":"SWD-debug-port-connection-conflicts.","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/SWD-debug-port-connection-conflicts.","content":"SWD-debug-port-connection-conflicts. When debugging via J-link and GDB there may be a problem with the SWD port I/O pins being shared with other functions. This may block the J-link SWD connection and result in error messages like: WARNING: RESET (pin 15) high, but should be low. Please check target hardware On SMT32F303 UART2 TX is shared with SWDCLK on PA14. Enabling any function on UART2 will block SWD. Problem seen with SPRACINGF3 when using UART2 for Tramp VTX control. Disabling UART2 solved the problem.On STM32F405 the SWDIO and SWDCLK are not shared and I have not seen any problems like above.The MatekF722-SE uses PA14/PA15 for the LEDS, but if the LEDs are removed this at least gives pads to solder to as shown below in which a JST-SH 4 pin connector is used for SWDIO, SWDCK, 3V3 and GND.","keywords":""},{"title":"PID Internals","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/PID Internals","content":"","keywords":""},{"title":"IO variables​","type":1,"pageTitle":"PID Internals","url":"/betaflight.com/docs/development/development/PID Internals#io-variables","content":"gyroADC/8192*2000 = deg/s gyroADC/4 ~ deg/s rcCommand - &lt;-500 - 500&gt; nominal, but is scaled with rcRate/100, max +-1250 inclination - in 0.1 degree, roll and pitch deviation from horizontal positionmax_angle_inclination - in 0.1 degree, default 50 degrees (500) axisPID - output to mixer, will be added to throttle(&lt;1000-2000&gt;), output range is &lt;minthrottle, maxthrottle&gt; (default &lt;1150 - 1850&gt;) "},{"title":"PID controller 0, \"MultiWii\" (default)​","type":1,"pageTitle":"PID Internals","url":"/betaflight.com/docs/development/development/PID Internals#pid-controller-0-multiwii-default","content":"Leveling term​ error = constrain(2*rcCommand[axis], limit +- max_angle_inclination) - inclination[axis] Pacc = constrain(P8[PIDLEVEL]/100 * error, limit +- 5 * D8[PIDLEVEL]) Iacc = intergrate(error, limit +-10000) * I8[PIDLEVEL] / 4096  Gyro term​ Pgyro = rcCommand[axis]; error = rcCommand[axis] * 10 * 8 / pidProfile-&gt;P8[axis] - gyroADC[axis] / 4; (conversion so that error is in deg/s ?) Igyro = integrate(error, limit +-16000) / 10 / 8 * I8[axis] / 100 (conversion back to mixer units ?)  reset I term if axis rotation rate &gt; +-64deg/saxis is YAW and rcCommand&gt;+-100 Mode dependent mix(yaw is always from gyro)​ HORIZON - proportionally according to max deflection  deflection = MAX(ABS(rcCommand[PITCH]), ABS(rcCommand[ROLL])) / 500 ; limit to 0.0 .. 1.0 P = Pacc * (1-deflection) + Pgyro * deflection I = Iacc * (1-deflection) + Igyro * deflection  gyro  P = Pgyro I = Igyro  ANGLE  P = Pacc I = Iacc  Gyro stabilization​ P -= gyroADC[axis] / 4 * dynP8 / 10 / 8 D = -mean(diff(gyroADC[axis] / 4), over 3 samples) * 3 * dynD8 / 32 [equivalent to :] D = - (gyroADC[axis]/4 - (&lt;3 loops old&gt;gyroADC[axis]/4)) * dynD8 / 32  This can be seen as sum of PI controller (handles rcCommand, HORIZON/ANGLE); Igyro is only output based on gyroADCPD controller(parameters dynP8/dynD8) with zero setpoint acting on gyroADC "},{"title":"Test coverage analysis","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/TestCoverage","content":"Test coverage analysis There are a number of possibilities to analyse test coverage and produce various reports. There are guides available from many sources, a good overview and link collection to more info can be found on Wikipedia: https://en.wikipedia.org/wiki/Gcov A simple report for a single test can for example be made using this command: gcov -s src/main/sensors -o obj/test/ battery_unittest.cc To produce a coverage report in XML format usable by the Cobertura plugin in Jenkins requires installation of a Python script called &quot;gcovr&quot; from github: https://github.com/gcovr/gcovr/tree/dev Example usage in Jenkins: /gcovr-install-path/gcovr/scripts/gcovr obj/test --root=src/main -x &gt; coverage.xml There are many other ways to produce test coverage reports in other formats, like html etc.","keywords":""},{"title":"Travis","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/development/Travis","content":"","keywords":""},{"title":"Pushing builds to a remote server​","type":1,"pageTitle":"Travis","url":"/betaflight.com/docs/development/development/Travis#pushing-builds-to-a-remote-server","content":".travis.sh script can upload build artifacts to a remote server. This feature is controlled by thePUBLISH_URL environment variable. If set, the build script will use the cURL binary and simulate a file upload post to the configured server. Pleas check the notifications section in the .travis.yml file and adjust the irc notifications if you plan on using Travis on your Cleanflight fork "},{"title":"Display","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Display","content":"","keywords":""},{"title":"Supported Hardware​","type":1,"pageTitle":"Display","url":"/betaflight.com/docs/development/Display#supported-hardware","content":"At this time no other displays are supported other than the SSD1306 / UG-2864HSWEG01. "},{"title":"Configuration​","type":1,"pageTitle":"Display","url":"/betaflight.com/docs/development/Display#configuration","content":"From the CLI enable the DISPLAY feature feature DISPLAY  "},{"title":"SSD1306 OLED displays​","type":1,"pageTitle":"Display","url":"/betaflight.com/docs/development/Display#ssd1306-oled-displays","content":"The SSD1306 display is a 128x64 OLED display that is visible in full sunlight, small and consumes very little current. This makes it ideal for aircraft use. There are various models of SSD1306 boards out there, they are not all equal and some require addtional modifications before they work. Choose wisely! Links to displays: banggood.com 0.96 Inch 4Pin White IIC I2C OLED Display Module 12864 LED For Arduinobanggood.com 0.96 Inch 4Pin IIC I2C Blue OLED Display Module For Arduinowide.hk I2C 0.96&quot; OLED display modulewitespyquad.gostorego.com ReadyToFlyQuads 1&quot; OLED Displaymultiwiicopter.com PARIS 1&quot; OLED 128x64 PID tuning screen AIR The banggood.com display is the cheapest at the time fo writing and will correctly send I2C ACK signals. Crius CO-16​ This display is best avoided but will work if you modify it. Step 1 As supplied the I2C ack signal is not sent because the manufacturer did not bridge D1 and D2 together. To fix this solder the two pins together as they enter the screen. Failure to do this will result is a screen that doesn't display anything. Step 2 Pin 14 must be disconnected from the main board using a scalpel. Then connect a 10nF or 100nF capacitor between pins 30 and the lifted pin 14. Step 3 Connect a 100K resistor between Pin 9 and the lifted Pin 14. Failure to perform steps 2 and 3 will result in a display that only works on power up some of the time any may display random dots or other display corruption. More can be read about this procedure here: http://www.multiwii.com/forum/viewtopic.php?f=6&amp;t=2705&amp;start=10  "},{"title":"Connections​","type":1,"pageTitle":"Display","url":"/betaflight.com/docs/development/Display#connections","content":"Connect +5v, Ground, I2C SDA and I2C SCL from the flight controller to the display. On Naze32 rev 5 boards the SDA and SCL pads are underneath the board. "},{"title":"EXST bootloader","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/EXST-Bootloader","content":"","keywords":""},{"title":"EXST format​","type":1,"pageTitle":"EXST bootloader","url":"/betaflight.com/docs/development/EXST-Bootloader#exst-format","content":"The format for EXST targets is as follows: Firmware.Bootloader block. The bootloader block is 64 bytes. For example a 448K EXST .bin file is comprised as follows: Start Address\tEnd address\tUsage0x00000\t0x6FFBF\tFirmware section 0x6FFC0\t0x6FFFF\tBootloader block "},{"title":"EXST bootloader block​","type":1,"pageTitle":"EXST bootloader","url":"/betaflight.com/docs/development/EXST-Bootloader#exst-bootloader-block","content":"The bootloader block is comprised as follows: Start Address\tEnd address\tUsage0x00\t0x00\tBlock Format 0x01\t0x3F\tBlock Content Block Formats Value\tMeaning0x00\tBlock format 0x00 "},{"title":"Block Format 0x00 Content​","type":1,"pageTitle":"EXST bootloader","url":"/betaflight.com/docs/development/EXST-Bootloader#block-format-0x00-content","content":"Note: addresses relative to start of bootloader block Start Address\tEnd address\tUsage0x01\t0x01\tChecksum/Hash method 0x02\t0x2F\tReserved, fill with 0x00 0x30\t0x3F\tChecksum value, pad with trailing 0x00 Checksum Hash methods Value\tMeaning0x00\tNo checksum. 0x01\tMD5. Checksum locations: Start Address\tEnd address\tUsage0x30\t0x3F\tMD5 hash of firmware section The bootloader should make no attempt to use any reserved area otherwise this prevents it's future use by the firmware. The bootloader should ensure this block is in RAM when the firmware is loaded. i.e. copy the entire EXST image. As the reserved area is under control of the build system, not the bootloader, additional information can stored there for use by the firmware or future bootloaders. Extreme care must be taken not to break the bootloaders ability to load firmware. Consultation with the developers for any changes to this area is required. "},{"title":"Example possible future enhancements for the EXST bootloader block​","type":1,"pageTitle":"EXST bootloader","url":"/betaflight.com/docs/development/EXST-Bootloader#example-possible-future-enhancements-for-the-exst-bootloader-block","content":"Hardware layout identification - to allow the firmware to identify the hardware, such that IO pins and peripherals can be reserved/initialised.Alternative hashes/CRCs. "},{"title":"Failsafe","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Failsafe","content":"","keywords":""},{"title":"Flight controller failsafe system​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#flight-controller-failsafe-system","content":"This system continuously monitors the integrity of the radio link, and has two stages that apply sequentially after signal loss is confirmed. "},{"title":"Signal Loss​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#signal-loss","content":"Signal loss means: no incoming data packets, or failsafe mode or frame dropped packets for more than 100ms, orinvalid pulse length data on any flight channel for more than 300ms. Once signal loss is detected, the values on the bad channels, or on all channels for total packet loss, will be held at their last received value for 300ms from the last known good data, or until signal returns. RXLOSS should be displayed in the warnings field of the OSD 100ms after the last valid packet. This is an 'early warning' of significant packet loss - an indicator that the link is in a bad way. When failsafe is initiated by a failsafe switch that has been configured to to enter Stage 1, the flight channels (Roll, Pitch, Yaw and Throttle), but not the auxiliary channels, are immediately set to Stage 1 values, without any delay. "},{"title":"Stage 1 Failsafe​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#stage-1-failsafe","content":"Stage 1 applies fixed values after confirmed signal loss. The default Stage 1 duration is one second, with a minimum of 200ms. The timer for initiation of stage 1 is activated when 100ms has elapsed since the last good packet, or 300ms after any persistently bad flight channel, but it starts timing down to failsafe from the time of the last good packet. The Stage 1 duration may be customised via the &quot;Guard time for stage 2 activation&quot; parameter in Configurator (failsafe_delay in the CLI). It starts at the time of the last good packet. The units are tenths of a second. During Stage 1 failsafe, all stick positions are set to the fixed 'fallback' values as specified in the 'Channel fallback settings' panel in Configurator, after the 300ms 'hold last good values' period expires. When initiated by a switch, the aux channels remain active, and there is no hold period - the effect is immediate Default behaviour is to center the sticks, set throttle stick to zero (causing the motors to idle), and hold the existing switch positions. These values may be be customised in Configurator or with the CLI command rxfail (see rxfail section in rx documentation) or v. The pilot may choose to active Level mode, using an Aux channel, so that it becomes active soon as Stage 1 commences. The flight mode field in the OSD does not show failsafe with !FS! during stage 1, but RXLOSS will show in the warnings section after the 100ms basic signal validation period, to provide early warning of a bad link or impending failsafe. If signal returns during either the hold or Stage 1 period, control is immediately returned to the pilot, the failsafe system resets. RXLOSS should immediately disappear from the OSD. Note: the PID system remains active in Stage 1. Stage 1 can also be activated by a transmitter switch. The switch should be configured (using Modes) to enable failsafe, and the failsafe_switch_mode should be set to STAGE1. The switch emulates a signal loss, but there are some differences. The main difference is that channels go immediately to Stage 1 values without waiting for any hold or signal evaluation periods. While in Stage 1, returning the switch to the OFF position will restore normal control immediately, just like re-gaining signal during Stage 1. Note that if the switch is held ON for longer than the failsafe_delay period, the flight controller will enter Stage 2 (see below), and, depending on how Stage 2 is configured, may immediately drop and disarm, from which recovery will not be immediate. With switch-initiated failsafe, the auxiliary channels must remain responsive so that the pilot can exit failsafe with the switch Hence they are not set 'Channel fallback settings' to the Aux channels. This is different from a true 'signal lost' type failsafe, where the Aux channels are fixed, according to the Guard period settings. "},{"title":"Stage 2 Failsafe​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#stage-2-failsafe","content":"Stage 2 Failsafe is entered when your craft is armed and stage 1 persists longer then the configured Stage 1, or 'guard' time (failsafe_delay), or, by switch. During Stage 2, all channels will remain at the fallback settings, unless overruled by the chosen Stage 2 procedure (the settings of the failsafe_procedure). During Stage 2,!FS! will be shown in the Flight Mode field of the OSD. Entering Stage 2 is not possible until 5 seconds after the flight controller boots up. This is to prevent unwanted activation, as in the case of TX/RX gear with long bind procedures, before the RX sends out valid data. Stage 2 Failsafe can be activated directly, and immediately, with a transmitter failsafe switch where the switch behaviour is set to STAGE2 (failsafe_switch_mode in the CLI). Stage 2 will also be activated if the switch is set to Stage 1 and it is held for longer than the Stage 1 time (the Stage 2 'guard time'). When the flight contoller enters Stage 2, it implements one of three (actually, four) possible Stage 2 failsafe procedures:: Drop, the default, causing immediate disarm and motor stop.Landing Mode, where the sticks are centered, throttle is held at a defined value, and the aux channels are set as configured for Stage 1 (which could include configuring an aux channel to enable Level mode). These settings will apply for the Landing Time (failsafe_off_delay period), which defaults to 1 second, but can be longer. Landing mode can be hazardous, since the motors and PIDs are active, but you cannot control where the quad goes, and there is no way to make the motors stop if you crash. If the machine crashes and the props get stuck, they can burn out.GPS Rescue, where an appropriately configured machine will transfer stick and throttle control to the GPS controller, so that the quad should try to fly towards its starting point.Just Disarm, a 'fourth' internal mode, which applies if the throttle has been held low for at least 10 seconds before entering Stage 2 (unless the mode is set to GPS Return). This can sometimes cause confusion when testing failsafe - always test with throttle up at some point before the test. Its primary purpose is to force a disarm if the user powers down their radio after landing, but has forgotten to remove the lipo. This prevents the quad entering landing mode, for example, and spinning the props up by itself At the end of the stage 2 procedure, the flight controller will disarm. The word FAILSAFE will alternate with RXLOSS in the warnings field. Arming will be blocked until the signal from the receiver is restored for more than the failsafe_recovery_delay period. This period is the same regardless of the Stage 2 mode. Control will be returned to the pilot: in Landing mode, when the RC signal has recovered for longer than the failsafe_recovery_delay period, orin GPS Rescue mode, when the link has returned for failsafe_recovery_delay and the pilot has moved the sticks more than 30 degrees out from centre.a transmitter failsafe Stage 2 switch that was set to ON is turned OFF (unless the failsafe_switch_mode is not set to KILL). There is no way to instantly recover from a Drop or Just Disarm outcome. The quad will disarm and fall with zero motor power. The pilot must re-arm, after the failsafe_recovery_delay period, to regain control. The usual arming checks apply; arming switches must be off, throttle must be zero, and if the accelerometer is enabled, the quad must be within the 'small_ _angle' range. "},{"title":"The default Drop mode​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#the-default-drop-mode","content":"The default signal loss behaviour with one second of stage 1 'guard time' is: 300ms holding last valuesthe next 1200ms at idle throttle with sticks centred (the default fallback settings)followed by disarm and drop at 1s. Recovery within the Stage 1 time is immediate, but if Stage 2 completes to disarm, the defaultRecovery time of one second will block arming for one full second. The defaults are typically used by racers and park fliers. The failsafe_delay, or guard time, should be long enough that a brief Rx loss will be tolerated without leading to a disarm. It should reflect the reliability of your link, vs how long it typically takes before you hit the ground. If you crash within the guard time, the PIDs may cook your motors. Shorter guard times will stop the motors more quickly when signal is lost. In practice the minimum is 200ms. Any shorter and you are vulnerable to false failsafes from brief signal loss. The default of 1.5s is a good guard time. The failsafe_recovery_delay is how long the signal must be 'good' for before you're allowed to re-arm after being disarmed by the Drop. By default this is one second. For many setups this time can be a lot shorter. However, some radio links can be erratic when they recover, so don't make it too short without first checking that the quad doesn't go bezerk when the signal recovers. "},{"title":"Landing mode​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#landing-mode","content":"This can be used to apply, after the Stage 1 or Guard period expires. a defined set of Aux switch settings and stick values for a set period of time. Historically, this was used to enable Level mode, and apply sufficient throttle for a gradual fall from a typical flight altitude. It had a role when people would hover at a consistent altitude and not do much else, potentially minimising the damage from a crash from altitude. However, it is s a potentially hazardous thing to do, and not generally recommended, because the quad will fall with active PIDs and will drift with the breeze, potentially landing almost anywhere. The motors may be active when it hits the ground, and could burn them out, and the quad could land on top of people with throttle on and fully active PIDs. We do not recommend this anymore. You will regain normal flight control during landing mode after signal restores for more than the failsafe_recovery_delay period. You will regain the ability to re-arm after landing mode terminates and disarms, after the signal has been restored for more than the failsafe_recovery_delay period. Configuring Landing Mode. Enable Landing Mode as opposed to Drop as the failsafe procedureSet failsafe_off_delay to an appropriate value based on how high you fly (how long you think it will take to land at the set throttle value).Set failsafe_throttle to a value that allows the aircraft to descend at approximately one meter per second (default is 1000 which should be throttle off). The behaviour with default one second of stage 1 'guard time' and a 10s Landing time is: 300ms holding last valuesthe next 1,200ms at idle throttle with sticks centred (the default fallback settings)10s of landing throttleyour Stage 1 Aux switch values applied "},{"title":"GPS Return mode​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#gps-return-mode","content":"The full details of GPS return are covered in the wiki, and elsewhere. You will regain during GPS Return mode only after signal restores for more than the failsafe_recovery_delay period AND you move the sticks more than 30 degrees out from centre. You will regain the ability to re-arm after GPS Return terminates and disarms, after the signal has been restored for more than the failsafe_recovery_delay period. "},{"title":"\"Just Drop\" mode​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#just-drop-mode","content":"This is an 'invisible' mode that is always present. It is intended to 'catch' the possibility that the pilot has landed, forgotten to disarm, and powered off their transmitter. This would result in a failsafe, and if landing mode was active, the motors could spin up. &quot;Just Drop&quot; looks at the throttle position, and if it has been down for 10s before turning the transmitter off, the failsafe system will immediately disarm the quad, and not enter landing mode. This protects the pilot, so long as they have throttle low for 10s before switching the radio off. "},{"title":"General Stage 2 SAFETY Considerations​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#general-stage-2-safety-considerations","content":"The failsafe system will activate and de-activate without regard to the current throttle or stick position. When the failsafe intervention is aborted (RC signal restored/failsafe switch set to OFF) the current throttle and stick positions will be applied to the craft! If you land and turn your transmitter off before powering down your quad, it could be on the ground with motors stopped, and those motors and props could spin again. Take care when using Landing Mode, particularly with the MOTOR_STOP feature. The props may spin up without warning, when failsafe activates in Landing mode! In 4.3 re-arming is possible, after a failsafe, without needing to power cycle the quad, so that if you crash after failsafe in an inaccessible area, you can perhaps get close enough to regain signal and fly out. "},{"title":"Failsafe Settings​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#failsafe-settings","content":"Failsafe delays are configured in 0.1 second steps. 1 step = 0.1sec 1 second = 10 steps "},{"title":"failsafe_delay​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#failsafe_delay","content":"Guard time, or Failsafe Stage 1 period; the time before for failsafe Stage 2 activation after a lost signal. This is the amount of time the flight controller waits, after a signal loss, before activating Stage 2 failsafe. "},{"title":"failsafe_off_delay​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#failsafe_off_delay","content":"The time from when Landing Mode activates to when the motors finally turn off. Throttle will be at 'failsafe_throttle' for this period of time. If you fly at higher altitudes you may need more time to descend safely. "},{"title":"failsafe_throttle​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#failsafe_throttle","content":"Throttle level used for landing. Specify a value that causes the aircraft to descend at about 1M/sec (relatively slowly). Default is set to 1000 which should correspond to throttle off. "},{"title":"failsafe_switch_mode​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#failsafe_switch_mode","content":"Configure the RC switched failsafe action. It can be one of: STAGE1 - activates Stage 1 failsafe. RC controls are applied as configured for Stage 1 and the failsafe_delay guard time will have to elapse before Stage 2 is activated. This is useful if you want to simulate signal loss failsafe behavior. Note that there are some differences. There is no 300ms 'hold' time; the flight channels (RPY&amp;T) go directly to Stage 1 settings the moment the switch goes ON. Also, the Auxiliary channels remain active, and are not set to the Stage 1 values. Recovery of signal immediately restores full pilot control.STAGE2 - skips Stage 1 and immediately activates the selected Stage 2 procedure. Useful if you want to assign instant auto-landing, GPS Return, or Drop, to a switch.KILL - immediately disarms the quad with no delay. Your craft will crash. Note that a single glitch on the failsafe channel will immediately crash the quad. Re-arming is blocked for 1 second after signal is restored. A similar, but safer effect can be achieved by: setting failsafe_switch_mode to STAGE2, failsafe_procedure to DROP, and failsafe delay to 2. This gives a 200ms delay signal validation period, the shortest allowed, so that transient glitches on the failsafe channel will not falsely trigger a disarm. Drop recovery can be made faster than Kill by configuring a short failsafe_recovery_delay time (which can be as short as 200ms).using the arm switch. This does not introduce re-arming locking. "},{"title":"failsafe_throttle_low_delay​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#failsafe_throttle_low_delay","content":"Time throttle level must have been below 'minthrottle' to _only disarm instead of full failsafe procedure. Use standard RX μs values. See Rx documentation. "},{"title":"failsafe_procedure​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#failsafe_procedure","content":"DROP: Just kill the motors and disarm (crash the craft). Re-arming is locked until RC link is available for at least 3 seconds and the arm switch (if used) is in the OFF position.AUTO-LAND: Enable an auto-level mode, center the flight sticks and set the throttle to a predefined value (failsafe_throttle) for a predefined time (failsafe_off_delay). This should allow the craft to come to a safer landing. Re-arming is locked until RC link is available for at least 30 seconds and the arm switch (if used) is in the OFF position. "},{"title":"failsafe_recovery_delay​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#failsafe_recovery_delay","content":"Time for a recovered signal to be considered valid. In Failsafe Landing Mode, signal must be 'good' for at least this time for control to be returned to the pilot. In GPS Return mode, this time is required before the stick inputs will be assessed for the restoration of control. "},{"title":"failsafe_stick_threshold​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#failsafe_stick_threshold","content":"For GPS Return, the angle in degrees that the sticks must be away from centre in order to return control to the pilot, assuming the signal has already recovered. The idea is that as the quad flies home, the pilot leaves the sticks centred. Once they get video back, and see that Rx signal has returned, moving the sticks allows the pilot to regain control at a time that suits them, rather than just immediately signal returns. "},{"title":"rx_min_usec​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#rx_min_usec","content":"The lowest channel value considered valid. e.g. PWM/PPM pulse length "},{"title":"rx_max_usec​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#rx_max_usec","content":"The highest channel value considered valid. e.g. PWM/PPM pulse length The rx_min_usec and rx_max_usec settings helps detect when your RX stops sending any data, enters failsafe mode or when the RX looses signal. With a Graupner GR-24 configured for PWM output with failsafe on channels 1-4 set to OFF in the receiver settings then this setting, at its default value, will allow failsafe to be activated. "},{"title":"Testing failsafe​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe#testing-failsafe","content":"Bench test of Stage 1 - remove the props!. Set the Guard, or stage 1 time, to 10s (100)Set the Stage 2 procedure to DropArm the craft and throttle up brieflyWhile wiggling the sticks, listen to the motors, and throttle offConfirm that motors hold RPM for 300ms, then drop to idle and stay thereNote that RXLOSS appears in the OSD immediately the link is lostPower up the transmitter, wiggle the pitch/roll stick while it re-establishes the linkConfirm that the motors start responding about 1s after the link is re-established Bench test the failsafe system before flying - remove props while doing so. Configure failsafeArm the craft and throttle up brieflyEither turn the transmitter off, or unplug the RX.Observe motors spin at configured throttle setting for configured duration.Observe motors turn off after configured duration.Power cycle the FC.Arm the craft.Configure a long Stage 2 Landing Time (eg 200 or 20s) and enable Landing modeTurn off transmitter or unplug RX.Observe motors spin at configured Landing throttle setting.Turn on TX or reconnect RX before Landing times outEnsure that your switch positions don't now cause the craft to disarm (otherwise it would fall out of the sky on regained signal).Observe that normal flight behavior is resumed.Disarm. Field test of Landing Mode. Perform bench testing first!On a calm day go to an unpopulated area away from buildings or test indoors in a safe controlled environment - e.g. inside a big net.Arm the craft.Hover over something soft (long grass, ferns, heather, foam, etc.).Descend the craft and observe throttle position and record throttle value from your TX channel monitor. Ideally 1500 should be hover. So your value should be less than 1500.Stop, disarm.Set failsafe throttle to the recorded value.Arm, hover over something soft again.Turn off TX (!)Observe craft descends and motors continue to spin for the configured duration.Observe FC disarms after the configured duration.Remove flight battery. If craft descends too quickly then increase failsafe throttle setting. Ensure that the duration is long enough for your craft to land from the altitudes you normally fly at. Using a configured transmitter switch to activate failsafe mode, instead of switching off your TX, is good primary testing method in addition to the above procedure. "},{"title":"Failsafe","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Failsafe-Before-4.3","content":"","keywords":""},{"title":"Flight controller failsafe system​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe-Before-4.3#flight-controller-failsafe-system","content":"This system has two stages. Stage 1 is entered when a flightchannel has an invalid pulse length, the receiver reports failsafe mode or there is no signal from the receiver. Fallback settings are applied to all channels and a short amount of time is provided to allow for recovery. Note: Prior to entering stage 1, fallback settings are also applied to individual AUX channels that have invalid pulses. Stage 1 can also directly be activated when a transmitter switch that is configured to control the failsafe mode is switched ON and failsafe_switch_mode is set to STAGE1. Stage 1 will be aborted if the switch is moved to the OFF position before Stage 2 is engaged (see next). Stage 2 is entered when your craft is armed and stage 1 persists longer then the configured guard time (failsafe_delay). All channels will remain at the applied fallback setting unless overruled by the chosen stage 2 procedure (failsafe_procedure). Stage 2 is not activated until 5 seconds after the flight controller boots up. This is to prevent unwanted activation, as in the case of TX/RX gear with long bind procedures, before the RX sends out valid data. Stage 2 can also directly be activated when a transmitter switch that is configured to control the failsafe mode is switched ON and failsafe_switch_mode is set to STAGE2. Stage 2 will be aborted when it was due to: a lost RC signal and the RC signal has recovered.a transmitter failsafe switch was set to ON position and the switch is set to OFF position (and failsafe_switch_mode is not set to KILL). Note that: At the end of the stage 2 procedure, the flight controller will be disarmed and re-arming will be locked until the signal from the receiver is restored for specific amount of time depending on the procedure (see below) AND the arming switch is in the OFF position (when an arm switch is in use). Prior to starting a stage 2 intervention it is checked if the throttle position was below min_throttle level for the last failsafe_throttle_low_delay seconds. If it was, the craft is assumed to be on the ground and is only disarmed. It may be re-armed without a power cycle. Some notes about SAFETY: The failsafe system will be activated regardless of current throttle position. So when the failsafe intervention is aborted (RC signal restored/failsafe switch set to OFF) the current stick position will direct the craft !The craft may already be on the ground with motors stopped and that motors and props could spin again - the software does not currently detect if the craft is on the ground. Take care when using MOTOR_STOP feature. Props will spin up without warning, when armed with MOTOR_STOP feature ON (props are not spinning) and failsafe is activated ! "},{"title":"Configuration​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe-Before-4.3#configuration","content":"When configuring the flight controller failsafe, use the following steps: Configure your receiver to do one of the following: Upon signal loss, send no signal/pulses over the channelsSend an invalid signal over the channels (for example, send values lower than rx_min_usec) and Ensure your receiver does not send out channel data that would cause a disarm by switch or sticks to be registered by the FC. This is especially important for those using a switch to arm. See your receiver's documentation for direction on how to accomplish one of these. Configure one of the transmitter switches to activate the failsafe mode. Set failsafe_off_delay to an appropriate value based on how high you fly Set failsafe_throttle to a value that allows the aircraft to descend at approximately one meter per second (default is 1000 which should be throttle off). These are the basic steps for flight controller failsafe configuration; see Failsafe Settings below for additional settings that may be changed. "},{"title":"Failsafe Settings​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe-Before-4.3#failsafe-settings","content":"Failsafe delays are configured in 0.1 second steps. 1 step = 0.1sec 1 second = 10 steps "},{"title":"failsafe_delay​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe-Before-4.3#failsafe_delay","content":"Guard time for failsafe activation after signal lost. This is the amount of time the flight controller waits to see if it begins receiving a valid signal again before activating failsafe. "},{"title":"failsafe_off_delay​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe-Before-4.3#failsafe_off_delay","content":"Delay after failsafe activates before motors finally turn off. This is the amount of time 'failsafe_throttle' is active. If you fly at higher altitudes you may need more time to descend safely. "},{"title":"failsafe_throttle​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe-Before-4.3#failsafe_throttle","content":"Throttle level used for landing. Specify a value that causes the aircraft to descend at about 1M/sec. Default is set to 1000 which should correspond to throttle off. "},{"title":"failsafe_switch_mode​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe-Before-4.3#failsafe_switch_mode","content":"Configure the RC switched failsafe action. It can be one of: STAGE1 - activates Stage 1 failsafe. RC controls are applied as configured for Stage 1 and the failsafe_delay guard time will have to elapse before Stage 2 is activated. This is useful if you want to simulate with a switch the exact signal loss failsafe behavior.STAGE2 - skips Stage 1 and activates the Stage 2 procedure immediately (see failsafe_procedure). Useful if you want to assign instant auto-landing to a switch.KILL - disarms instantly (your craft will crash). Re-arming is locked for 1 second AND until the arming switch (if used) is moved to the OFF position. Similar effect can be achieved by: setting failsafe_switch_mode to STAGE2 and failsafe_procedure to DROP. The difference is that DROP locks re-arming for 3 seconds instead of 1.setting failsafe_switch_mode to STAGE2, failsafe_procedure to AUTO-LAND, setting failsafe_throttle to 1000 and failsafe_off_delay to 0 (basically initiates an auto-landing but cuts it short immediately). This is not preferred method, since the reaction is slower and re-arming will be locked for 30 seconds.using arm switch. This does not introduce re-arming locking. "},{"title":"failsafe_throttle_low_delay​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe-Before-4.3#failsafe_throttle_low_delay","content":"Time throttle level must have been below 'minthrottle' to _only disarm instead of full failsafe procedure. Use standard RX μs values. See Rx documentation. "},{"title":"failsafe_procedure​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe-Before-4.3#failsafe_procedure","content":"DROP: Just kill the motors and disarm (crash the craft). Re-arming is locked until RC link is available for at least 3 seconds and the arm switch (if used) is in the OFF position.AUTO-LAND: Enable an auto-level mode, center the flight sticks and set the throttle to a predefined value (failsafe_throttle) for a predefined time (failsafe_off_delay). This should allow the craft to come to a safer landing. Re-arming is locked until RC link is available for at least 30 seconds and the arm switch (if used) is in the OFF position. "},{"title":"rx_min_usec​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe-Before-4.3#rx_min_usec","content":"The lowest channel value considered valid. e.g. PWM/PPM pulse length "},{"title":"rx_max_usec​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe-Before-4.3#rx_max_usec","content":"The highest channel value considered valid. e.g. PWM/PPM pulse length The rx_min_usec and rx_max_usec settings helps detect when your RX stops sending any data, enters failsafe mode or when the RX looses signal. With a Graupner GR-24 configured for PWM output with failsafe on channels 1-4 set to OFF in the receiver settings then this setting, at its default value, will allow failsafe to be activated. "},{"title":"Testing​","type":1,"pageTitle":"Failsafe","url":"/betaflight.com/docs/development/Failsafe-Before-4.3#testing","content":"Bench test the failsafe system before flying - remove props while doing so. Arm the craft.Turn off transmitter or unplug RX.Observe motors spin at configured throttle setting for configured duration.Observe motors turn off after configured duration.Ensure that when you turn on your TX again or reconnect the RX that you cannot re-arm once the motors have stopped.Power cycle the FC.Arm the craft.Turn off transmitter or unplug RX.Observe motors spin at configured throttle setting for configured duration.Turn on TX or reconnect RX.Ensure that your switch positions don't now cause the craft to disarm (otherwise it would fall out of the sky on regained signal).Observe that normal flight behavior is resumed.Disarm. Field test the failsafe system. Perform bench testing first!On a calm day go to an unpopulated area away from buildings or test indoors in a safe controlled environment - e.g. inside a big net.Arm the craft.Hover over something soft (long grass, ferns, heather, foam, etc.).Descend the craft and observe throttle position and record throttle value from your TX channel monitor. Ideally 1500 should be hover. So your value should be less than 1500.Stop, disarm.Set failsafe throttle to the recorded value.Arm, hover over something soft again.Turn off TX (!)Observe craft descends and motors continue to spin for the configured duration.Observe FC disarms after the configured duration.Remove flight battery. If craft descends too quickly then increase failsafe throttle setting. Ensure that the duration is long enough for your craft to land at the altitudes you normally fly at. Using a configured transmitter switch to activate failsafe mode, instead of switching off your TX, is good primary testing method in addition to the above procedure. "},{"title":"Betaflight Flight Controller LED usage","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/FC-LEDs","content":"Betaflight Flight Controller LED usage Betaflight Flight Controllers typically have two LEDs, possibly three which indicate the conditions below. FCs implement at least one LED to indicate activity. The second is preferable, and the third optional. LED Number\tColour\tRequired\tFunction0\tBlue\tYes\tFlashes 5 times on startup On whilst armed Flashes to indicate warning Flashes during ESC passthough Flashes during USB MSC activity Indicates activity for serial passthrough Indicates Rx activity for serial 4way Flashes during Spekrum binding Flashes during Hard Fault conditions 1\tGreen\tPreferably\tFlashes 5 times on startup Indicates Tx activity for serial 4way Flashes during Hard Fault conditions 2\tAmber\tNo\tNormally on Flashes during Spekrum binding Flashes during Hard Fault conditions Error codes indicated by a brief 100 ms flash and then a count of 250 ms flashes as per the table below. Error\tFlash countFAILURE_MISSING_ACC\t1 FAILURE_ACC_INIT\t2 FAILURE_ACC_INCOMPATIBLE\t3 FAILURE_INVALID_EEPROM_CONTENTS\t4 FAILURE_CONFIG_STORE_FAILURE\t5 FAILURE_GYRO_INIT_FAILED\t6 FAILURE_FLASH_READ_FAILED\t7 FAILURE_FLASH_WRITE_FAILED\t8 FAILURE_FLASH_INIT_FAILED\t9 FAILURE_EXTERNAL_FLASH_READ_FAILED\t10 FAILURE_EXTERNAL_FLASH_WRITE_FAILED\t11 FAILURE_EXTERNAL_FLASH_INIT_FAILED\t12 FAILURE_SDCARD_READ_FAILED\t13 FAILURE_SDCARD_WRITE_FAILED\t14 FAILURE_SDCARD_INITIALISATION_FAILED\t15 FAILURE_SDCARD_REQUIRED\t16","keywords":""},{"title":"Getting Started","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Getting-Started","content":"","keywords":""},{"title":"Hardware​","type":1,"pageTitle":"Getting Started","url":"/betaflight.com/docs/development/Getting-Started#hardware","content":"NOTE: Flight Controllers are typically equipped with accelerometers. These devices are sensitive to shocks. When the device is not yet installed to an aircraft, it has very little mass by itself. If you drop or bump the controller, a big force will be applied on its accelerometers, which could potentially damage them. Bottom line: Handle the board very carefully until it's installed on an aircraft! For an overview of the hardware Cleanflight (hereby CF) can run on, see Boards.md. For information about specific boards, see the board specific documentation. Assuming that you have a flight controller board (hereby FC) in hand, you should first read through the manual that it came with. You can skip the details about software setup, as we'll cover that here. Decide how you'll connect your receiver by reading the receiver chapter, and how many pins you need on the outputs (to connect ESCs and servos) by reading about Mixers. If you're interested in monitoring your flight battery with CF, see Battery Monitoring. You may want audible feedback from your copter so skim through Buzzer and mark the pins that will be used. Do you want your RC Receiver's RSSI to be sent to the board? The RSSI chapter explains how. You may or may not need to make an additional connection from your Receiver to the FC. Would you like to try using a GPS unit to get your aircraft to Loiter or Return-To-Launch? Take a look at the GPS. You may also want to read the Serial chapter to determine what extra devices (such as Blackbox, OSD, Telemetry) you may want to use, and how they should be connected. Now that you know what features you are going to use, and which pins you need, you can go ahead and solder them to your board, if they are not soldered already. Soldering only the pins required for the application may save weight and contribute to a neater looking setup, but if you need to use a new feature later you may have to unmount the board from the craft and solder missing pins, so plan accordingly. Before soldering your FC please review a how-to-solder tutorial to avoid expensive mistakes, practice soldering on some scrap before soldering your FC. If you are going to use Oneshot125, you may need to enable that on your ESCs using a jumper or flashing them with the latest stable firmware and enable Damped Light in their settings, if it's supported. Refer to the ESCs' documentation or online discussions to determine this. "},{"title":"Software setup​","type":1,"pageTitle":"Getting Started","url":"/betaflight.com/docs/development/Getting-Started#software-setup","content":"Now that your board has pins on it, you are ready to connect it to your PC and flash it with CF. Install the Chromium browser or Google Chrome to your PC, if you don't have it already, add the Cleanflight Configurator to it, and start it. Then follow these instructions for Installation of the firmware to the FC. "},{"title":"Cleanflight Configuration​","type":1,"pageTitle":"Getting Started","url":"/betaflight.com/docs/development/Getting-Started#cleanflight-configuration","content":"Your FC should now be running CF, and you should be able to connect to it using the Configurator. If that is not the case, please go back to the previous sections and follow the steps carefully. Now, there are two ways to configure CF; via the Configurator's tabs (in a &quot;graphical&quot; way, clicking through and selecting/changing values and tickboxes) and using the Command Line Interface (CLI). Some settings may only be configurable using the CLI and some settings are best configured using the GUI (particularly the ports settings, which aren't documented for the CLI as they're not human friendly). It is now a good time to setup your RC Receiver and Transmitter. Set the Tx so that it outputs at least 4 channels (Aileron, Elevator, Throttle, Rudder) but preferably more. E.g. you can set channels 5 and 6 to be controlled by 3-position switches, to be used later. Maybe set up EXPO on AIL/ELE/RUD, but you should know that it can also be done in CF's software later. If using RSSI over PPM or PWM, it's now time to configure your Rx to output it on a spare channel. Connect the Rx to the FC, and the FC to the PC. You may need to power the Rx through a BEC (its 5V rail - observe polarity!). On your PC, connect to the Configurator, and go to the first tab. Check that the board animation is moving properly when you move the actual board. Do an accelerometer calibration. Configuration tab: Select your aircraft configuration (e.g. Quad X), and go through each option in the tab to check if relevant for you. E.g. you may want to enable ONESHOT125 for Oneshot-capable ESCs. You may need RX_PPM if you're using an RC Receiver with PPM output etc. If planning to use the battery measurement feature of the FC, check VBAT under Battery Voltage. If using analog RSSI, enable that under RSSI. Do not enable this setting if using RSSI injected into the PPM stream. Motors will spin by default when the FC is armed. If you don't like this, enable MOTOR_STOP. Also, adjust the minimum, middle and maximum throttle according to these guidelines: Minimum Throttle - Set this to the minimum throttle level that enables all motors to start reliably. If this is too low, some motors may not start properly after spindowns, which can cause loss of stability and control. A typical value would be 1100.Middle Throttle - The throttle level for middle stick position. Many radios use 1500, but some (e.g. Futaba) may use 1520 or other values.Maximum Throttle - The maximum throttle level that the ESCs should receive. A typical value would be 2000.Minimum Command - This is the &quot;idle&quot; signal level that will be sent to the ESCs when the craft is disarmed, which should not cause the motors to spin. A typical value would be 1000. Finally, click Save and Reboot. Receiver tab: Check that the channel inputs move according to your Tx inputs.Check that the Channel map is correct along with the RSSI Channel, if you use that.Verify the range of each channel goes from ~1000 to ~2000. See also controls. and rx_min_usec and rx_max_usec.You can also set EXPO here instead of your Tx.Click Save! Modes tab: Setup the desired modes. See the modes chapter for what each mode does, but for the beginning you mainly need HORIZON, if any. Before finishing this section, you should calibrate the ESCs, install the FC to the frame, and connect the RSSI cable, buzzer and battery if you have chosen to use those. "},{"title":"Final testing and safety​","type":1,"pageTitle":"Getting Started","url":"/betaflight.com/docs/development/Getting-Started#final-testing-and-safety","content":"It's important that you have configured CF properly, so that your aircraft does not fly away, or even worse fly into property and people! This is an important step that you should NOT postpone until after your maiden flight. Please do this now, before you head off to the flying field. First read the safety section.Next, learn how to arm your FC, and about other controls.Next up, setup Failsafe. Take your time, do it properly.Now, on the bench, without props, test that failsafe works properly, according to the above doc.Additionally, test the effect of AIL/ELE input of your Tx. Is the aircraft responding properly? Do the same for RUD input.Test the direction of AIL/ELE auto correction. Raise throttle at 30% (no blades!); when you tilt the aircraft, do the motors try to compensate momentarily? This should simulate random wind forces that the FC should counteractTest the direction of AIL/ELE auto correction in HORIZON mode. With throttle at 30%, if you tilt the aircraft so that one motor is lowered towards the ground, does it spin up and stay at high RPM until you level it off again? This tests the auto-leveling direction. If one of these tests fail, do not attempt to fly, but go back to the configuration phase instead. Some channel may need reversing, or the direction of the board is wrong. "},{"title":"Using it (AKA: Flying)​","type":1,"pageTitle":"Getting Started","url":"/betaflight.com/docs/development/Getting-Started#using-it-aka-flying","content":"Go to the field, turn Tx on, place aircraft on the ground, connect flight battery and wait. Arm and fly. Good luck! If the aircraft won't arm, count the red Warning LED flashes and find out the reason in Controls. "},{"title":"Advanced Matters​","type":1,"pageTitle":"Getting Started","url":"/betaflight.com/docs/development/Getting-Started#advanced-matters","content":"Some advanced configurations and features are documented in the following pages, but have not been touched-upon earlier: ProfilesPID tuningIn-flight AdjustmentsBlackbox loggingUsing a SonarSpektrum BindTelemetryUsing a DisplayUsing a LED stripMigrating from baseflight "},{"title":"The FrSky SPI RX","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/FrSky-SPI-RX","content":"","keywords":""},{"title":"Basics​","type":1,"pageTitle":"The FrSky SPI RX","url":"/betaflight.com/docs/development/FrSky-SPI-RX#basics","content":"'SPI RX' in Betaflight is a framework that allows for radio chips to be connected directly to the flight controller's MCU, and to be controlled by the firmware. This allows for the implementation of the functionality that controls the radio chip, and translates the received signals into RC control signals as part of the firmware. This has a number of advantages: the RX can be directly added to the flight controller board, allowing for smaller builds (after all, not many people want to use a flight controller without an RX);it does not require one or more extra UARTs on the flight controller, and there is no risk of problems caused by a wrong UART configuration;it does not require an extra MCU to control the radio chip, and can therefore be produced / sold cheaper;since the RX 'firmware' is part of the flight controller firmware, fixes and updates will be applied as part of flight controller firmware updates, eliminating the need for (often cumbersome) RX firmware updates. But there are also disadvantages: a flight controller board will only have one radio chip, and will only be able to support the RC protocols that are using this chip. Changing to a different protocol is often not possible. "},{"title":"The FrSky SPI RX​","type":1,"pageTitle":"The FrSky SPI RX","url":"/betaflight.com/docs/development/FrSky-SPI-RX#the-frsky-spi-rx-1","content":"This driver uses the SPI RX framework in Betaflight to provide support for the FrSky 2.4 GHz RC protocols, based on a CC2500 radio chip, with additional support for a PA/LNA (power amplifier / low noise amplifier) chip with antenna diversity, in order to provide sufficient power / sensitivity for outdoor flying. The supported protocols are: "},{"title":"FrSky D​","type":1,"pageTitle":"The FrSky SPI RX","url":"/betaflight.com/docs/development/FrSky-SPI-RX#frsky-d","content":"8 channels / 9 ms frame spacing;called 'D8' in OpenTX;integrated FrSky hub telemetry. "},{"title":"FrSky X​","type":1,"pageTitle":"The FrSky SPI RX","url":"/betaflight.com/docs/development/FrSky-SPI-RX#frsky-x","content":"8 channels / 9 ms frame spacing or 16 channels / 18 ms frame spacing;called 'D16' in OpenTX;integrated FrSky SmartPort telemetry (including support for MSP over Smartport / lua scripts in OpenTX); "},{"title":"FrSky X LBT​","type":1,"pageTitle":"The FrSky SPI RX","url":"/betaflight.com/docs/development/FrSky-SPI-RX#frsky-x-lbt","content":"LBT protocol version compatible with EU;8 channels / 9 ms frame spacing or 16 channels / 18 ms frame spacing;called 'D16' in OpenTX;integrated FrSky SmartPort telemetry (including support for MSP over Smartport / lua scripts in OpenTX); "},{"title":"Configuration​","type":1,"pageTitle":"The FrSky SPI RX","url":"/betaflight.com/docs/development/FrSky-SPI-RX#configuration","content":"in Betaflight configurator, go to the 'Configuration' tab, in 'Receiver' box, select 'SPI RX support' for 'Receiver mode':  in the 'SPI Bus Receiver Provider' drop down that appears, select 'FRSKY_D', 'FRSKY_X' or 'FRSKY_X_LBT' (depending on the desired protocol):  click 'Save &amp; Reboot'. After the reboot, the RX LED will confirm that the FrSky RX is active by blinking slowly;enter bind mode by either: pressing the 'Bind' button on the flight controller (if there is one and it's reachable);entering CLI, and typing 'bind_rx_spi[Enter]'. the flight controller will indicate that bind mode is active by changing the RX LED to be permanently on. Now, on your TX, enter bind mode for the selected FrSky protocol (see screenshots for OpenTX): FrSky D protocol:  FrSky X and X_LBT protocol:  Once binding has completed, the flight controller will indicate this by blinking the RX LED slowly. There's no indication on the CLI, but you can observe successful binding by quitting the bind mode on TX, and seeing if status doesn't list RXLOSS anymore in &quot;Arming disable flags&quot;. A reboot of the flight controller is not required. "},{"title":"Tips & Tricks​","type":1,"pageTitle":"The FrSky SPI RX","url":"/betaflight.com/docs/development/FrSky-SPI-RX#tips--tricks","content":"the RX bind information is stored in the following CLI parameters: frsky_spi_tx_id (internal TX id), frsky_spi_offset (frequency offset), frsky_spi_bind_hop_data (frequency hop sequence), and frsky_x_rx_num (RX number; FrSky X only). These are printed as part of a CLI diff / dump, and will be restored after a firmware update, making it unnecessary to do another bind after the update;resetting the above parameters to defaults will 'erase' the binding information;the CLI parameter frsky_spi_autobind can be enabled to configure the FrSky SPI RX to attempt a bind on every power up. This is mostly useful for demonstration models that should bind to whatever TX is powered up in the vicinity. "},{"title":"Acknowledgements​","type":1,"pageTitle":"The FrSky SPI RX","url":"/betaflight.com/docs/development/FrSky-SPI-RX#acknowledgements","content":"midelic for reverse engineering and reimplementation of the FrSky protocols;Eric Freund (eric_fre@hotmail.com) for the design of the first prototype flight controller with FrSky SPI RX. "},{"title":"Boards with FrSky SPI RX​","type":1,"pageTitle":"The FrSky SPI RX","url":"/betaflight.com/docs/development/FrSky-SPI-RX#boards-with-frsky-spi-rx","content":"Matek F411-ONE;CrazyBee F3 FR;CrazyBee F4 FR Pro;[BetaFPV F4]more to come... "},{"title":"G-Tune instructions.","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Gtune","content":"","keywords":""},{"title":"Safety preamble: Use at your own risk​","type":1,"pageTitle":"G-Tune instructions.","url":"/betaflight.com/docs/development/Gtune#safety-preamble-use-at-your-own-risk","content":"The implementation you have here is quite different and just for adjusting the P values of ROLL/PITCH/YAW in Acro mode. When flying in Acro mode (yaw tune in other modes possible as well - see below) you can activate G-Tune with an AUX box (switch) while the copter is armed. It will start tuning the wanted / possible axis (see below) in a predefined range (see below). After activation you will probably notice nothing! That means G-Tune will not start shaking your copter, you will have to do it (or simply fly and let it work). The G-Tune is based on the gyro error so it is only active when you give no RC input (that would be an additional error). So if you just roll only pitch and yaw are tuned. If you stop rolling G-Tune will wait ca. 450ms to let the axis settle and then start tuning that axis again. All axis are treated independently. The easiest way to tune all axis at once is to do some air-jumps with the copter in Acro (RC centered and G-Tune activated... of course..). You can set a too high P for the axis as default in the GUI, when the copter starts shaking the wobbles will be detected and P tuned down (be careful with the strength setting though - see below). Yaw tune is disabled in any copter with less than 4 motors (like tricopters). G-Tune in Horizon or Level mode will just affect Yaw axis (if more than 3 motors...) You will see the results in the GUI - the tuning results will only be saved if you enable G-Tune mode while the copter is disarmed and G-Tune was used before when armed. You also can save the configuration in an alternative way (like hitting save button in the GUI, casting an eepromwrite with trimming, acc calibration etc.) TPA and G-Tune: It is not tested and will most likely not result into something good. However G-Tune might be able to replace TPA for you. A typical use may go in this order: ArmEnable G-tuneLift off slowly, avoid stick inputs (Roll, Pitch / Yaw).Eventually the copter should fly well. Perhaps do a few throttle punch outs and fly around a bit. Take note if each punch out seems to become smoother with less oscillation and the overall flight performance.Disable G-tuneLandDisarm, but don’t power off.If these are desired results then either a) Connect cleanflight configurator review and save the configuration. or b) Enable G-Tune again to save settings.Power off. If the results are not desired look into changing the parameters as shown below and try again. Some other notes and instructions can be found here: http://www.rcgroups.com/forums/showpost.php?p=31321635&amp;postcount=6160 &gt; http://www.rcgroups.com/forums/showpost.php?p=31525114&amp;postcount=7150 "},{"title":"Parameters and their function:​","type":1,"pageTitle":"G-Tune instructions.","url":"/betaflight.com/docs/development/Gtune#parameters-and-their-function","content":"gtune_loP_rll = 10 [0..200] Lower limit of ROLL P during G-Tune. Note &quot;10&quot; means &quot;1.0&quot; in the GUI. gtune_loP_ptch = 10 [0..200] Lower limit of PITCH P during G-Tune. Note &quot;10&quot; means &quot;1.0&quot; in the GUI. gtune_loP_yw = 10 [0..200] Lower limit of YAW P during G-Tune. Note &quot;10&quot; means &quot;1.0&quot; in the GUI. gtune_hiP_rll = 100 [0..200] Higher limit of ROLL P during G-Tune. 0 Disables tuning for that axis. Note &quot;100&quot; means &quot;10.0&quot; in the GUI. gtune_hiP_ptch = 100 [0..200] Higher limit of PITCH P during G-Tune. 0 Disables tuning for that axis. Note &quot;100&quot; means &quot;10.0&quot; in the GUI. gtune_hiP_yw = 100 [0..200] Higher limit of YAW P during G-Tune. 0 Disables tuning for that axis. Note &quot;100&quot; means &quot;10.0&quot; in the GUI. gtune_pwr = 0 [0..10] Strength of adjustment gtune_settle_time = 450 [200..1000] Settle time in ms gtune_average_cycles = 16 [8..128] Number of looptime cycles used for gyro average calcullation  So you have lower and higher limits for each P for every axis. The preset range (GUI: 1.0 - 10.0) is quiet broad to represent most setups. If you want tighter or more loose ranges change them here. gtune_loP_XXX can be configured lower than &quot;10&quot; that means a P of &quot;1.0&quot; in the GUI. So you can have &quot;Zero P&quot; but you may get sluggish initial control. If you want to exclude one axis from the tuning you must set gtune_hiP_XXX to zero. Let's say you want to disable yaw tuning write in CLI set gtune_hiP_yw = 0. Note: The MultiWii Wiki advises you to trim the yaw axis on your transmitter. If you have done so (yaw not neutral on your RC) yaw tuning will be disabled. You can adjust the strength of tuning by using set gtune_pwr = N. My small copter works fine with 0 and doesn't like a value of &quot;3&quot;. My big copter likes &quot;gtune_pwr = 5&quot;. It shifts the tuning to higher values and if too high can diminish the wobble blocking! So start with 0 (default). If you feel your resulting P is always too low for you, increase gtune_pwr. You will see it getting a little shaky if value is too high. "},{"title":"GPS","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Gps","content":"","keywords":""},{"title":"Configuration​","type":1,"pageTitle":"GPS","url":"/betaflight.com/docs/development/Gps#configuration","content":"Enable the GPS from the CLI as follows: configure a serial port to use for GPS.set your GPS baud rateenable the feature GPSset the gps_providerconnect your GPS to the serial port configured for GPS.save and reboot. Note: GPS packet loss has been observed at 115200. Try using 57600 if you experience this. For the connections step check the Board documentation for pins and port numbers. "},{"title":"GPS Provider​","type":1,"pageTitle":"GPS","url":"/betaflight.com/docs/development/Gps#gps-provider","content":"Set the gps_provider appropriately, for example set gps_provider=UBLOX ValueNMEA UBLOX "},{"title":"GPS Auto configuration​","type":1,"pageTitle":"GPS","url":"/betaflight.com/docs/development/Gps#gps-auto-configuration","content":"When using UBLOX it is a good idea to use GPS auto configuration so your FC gets the GPS messages it needs. Enable GPS auto configuration as follows set gps_auto_config=ON. If you are not using GPS auto configuration then ensure your GPS receiver sends out the correct messages at the right frequency. See below for manual UBlox settings. "},{"title":"SBAS​","type":1,"pageTitle":"GPS","url":"/betaflight.com/docs/development/Gps#sbas","content":"When using a UBLOX GPS the SBAS mode can be configured using gps_sbas_mode. The default is AUTO. Value\tRegionAUTO\tGlobal EGNOS\tEurope WAAS\tNorth America MSAS\tAsia GAGAN\tIndia If you use a regional specific setting you may achieve a faster GPS lock than using AUTO. This setting only works when gps_auto_config=ON "},{"title":"GPS Receiver Configuration​","type":1,"pageTitle":"GPS","url":"/betaflight.com/docs/development/Gps#gps-receiver-configuration","content":"UBlox GPS units can either be configured using the FC or manually. "},{"title":"UBlox GPS manual configuration​","type":1,"pageTitle":"GPS","url":"/betaflight.com/docs/development/Gps#ublox-gps-manual-configuration","content":"Use UBox U-Center and connect your GPS to your computer. The CLI gpspassthrough command may be of use if you do not have a spare USART to USB adapter. Note that many boards will not provide +5V from USB to the GPS module, such as the SPRacingF3; if you are using gpspassthrough you may need to connect a BEC to the controller if your board permits it, or use a standalone UART adapter. Check your board documentation to see if your GPS port is powered from USB. Display the Packet Console (so you can see what messages your receiver is sending to your computer). Display the Configation View. Navigate to CFG (Configuration) Select Revert to default configuration. Click Send. At this point you might need to disconnect and reconnect at the default baudrate - probably 9600 baud. Navigate to PRT (Ports) Set Target to 1 - Uart 1Set Protocol In to 0+1+2Set Protocol Out to 0+1Set Buadrate to 57600 115200Press Send This will immediatly &quot;break&quot; communication to the GPS. Since you haven't saved the new baudrate setting to the non-volatile memory you need to change the baudrate you communicate to the GPS without resetting the GPS. So Disconnect, Change baud rate to match, then Connect. Click on PRT in the Configuration view again and inspect the packet console to make sure messages are being sent and acknowledged. Next, to ensure the FC doesn't waste time processing unneeded messages, click on MSG and enable the following on UART1 alone with a rate of 1. When changing message target and rates remember to click Send after changing each message.: NAV-POSLLH NAV-DOP NAV-SOL NAV-VELNED NAV-TIMEUTC  Enable the following on UART1 with a rate of 5, to reduce bandwidth and load on the FC. NAV-SVINFO  All other message types should be disabled. Next change the global update rate, click Rate (Rates) in the Configuration view. Set Measurement period to 100 ms. Set Navigation rate to 1. Click Send. This will cause the GPS receive to send the require messages out 10 times a second. If your GPS receiver cannot be set to use 100ms try 200ms (5hz) - this is less precise. Next change the mode, click NAV5 (Navigation 5) in the Configuration View. Set to Dynamic Model to Pedestrian and click Send. Next change the SBAS settings. Click SBAS (SBAS Settings) in the Configuration View. Set Subsystem to Enabled. Set PRN Codes to Auto-Scan. Click Send. Finally, we need to save the configuration. Click CFG (Configuration in the Configuration View. Select Save current configuration and click Send. "},{"title":"UBlox Navigation model​","type":1,"pageTitle":"GPS","url":"/betaflight.com/docs/development/Gps#ublox-navigation-model","content":"Cleanflight will use Pedestrian when gps auto config is used. From the UBlox documentation: Pedestrian - Applications with low acceleration and speed, e.g. how a pedestrian would move. Low acceleration assumed. MAX Altitude [m]: 9000, MAX Velocity [m/s]: 30, MAX Vertical, Velocity [m/s]: 20, Sanity check type: Altitude and Velocity, Max Position Deviation: Small.Portable - Applications with low acceleration, e.g. portable devices. Suitable for most situations. MAX Altitude [m]: 12000, MAX Velocity [m/s]: 310, MAX Vertical Velocity [m/s]: 50, Sanity check type: Altitude and Velocity, Max Position Deviation: Medium.Airborne &lt; 1G - Used for applications with a higher dynamic range and vertical acceleration than a passenger car. No 2D position fixes supported. MAX Altitude [m]: 50000, MAX Velocity [m/s]: 100, MAX Vertical Velocity [m/s]: 100, Sanity check type: Altitude, Max Position Deviation: Large "},{"title":"Hardware​","type":1,"pageTitle":"GPS","url":"/betaflight.com/docs/development/Gps#hardware","content":"There are many GPS receivers available on the market. Below are some examples of user-tested hardware. "},{"title":"Ublox​","type":1,"pageTitle":"GPS","url":"/betaflight.com/docs/development/Gps#ublox","content":"###U-Blox NEO-M8​ Module\tCommentsU-blox Neo-M8N w/Compass\tPinout can be found in Pixfalcon manual. SDA and SCL can be attached to I2C bus for compass, TX and RX can be attached to UART for GPS. Power must be applied for either to function. Reyax RY825AI\tNEO-M8N, 18Hz UART USB interface GPS Glonass BeiDou QZSS antenna module flash. eBay mRo uGPS w/ LIS3MDL\tUltra compact and weights just 7.7 grams. Multiple constellation capabilities (GPS and GLONASS). Includes JST-GH pigtail. Available from mRobotics. NEO-7​ Module\tCommentsU-blox Neo-7M w/Compass\tHobbyKing You have to set align_mag in the CLI to get the magnetometer working correctly: set align_mag = 8 and don't forget to save. NEO-6​ Module\tCommentsUblox NEO-6M GPS with Compass\teBay "},{"title":"Serial NMEA​","type":1,"pageTitle":"GPS","url":"/betaflight.com/docs/development/Gps#serial-nmea","content":"MediaTek​ Module\tCommentsMTK 3329\tTested on hardware serial at 115200 baud (default) and on softserial at 19200 baud. The baudrate and refresh rate can be adjusted using the MiniGPS software (recommended if you lower the baudrate). The software will estimate the percentage of UART bandwidth used for your chosen baudrate and update rate. "},{"title":"In-flight Adjustments","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Inflight Adjustments","content":"","keywords":""},{"title":"Warning​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#warning","content":"Changing settings during flight can make your aircraft unstable and crash if you are not careful. "},{"title":"Recommendations​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#recommendations","content":"Always make adjustments while flying in a large open area.Make small adjustments and fly carefully to test your adjustment.Give yourself enough flying space and time to adjust to how your changes affect the behaviour of the aircraft.Remember to set adjustment channel switches/pots to the center position before powering on your TX and your aircraft.If possible configure switch warnings on your transmitter for dedicated adjustment switches.A momentary 3 position switch is the best choice of switch for this - i.e. one that re-centers itself when you let go of it. "},{"title":"Overview​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#overview","content":"There are two modes of operation. The first supports adjusting settings by incrementing/decrementing them through use of an aux channel, typically a three position switch, where the middle position makes no change, and the other positions either increment or decrement the selected setting. The other mode is Absolute mode where a pot (knob/slider) may be directly mapped and changes the selected setting to a value based on a center value, corresponding to mid-postion on the pot and a range of ± adjustment at the min/max positions of the pot. Both modes utilise two channels to make an adjustment. Channel\tUseRange\tThis channel is used to enable an adjustment. When the channel is set to fall withing the specified range, then the corresponding adjustment is enabled. This is similar to mode setting where a given mode is enabled when a channel is within a lower and upper range. Adjustment\tThis channel is used to control the change to the specified setting Settings are not saved automatically, connect a GUI, refresh and save or save using stick position when disarmed. Powering off without saving will discard the adjustments. Settings can be saved when disarmed using stick positions: Throttle Low, Yaw Left, Pitch Low, Roll Right. "},{"title":"Increment/Decrement mode​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#incrementdecrement-mode","content":"Up to 4 RX channels can be used to make different adjustments at the same time. The adjustment the Adjustment Channel makes is controlled by the Range Channel. The available adjustments are listed in this table. Example scenarios: Up to 4 3-position switches or pots can be used to adjust 4 different settings at the same time. A single 2/3/4/5/6/x position switch can be used to make one 3 position switch adjust one setting at a time. Any combination of switches and pots can be used. So you could have 6 POS switch. Adjustment switches​ The Adjustment switch is associated with the Adjustment Channel. The switch can be a ON-OFF-ON, POT or momentary ON-OFF-ON switch. The latter is recommended. When the switch is returned to the center position the value will not be increased/decreased. Each time you can press the switch high/low and then return it to the middle the value will change at least once, you do not have to wait before pressing the switch again if you want to increase/decrease at a faster rate. While the adjustment switch held is high/low, the adjustment function applies and increases/decreases the value being adjusted twice a second and the flight controller will beep shorter/longer, respectively. The system works similar to how a keyboard repeat delay works. Hint: With OpenTX transmitters you can combine two momentary OFF-ON switches to control a single channel. You could make it so that a momentary switch on the left of your transmitter decreases the value and a momentary switch on the right increases the value. Experiment with your mixer! "},{"title":"Absolute mode​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#absolute-mode","content":"The adjustment is made where the Adjustment Channel is an Aux channel connected to a pot (knob/slider). This provides an easier approach than using the Increment/Decrement mode as it is easier to keep track of the setting. Note that if the same pot is used as the Adjustment Channel to make multiple adjustments, there is a risk of a jump in values of the second setting when switching from the first if the pot is not centered. To avoid this it is recommended that if adjusting two different settings using the same pot, a three position switch be used for the Range Channel, with neither setting associated with the middle position. "},{"title":"Configuration​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#configuration","content":"The CLI command adjrange is used to configure adjustment ranges. 12 adjustment ranges can be defined. Show the current ranges using: adjrange Configure a range using: adjrange &lt;index&gt; 0 &lt;range channel&gt; &lt;range start&gt; &lt;range end&gt; &lt;adjustment function&gt; &lt;adjustment channel&gt; Argument\tValue\tMeaningIndex\t0 - 29\tSelect the adjustment range to configure 0\t0\tUsed as slot before Betaflight 4.1 Range Channel\t0 based index, AUX1 = 0, AUX2 = 1\tThe AUX channel to use to select an adjustment for a switch/pot Range Start\t900 - 2100. Steps of 25, e.g. 900, 925, 950...\tStart of range Range End\t900 - 2100\tEnd of range Adjustment function See Adjustment functions table Adjustment channel\t0 based index, AUX1 = 0, AUX2 = 1\tThe channel that is controlled by a 3 Position switch/Pot Center Value\tIf this is non-zero then Absolute Mode is used for this range otherwise Increment/Decrement Mode is used. In Absolute Mode this value is the value which will be assigned to the setting when the Adjustment Channel is set to mid-position. Scale Value\tThis specifies the amount that will be subtracted/added to the center value when the Adjustment Channel is at min/max respectively.\t Range Start/End values should match the values sent by your receiver. The Range Channel and the Adjustment Channel can be the same channel. This is useful when you want a single 3 Position switch to be dedicated to a single adjustment function regardless of other switch positions. The adjustment function is applied to the adjustment channel when range channel is between the range values. The adjustment is made when the adjustment channel is in the high or low position. high = mid_rc + 200, low = mid_rc - 200. by default this is 1700 and 1300 respectively. "},{"title":"Adjustment functions​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#adjustment-functions","content":"Value\tAdjustment\tNotes0\tNone 1\tRC RATE\tStep / absolute setting 2\tRC_EXPO\tStep / absolute setting 3\tTHROTTLE_EXPO\tStep / absolute setting 4\tPITCH_ROLL_RATE\tStep / absolute setting 5\tYAW_RATE\tStep / absolute setting 6\tPITCH_ROLL_P\tStep / absolute setting 7\tPITCH_ROLL_I\tStep / absolute setting 8\tPITCH_ROLL_D\tStep / absolute setting 9\tYAW_P\tStep / absolute setting 10\tYAW_I\tStep / absolute setting 11\tYAW_D\tStep / absolute setting 12\tRATE_PROFILE\tSwitch between 3 or 6 rate profiles (uses rate_6pos_switch setting) 13\tPITCH_RATE\tStep / absolute setting 14\tROLL_RATE\tStep / absolute setting 15\tPITCH_P\tStep / absolute setting 16\tPITCH_I\tStep / absolute setting 17\tPITCH_D\tStep / absolute setting 18\tROLL_P\tStep / absolute setting 19\tROLL_I\tStep / absolute setting 20\tROLL_D\tStep / absolute setting 21\tRC_RATE_YAW\tStep / absolute setting 22\tPITCH_ROLL_F\tStep / absolute setting 23\tFEEDFORWARD_TRANSITION\tStep / absolute setting 24\tHORIZON_STRENGTH\tSelect the horizon strength 25\tPID_AUDIO\tSelect the PID value to be turned into tones 26\tPITCH_F\tStep / absolute setting 27\tROLL_F\tStep / absolute setting 28\tYAW_F\tStep / absolute setting 29\tOSD_PROFILE\tSwitch between 3 OSD profiles 30\tLED_PROFILE\tSwitch between the RACE / BEACON / STATUS LED strip profiles "},{"title":"Examples​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#examples","content":""},{"title":"Example 1 - 3 Position switch used to adjust pitch/roll rate​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#example-1---3-position-switch-used-to-adjust-pitchroll-rate","content":"adjrange 0 0 3 900 2100 4 3 0 0  explained: configure adjrange 0 so that when aux4 (3) in the range 900-2100 then use adjustment 4 (pitch/roll rate) when aux 4 (3) is in the appropriate position.note that Center/Scale values are both zero, so this range will use increment/decrement mode. "},{"title":"Example 2 - 2 Position switch used to enable adjustment of RC rate via a 3 position switch​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#example-2---2-position-switch-used-to-enable-adjustment-of-rc-rate-via-a-3-position-switch","content":"adjrange 1 0 0 900 1700 0 2 0 0 adjrange 2 0 0 1700 2100 1 2 0 0  explained: configure adjrange 1 so that when aux1 (0) in the range 900-1700 then do nothing (0) when aux 3 (2) is in any position.configure adjrange 2 so that when aux1 (0) in the range 1700-2100 then use adjustment rc rate (1) when aux 3 (2) is in the appropriate position.note that Center/Scale values are both zero, so this range will use increment/decrement mode. Without the entire range of aux1 being defined there is nothing that would stop aux 3 adjusting the pitch/roll rate once aux 1 wasn't in the higher range. "},{"title":"Example 3 - 6 Position switch used to select PID tuning adjustments via a 3 position switch​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#example-3---6-position-switch-used-to-select-pid-tuning-adjustments-via-a-3-position-switch","content":"adjrange 3 0 1 900 1150 6 3 0 0 adjrange 4 0 1 1150 1300 7 3 0 0 adjrange 5 0 1 1300 1500 8 3 0 0 adjrange 6 0 1 1500 1700 9 3 0 0 adjrange 7 0 1 1700 1850 10 3 0 0 adjrange 8 0 1 1850 2100 11 3 0 0  explained: configure adjrange 3 so that when aux2 (1) in the range 900-1150 then use adjustment Pitch/Roll P (6) when aux 4 (3) is in the appropriate position.configure adjrange 4 so that when aux2 (1) in the range 1150-1300 then use adjustment Pitch/Roll I (7) when aux 4 (3) is in the appropriate position.configure adjrange 5 so that when aux2 (1) in the range 1300-1500 then use adjustment Pitch/Roll D (8) when aux 4 (3) is in the appropriate position.configure adjrange 6 so that when aux2 (1) in the range 1500-1700 then use adjustment Yaw P (9) when aux 4 (3) is in the appropriate position.configure adjrange 7 so that when aux2 (1) in the range 1700-1850 then use adjustment Yaw I (10) when aux 4 (3) is in the appropriate position.configure adjrange 8 so that when aux2 (1) in the range 1850-2100 then use adjustment Yaw D (11) when aux 4 (3) is in the appropriate position.note that Center/Scale values are both zero, so this range will use increment/decrement mode. "},{"title":"Example 4 - Use a single 3 position switch to change between 3 different rate profiles​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#example-4---use-a-single-3-position-switch-to-change-between-3-different-rate-profiles","content":"adjrange 11 0 3 900 2100 12 3 0 0  explained: configure adjrange 11 so that when aux4 (3) in the range 900-2100 then use adjustment Rate Profile (12) when aux 4 (3) is in the appropriate position.note that Center/Scale values are both zero, so this range will use increment/decrement mode. When the switch is low, rate profile 0 is selected. When the switch is medium, rate profile 1 is selected. When the switch is high, rate profile 2 is selected. "},{"title":"Example 5 - Use a single switch to enable absolute setting of Roll/Pitch P terms from two pots​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#example-5---use-a-single-switch-to-enable-absolute-setting-of-rollpitch-p-terms-from-two-pots","content":"adjrange 0 0 4 1450 1550 18 0 40 10 adjrange 1 0 4 1450 1550 15 1 58 20  explained: note that Center value is non-zero, so this range will use absolute mode.configure adjrange 0 so that when aux5 (3) in the range 1450-1550 then use aux 1 (0) to adjust Roll P Adjustment (18) such that the value will be 40 with the pot centered and 30/50 at min/max.configure adjrange 1 so that when aux5 (3) in the range 1450-1550 then use aux 2 (0) to adjust Pitch P Adjustment (15) such that the value will be 58 with the pot centered and 38/78 at min/max. "},{"title":"Example 6 - Use a single switch to enable absolute setting of Roll/Pitch P/I/D terms from three pots, selected using a single switch​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#example-6---use-a-single-switch-to-enable-absolute-setting-of-rollpitch-pid-terms-from-three-pots-selected-using-a-single-switch","content":"adjrange 0 0 4 950 1050 18 0 40 20 adjrange 1 0 4 950 1050 19 1 107 53 adjrange 2 0 4 950 1050 20 2 76 38 adjrange 3 0 4 1950 2050 15 0 63 16 adjrange 4 0 4 1950 2050 16 1 138 69 adjrange 5 0 4 1950 2050 17 2 66 33  explained: note that Center value is non-zero, so this range will use absolute mode. This assigns pots aux 1, aux 2, and aux 3 respectively to control P, I and D settings with the pots at mid-position giving the default P/I/D values and providing a range of adjustment of +/- 50%. When the aux 5 switch is in one end position then roll P/I/D will be adjusted and when the aux 5 switch is in the other end position, pitch P/I/D will be adjusted. In the aux 5 switch middle position nether will be adjusted. Thus one could center the pots, select roll on aux 5 and then adjust the P/I/D values in flight. Then land, move the aux 5 switch to center, center the pots, select pitch on the switch and then again adjust P/I/D in flight. "},{"title":"Configurator examples​","type":1,"pageTitle":"In-flight Adjustments","url":"/betaflight.com/docs/development/Inflight Adjustments#configurator-examples","content":"Note that the configurator does not currently support the Center/Scale values, however it may still be used to setup the ranges and then the CLI may be used to set the Center/Scale values. The following 5 images show valid configurations. In all cases the entire usable range for the Range Channel is used.          The following examples shows incorrect configurations - the entire usable range for the Range Channel is not used in both cases.  In the following example, the incorrect configuraton (above) has been corrected by adding a range that makes 'No changes'.  "},{"title":"Installation","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Installation","content":"","keywords":""},{"title":"Using the configurator​","type":1,"pageTitle":"Installation","url":"/betaflight.com/docs/development/Installation#using-the-configurator","content":"This is a generic procedure to flash a board using the configurator. The configurator does not yet support all boards, so please check the documentation corresponding to your board before proceeding. Make sure you have the Cleanflight Configurator installed, then: Connect the flight controller to the PC.Start the Cleanflight Configurator.Click on &quot;Disconnect&quot; if the configurator connected to the board automatically.Click on the &quot;Firmware Flasher&quot; tab.Make sure you have internet connectivity and click on the &quot;Load Firmware [Online]&quot; button.Click on the &quot;Choose a Firmware / Board&quot; dropdown menu, and select the latest stable version for your flight controller.IMPORTANT: Read and understand the release notes that are displayed. When upgrading review all release notes since your current firmware.If this is the first time Cleanflight is flashed to the board, tick the &quot;Full Chip Erase&quot; checkbox.Connect the flight controller board to the PC. Ensure the correct serial port is selected.Click on the &quot;Flash Firmware&quot; button and hold still (do not breathe, too).When the progress bar becomes green and reads &quot;Programming: SUCCESSFUL&quot; you are done! "},{"title":"Manually​","type":1,"pageTitle":"Installation","url":"/betaflight.com/docs/development/Installation#manually","content":"See the board specific flashing instructions. Upgrading When upgrading be sure to backup / dump your existing settings. Some firmware releases are not backwards compatible and default settings are restored when the FC detects an out of date configuration. "},{"title":"Backup/Restore process​","type":1,"pageTitle":"Installation","url":"/betaflight.com/docs/development/Installation#backuprestore-process","content":"See the CLI section of the docs for details on how to backup and restore your configuration via the CLI. "},{"title":"Integrated Yaw","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/IntegratedYaw","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Integrated Yaw","url":"/betaflight.com/docs/development/IntegratedYaw#overview","content":"Integrated Yaw is a feature which corrects a fundamental issue with quad control: while the pitch and roll axis are controlled by the thrust differentials the props generate yaw is different. Yaw gyro changes happen primarily due to inertia when the RPM of the motors change. A constant acceleration of yaw requires a constant rate of increase/decrease in the RPM of the yaw motor pairs. This means that on Yaw I has the effect of P and P the effect of D. FF is a control element that adds impetus based on the acceleration in setpoint rate. This results in several issues on yaw. Typically yaw will react very fast initially, then fall back and catch up again over time. Integrated Yaw fixes this by integrating the output of the yaw pid before applying them to the mixer. This normalizes the way the pids work. You can now tune as any other axis. It requires use of absolute control since no I is needed with Integrated Yaw. "},{"title":"Setup​","type":1,"pageTitle":"Integrated Yaw","url":"/betaflight.com/docs/development/IntegratedYaw#setup","content":"From Betaflight 4.1.0 / Betaflight configurator 10.6.0 on Integrated Yaw can be set up in configurator, in the 'PID Tuning' tab. As a fallback, these are the CLI commands to enable it: set use_integrated_yaw=on set iterm_rotation=off set abs_control_gain=10 set p_yaw=30 set d_yaw=20 set i_yaw=0 set f_yaw=60  The yaw pids serve as starting point and might need adjustment. Make sure I is low or zero since significant I leads to strong oscillations. Pitch and roll might require slight retuning - primarily reducing I a bit since absolute control acts similar to a second I term. To be noted: If i_yaw is not set to 0, then the following additional command is needed: set iterm_relax=RPY  "},{"title":"Cleanflight","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Introduction","content":"","keywords":""},{"title":"Primary Goals​","type":1,"pageTitle":"Cleanflight","url":"/betaflight.com/docs/development/Introduction#primary-goals","content":"Community driven.Friendly project atmosphere.Focus on the needs of users.Great flight performance.Understandable and maintainable code. "},{"title":"Hardware​","type":1,"pageTitle":"Cleanflight","url":"/betaflight.com/docs/development/Introduction#hardware","content":"See the flight controller hardware chapter for details. "},{"title":"Software​","type":1,"pageTitle":"Cleanflight","url":"/betaflight.com/docs/development/Introduction#software","content":"There are two primary components, the firmware and the configuration tool. The firmware is the code that runs on the flight controller board. The GUI configuration tool (configurator) is used to configure the flight controller, it runs on Windows, OSX and Linux. "},{"title":"Feedback & Contributing​","type":1,"pageTitle":"Cleanflight","url":"/betaflight.com/docs/development/Introduction#feedback--contributing","content":"We welcome all feedback. If you love it we want to hear from you, if you have problems please tell us how we could improve things so we can make it better for everyone. If you want to contribute please see the notes here: https://github.com/cleanflight/cleanflight#contributing Developers should read this: https://github.com/cleanflight/cleanflight/blob/master/CONTRIBUTING.md "},{"title":"Mixer","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Mixer","content":"","keywords":""},{"title":"Configuration​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#configuration","content":"To use a built-in mixing configuration, you can use the Chrome configuration GUI. It includes images of the various mixer types to assist in making the proper connections. See the Configuration section of the documentation for more information on the GUI. You can also use the Command Line Interface (CLI) to set the mixer type: Use mixer list to see a list of supported mixesSelect a mixer. For example, to select TRI, use mixer TRIYou must use save to preserve your changes "},{"title":"Supported Mixer Types​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#supported-mixer-types","content":"Name\tDescription\tMotors\tServosTRI\tTricopter\tM1-M3\tS1 QUADP\tQuadcopter-Plus\tM1-M4\tNone QUADX\tQuadcopter-X\tM1-M4\tNone BI\tBicopter (left/right)\tM1-M2\tS1, S2 GIMBAL\tGimbal control\tN/A\tS1, S2 Y6\tY6-copter\tM1-M6\tNone HEX6\tHexacopter-Plus\tM1-M6\tNone FLYING_WING\tFixed wing; elevons\tM1\tS1, S2 Y4\tY4-copter\tM1-M4\tNone HEX6X\tHexacopter-X\tM1-M6\tNone OCTOX8\tOctocopter-X (over/under)\tM1-M8\tNone OCTOFLATP\tOctocopter-FlatPlus\tM1-M8\tNone OCTOFLATX\tOctocopter-FlatX\tM1-M8\tNone AIRPLANE\tFixed wing; Ax2, R, E\tM1\tS1, S2, S3, S4 HELI_120_CCPM\t3D-capable Helicopter\tM1\tS1, S2, S3, S4 HELI_90_DEG VTAIL4\tQuadcopter with V-Tail\tM1-M4\tN/A HEX6H\tHexacopter-H\tM1-M6\tNone PPM_TO_SERVO DUALCOPTER\tDualcopter\tM1-M2\tS1, S2 SINGLECOPTER\tConventional helicopter\tM1\tS1 ATAIL4\tQuadcopter with A-Tail\tM1-M4\tN/A CUSTOM\tUser-defined CUSTOM AIRPLANE\tUser-defined airplane\tM1-M2\tS1-S8 CUSTOM TRICOPTER\tUser-defined tricopter  "},{"title":"Servo configuration​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#servo-configuration","content":"The cli servo command defines the settings for the servo outputs. The cli mixer smix command controls how the mixer maps internal FC data (RC input, PID stabilization output, channel forwarding, etc) to servo outputs. "},{"title":"Channel Forwarding​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#channel-forwarding","content":"Channel Forwarding allows you to forward your AUX channels directly to servos over PWM pins 5-8. You can enable it under features in the GUI or using the cli with feature CHANNEL_FORWARDING. This requires you to run PPM or another serial RC protocol, and is currently supported on NAZE and SPRACINGF3 targets. Note that if you have the led feature enabled on the NAZE target, AUX1-2 is mapped to PWM13-14 instead. So for instance if you enable this feature on a Naze AUX1 from your receiver will automatically be forwarded to PWM5 as a servo signal. "},{"title":"cli servo​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#cli-servo","content":"servo &lt;min&gt; &lt;max&gt; &lt;middle&gt; &lt;angleMin&gt; &lt;angleMax&gt; &lt;rate&gt; &lt;forwardFromChannel&gt; &lt;min&gt;, &lt;max&gt; - limit servo travel, in uS &lt;middle&gt; - mid value when not forwarding, value from servo mixer is added to this. &lt;angleMin&gt;, &lt;angleMax&gt; - unused &lt;rate&gt; - scale for value from servo mixer or gimbal input, -100% .. 100% &lt;forwardFromChannel&gt; - use RC channel value as reference instead of &lt;middle&gt;. Servo will follow given RC channel, with possible correction from servo mixer. &lt;min&gt;, &lt;max&gt; are still honored. "},{"title":"Servo filtering​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#servo-filtering","content":"A low-pass filter can be enabled for the servos. It may be useful for avoiding structural modes in the airframe, for example. "},{"title":"Configuration​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#configuration-1","content":"Currently it can only be configured via the CLI: Use set servo_lowpass_freq = nnn to select the cutoff frequency. Valid values range from 10Hz to 400Hz, second order filter is used.Use set servo_lowpass_enable = ON to enable filtering. "},{"title":"Tuning​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#tuning","content":"One method for tuning the filter cutoff is as follows: Ensure your vehicle can move at least somewhat freely in the troublesome axis. For example, if you are having yaw oscillations on a tricopter, ensure that the copter is supported in a way that allows it to rotate left and right to at least some degree. Suspension near the CG is ideal. Alternatively, you can just fly the vehicle and trigger the problematic condition you are trying to eliminate, although tuning will be more tedious. Tap the vehicle at its end in the axis under evaluation. Directly commanding the servo in question to move may also be used. In the tricopter example, tap the end of the tail boom from the side, or command a yaw using your transmitter. If your vehicle oscillates for several seconds or even continues oscillating indefinitely, then the filter cutoff frequency should be reduced. Reduce the value of servo_lowpass_freq by half its current value and repeat the previous step. If the oscillations are dampened within roughly a second or are no longer present, then you are done. Be sure to run save. "},{"title":"Custom Motor Mixing​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#custom-motor-mixing","content":"Custom motor mixing allows for completely customized motor configurations. Each motor must be defined with a custom mixing table for that motor. The mix must reflect how close each motor is with reference to the CG (Center of Gravity) of the flight controller. A motor closer to the CG of the flight controller will need to travel less distance than a motor further away. Steps to configure custom mixer in the CLI: Use mixer custom to enable the custom mixing.Use mmix reset to erase the any existing custom mixing.Optionally use mmix load &lt;name&gt; to start with one of available mixers.Issue a mmix statement for each motor. The mmix statement has the following syntax: mmix n THROTTLE ROLL PITCH YAW Mixing table parameter\tDefinitionn\tMotor ordering number THROTTLE\tIndicates how much throttle is mixed for this motor. All values used in current configurations are set to 1.0 (full throttle mixing), but other non-zero values may be used. Unused set to 0.0. ROLL\tIndicates how much roll authority this motor imparts to the roll of the flight controller. Accepts values nominally from -1.0 to 1.0. PITCH\tIndicates the pitch authority this motor has over the flight controller. Also accepts values nominally from -1.0 to 1.0. YAW\tIndicates the direction of the motor rotation in relationship with the flight controller. 1.0 = CCW -1.0 = CW. Note: the mmix command may show a motor mix that is not active, custom motor mixes are only active for models that use custom mixers. Note: You have to configure every motor number starting at 0. Your command will be ignored if there was no mmix command for the previous motor number (mixer stops on first THROTTLE value that is zero). See example 5. "},{"title":"Custom Servo Mixing​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#custom-servo-mixing","content":"Custom servo mixing rules can be applied to each servo. Rules are applied in the order they are defined. smix​ Prints current servo mixer Note: the smix command may show a servo mix that is not active, custom servo mixes are only active for models that use custom mixers. smix reset​ Erase custom mixer. Servo reversal in current profile ONLY is erased too. smix load &lt;name&gt;​ Load servo part of given configuration (&lt;name&gt; is from mixer list) smix &lt;rule&gt; &lt;servo&gt; &lt;source&gt; &lt;rate&gt; &lt;speed&gt; &lt;min&gt; &lt;max&gt; &lt;box&gt;​ &lt;rule&gt; is index of rule, used mainly for bookkeeping. Rules are applied in this order, but ordering has no influence on result in current code. &lt;servo&gt; id\tServo slot0\tGIMBAL PITCH 1\tGIMBAL ROLL 2\tELEVATOR / SINGLECOPTER_4 3\tFLAPPERON 1 (LEFT) / SINGLECOPTER_1 4\tFLAPPERON 2 (RIGHT) / BICOPTER_LEFT / DUALCOPTER_LEFT / SINGLECOPTER_2 5\tRUDDER / BICOPTER_RIGHT / DUALCOPTER_RIGHT / SINGLECOPTER_3 6\tTHROTTLE (Based ONLY on the first motor output) 7\tFLAPS Only some &lt;servo&gt; channels are connected to output, based on mode. For custom modes: RUDDER for CUSTOM_TRIELEVATOR ... FLAPS for CUSTOM_AIRPLANEno servos for CUSTOM GIMBAL handling is hard-coded, mmix rule is ignored. &lt;source&gt; id\tInput sources0\tStabilized ROLL 1\tStabilized PITCH 2\tStabilized YAW 3\tStabilized THROTTLE (ONLY the first motor output) 4\tRC ROLL 5\tRC PITCH 6\tRC YAW 7\tRC THROTTLE 8\tRC AUX 1 9\tRC AUX 2 10\tRC AUX 3 11\tRC AUX 4 12\tGIMBAL PITCH 13\tGIMBAL ROLL Stabilized ROLL/PITCH/YAW is taken directly from RC command when in PASSTHRU mode. &lt;rate&gt; is used to scale &lt;source&gt;, -100% - 100% is allowed. Note that servo reversal may be applied, see below. Zero &lt;rate&gt; will terminate smix table. &lt;speed&gt; will limit &lt;source&gt; speed when non-zero. This speed is taken per-rule, so you may limit only some sources. Value is maximal change of value per loop (1ms with default configuration) &lt;min&gt; &lt;max&gt; - Value in percentage of full servo range. For symmetrical servo limits (equal distance between mid and min/max), 0% is servo min, 50% is servo center, 100% is max servo position. When mid position is asymmetrical, 0% and 100% limits will be shifted. &lt;box&gt; rule will be applied only when &lt;box&gt; is zero or corresponding SERVOx mode is enabled. smix reverse​ Print current servo reversal configuration smix reverse &lt;servo&gt; &lt;source&gt; r|n​ Each &lt;source&gt; may be reversed or normal for given &lt;servo&gt;. It is almost equivalent to using negative &lt;rate&gt; in given rule, but &lt;min&gt;, &lt;max&gt; limits are applied to value before reversing.smix reverse works for non-custom mixers too. e.g. when using the TRI mixer to reverse the tail servo on a tricopter use this: smix reverse 5 2 r i.e. when mixing rudder servo slot (5) using Stabilized YAW input source (2) reverse the direction (r) smix reverse is a per-profile setting. So ensure you configure it for your profiles as required. "},{"title":"Example 1: A KK2.0 wired motor setup​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#example-1-a-kk20-wired-motor-setup","content":"Here's an example of a X configuration quad, but the motors are still wired using the KK board motor numbering scheme. KK2.0 Motor Layout 1CW 2CCW \\ / KK / \\ 4CCW 3CW  Use mixer customUse mmix resetUse mmix 0 1.0, 1.0, -1.0, -1.0 for the Front Left motor. It tells the flight controller the #1 motor is used, provides positive roll, provides negative pitch and is turning CW.Use mmix 1 1.0, -1.0, -1.0, 1.0 for the Front Right motor. It still provides a negative pitch authority, but unlike the front left, it provides negative roll authority and turns CCW.Use mmix 2 1.0, -1.0, 1.0, -1.0 for the Rear Right motor. It has negative roll, provides positive pitch when the speed is increased and turns CW.Use mmix 3 1.0, 1.0, 1.0, 1.0 for the Rear Left motor. Increasing motor speed imparts positive roll, positive pitch and turns CCW. "},{"title":"Example 2: A HEX-U Copter​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#example-2-a-hex-u-copter","content":"Here is an example of a U-shaped hex; probably good for herding giraffes in the Sahara. Because the 1 and 6 motors are closer to the roll axis, they impart much less force than the motors mounted twice as far from the FC CG. The effect they have on pitch is the same as the forward motors because they are the same distance from the FC CG. The 2 and 5 motors do not contribute anything to pitch because speeding them up and slowing them down has no effect on the forward/back pitch of the FC. HEX6-U .4........3. ............ .5...FC...2. ............ ...6....1...  Command\tRoll\tPitch\tYawUse mmix 0 1.0, -0.5, 1.0, -1.0\thalf negative\tfull positive\tCW Use mmix 1 1.0, -1.0, 0.0, 1.0\tfull negative\tnone\tCCW Use mmix 2 1.0, -1.0, -1.0, -1.0\tfull negative\tfull negative\tCW Use mmix 3 1.0, 1.0, -1.0, 1.0\tfull positive\tfull negative\tCCW Use mmix 4 1.0, 1.0, 0.0, -1.0\tfull positive\tnone\tCW Use mmix 5 1.0, 0.5, 1.0, 1.0\thalf positive\tfull positive\tCCW "},{"title":"Example 3: Custom tricopter​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#example-3-custom-tricopter","content":"mixer CUSTOMTRI mmix reset mmix 0 1.000 0.000 1.333 0.000 mmix 1 1.000 -1.000 -0.667 0.000 mmix 2 1.000 1.000 -0.667 0.000 smix reset smix 0 5 2 100 0 0 100 0 profile 0 smix reverse 5 2 r profile 1 smix reverse 5 2 r profile 2 smix reverse 5 2 r  "},{"title":"Example 4: Custom Airplane with Differential Thrust​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#example-4-custom-airplane-with-differential-thrust","content":"Here is an example of a custom twin engine plane with Differential ThrustMotors take the first 2 pins, the servos take pins as indicated in the [Servo slot] chart above. Settings bellow have motor yaw influence at &quot;0.3&quot;, you can change this number to have more or less differential thrust over the two motors. Note: You can look at the Motors tab in Cleanflight Cofigurator to see motor and servo outputs. Pins\tOutputs1\tLeft Engine 2\tRight Engine 3\tPitch / Elevator 4\tRoll / Aileron 5\tRoll / Aileron 6\tYaw / Rudder 7\t[EMPTY] 8\t[EMPTY] mixer CUSTOMAIRPLANE mmix reset mmix 0 1.0 0.0 0.0 0.3 # Left Engine mmix 1 1.0 0.0 0.0 -0.3 # Right Engine smix reset # Rule Servo Source Rate Speed Min Max Box smix 0 3 0 100 0 0 100 0 # Roll / Aileron smix 1 4 0 100 0 0 100 0 # Roll / Aileron smix 2 5 2 100 0 0 100 0 # Yaw / Rudder smix 3 2 1 100 0 0 100 0 # Pitch / Elevator  "},{"title":"Example 5: Use motor output 0,1,2,4 because your output 3 is broken​","type":1,"pageTitle":"Mixer","url":"/betaflight.com/docs/development/Mixer#example-5-use-motor-output-0124-because-your-output-3-is-broken","content":"For this to work you have to make a dummy mmix for motor 3. We do this by just saying it has 0 impact on yaw, roll and pitch. mixer custom mmix reset mmix 0 1.0, -1.0, 1.0, -1.0 mmix 1 1.0, -1.0, -1.0, 1.0 mmix 2 1.0, 1.0, 1.0, 1.0 mmix 3 1.0, 0.0, 0.0, 0.0 mmix 4 1.0, 1.0, -1.0, -1.0 save  "},{"title":"Modes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Modes","content":"","keywords":""},{"title":"Auto-leveled flight​","type":1,"pageTitle":"Modes","url":"/betaflight.com/docs/development/Modes#auto-leveled-flight","content":"The default flight mode does not stabilize the multicopter around the roll and the pitch axes. That is, the multicopter does not level on its own if you center the pitch and roll sticks on the radio. Rather, they work just like the yaw axis: the rate of rotation of each axis is controlled directly by the related stick on the radio, and by leaving them centered the flight controller will just try to keep the multicopter in whatever orientation it's in. This default mode is called &quot;Rate&quot; mode, also sometime called &quot;Acro&quot; (from &quot;acrobatic&quot;) or &quot;Manual&quot; mode, and is active whenever no auto-leveled mode is enabled. If your flight controller is equipped with a 3 axis accelerometer (very likely), then you can enable one of the two available auto leveled flight modes. "},{"title":"Mode details​","type":1,"pageTitle":"Modes","url":"/betaflight.com/docs/development/Modes#mode-details","content":""},{"title":"Angle​","type":1,"pageTitle":"Modes","url":"/betaflight.com/docs/development/Modes#angle","content":"In this auto-leveled mode the roll and pitch channels control the angle between the relevant axis and the vertical, achieving leveled flight just by leaving the sticks centered. "},{"title":"Horizon​","type":1,"pageTitle":"Modes","url":"/betaflight.com/docs/development/Modes#horizon","content":"This hybrid mode works exactly like the previous ANGLE mode with centered roll and pitch sticks (thus enabling auto-leveled flight), then gradually behaves more and more like the default RATE mode as the sticks are moved away from the center position. "},{"title":"Headfree​","type":1,"pageTitle":"Modes","url":"/betaflight.com/docs/development/Modes#headfree","content":"In this mode, the &quot;head&quot; of the multicopter is always pointing to the same direction as when the feature was activated. This means that when the multicopter rotates around the Z axis (yaw), the controls will always respond according the same &quot;head&quot; direction. With this mode it is easier to control the multicopter, even fly it with the physical head towards you since the controls always respond the same. This is a friendly mode to new users of multicopters and can prevent losing the control when you don't know the head direction. "},{"title":"Airmode​","type":1,"pageTitle":"Modes","url":"/betaflight.com/docs/development/Modes#airmode","content":"In the standard mixer / mode, when the roll, pitch and yaw gets calculated and saturates a motor, all motors will be reduced equally. When a motor goes below minimum it gets clipped off. Say you had your throttle just above minimum and tried to pull a quick roll - since two motors can't go any lower, you essentially get half the power (half of your PID gain). If your inputs would have asked for more than a 100% difference between the high and low motors, the low motors would get clipped, breaking the symmetry of the motor balance by unevenly reducing the gain. Airmode will enable full PID correction during zero throttle and give you ability for nice zero throttle gliding and acrobatics. In addition, the cornering / turns will be much tighter now as there is always maximum possible correction performed. Airmode can also be enabled to work at all times by always putting it on the same switch such as your arm switch, alternatively you can enable/disable it in air. Additional points and benefits: Airmode will additionally fully enable Iterm at zero throttle. Note that there is still some protection on the ground when throttle zeroed (below min\\check) and roll/pitch sticks centered. This is a basic protection to limit motors spooling up on the ground.Also the Iterm will be reset above 70% of stick input in acro mode to prevent quick Iterm windups during finishes of rolls and flips, which will provide much cleaner and more natural stops of flips and rolls what again opens the ability to have higher I gains for some. Note that AIRMODE will also overrule motor stop function! It will basically also act as an idle up switch. "},{"title":"Auxiliary Configuration​","type":1,"pageTitle":"Modes","url":"/betaflight.com/docs/development/Modes#auxiliary-configuration","content":"Spare auxiliary receiver channels can be used to enable/disable modes. Some modes can only be enabled this way. Configure your transmitter so that switches or dials (potentiometers) send channel data on channels 5 and upwards (the first 4 channels are usually occupied by the throttle, aileron, rudder, and elevator channels). e.g. You can configure a 3 position switch to send 1000 when the switch is low, 1500 when the switch is in the middle and 2000 when the switch is high. Configure your tx/rx channel limits to use values between 1000 and 2000. The range used by mode ranges is fixed to 900 to 2100. When a channel is within a specified range the corresponding mode is enabled. Use the GUI configuration tool to allow easy configuration when channel. "},{"title":"CLI​","type":1,"pageTitle":"Modes","url":"/betaflight.com/docs/development/Modes#cli","content":"There is a CLI command, aux that allows auxiliary configuration. It takes 5 arguments as follows: AUX range slot number (0 - 39)mode id (see mode list above)AUX channel index (AUX1 = 0, AUX2 = 1,... etc)low position, from 900 to 2100. Should be a multiple of 25.high position, from 900 to 2100. Should be a multiple of 25. If the low and high position are the same then the values are ignored. e.g. Configure AUX range slot 0 to enable ARM when AUX1 is within 1700 and 2100. aux 0 0 0 1700 2100  You can display the AUX configuration by using the aux command with no arguments. "},{"title":"Oneshot","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Oneshot","content":"","keywords":""},{"title":"Supported ESCs​","type":1,"pageTitle":"Oneshot","url":"/betaflight.com/docs/development/Oneshot#supported-escs","content":"FlyDuino KISS ESCs are able to use the Oneshot125 protocol out of the box. There is only one soldering needed. BLHeli rev13.0 also supports Oneshot125 and will be automatically selected by the ESC without additional work. "},{"title":"Supported Boards​","type":1,"pageTitle":"Oneshot","url":"/betaflight.com/docs/development/Oneshot#supported-boards","content":"The Naze boards are supported, and have been flight tested in a number of configurations. CC3D boards have been tested with a PPM receiver, however parallel PWM receivers might not work properly with this board. "},{"title":"Enabling Oneshot​","type":1,"pageTitle":"Oneshot","url":"/betaflight.com/docs/development/Oneshot#enabling-oneshot","content":"To configure Oneshot, you must turn off any power to your ESCs. It is a good idea at this stage to configure your ESC for oneshot mode (by soldering JP1 in the case of the KISS ESC). Connect a USB cable to your board, and connect using the Chrome GUI app. Go to the CLI tab, and type the following: feature ONESHOT125 save  Then you can safely power up your ESCs again. "},{"title":"Configuration​","type":1,"pageTitle":"Oneshot","url":"/betaflight.com/docs/development/Oneshot#configuration","content":"The process for calibrating oneshot ESCs is the same as any other ESC. Ensure that your ESCs are not powered up.Connect to the board using a USB cable, and change to the motor test page.Set the motor speed to maximum using the main slider.Connect power to your ESCs. They will beep.Click on the slider to bring the motor speed down to zero. The ESCs will beep again, usually a couple of times.Disconnect the power from your ESCs.Re-connect power to your ESCs, and verify that moving the motor slider makes your motors spin up normally. "},{"title":"References​","type":1,"pageTitle":"Oneshot","url":"/betaflight.com/docs/development/Oneshot#references","content":"FlyDuino (http://flyduino.net/) "},{"title":"LED Strip","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/LedStrip","content":"","keywords":""},{"title":"LED Strip Profiles​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#led-strip-profiles","content":"The LED strip feature supports 3 LED strip profiles, STATUS, RACE and BEACON. The selected profile can be changed from the CLI, OSD LED strip menu or from an adjustment channel, i.e. switch on your radio. Take note that the adjustment channel from your radio overrides all other LED strip profile selection options. "},{"title":"STATUS Profile​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#status-profile","content":"The STATUS profile is used to display all the information mentioned below, i.e. warning indications, Larson scanner etc. Addressable LED strips can be used to show information from the flight controller system, the current implementation supports the following: Up to 32 LEDs. (Support for more than 32 LEDs is possible, it just requires additional development.)Indicators showing pitch/roll stick positions.Heading/Orientation lights.Flight mode specific color schemes.Low battery warning.AUX operated on/off switch.GPS state.RSSI level.Battery level. "},{"title":"RACE Profile​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#race-profile","content":"The RACE profile is used to set ALL strip LEDs to the selected color for racing, i.e. to identify quads based on LED color. The LED color is fixed and no other information is displayed. "},{"title":"BEACON Profile​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#beacon-profile","content":"The BEACON profile is used to find a lost quad, it flashes all LEDs white once per second. Again in this profile no other information is displayed on the LEDs. "},{"title":"LED Profile Configuration​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#led-profile-configuration","content":"OPTION 1: Configure an adjustment range to change the LED strip profile from your radio​ Turn on Expert mode - see top right of configurator screen &quot;Enable Expert Mode&quot;.The LED strip profile selection is performed using an adjustment configured via the Adjustments tab. Enable an adjustment. (&quot;If enabled&quot;)Select the AUX channel to be used to change the LED strip profile. (&quot;when channel&quot;)Set the range to cover the entire range of the selected AUX channel. (&quot;is in ranges&quot;)For the action select &quot;RC Rate Adjustment&quot;. (&quot;then apply&quot;) This will be configured in the CLI since LED strip profiles is not supported by Configurator 10.4.0 and earlier. &quot;RC Rate Adjustment&quot; is only selected to make the configuration in the CLI a little easier below.Select the &quot;via channel&quot; to match the selected AUX channel of above. (&quot;when channel&quot;).Save Open the CLI and type adjrange followed by enter.Copy the adjrange configured in step 2. above and paste it in the command window. Change the '1' following the range of the channel to '30' and press enter. Type save and press enter. The configured adjrange will now be saved and the FC will reboot.Configure the AUX channel on your radio. When this channel is changed the selected LED strip profile will change between STATUS, RACE and BEACON, you should see the LED function change as you do this. OPTION 2: Use the CLI to select the LED strip profile (i.e. not selecting the LED strip profile with your radio)​ Open the CLI.Type get ledstrip_profile followed by enter to display the currently selected LED strip profile.Type set ledstrip_profile=x where x is the profile STATUS, RACE or BEACON and press enter.Type save followed by enter to save the selected LED strip profile. OPTION 3: By using the OSD​ Open the OSD menu by yawing left and pitching forward on your radio.Using the pitch stick, move down to the LED Strip menu and roll right to enter the menu.The profile and race color can be configured using the left stick to go back and the right stick to navigate up/down and to change the selected value.Use the left stick to go to the top level menu and select save &amp; reboot to complete. RACE COLOR: The Race color can be configured using the CLI:​ Open the CLI.Type get ledstrip_race_color followed by enter to display the currently selected race color number.Type set ledstrip_race_color=x where x is the required color.Type save followed by enter to save the race color to be used. BRIGHTNESS: The brightness can be configured using the CLI:​ Open the CLI.Type get ledstrip_brightness followed by enter to display the current brightness.Type set ledstrip_brightness=x where x is the brightness in percentage between 5 and 100.Type save followed by enter to save the brightness level to be used. "},{"title":"Supported hardware​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#supported-hardware","content":"Only strips of 32 WS2811/WS2812 LEDs are supported currently. If the strip is longer than 32 LEDs it does not matter, but only the first 32 are used. WS2812 LEDs require an 800khz signal and precise timings and thus requires the use of a dedicated hardware timer. Note: Not all WS2812 ICs use the same timings, some batches use different timings. It could be possible to be able to specify the timings required via CLI if users request it. "},{"title":"Tested Hardware​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#tested-hardware","content":"Adafruit NeoPixel Jewel 7 (preliminary testing) Measured current consumption in all white mode ~ 350 mA.Fits well under motors on mini 250 quads. Adafruit NeoPixel Stick (works well) Measured current consumption in all white mode ~ 350 mA. Aliexpress SK6812 RBGWW strip (works well) Alternative Adafruit NeoPixel Stick RGBW "},{"title":"WS2811 vs WS2812​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#ws2811-vs-ws2812","content":"The WS2811 is a LED driver IC which is connected to an RGB LED. It accepts data in the form of 8 bits each of Red-Green-Blue. The WS2812 is integrated into the package of a 50:50 LED rather than as a separate device. It accepts data in the form of 8 bits each of Green-Red-Blue. With the SK6812 also GRBW variants are supported, which have a fourth (white) channel and such provide a much cleaner white color. It is thus possible, depending on the LED board/strip being used that either Red-Green-Blue or Green-Red-Blue encoding may be required. This may be controlled by setting the following. set ledstrip_grb_rgb = RGB  or set ledstrip_grb_rgb = GRB  or set ledstrip_grb_rgb = GRBW  Then confirm the required setting by simply setting an LED to be green. If it lights up red, you have the wrong setting. Afterwards check if the second LED also lights up red - if not, you might have 4-color SK6812 LEDs and would have to select GRBW. "},{"title":"Connections​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#connections","content":"WS2812 LED strips generally require a single data line, 5V and GND. WS2812 LEDs on full brightness can consume quite a bit of current. It is recommended to verify the current draw and ensure your supply can cope with the load. On a multirotor that uses multiple BEC ESC's you can try use a different BEC to the one the FC uses. e.g. ESC1/BEC1 -&gt; FC, ESC2/BEC2 -&gt; LED strip. It's also possible to power one half of the strip from one BEC and the other half from another BEC. Just ensure that the GROUND is the same for all BEC outputs and LEDs. Target\tPin\tLED Strip\tSignalNaze\tRC5\tData In\tPA6 CC3D\tRCO5\tData In\tPB4 ChebuzzF3/F3Discovery\tPB8\tData In\tPB8 Sparky\tPWM5\tData In\tPA6 Since RC5 is also used for SoftSerial on the Naze it means that you cannot use SoftSerial and led strips at the same time. Additionally, since RC5 is also used for Parallel PWM RC input on both the Naze, Chebuzz and STM32F3Discovery targets, led strips can not be used at the same time at Parallel PWM. If you have LEDs that are intermittent, flicker or show the wrong colors then drop the VIN to less than 4.7v, e.g. by using an inline diode on the VIN to the LED strip. The problem occurs because of the difference in voltage between the data signal and the power signal. The WS2811 LED's require the data signal (Din) to be between 0.3 Vin (Max) and 0.7 VIN (Min) to register valid logic low/high signals. The LED pin on the CPU will always be between 0v to ~3.3v, so the Vin should be 4.7v (3.3v / 0.7 = 4.71v). Some LEDs are more tolerant of this than others. The datasheet can be found here: http://www.adafruit.com/datasheets/WS2812.pdf "},{"title":"Configuration​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#configuration","content":"The led strip feature can be configured via the GUI. GUI: Enable the Led Strip feature via the GUI under setup. Configure the LEDs from the Led Strip tab in the Betaflight GUI. First setup how the LEDs are laid out so that you can visualize it later as you configure and so the flight controller knows how many LEDs there are available. There is a step by step guide on how to use the GUI to configure the Led Strip feature using the GUI http://blog.oscarliang.net/setup-rgb-led-cleanflight/ which was published early 2015 by Oscar Liang which may or may not be up-to-date by the time you read this. CLI: Enable the LED_STRIP feature via the cli: feature LED_STRIP  If you enable LED_STRIP feature and the feature is turned off again after a reboot then check your config does not conflict with other features, as above. Configure the LEDs using the led command. The led command takes either zero or two arguments - an zero-based led number and a sequence which indicates pair of coordinates, direction flags and mode flags and a color. If used with zero arguments it prints out the led configuration which can be copied for future reference. Each led is configured using the following template: x,y:ddd:mmm:cc x and y are grid coordinates of a 0 based 16x16 grid, north west is 0,0, south east is 15,15ddd specifies the directions, since an led can face in any direction it can have multiple directions. Directions are: N - NorthE - EastS - SouthW - WestU - UpD - Down For instance, an LED that faces South-east at a 45 degree downwards angle could be configured as SED. Note: It is perfectly possible to configure an LED to have all directions NESWUD but probably doesn't make sense. mmm specifies the modes that should be applied an LED. Each LED has one base function: C - Color.F - Flight mode &amp; OrientationA - Armed state.R - Ring thrust state.G - GPS state.S - RSSSI level.L - Battery Level. And each LED has overlays: W - Wwarnings.I - Indicator.T - Thrust state.B - Blink (flash twice) mode.O - LarsOn Scanner (Cylon Effect).V - VTX Frequency. cc specifies the color number (0 based index). Example: led 0 0,15:SD:AWI:0 led 1 15,0:ND:AWI:0 led 2 0,0:ND:AWI:0 led 3 0,15:SD:AWI:0 led 4 7,7::C:1 led 5 8,8::C:2 led 6 8,9::B:1  To erase an led, and to mark the end of the chain, use 0,0:: as the second argument, like this: led 4 0,0:::  It is best to erase all LEDs that you do not have connected. "},{"title":"Modes​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#modes","content":"Warning​ This mode simply uses the LEDs to flash when warnings occur. Warning\tLED Pattern\tNotesArm-lock enabled\tflash between green and off\toccurs during calibration or when unarmed and the aircraft is tilted too much Low Battery\tflash red and off\tbattery monitoring must be enabled. May trigger temporarily under high-throttle due to voltage drop Failsafe\tflash between light blue and yellow\tFailsafe must be enabled Flash patterns appear in order, so that it's clear which warnings are enabled. GPS state​ This mode shows the GPS state and satellite count. No fix = red LED 3D fix = green LED The LEDs will blink as many times as the satellite count, then pause and start again. RSSI level​ This mode binds the LED color to RSSI level. Color\tRSSIGreen\t100% Lime green\t80% Yellow\t60% Orange\t40% Red\t20% Deep pink\t0% When RSSI is below 50% is reached, LEDs will blink slowly, and they will blink fast when under 20%. Battery level​ This mode binds the LED color to remaining battery capacity. Color\tCapacityGreen\t100% Lime green\t80% Yellow\t60% Orange\t40% Red\t20% Deep pink\t0% When Warning or Critical voltage is reached, LEDs will blink slowly or fast. Note: this mode requires a current sensor. If you don't have the actual device you can set up a virtual current sensor (see Battery). Blink​ This mode blinks the current LED, alternatively from black to the current active color. Larson Scanner (Cylon Effect)​ The Larson Scanner replicates the scanning &quot;eye&quot; effect seen on the mechanical Cylons and on Kitt from Knight Rider. This overlay dims all of the LEDs it is assigned to and brightens certain ones at certain times in accordance with the animation. The animation is active regardless of arm state. VTX Frequency​ This overlay makes the LED color dependent on the current channel of the VTX, in case it is equipped with SmartAudio or IRC Tramp. The color is selected according to the following table: Frequency range\tDefault color\tColor index&lt;= 5672\tWhite\t1 &gt; 5672 &lt;= 5711\tRed\t2 &gt; 5711 &lt;= 5750\tOrange\t3 &gt; 5750 &lt;= 5789\tYellow\t4 &gt; 5789 &lt;= 5829\tGreen\t6 &gt; 5829 &lt;= 5867\tBlue\t10 &gt; 5867 &lt;= 5906\tDark violet\t11 &gt; 5906\tDeep pink\t13 The default color can be changed by double-clicking the color and moving the Hue slider or by using the color command in the CLI. Flight Mode &amp; Orientation​ This mode shows the flight mode and orientation. When flight modes are active then the LEDs are updated to show different colors depending on the mode, placement on the grid and direction. LEDs are set in a specific order: LEDs that marked as facing up or down.LEDs that marked as facing west or east AND are on the west or east side of the grid.LEDs that marked as facing north or south AND are on the north or south side of the grid. That is, south facing LEDs have priority. The mapping between modes led placement and colors is currently fixed and cannot be changed. Indicator​ This mode flashes LEDs that correspond to roll and pitch stick positions. i.e. they indicate the direction the craft is going to turn. Mode\tDirection\tLED ColorOrientation\tNorth\tWHITE Orientation\tEast\tDARK VIOLET Orientation\tSouth\tRED Orientation\tWest\tDEEP PINK Orientation\tUp\tBLUE Orientation\tDown\tORANGE Head Free\tNorth\tLIME GREEN Head Free\tEast\tDARK VIOLET Head Free\tSouth\tORANGE Head Free\tWest\tDEEP PINK Head Free\tUp\tBLUE Head Free\tDown\tORANGE Horizon\tNorth\tBLUE Horizon\tEast\tDARK VIOLET Horizon\tSouth\tYELLOW Horizon\tWest\tDEEP PINK Horizon\tUp\tBLUE Horizon\tDown\tORANGE Angle\tNorth\tCYAN Angle\tEast\tDARK VIOLET Angle\tSouth\tYELLOW Angle\tWest\tDEEP PINK Angle\tUp\tBLUE Angle\tDown\tORANGE Mag\tNorth\tMINT GREEN Mag\tEast\tDARK VIOLET Mag\tSouth\tORANGE Mag\tWest\tDEEP PINK Mag\tUp\tBLUE Mag\tDown\tORANGE Baro\tNorth\tLIGHT BLUE Baro\tEast\tDARK VIOLET Baro\tSouth\tRED Baro\tWest\tDEEP PINK Baro\tUp\tBLUE Baro\tDown\tORANGE Armed state​ This mode toggles LEDs between green and blue when disarmed and armed, respectively. Note: Armed State cannot be used with Flight Mode. Thrust state​ This mode fades the current LED color to the previous/next color in the HSB color space depending on throttle stick position. When the throttle is in the middle position the color is unaffected, thus it can be mixed with orientation colors to indicate orientation and throttle at the same time. Thrust should normally be combined with Color or Mode/Orientation. Thrust ring state​ This mode is allows you to use one or multiple led rings (e.g. NeoPixel ring) for an afterburner effect. LEDs with this mode will light up with their assigned color in a repeating sequence. Assigning the color black to an LED with the ring mode will prevent the LED from lighting up. A better effect is achieved when LEDs configured for thrust ring have no other functions. LED direction and X/Y positions are irrelevant for thrust ring LED state. The order of the LEDs that have the state determines how the LED behaves, and the throttle value determines the animation rate. The animation is only active while armed. Each LED of the ring can be a different color. The color can be selected between the 16 colors available. For example, led 0 is set as a Ring thrust state led in color 13 as follow. led 0 2,2::R:13  LED strips and rings can be combined. Solid Color​ The mode allows you to set an LED to be permanently on and set to a specific color. x,y position and directions are ignored when using this mode. Other modes will override or combine with the color mode. For example, to set led 0 to always use color 10 you would issue this command. led 0 0,0::C:10  "},{"title":"Colors​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#colors","content":"Colors can be configured using the cli color command. The color command takes either zero or two arguments - an zero-based color number and a sequence which indicates pair of hue, saturation and value (HSV). See http://en.wikipedia.org/wiki/HSL_and_HSV If used with zero arguments it prints out the color configuration which can be copied for future reference. The default color configuration is as follows: Index\tColor0\tblack 1\twhite 2\tred 3\torange 4\tyellow 5\tlime green 6\tgreen 7\tmint green 8\tcyan 9\tlight blue 10\tblue 11\tdark violet 12\tmagenta 13\tdeep pink 14\tblack 15\tblack color 0 0,0,0 color 1 0,255,255 color 2 0,0,255 color 3 30,0,255 color 4 60,0,255 color 5 90,0,255 color 6 120,0,255 color 7 150,0,255 color 8 180,0,255 color 9 210,0,255 color 10 240,0,255 color 11 270,0,255 color 12 300,0,255 color 13 330,0,255 color 14 0,0,0 color 15 0,0,0  "},{"title":"Mode Colors Assignement​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#mode-colors-assignement","content":"Mode Colors can be configured using the cli mode_color command. No arguments: lists all mode colorsarguments: mode, function, color First 8 groups of ModeIndexes are : mode\tname0\torientation 1\theadfree 2\thorizon 3\tangle 4\tmag 5\tbaro 6\tspecial 7\tchannel Modes 0 to 5 functions: function\tname0\tnorth 1\teast 2\tsouth 3\twest 4\tup 5\tdown Mode 6 use these functions: function\tname0\tdisarmed 1\tarmed 2\tanimation 3\tbackground 4\tblink background 5\tgps: no satellites 6\tgps: no fix 7\tgps: 3D fix The ColorIndex is picked from the colors array (&quot;palette&quot;). Mode 7 is used along with Thrust state to make the LED color dependent on a channel different from the throttle. Examples (using the default colors): set armed color to red: mode_color 6 1 2set disarmed color to yellow: mode_color 6 0 4set Headfree mode 'south' to Cyan: mode_color 1 2 8set color dependent on AUX 1 in Thrust state: mode_color 7 0 4 "},{"title":"Positioning​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#positioning","content":"Cut the strip into sections as per diagrams below. When the strips are cut ensure you reconnect each output to each input with cable where the break is made. e.g. connect 5V out to 5V in, GND to GND and Data Out to Data In. Orientation is when viewed with the front of the aircraft facing away from you and viewed from above. "},{"title":"Example 12 LED config​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#example-12-led-config","content":"The default configuration is as follows led 0 15,15:ES:IA:0 led 1 15,8:E:WF:0 led 2 15,7:E:WF:0 led 3 15,0:NE:IA:0 led 4 8,0:N:F:0 led 5 7,0:N:F:0 led 6 0,0:NW:IA:0 led 7 0,7:W:WF:0 led 8 0,8:W:WF:0 led 9 0,15:SW:IA:0 led 10 7,15:S:WF:0 led 11 8,15:S:WF:0 led 12 7,7:U:WF:0 led 13 8,7:U:WF:0 led 14 7,8:D:WF:0 led 15 8,8:D:WF:0 led 16 8,9::R:3 led 17 9,10::R:3 led 18 10,11::R:3 led 19 10,12::R:3 led 20 9,13::R:3 led 21 8,14::R:3 led 22 7,14::R:3 led 23 6,13::R:3 led 24 5,12::R:3 led 25 5,11::R:3 led 26 6,10::R:3 led 27 7,9::R:3 led 28 0,0:::0 led 29 0,0:::0 led 30 0,0:::0 led 31 0,0:::0  Which translates into the following positions:  6 3 \\ / \\ 5-4 / \\ FRONT / 7,8 | 12-15 | 1,2 / BACK \\ / 10,11 \\ / \\ 9 0 RING 16-27  LEDs 0,3,6 and 9 should be placed underneath the quad, facing downwards. LEDs 1-2, 4-5, 7-8 and 10-11 should be positioned so the face east/north/west/south, respectively. LEDs 12-13 should be placed facing down, in the middle LEDs 14-15 should be placed facing up, in the middle LEDs 16-27 should be placed in a ring and positioned at the rear facing south. This is the default so that if you don't want to place LEDs top and bottom in the middle just connect the first 12 LEDs. "},{"title":"Example 16 LED config​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#example-16-led-config","content":"led 0 15,15:SD:IA:0 led 1 8,8:E:FW:0 led 2 8,7:E:FW:0 led 3 15,0:ND:IA:0 led 4 7,7:N:FW:0 led 5 8,7:N:FW:0 led 6 0,0:ND:IA:0 led 7 7,7:W:FW:0 led 8 7,8:W:FW:0 led 9 0,15:SD:IA:0 led 10 7,8:S:FW:0 led 11 8,8:S:FW:0 led 12 7,7:D:FW:0 led 13 8,7:D:FW:0 led 14 7,7:U:FW:0 led 15 8,7:U:FW:0  Which translates into the following positions:  6 3 \\ / \\ 5-4 / 7 \\ FRONT / 2 | 12-15 | 8 / BACK \\ 1 / 10-11 \\ / \\ 9 0  LEDs 0,3,6 and 9 should be placed underneath the quad, facing downwards. LEDs 1-2, 4-5, 7-8 and 10-11 should be positioned so the face east/north/west/south, respectively. LEDs 12-13 should be placed facing down, in the middle LEDs 14-15 should be placed facing up, in the middle "},{"title":"Example 28 LED config​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#example-28-led-config","content":"#right rear cluster led 0 9,9:S:FWT:0 led 1 10,10:S:FWT:0 led 2 11,11:S:IA:0 led 3 11,11:E:IA:0 led 4 10,10:E:AT:0 led 5 9,9:E:AT:0 # right front cluster led 6 10,5:S:F:0 led 7 11,4:S:F:0 led 8 12,3:S:IA:0 led 9 12,2:N:IA:0 led 10 11,1:N:F:0 led 11 10,0:N:F:0 # center front cluster led 12 7,0:N:FW:0 led 13 6,0:N:FW:0 led 14 5,0:N:FW:0 led 15 4,0:N:FW:0 # left front cluster led 16 2,0:N:F:0 led 17 1,1:N:F:0 led 18 0,2:N:IA:0 led 19 0,3:W:IA:0 led 20 1,4:S:F:0 led 21 2,5:S:F:0 # left rear cluster led 22 2,9:W:AT:0 led 23 1,10:W:AT:0 led 24 0,11:W:IA:0 led 25 0,11:S:IA:0 led 26 1,10:S:FWT:0 led 27 2,9:S:FWT:0   16-18 9-11 19-21 \\ / 6-8 \\ 12-15 / \\ FRONT / / BACK \\ / \\ 22-24 / \\ 3-5 25-27 0-2  All LEDs should face outwards from the chassis in this configuration. Note: This configuration is specifically designed for the Alien Spider AQ50D PRO 250mm frame. "},{"title":"Troubleshooting​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#troubleshooting","content":"On initial power up the LEDs on the strip will be set to WHITE. This means you can attach a current meter to verify the current draw if your measurement equipment is fast enough. Most 5050 LEDs will draw 0.3 Watts a piece. This also means that you can make sure that each R,G and B LED in each LED module on the strip is also functioning. After a short delay the LEDs will show the unarmed color sequence and or low-battery warning sequence. Also check that the feature LED_STRIP was correctly enabled and that it does not conflict with other features, as above. "},{"title":"Resource remapping​","type":1,"pageTitle":"LED Strip","url":"/betaflight.com/docs/development/LedStrip#resource-remapping","content":"If your board does not have a physical LED_STRIP pin you still can use this feature but configuration is dependend on target resources. An example for a Foxeer F745V3_AIO board using SERIAL_RX 1 as LED_STRIP: resource SERIAL_RX 1 A10 resource SERIAL_RX 1 NONE resource LED_STRIP 1 A10 timer show # show current timer list timer A10 list # check available timers for next commmand timer A10 AF1 dma show # show current dma list dma pin A10 list # check available dma pins for next command dma pin A10 0 feature LED_STRIP save  "},{"title":"OSD Glyphs","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/osd","content":"OSD Glyphs These symbols are defined in src/main/drivers/max7456_symbols.h and are used in src/main/osd/osd_elements.c PNG\tHex\tDec\tBetaflight Name(s)\tNotes\t0x01\t001\tSYM_RSSI\tRSSI Icon 0x02\t002\tSYM_AH_RIGHT\tUsed in OSD.c 0x03\t003\tSYM_AH_LEFT SYM_CURSOR\tUsed in OSD.c 0x04\t004\tSYM_THR\tThottle icon 0x05\t005\tSYM_OVER_HOME\tUsed in OSD.c 0x06\t006\tSYM_VOLT\tUsed in OSD.c 0x07\t007\tSYM_MAH\tUsed in OSD.c 0x08\t008\tSYM_STICK_OVERLAY_SPRITE_HIGH\tStick overlay 0x09\t009\tSYM_STICK_OVERLAY_SPRITE_MID\tStick overlay 0x0A\t010\tSYM_STICK_OVERLAY_SPRITE_LOW\tStick overlay 0x0B\t011\tSYM_STICK_OVERLAY_CENTER\tStick overlay 0x0C\t012\tSYM_M\tUsed in OSD.c 0x0D\t013\tSYM_F\tUsed in OSD.c 0x0E\t014\tSYM_C\tUsed in OSD.c 0x0F\t015\tSYM_FT\tUsed in OSD.c 0x10\t016\tSYM_BBLOG 0x11\t017\tSYM_HOMEFLAG 0x12\t018\tSYM_RPM 0x13\t019\tSYM_AH_DECORATION\tHorizon Sidebars 0x14\t020\tSYM_ROLL 0x15\t021\tSYM_PITCH 0x16\t022\tSYM_STICK_OVERLAY_VERTICAL\tStick overlay 0x17\t023\tSYM_STICK_OVERLAY_HORIZONTAL\tStick overlay 0x18\t024\tSYM_HEADING_N\tCompass bar 0x19\t025\tSYM_HEADING_S\tCompass bar 0x1A\t026\tSYM_HEADING_E\tCompass bar 0x1B\t027\tSYM_HEADING_W\tCompass bar 0x1C\t028\tSYM_HEADING_DIVIDED_LINE\tCompass bar 0x1D\t029\tSYM_HEADING_LINE\tCompass bar 0x1E\t030\tSYM_SAT_L\tGPS icon left 0x1F\t031\tSYM_SAT_R\tGPS icon right 0x20\t032\tSYM_BLANK\t032 to 095 are ASCII for printing strings 0x21\t033 0x22\t034 0x23\t035 0x24\t036 0x25\t037 0x26\t038 0x27\t039 0x28\t040 0x29\t040 0x2A\t040 0x2B\t040 0x2C\t040 0x2D\t045\tSYM_HYPHEN 0x2E\t046 0x2F\t047 0x30\t048 0x31\t049 0x32\t050 0x33\t051 0x34\t052 0x35\t053 0x36\t054 0x37\t055 0x38\t056 0x39\t057 0x3A\t058 0x3B\t059 0x3C\t060 0x3D\t061 0x3E\t062 0x3F\t063 0x40\t064 0x41\t065 0x42\t066 0x43\t067 0x44\t068 0x45\t069 0x46\t070 0x47\t071 0x48\t072 0x49\t073 0x4A\t074 0x4B\t075 0x4C\t076 0x4D\t077 0x4E\t078 0x4F\t079 0x50\t080 0x51\t081 0x52\t082 0x53\t083 0x54\t084 0x55\t085 0x56\t086 0x57\t087\tSYM_WATT\tAlso ASCII W 0x58\t088 0x59\t089 0x5A\t090 0x5B\t091 0x5C\t092 0x5D\t093 0x5E\t094 0x5F\t095 End of ASCII section 0x60\t096\tSYM_ARROW_SOUTH\tDirection to home, crash flip, etc 0x61\t097\tSYM_ARROW_2\tCalculated from SYM_ARROW_SOUTH + heading 0x62\t098\tSYM_ARROW_3\tCalculated from SYM_ARROW_SOUTH + heading 0x63\t099\tSYM_ARROW_4\tCalculated from SYM_ARROW_SOUTH + heading 0x64\t100\tSYM_ARROW_EAST\tCalculated from SYM_ARROW_SOUTH + heading 0x65\t101\tSYM_ARROW_6\tCalculated from SYM_ARROW_SOUTH + heading 0x66\t102\tSYM_ARROW_7\tCalculated from SYM_ARROW_SOUTH + heading 0x67\t103\tSYM_ARROW_8\tCalculated from SYM_ARROW_SOUTH + heading 0x68\t104\tSYM_ARROW_NORTH\tCalculated from SYM_ARROW_SOUTH + heading 0x69\t105\tSYM_ARROW_10\tCalculated from SYM_ARROW_SOUTH + heading 0x6A\t106\tSYM_ARROW_11\tCalculated from SYM_ARROW_SOUTH + heading 0x6B\t107\tSYM_ARROW_12\tCalculated from SYM_ARROW_SOUTH + heading 0x6C\t108\tSYM_ARROW_WEST\tCalculated from SYM_ARROW_SOUTH + heading 0x6D\t109\tSYM_ARROW_14\tCalculated from SYM_ARROW_SOUTH + heading 0x6E\t110\tSYM_ARROW_15\tCalculated from SYM_ARROW_SOUTH + heading 0x6F\t111\tSYM_ARROW_16\tCalculated from SYM_ARROW_SOUTH + heading 0x70\t112\tSYM_SPEED 0x71\t113\tSYM_TOTAL_DISTANCE 0x72\t114\tSYM_AH_CENTER_LINE\tCrosshairs 0x73\t115\tSYM_AH_CENTER\tCrosshairs 0x74\t116\tSYM_AH_CENTER_LINE_RIGHT\tCrosshairs 0x75\t117 0x76\t118 0x77\t119 0x78\t120 0x79\t121 0x7A\t122\tSYM_TEMPERATURE 0x7B\t123 0x7C\t124 0x7D\t125 0x7E\t126 0x7F\t127\tSYM_ALTITUDE 0x80\t128\tSYM_AH_BAR9_0 0x81\t129\tSYM_AH_BAR9_1\tCalculated in AH using SYM_AH_BAR9_0 as base 0x82\t130\tSYM_AH_BAR9_2\tCalculated in AH using SYM_AH_BAR9_0 as base 0x83\t131\tSYM_AH_BAR9_3\tCalculated in AH using SYM_AH_BAR9_0 as base 0x84\t132\tSYM_AH_BAR9_4\tCalculated in AH using SYM_AH_BAR9_0 as base 0x85\t133\tSYM_AH_BAR9_5\tCalculated in AH using SYM_AH_BAR9_0 as base 0x86\t134\tSYM_AH_BAR9_6\tCalculated in AH using SYM_AH_BAR9_0 as base 0x87\t135\tSYM_AH_BAR9_7\tCalculated in AH using SYM_AH_BAR9_0 as base 0x88\t136\tSYM_AH_BAR9_8\tCalculated in AH using SYM_AH_BAR9_0 as base 0x89\t137\tSYM_LAT 0x8A\t138\tSYM_PB_START 0x8B\t139\tSYM_PB_FULL 0x8C\t140\tSYM_PB_HALF 0x8D\t141\tSYM_PB_EMPTY 0x8E\t142\tSYM_PB_END 0x8F\t143\tSYM_PB_CLOSE 0x90\t144\tSYM_BATT_FULL\tCalculated from SYM_BATT_EMPTY 0x91\t145\tSYM_BATT_5\tCalculated from SYM_BATT_EMPTY 0x92\t146\tSYM_BATT_4\tCalculated from SYM_BATT_EMPTY 0x93\t147\tSYM_BATT_3\tCalculated from SYM_BATT_EMPTY 0x94\t148\tSYM_BATT_2\tCalculated from SYM_BATT_EMPTY 0x95\t149\tSYM_BATT_1\tCalculated from SYM_BATT_EMPTY 0x96\t150\tSYM_BATT_EMPTY 0x97\t151\tSYM_MAIN_BATT 0x98\t152\tSYM_LON 0x99\t153\tSYM_FTPS\tft per second (vario) 0x9A\t154\tSYM_AMP 0x9B\t155\tSYM_ON_M 0x9C\t156\tSYM_FLY_M 0x9D\t157\tSYM_MPH 0x9E\t158\tSYM_KPH 0x9F\t159\tSYM_MPS\tmeters per second (vario) 0xA0\t160 Logo Starts Here 0xFF\t255\tSYM_END_OF_FONT\t","keywords":""},{"title":"OSD Profiles","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/OSD Profiles","content":"","keywords":""},{"title":"Configuration​","type":1,"pageTitle":"OSD Profiles","url":"/betaflight.com/docs/development/OSD Profiles#configuration","content":"Currently (Configurator 10.4.0) OSD Profiles can only be configured via the CLI. Layout your OSD using the configurator and save. Elements in the same position but on different profiles will overlap in the configurator at this stage. OSD Profiles can either be selected via an adjustment range (Adjustments tab, after enabling Expert Mode) or by setting the osd_profile parameter with the set command in the CLI. The selected OSD Profile can either be controlled from a switch on your radio or you can configure different profiles and select the one you want by using the set osd_profile=2 command in the CLI and saving. OSD Configuration​ Configure your OSD via the OSD tab in the configurator, i.e. element layout, font etc. as before. OPTION 1: Configure an adjustment range to change OSD Profile from your radio​ Turn on Expert mode - see top right of configurator screen &quot;Enable Expert Mode&quot;.The OSD Profile selection is performed using an adjustment configured via the Adjustments tab. Enable an adjustment. (&quot;If enabled&quot;)Select the AUX channel to be used to change OSD Profile. (&quot;when channel&quot;)Set the range to cover the entire range of the selected AUX channel. (&quot;is in ranges&quot;)For the action select &quot;RC Rate Adjustment&quot;. (&quot;then apply&quot;) This will be configured in the CLI since OSD Profiles is not supported by Configurator 10.4.0 and earlier. &quot;RC Rate Adjustment&quot; is only selected to make the configuration in the CLI a little easier below.Select the &quot;via channel&quot; to match the selected AUX channel of above. (&quot;when channel&quot;).Save Open the CLI and type adjrange followed by enter.Copy the adjrange configured in step 2. above and paste it in the command window. Change the '1' following the range of the channel to '29' and press enter. Type save and press enter. The configured adjrange will now be saved and the FC will reboot.Configure the AUX channel on your radio. When this channel is changed the selected OSD Profile will change displaying all the elements configured for the selected profile. Note that elements are assigned to profile 1 by default. To revert back to not using OSD Profiles, go to the CLI and select and type set osd_profile=1 press enter, followed by save and enter. Keep in mind that elements configured to be only visible on profile 2 and 3 will need to reconfigured and will not be visible on profile 1. OPTION 2: Use the CLI to select an OSD Profile (i.e. not selecting the OSD Profile with your radio)​ Open the CLI.Type get osd_profile followed by enter to display the currently selected profile.Type set osd_profile=x where x is the profile number 1,2 or 3 and press enter.Type save followed by enter to save the selected profile. CONFIGURE OSD PROFILES​ The steps below are only required if using The Configurator 10.4.0 or earlier. Open the CLI. Find the name of the element to be configured, all elements can be displayed using the dump command or get osd command. Element names end in _pos. Take the current value of the element, apply the OSD Profile config and set its new value using the set command. The OSD Profile config value is described below. eg. osd_vbat_pos = 6560set osd_vbat_pos = 31136save Repeat steps 2 &amp; 3 for every element to be configured. OSD PROFILE CONFIG VALUES​ The OSD Profile config is stored in the higher order bits, bits 11, 12 &amp; 13 of an OSD element, eg. osd_vbat_pos. This means the initial value, after being configured in the OSD tab needs to be adjusted to add the OSD Profile configuration of the element. To calculate the new value, take the current (initially configured value) of the OSD element and convert it to HEX. Determine which OSD Profiles this element should be visible on and select the corresponding HEX value from the table below. Perform an OR operation between the initial OSD element value (in HEX) and the HEX value from the table. Convert the result to decimal and set the OSD element to this value using the set command in the CLI. Binary Value HEX Value Profile Configuration Description 13 12 11 0 0 1 0x0800 - 1 Visible in OSD Profile 1 0 1 0 0x1000 - 2 Visible in OSD Profile 2 0 1 1 0x1800 - 1 and 2 Visible in OSD Profile 1 and 2 only 1 0 0 0x2000 - 3 Visible in OSD Profile 3 only 1 0 1 0x2800 - 1 and 3 Visible in OSD Profile 1 and 3 only 1 1 0 0x3000 - 2 and 3 Visible in OSD Profile 2 and 3 only 1 1 1 0x3800 - 1, 2 and 3 Visible in all OSD Profiles  Example: osd_vbat_pos = 6560Convert 6560 to HEX results in 19A0 (HEX) (All these operations can be done with the windows calculator in programmer mode)We want this element to be visible on OSD Profile 2 &amp; 3 and hence select the HEX value 0x3000 from the table above.OR the two HEX values together 19A0 OR 3000 = 39A0Convert 39A0 (HEX) to decimal results in 14752.In the CLI, set osd_vbat_pos = 14752 enter and save enter. "},{"title":"Note:​","type":1,"pageTitle":"OSD Profiles","url":"/betaflight.com/docs/development/OSD Profiles#note","content":"If using Configurator 10.4.0 or earlier, when changing an adjustment on the Adjustments tab, the &quot;then apply&quot; item (29) for OSD Profile will also be cleared, i.e. set to 0 and would have to be re-configured via the CLI, e.g. adjrange 0 0 8 900 2100 29 8 0 0OSD Profile selection is not active if the CLI is open, in other words if you change the value of osd_profile while the CLI is open, nothing will change, the selected OSD Profile will remain as is. "},{"title":"Use​","type":1,"pageTitle":"OSD Profiles","url":"/betaflight.com/docs/development/OSD Profiles#use","content":"After completing the above configuration, you should be able to select the active OSD Profile from your radio or via the CLI. The profile can be selected/changed at any time while on the ground or in mid flight. "},{"title":"Useful OSD Profile CLI commands​","type":1,"pageTitle":"OSD Profiles","url":"/betaflight.com/docs/development/OSD Profiles#useful-osd-profile-cli-commands","content":"get osd_profile {enter} &gt;&gt; displays the currently selected OSD Profile in the CLI. set osd_profile= {number, 1-3} selects the OSD Profile. "},{"title":"PID tuning","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/PID tuning","content":"","keywords":""},{"title":"PIDs​","type":1,"pageTitle":"PID tuning","url":"/betaflight.com/docs/development/PID tuning#pids","content":"The P term controls the strength of the correction that is applied to bring the craft toward the target angle or rotation rate. If the P term is too low, the craft will be difficult to control as it won't respond quickly enough to keep itself stable. If it is set too high, the craft will rapidly oscillate/shake as it continually overshoots its target. The I term corrects small, long term errors. If it is set too low, the craft's attitude will slowly drift. If it is set too high, the craft will oscillate (but with slower oscillations than with P being set too high). The D term attempts to increase system stability by monitoring the rate of change in the error. If the error is rapidly converging to zero, the D term causes the strength of the correction to be backed off in order to avoid overshooting the target. "},{"title":"TPA and TPA Breakpoint​","type":1,"pageTitle":"PID tuning","url":"/betaflight.com/docs/development/PID tuning#tpa-and-tpa-breakpoint","content":"TPA stands for Throttle PID Attenuation and according to AlexYork.net: &quot;TPA basically allows an aggressively tuned multi-rotor (one that feels very locked in) to reduce its PID gains when throttle is applied beyond the TPA threshold/breakpoint in order to eliminate fast oscillations..&quot; Note that TPA is set via CLI or on the PID TUNING tab of the GUI. tpa_breakpoint is set via CLI Also, note that TPA and tpa_breakpoint may not be used with certain PID controllers. Check the description on the individual controller. TPA applies a PID value reduction in relation to full throttle. It is used to apply dampening of PID values as full throttle is reached. TPA = % of dampening that will occur at full throttle. tpa_breakpoint = the point in the throttle curve at which TPA will begin to be applied. An Example: With TPA = 50 (or .5 in the GUI) and tpa_breakpoint = 1500 (assumed throttle range 1000 - 2000) At 1500 on the throttle channel, the PIDs will begin to be dampened.At 3/4 throttle (1750), PIDs are reduced by approximately 25% (half way between 1500 and 2000 the dampening will be 50% of the total TPA value of 50% in this example)At full throttle (2000) the full amount of dampening set in TPA is applied. (50% reduction in this example)TPA can lead into increase of rotation rate when more throttle applied. You can get faster flips and rolls when more throttle applied due to coupling of PID's and rates. Only the PID controllers MWREWRITE and LUX are using a linear TPA implementation, where no rotation rates are affected when TPA is being used.  How and Why to use this? If you are getting oscillations starting at say 3/4 throttle, set tpa_breakpoint = 1750 or lower (remember, this is assuming your throttle range is 1000-2000), and then slowly increase TPA until your oscillations are gone. Usually, you will want tpa_breakpoint to start a little sooner than when your oscillations start so you'll want to experiment with the values to reduce/remove the oscillations. "},{"title":"PID controllers​","type":1,"pageTitle":"PID tuning","url":"/betaflight.com/docs/development/PID tuning#pid-controllers","content":"Cleanflight 1.x had experimental pid controllers, for cleanflight 2.0 there is only one. "},{"title":"PID controller \"LUXFloat\"​","type":1,"pageTitle":"PID tuning","url":"/betaflight.com/docs/development/PID tuning#pid-controller-luxfloat","content":"This is a new floating point based PID controller. MW23 and MWREWRITE use integer arithmetic, which was faster in the days of the slower 8-bit MultiWii controllers, but is less precise. This controller has code that attempts to compensate for variations in the looptime, which should mean that the PIDs don't have to be retuned when the looptime setting changes. It is the first PID Controller designed for 32-bit processors and not derived from MultiWii. The strength of the auto-leveling correction applied during Angle mode is controlled by the LEVEL &quot;P&quot; PID term which is labeled &quot;Angle&quot;, &quot;Strength&quot; in the GUI (prior to version v1.13.0 the parameter level_angle was used). This can be used to tune the auto-leveling strength in Angle mode compared to Horizon mode. The default is 50. The strength of the auto-leveling correction applied during Horizon mode is set by the LEVEL &quot;I&quot; PID term which is labeled &quot;Horizon&quot;, &quot;Strength&quot; in the GUI (prior to version v1.13.0 the parameter level_horizon was used). The default is also 50. The transition between self-leveling and acro behavior in Horizon mode is controlled by the LEVEL &quot;D&quot; term which is labeled &quot;Horizon&quot;, &quot;Transition&quot; in the GUI (prior to version of v1.13.0 the parameter sensitivity_horizon parameter was used) . This sets the percentage of your stick travel that should have self-leveling applied to it, so smaller values cause more of the stick area to fly using only the gyros. For example, at a setting of &quot;100&quot; for sensitivity horizon, 100% self-leveling strength will be applied at center stick, 50% self-leveling will be applied at 50% stick, and no self-leveling will be applied at 100% stick. If sensitivity is decreased to 75, 100% self-leveling will be applied at center stick, 50% will be applied at 63% stick, and no self-leveling will be applied at 75% stick and onwards. See below for descriptions of the Horizon Mode Commands. "},{"title":"RC rate, Pitch and Roll Rates (P/R rate before they were separated), and Yaw rate​","type":1,"pageTitle":"PID tuning","url":"/betaflight.com/docs/development/PID tuning#rc-rate-pitch-and-roll-rates-pr-rate-before-they-were-separated-and-yaw-rate","content":""},{"title":"RC Rate​","type":1,"pageTitle":"PID tuning","url":"/betaflight.com/docs/development/PID tuning#rc-rate","content":"An overall multiplier on the RC stick inputs for pitch, roll, and yaw. This basically sets the baseline stick sensitivity. "},{"title":"Pitch and Roll rates​","type":1,"pageTitle":"PID tuning","url":"/betaflight.com/docs/development/PID tuning#pitch-and-roll-rates","content":"This is an multiplier on overall stick sensitivity, like RC rate, but for roll and pitch independently. Stablility (to outside factors like turbulence) is not reduced at stick extremes. A zero value is no increase in stick sensitivity over that set by RC rate above. Higher values increases stick sensitivity across the entire stick movement range. "},{"title":"Yaw Rate​","type":1,"pageTitle":"PID tuning","url":"/betaflight.com/docs/development/PID tuning#yaw-rate","content":"It acts as a stick sensitivity multiplier, as explained above. "},{"title":"Filters​","type":1,"pageTitle":"PID tuning","url":"/betaflight.com/docs/development/PID tuning#filters","content":"gyro_lpf sets the hardware gyro low pass filter value. If 0 or 256 the gyro uses the least hardware filtering available (256Hz) and the internal sampling rate is the fastest possible (8kHz) with the least possible delay. The lower the number the stronger the filtering. Stronger filtering reduces noise in the gyro signal before that data gets into the PID calculations. Stronger filtering adds delays that can be associated with wobble and reduced responsiveness. Filtering is needed because motor/frame noise can cause overheating of motors especially when amplified by Dterm in quads with low mass and fast braking ESCs. If 188 or lower are chosen, the gyro sampling is internally at 1kHz and delays are greater. Faster sampling is good because things are slightly more responsive but can cause aliasing noise. Setting to 188 allows syncing of the FC to the gyro at 1kHz (if gyro_sync is enabled and available in the code) which reduces aliasing a lot. gyro_soft_lpf is an IIR (Infinite Impulse Response) software low-pass filter that can be configured to any desired frequency. If set to a value above zero it is active. It works after the hardware filter on the gyro (in the FC code) and further reduces noise. The two filters in series have twice the cut rate of one alone. There's not a lot of sense running gyro_soft_lpf at a value above gyro_lpf. If used, it is typically set about half the hardware filter rate to enhance the cut of higher frequencies before the PID calculations. Frequencies above 100Hz are of no interest to us from a flight control perspective - they can and should be removed from the signal before it gets to the PID calculation stage. dterm_cut_hz is an IIR software low-pass filter that can be configured to any desired frequency. It works after the gyro_cut filters and specifically filters only the D term data. D term data is frequency dependent, the higher the frequency, the greater the computed D term value. This filter is required if despite the gyro filtering there remains excessive D term noise. Typically it needs to be set quite low because D term noise is a major problem with typical IIR filters. If set too low the phase shift in D term reduces the effectiveness of D term in controlling stop wobble, so this value needs some care when varying it. Again blackbox recording is needed to properly optimise the value for this filter. "},{"title":"Horizon Mode Commands​","type":1,"pageTitle":"PID tuning","url":"/betaflight.com/docs/development/PID tuning#horizon-mode-commands","content":"The CLI commands horizon_tilt_effect and horizon_tilt_mode control the effect the current inclination has on self-leveling in the Horizon flight mode. (The current inclination is the number of degrees of pitch or roll that the vehicle is away from level, whichever is greater). horizon_tilt_effect: Controls the effect the current inclination (tilt) has on self-leveling in the Horizon flight mode. Larger values result in less self-leveling (more &quot;acro&quot;) as the tilt of the vehicle increases. The default value of 75 provides good performance when doing large loops and fast-forward flight. With a value of 0 the strength of the self-leveling would be solely dependent on the stick position. horizon_tilt_mode SAFE|EXPERT: Sets the performance mode for 'horizon_tilt_effect' SAFE = leveling always active when sticks centered: This is the &quot;safer&quot; range because the self-leveling is always active when the sticks are centered. So, when the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle will immediately be self-leveled to upright and flat. (Note that after this kind of very-fast 180-degree self-leveling, the heading of the vehicle can be unpredictable.) EXPERT = leveling can be totally off when inverted: In this range, the inclination (tilt) of the vehicle can fully &quot;override&quot; the self-leveling. In this mode, when the 'horizon_tilt_effect' parameter is set to around 75, and the vehicle is upside down (180 degrees) and the sticks are then centered, the vehicle is not self-leveled. This can be desirable for performing more-acrobatic maneuvers and potentially for 3D-mode flying. The 'horizon_tilt_effect' and 'horizon_tilt_mode' values are separate for each profile. "},{"title":"RSSI","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Rssi","content":"","keywords":""},{"title":"RSSI via PPM​","type":1,"pageTitle":"RSSI","url":"/betaflight.com/docs/development/Rssi#rssi-via-ppm","content":"Configure your receiver to output RSSI on a spare channel, then select the channel used via the CLI. e.g. if you used channel 9 then you would set: set rssi_channel = 9  Note: Some systems such as EZUHF invert the RSSI ( 0 = Full signal / 100 = Lost signal). To correct this problem you can invert the channel input so you will get a correct reading by using command: set rssi_invert = ON  Default is set to &quot;OFF&quot; for normal operation ( 100 = Full signal / 0 = Lost signal). "},{"title":"RSSI via Parallel PWM channel​","type":1,"pageTitle":"RSSI","url":"/betaflight.com/docs/development/Rssi#rssi-via-parallel-pwm-channel","content":"Connect the RSSI signal to any PWM input channel then set the RSSI channel as you would for RSSI via PPM "},{"title":"RSSI from Futaba S.Bus receiver​","type":1,"pageTitle":"RSSI","url":"/betaflight.com/docs/development/Rssi#rssi-from-futaba-sbus-receiver","content":"The S.Bus serial protocol includes detection of dropped frames. These may be monitored and reported as RSSI by using the following command. set rssi_src_frame_errors = ON  Note that RSSI stands for Received Signal Strength Indicator; the detection of S.Bus dropped frames is really a signal quality, not strength indication. Consequently you may experience a more rapid drop in reported RSSI at the extremes of range when using this facility than when using RSSI reporting signal strength. "},{"title":"RSSI ADC​","type":1,"pageTitle":"RSSI","url":"/betaflight.com/docs/development/Rssi#rssi-adc","content":"Connect the RSSI signal to the RC2/CH2 input. The signal must be between 0v and 3.3v. Use inline resistors to lower voltage if required; inline smoothing capacitors may also help. A simple PPM-&gt;RSSI conditioner can easily be made. See the PPM-RSSI conditioning.pdf for details. Under CLI : enable using the RSSI_ADC feature : feature RSSI_ADCset the RSSI_SCALE parameter (between 1 and 255) to adjust RSSI level according to your configuration. The raw ADC value is divided by the value of this parameter. Note: Some systems invert the RSSI ( 0 = Full signal / 100 = Lost signal). To correct this problem you can invert the input so you will get a correct reading by using command: set rssi_invert = ON  "},{"title":"RSSI_SCALE setup method​","type":1,"pageTitle":"RSSI","url":"/betaflight.com/docs/development/Rssi#rssi_scale-setup-method","content":"set rssi_scale = 100. The displayed percentage will then be the raw ADC value.turn on RX (close to board). RSSI value should vary a little.Update rssi_scale to the maximum RSSI value previously measured. FrSky D4R-II and X8R supported. The feature can not be used when RX_PARALLEL_PWM is enabled. "},{"title":"RSSI_SCALE setup method​","type":1,"pageTitle":"RSSI","url":"/betaflight.com/docs/development/Rssi#rssi_scale-setup-method-1","content":"To calculate the rssi offset and scale, check the rc value at full signal (rssi_fullsig) and at almost no signal strength (rssi_nosig). Then, calculate the offset and scale values using the following formula: rssi_offset = (1000-rssi_nosig) / 10 rssi_scale = 100 * 1000 / (rssi_fullsig - rssi_nosig)  Examples are: RC System\tRC value at full strength\tRC value at no strength\trssi_offset\trssi_scaleGraupner\t1900\t1100\t-10\t125 Then set these values via CLI: set rssi_offset = -10 set rssi_scale = 125  "},{"title":"Profiles (aka PID Profiles)","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Profiles","content":"","keywords":""},{"title":"Changing profiles​","type":1,"pageTitle":"Profiles (aka PID Profiles)","url":"/betaflight.com/docs/development/Profiles#changing-profiles","content":"Profiles can be selected using the GUI, CLI, OSD or stick combinations. Once selected, changes to settings can be made and saved to the active Profile. Also worth mentioning when selecting a Profile, that Profile will remain the active Profile even over power cycles. Betaflight Configurator (GUI): In the PID Tuning Tab &gt; Select a Profile using the drop-down menu. Once a profile is chosen, that profile is activated for current use. Any modifications made are saved when pressing Save button. OSD: Access CMS (Left Yaw + Pitch up) &gt; Select Profiles &gt; Change PID Prof. Stick combinations: When disarmed use the following stick commands to select a Profile. The status LED on your FC will flicker when changing the Profile. Profile\tThrottle\tYaw\tPitch\tRoll0\tDown\tLeft\tMiddle\tLeft 1\tDown\tLeft\tUp\tMiddle 2\tDown\tLeft\tMiddle\tRight CLI: the profile command can be used to change the profile: profile &lt;index&gt;  To save configuration changes: save  Rate Profiles A Rate Profile is a set of Rate related settings. These profiles store the settings for Rate Type, RC Rate, Super Rate, Expo for Pitch, Roll, &amp; Yaw. Along with Throttle Expo and TPA settings. Pre-BetaFlight 3.2 Profiles and Rate Profiles are coupled together. Each Profile had its own set of 3 Rate Profiles. Allowing up to 9 Rate Profiles all together. Betaflight 3.2 broke this link, giving us independent Profiles and Rate Profiles. Selecting Rate Profiles are independent of Profiles now. Allowing only 3 Rate Profiles. BetaFlight 3.3 &gt; the number of Rate Profiles increased from 3 to 6 Rate Profiles. "},{"title":"Changing Rate Profiles​","type":1,"pageTitle":"Profiles (aka PID Profiles)","url":"/betaflight.com/docs/development/Profiles#changing-rate-profiles","content":"Rate Profiles can be selected using a GUI, CLI, OSD, or AUX channel. Once selected (just like Profiles), changes to settings can be made and saved to the active Rate Profile. Also, when changing our Rate Profile that profile will remain the active Profile even over power cycles, except when using the AUX channel option. When BetaFlight boots the active profile is selected by the position of the AUX channel. Betaflight Configurator (GUI): Click PID Tuning Tab &gt; Select a Rate Profile using the drop-down menu. Once selected, any changes you make to your settings and click Save will be store to the selected Rate Profile. The action of selecting a Rate Profile also activates that rate profile for current use. OSD: Access CMS (Left Yaw + Pitch up) &gt; Select Profiles &gt; Change Rate Prof. Make sure to Save + Exit or Save + Reboot to save settings. Aux Channel (In-flight Adjustments): Adjustments need to be configured first using the GUI. You must have an available AUX channel configured on your radio. Enable Expert Mode in the Configurator &gt; Click Adjustments Click the slider for If enable. Select the AUX # channel to use. For the Range, Select the whole Range from 900 to 2100. Select Rate Profile Selection from the drop-down menu. Via Channel is the same as the AUX channel used. CLI: the rateprofile command can be used to change the profile: rateprofile &lt;index&gt;  To save configuration changes: save  Backing up Profiles and Rate Profiles Currently creating a backup from the GUI only backs up the active Profile and Rate Profile. So the best way to see and backup all Profiles is to use CLI. "},{"title":"Using Diff and Dump to output only Profiles​","type":1,"pageTitle":"Profiles (aka PID Profiles)","url":"/betaflight.com/docs/development/Profiles#using-diff-and-dump-to-output-only-profiles","content":"Use these commands to view and back up the complete active profiles (including default settings): dump profile, &amp; dump ratesIn order to see all Profiles configured add the all variable: dump all, &amp; diff allUse these commands to view and back up the changes the active profiles -defaults settings: diff profile, &amp; diff rates Examples: # diff rates # rateprofile rateprofile 0 set roll_rc_rate = 200 set pitch_rc_rate = 200 set yaw_rc_rate = 200 set roll_expo = 50 set pitch_expo = 50 set yaw_expo = 90 # dump rates # rateprofile rateprofile 0 set thr_mid = 50 set thr_expo = 0 set rates_type = BETAFLIGHT set roll_rc_rate = 200 set pitch_rc_rate = 200 set yaw_rc_rate = 200 set roll_expo = 50 set pitch_expo = 50 set yaw_expo = 90 set roll_srate = 70 set pitch_srate = 70 set yaw_srate = 70 set tpa_rate = 10 set tpa_breakpoint = 1650 set throttle_limit_type = OFF set throttle_limit_percent = 100 # diff profile # profile profile 0 set p_pitch = 40 set d_pitch = 26 set p_roll = 20 set d_roll = 13 set p_yaw = 80 # dump profile # profile profile 0 set dterm_lowpass_type = PT1 set dterm_lowpass_hz = 100 set dterm_lowpass2_hz = 200 set dterm_notch_hz = 0 set dterm_notch_cutoff = 160 set vbat_pid_gain = OFF set pid_at_min_throttle = ON set anti_gravity_mode = SMOOTH set anti_gravity_threshold = 250 set anti_gravity_gain = 5000 set feedforward_transition = 0 set acc_limit_yaw = 100 set acc_limit = 0 set crash_dthreshold = 50 set crash_gthreshold = 400 set crash_setpoint_threshold = 350 set crash_time = 500 set crash_delay = 0 set crash_recovery_angle = 10 set crash_recovery_rate = 100 set crash_limit_yaw = 200 set crash_recovery = OFF set iterm_rotation = ON set smart_feedforward = OFF set iterm_relax = OFF set iterm_relax_type = GYRO set iterm_relax_cutoff = 11 set iterm_windup = 40 set iterm_limit = 150 set pidsum_limit = 500 set pidsum_limit_yaw = 400 set yaw_lowpass_hz = 0 set throttle_boost = 5 set throttle_boost_cutoff = 15 set acro_trainer_angle_limit = 20 set acro_trainer_lookahead_ms = 50 set acro_trainer_debug_axis = ROLL set acro_trainer_gain = 75 set p_pitch = 40 set i_pitch = 50 set d_pitch = 26 set f_pitch = 60 set p_roll = 20 set i_roll = 45 set d_roll = 13 set f_roll = 60 set p_yaw = 80 set i_yaw = 45 set d_yaw = 0 set f_yaw = 60 set p_level = 50 set i_level = 50 set d_level = 75 set level_limit = 55 set horizon_tilt_effect = 75 set horizon_tilt_expert_mode = OFF set abs_control_gain = 0 set abs_control_limit = 90 set abs_control_error_limit = 20  # profile profile 0 set dterm_lowpass_hz = 0 set dterm_lowpass2_hz = 0 set dterm_notch_cutoff = 0 set p_pitch = 40 set d_pitch = 26 set p_roll = 20 set d_roll = 13 set p_yaw = 80 # profile profile 1 set dterm_lowpass_type = BIQUAD set dterm_notch_cutoff = 0 # profile profile 2 set dterm_notch_cutoff = 0 # restore original profile selection profile 2 # rateprofile rateprofile 0 set roll_rc_rate = 200 set pitch_rc_rate = 200 set yaw_rc_rate = 200 set roll_expo = 50 set pitch_expo = 50 set yaw_expo = 90 # rateprofile rateprofile 1 # rateprofile rateprofile 2 # rateprofile rateprofile 3 set thr_expo = 25 set roll_rc_rate = 155 set tpa_breakpoint = 1500 # rateprofile rateprofile 4 # rateprofile rateprofile 5 # restore original rateprofile selection rateprofile 3  "},{"title":"Safety","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Safety","content":"","keywords":""},{"title":"Before Installing​","type":1,"pageTitle":"Safety","url":"/betaflight.com/docs/development/Safety#before-installing","content":"Please consult the Cli, Controls, Failsafe and Modespages for further important information. You are highly advised to use the Receiver tab in the CleanFlight Configurator, making sure your Rx channel values are centered at 1500 (1520 for Futaba RC) with minimum &amp; maximums of 1000 and 2000 (respectively) are reached when controls are operated. Failure to configure these ranges properly can create problems, such as inability to arm (because you can't reach the endpoints) or immediate activation offailsafe. You may have to adjust your channel endpoints and trims/sub-trims on your RC transmitter to achieve the expected range of 1000 to 2000. The referenced values for each channel have marked impact on the operation of the flight controller and the different flight modes. "},{"title":"Props Spinning When Armed​","type":1,"pageTitle":"Safety","url":"/betaflight.com/docs/development/Safety#props-spinning-when-armed","content":"With the default configuration, when the controller is armed, the propellers WILL begin spinning at low speed. We recommend keeping this setting as it provides a good visual indication the craft is armed. If you wish to change this behavior, see the MOTOR_STOP feature in the Configurator and relevant documentation pages. Enabling this feature will stop the props from spinning when armed. "},{"title":"Receivers (RX)","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Rx","content":"","keywords":""},{"title":"Parallel PWM Receivers​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#parallel-pwm-receivers","content":"8 channel support, 1 channel per input pin. On some platforms using parallel input will disable the use of serial ports and SoftSerial making it hard to use telemetry or GPS features. "},{"title":"PPM Receivers​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#ppm-receivers","content":"PPM is sometimes known as PPM SUM or CPPM. 12 channels via a single input pin, not as accurate or jitter free as methods that use serial communications, but readily available. These receivers are reported working: FrSky D4R-IIGraupner GR24R615X Spektrum/JR DSM2/DSMX Compatible 6Ch 2.4GHz Receiver w/CPPMFrSky D8R-XP 8ch telemetry receiver, or CPPM and RSSI enabled receiverFrSky X4R and FrSky X4RSB when flashed with CPPM firmware and bound with jumper between signal pins 2 and 3All FrSky S.Bus enabled devices when connected with S.Bus CPPM converter cable. Without jumper this converter cable uses 21ms frame size (Channels 1-8). When jumper is in place, it uses 28ms frame and channels 1-12 are availableFlySky/Turnigy FS-iA4B, FS-iA6B, FS-iA10 receivers all provide 8channels if the tx is sending them. (FS-i6 and FS-i10 transmitters). Use setting rx-setup/ppm to enable. "},{"title":"Serial Receivers​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#serial-receivers","content":""},{"title":"Spektrum​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#spektrum","content":"8 channels via serial currently supported. These receivers are reported working: Lemon Rx DSMX Compatible PPM 8-Channel Receiver + Lemon DSMX Compatible Satellite with Failsafehttp://www.lemon-rx.com/index.php?route=product/product&amp;product_id=118 "},{"title":"S.BUS​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#sbus","content":"16 channels via serial currently supported. See below how to set up your transmitter. You probably need an inverter between the receiver output and the flight controller. However, some flight controllers have this built in (the main port on CC3D, for example), and doesn't need one.Some OpenLRS receivers produce a non-inverted SBUS signal. It is possible to switch SBUS inversion off using CLI command set sbus_inversion = OFF when using an F3 based flight controller.Softserial ports cannot be used with SBUS because it runs at too high of a bitrate (1Mbps). Refer to the chapter specific to your board to determine which port(s) may be used.You will need to configure the channel mapping in the GUI (Receiver tab) or CLI (map command). Note that channels above 8 are mapped &quot;straight&quot;, with no remapping. These receivers are reported working: FrSky X4RSB 3/16ch Telemetry Receiverhttp://www.frsky-rc.com/product/pro.php?pro_id=135 FrSky X8R 8/16ch Telemetry Receiverhttp://www.frsky-rc.com/product/pro.php?pro_id=105 Futaba R2008SB 2.4GHz S-FHSShttp://www.futaba-rc.com/systems/futk8100-8j/ OpenTX S.BUS configuration​ If using OpenTX set the transmitter module to D16 mode and ALSO select CH1-16 on the transmitter before binding to allow reception of all 16 channels. OpenTX 2.09, which is shipped on some Taranis X9D Plus transmitters, has a bug - issue:1701. The bug prevents use of all 16 channels. Upgrade to the latest OpenTX version to allow correct reception of all 16 channels, without the fix you are limited to 8 channels regardless of the CH1-16/D16 settings. "},{"title":"SRXL (formerly XBUS)​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#srxl-formerly-xbus","content":"(Serial Receiver Link Protocol) SRXL is an open data transfer protocol which allows to transport control data from a rc receiver to another device like a flybarless system by only using one single line. This protocol has been established by SRXL.org based on the idea to create a freely available and unified protocol that manufacturers can easily implement to their receivers and devices that process receiver data. The protocol does not describe an exact definition of how the data must be processed. It only describes a framework in which receiver data can be packed. Each manufacturer can have his own ID, which must be attached to the beginning of each data set, so that the device using this data can correctly identify and process the payload of the dataset. Supported receivers: Multiplex:​ All receivers with SRXL (also FLEXX receivers) ####Gaupner / SJ HOTT: All receiver with SUMD support Spektrum:​ AR7700 / AR9020 receiver JR:​ JR X-BUS Make sure to set your TX to use &quot;MODE B&quot; for XBUS in the TX menus! See here for info on JR's XBUS protocol: http://www.jrpropo.com/english/propo/XBus/These receivers are reported working: XG14 14ch DMSS System w/RG731BX XBus Receiverhttp://www.jramericas.com/233794/JRP00631/ Jeti:​ Receivers with UDI output "},{"title":"XBUS MODE B RJ01​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#xbus-mode-b-rj01","content":"There exist a remote receiver made for small BNF-models like the Align T-Rex 150 helicopter. The code also supports using the Align DMSS RJ01 receiver directly with the cleanflight software. To use this receiver you must power it with 3V from the hardware, and then connect the serial line as other serial RX receivers. In order for this receiver to work, you need to specify the XBUS_MODE_B_RJ01 for serialrx_provider. Note that you need to set your radio mode for XBUS &quot;MODE B&quot; also for this receiver to work. Receiver name: Align DMSS RJ01 (HER15001) "},{"title":"SUMD​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#sumd","content":"16 channels via serial currently supported. These receivers are reported working: GR-24 receiver HoTThttp://www.graupner.de/en/products/33512/product.aspx Graupner receiver GR-12SH+ HoTThttp://www.graupner.de/en/products/870ade17-ace8-427f-943b-657040579906/33565/product.aspx "},{"title":"SUMH​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#sumh","content":"8 channels via serial currently supported. SUMH is a legacy Graupner protocol. Graupner have issued a firmware updates for many recivers that lets them use SUMD instead. "},{"title":"IBUS​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#ibus","content":"10 channels via serial currently supported. IBUS is the FlySky digital serial protocol and is available with the FS-IA4B, FS-IA6B and FS-IA10 receivers. The Turnigy TGY-IA6B and TGY-IA10 are the same devices with a different label, therefore they also work. If you are using a 6ch tx such as the FS-I6 or TGY-I6 then you must flash a 10ch firmware on the tx to make use of these extra channels. These receivers are reported working (all gives 10 channels serial): FlySky/Turnigy FS-iA4B 4-Channel Receiver (http://www.flysky-cn.com/products_detail/productId=46.html)FlySky/Turnigy FS-iA6B 6-Channel Receiver (http://www.flysky-cn.com/products_detail/&amp;productId=51.html)FlySky/Turnigy FS-iA10 10-Channel Receiver (http://www.flysky-cn.com/products_detail/productId=53.html)FlySky/Turnigy FS-iA10B 10-Channel Receiver (http://www.flysky-cn.com/products_detail/productId=52.html) Combine flysky ibus telemetry and serial rx on the same FC serial port​ Connect Flysky FS-iA6B receiver like this:  +---------+ | FS-iA6B | | | | Ser RX |---|&lt;---\\ +------------+ | | | | FC | | Sensor |--#==#--*-------| SerialTX | +---------+ +------------+  Use a diode with cathode to receiver serial rx output (for example 1N4148), the anode is connected to the FC serial TX pin, and also via a resistor (10KOhm) to the receiver ibus sensor port. Note (2018-07-27): In some cases, the value of the series resistor may be too large, and going down to 1K[ohm] may provide a good result. Enable with cli:  serial 1 1088 115200 57600 115200 115200 feature RX_SERIAL set serialrx_provider = IBUS save  "},{"title":"Jeti EX Bus​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#jeti-ex-bus","content":"It supports 16 channels with a transfer rate of 100Hz. The HS option (High Speed) is currently not supported. The receiver must be configured in the device manager to EX Bus and connected to a free FC serial TX pin. For more information on the wiring and setup see this document. "},{"title":"MultiWii serial protocol (MSP)​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#multiwii-serial-protocol-msp","content":"Allows you to use MSP commands as the RC input. Only 8 channel support to maintain compatibility with MSP. "},{"title":"Configuration​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#configuration","content":"There are 3 features that control receiver mode: RX_PPM RX_SERIAL RX_PARALLEL_PWM RX_MSP  Only one receiver feature can be enabled at a time. "},{"title":"RX signal-loss detection​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#rx-signal-loss-detection","content":"The software has signal loss detection which is always enabled. Signal loss detection is used for safety and failsafe reasons. The rx_min_usec and rx_max_usec settings helps detect when your RX stops sending any data, enters failsafe mode or when the RX looses signal. By default, when the signal loss is detected the FC will set pitch/roll/yaw to the value configured for mid_rc. The throttle will be set to the value configured for rx_min_usec or mid_rc if using 3D feature. Signal loss can be detected when: no rx data is received (due to radio reception, recevier configuration or cabling issues).using Serial RX and receiver indicates failsafe condition.using any of the first 4 stick channels do not have a value in the range specified by rx_min_usec and rx_max_usec. "},{"title":"RX loss configuration​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#rx-loss-configuration","content":"The rxfail cli command is used to configure per-channel rx-loss behaviour. You can use the rxfail command to change this behaviour. A flight channel can either be AUTOMATIC or HOLD, an AUX channel can either be SET or HOLD. AUTOMATIC - Flight channels are set to safe values (low throttle, mid position for yaw/pitch/roll).HOLD - Channel holds the last value.SET - Channel is set to a specific configured value. The default mode is AUTOMATIC for flight channels and HOLD for AUX channels. The rxfail command can be used in conjunction with mode ranges to trigger various actions. The rxfail command takes 2 or 3 arguments. Index of channel (See below)Mode ('a' = AUTOMATIC, 'h' = HOLD, 's' = SET)A value to use when in SET mode. Channels are always specified in the same order, regardless of your channel mapping. Roll is 0Pitch is 1Yaw is 2Throttle is 3.Aux channels are 4 onwards. Examples: To make Throttle channel have an automatic value when RX loss is detected: rxfail 3 a To make AUX4 have a value of 2000 when RX loss is detected: rxfail 7 s 2000 To make AUX8 hold it's value when RX loss is detected: rxfail 11 h WARNING: Always make sure you test the behavior is as expected after configuring rxfail settings! rx_min_usec​ The lowest channel value considered valid. e.g. PWM/PPM pulse length rx_max_usec​ The highest channel value considered valid. e.g. PWM/PPM pulse length "},{"title":"Serial RX​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#serial-rx","content":"See the Serial chapter for some some RX configuration examples. To setup spectrum on the Naze32 or clones in the GUI: Start on the &quot;Ports&quot; tab make sure that UART2 has serial RX. If not set the checkbox, save and reboot.Move to the &quot;Configuration&quot; page and in the upper lefthand corner choose Serial RX as the receiver type.Below that choose the type of serial receiver that you are using. Save and reboot. Using CLI: For Serial RX enable RX_SERIAL and set the serialrx_provider CLI setting as follows. Serial RX Provider\tValueSPEKTRUM1024\t0 SPEKTRUM2048\t1 SBUS\t2 SUMD\t3 SUMH\t4 XBUS_MODE_B\t5 XBUS_MODE_B_RJ01\t6 IBUS\t7 JETIEXBUS\t8 "},{"title":"PPM/PWM input filtering.​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#ppmpwm-input-filtering","content":"Hardware input filtering can be enabled if you are experiencing interference on the signal sent via your PWM/PPM RX. Use the input_filtering_mode CLI setting to select a mode. Value\tMeaningOFF\tDisabled ON\tEnabled "},{"title":"Receiver configuration.​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#receiver-configuration","content":""},{"title":"FrSky D4R-II​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#frsky-d4r-ii","content":"Set the RX for 'No Pulses'. Turn OFF TX and RX, Turn ON RX. Press and release F/S button on RX. Turn off RX. "},{"title":"Graupner GR-24 PWM​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#graupner-gr-24-pwm","content":"Set failsafe on the throttle channel in the receiver settings (via transmitter menu) to a value below rx_min_usec using channel mode FAILSAFE. This is the prefered way, since this is much faster detected by the FC then a channel that sends no pulses (OFF). NOTE:One or more control channels may be set to OFF to signal a failsafe condition to the FC, all other channels must be set to either HOLD or OFF. Do NOT USE the mode indicated with FAILSAFE instead, as this combination is NOT handled correctly by the FC. "},{"title":"Receiver Channel Range Configuration.​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#receiver-channel-range-configuration","content":"The channels defined in CleanFlight are as follows: Channel number\tChannel name0\tRoll 1\tPitch 2\tYaw 3\tThrottle If you have a transmitter/receiver, that output a non-standard pulse range (i.e. 1070-1930 as some Spektrum receivers) you could use rx channel range configuration to map actual range of your transmitter to 1000-2000 as expected by Cleanflight. The low and high value of a channel range are often referred to as 'End-points'. e.g. 'End-point adjustments / EPA'. All attempts should be made to configure your transmitter/receiver to use the range 1000-2000 before using this feature as you will have less preceise control if it is used. To do this you should figure out what range your transmitter outputs and use these values for rx range configuration. You can do this in a few simple steps: If you have used rc range configuration previously you should reset it to prevent it from altering rc input. Do so by entering the following command in CLI: rxrange reset save  Now reboot your FC, connect the configurator, go to the Receiver tab move sticks on your transmitter and note min and max values of first 4 channels. Take caution as you can accidentally arm your craft. Best way is to move one channel at a time. Go to CLI and set the min and max values with the following command: rxrange &lt;channel_number&gt; &lt;min&gt; &lt;max&gt;  For example, if you have the range 1070-1930 for the first channel you should use rxrange 0 1070 1930 in the CLI. Be sure to enter the save command to save the settings. After configuring channel ranges use the sub-trim on your transmitter to set the middle point of pitch, roll, yaw and throttle. You can also use rxrange to reverse the direction of an input channel, e.g. rxrange 0 2000 1000. "},{"title":"Disabling the OpenTx/EdgeTx ADC Filter​","type":1,"pageTitle":"Receivers (RX)","url":"/betaflight.com/docs/development/Rx#disabling-the-opentxedgetx-adc-filter","content":"OpenTx and EdgeTx both enable an ADC filter by default. Betaflight users should turn this off. The ADC filter converts what would otherwise be smooth changes in channel values into a series of steps, where each step is about 1% of the full stick travel. It is intended to reduce 'chatter' when the Rx is connected to a *servo, so that the servo only changes position when a meaningful change has occurred. It is not intended for use with flight controllers. When the ADC Filter is active, Betaflight does not receive the most recent position of the gimabl with each new RC packet. Instead, the Rx repeatedly provides the same data, until a moving-averaged smoothed estimate of gimbal position has increased by about 1% of full stick resolution. Betaflight needs a non-delayed, smooth and continuous representation of the stick travel to give the PID system a smooth target setpoint value. Our RC Smoothing is based on the assumption that every packet is unique and that each is a new representation of the most recent position of the gimbal. Feedforward is calculated from the packet-to-packet position difference, and absolutely relies on smooth and regular updates in measured gimbal position. When active with Betaflight firmware, the ADC filter causes: delay (from the moving averaging)sustained transient impactssteps in setpointspikes and noise in feedforward, with reduced feedforward precisionspikes in motor control signals that may cause noticeable jerking in HD video This is why, whenever an OpenTx or EdgeTx user is using Betaflight, the OpenTx/EdgeTx ADC Filter MUST be disabled, for accurate smooth flight control. The user only has to find the ADC Filter checkbox in the Hardware tab of the Global Settings for their radio, and ensure it is un-checked. For example, with the Frsky Taranis X9D+ pre 2019 model: Turn on your radio.Hold Menu to access Global Settings.Click the Page button 5 times to go to page 6 (HARDWARE).Scroll down and select ADC filter.Click Enter to disable the ADC filter as it's enabled by default.Click Exit (twice) to return to the startup screen. "},{"title":"Sonar","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Sonar","content":"","keywords":""},{"title":"Hardware​","type":1,"pageTitle":"Sonar","url":"/betaflight.com/docs/development/Sonar#hardware","content":"Currently the main supported sensor is the HCSR04 sensor. The Parallax 28015 single-wire sonar can also be used by connecting 1k resistors to the Trigger and Echo pins, and the other end of the resistors shorted together and to the Sonar module.  1k TRIGGER--/\\/\\--\\ \\_______ 28015 SONAR 1k / ECHO-----/\\/\\--/  "},{"title":"Connections​","type":1,"pageTitle":"Sonar","url":"/betaflight.com/docs/development/Sonar#connections","content":""},{"title":"Naze/Flip32+​","type":1,"pageTitle":"Sonar","url":"/betaflight.com/docs/development/Sonar#nazeflip32","content":"Mode\tTrigger\tEcho\tInline 1k resistorsParallel PWM/ADC current sensor\tPB8 / Motor 5\tPB9 / Motor 6\tNO (5v tolerant) PPM/Serial RX\tPB0 / RC7\tPB1 / RC8\tYES (3.3v input) Constraints​ Current meter cannot be used in conjunction with Parallel PWM and Sonar. "},{"title":"CC3D​","type":1,"pageTitle":"Sonar","url":"/betaflight.com/docs/development/Sonar#cc3d","content":"Trigger\tEcho\tInline 1k resistorsPB5 / RC4\tPB0 / RC5\tYES (3.3v input) Constraints​ Sonar cannot be used in conjuction with SoftSerial or Parallel PWM. "},{"title":"SPRacingF3​","type":1,"pageTitle":"Sonar","url":"/betaflight.com/docs/development/Sonar#spracingf3","content":"Trigger\tEcho\tInline 1k resistorsPB0 / RC7\tPB1 / RC8\tYES (3.3v input) Constraints​ Sonar cannot be used in conjuction with SoftSerial2 or Parallel PWM. "},{"title":"Spektrum Bind Support","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Spektrum bind","content":"","keywords":""},{"title":"Configure the bind code​","type":1,"pageTitle":"Spektrum Bind Support","url":"/betaflight.com/docs/development/Spektrum bind#configure-the-bind-code","content":"The following parameters can be used to enable and configure this in the related target.h file: SPEKTRUM_BIND Enables the Spektrum bind code BIND_PORT GPIOA Defines the port for the bind pin BIND_PIN Pin_3 Defines the bind pin (the satellite receiver is connected to)  This is to activate the hardware bind plug feature HARDWARE_BIND_PLUG Enables the hardware bind plug feature BINDPLUG_PORT GPIOB Defines the port for the hardware bind plug BINDPLUG_PIN Pin_5 Defines the hardware bind plug pin  "},{"title":"Hardware​","type":1,"pageTitle":"Spektrum Bind Support","url":"/betaflight.com/docs/development/Spektrum bind#hardware","content":"The hardware bind plug will be enabled via defining HARDWARE_BIND_PLUG during building of the firmware. BINDPLUG_PORT and BINDPLUG_PIN also need to be defined (please see above). This is done automatically if the AlienFlight firmware is built. The hardware bind plug is expected between the defined bind pin and ground. "},{"title":"Function​","type":1,"pageTitle":"Spektrum Bind Support","url":"/betaflight.com/docs/development/Spektrum bind#function","content":"The spektrum_sat_bind CLI parameter is defining the number of bind impulses (1-10) send to the satellite receiver. Setting spektrum_sat_bind to zero will disable the bind mode in any case. The bind mode will only be activated after an power on or hard reset. Please refer to the table below for the different possible values. If the hardware bind plug is configured the bind mode will only be activated if the plug is set during the firmware start-up. The value of the spektrum_sat_bind parameter will be permanently preserved. The bind plug should be always removed for normal flying. If no hardware bind plug is used the spektrum_sat_bind parameter will trigger the bind process during the next hardware reset and will be automatically reset to &quot;0&quot; after this. Please refer to the satellite receiver documentation for more details of the specific receiver in bind mode. Usually the bind mode will be indicated with some flashing LEDs. "},{"title":"Table with spektrum_sat_bind parameter value​","type":1,"pageTitle":"Spektrum Bind Support","url":"/betaflight.com/docs/development/Spektrum bind#table-with-spektrum_sat_bind-parameter-value","content":"Value\tReceiver mode\tNotes3\tDSM2 1024bit/22ms 5\tDSM2 2048bit/11ms\tdefault AlienFlight 7\tDSMX 1024bit/22ms 8\tDSMX 2048bit/22ms\tUsed by new DXe 9\tDSMX 2048bit/11ms\t "},{"title":"Serial","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Serial","content":"","keywords":""},{"title":"Serial port types​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#serial-port-types","content":"USB Virtual Com Port (VCP) - USB pins on a USB port connected directly to the processor without requiring a dedicated USB to UART adapter. VCP does not 'use' a physical UART port.UART - A pair of dedicated hardware transmit and receive pins with signal detection and generation done in hardware.SoftSerial - A pair of hardware transmit and receive pins with signal detection and generation done in software. UART is the most efficient in terms of CPU usage. SoftSerial is the least efficient and slowest, SoftSerial should only be used for low-bandwidth usages, such as telemetry transmission. UART ports are sometimes exposed via on-board USB to UART converters, such as the CP2102 as found on the Naze and Flip32 boards. If the flight controller does not have an on-board USB to UART converter and doesn't support VCP then an external USB to UART board is required. These are sometimes referred to as FTDI boards. FTDI is just a common manufacturer of a chip (the FT232RL) used on USB to UART boards. When selecting a USB to UART converter choose one that has DTR exposed as well as a selector for 3.3v and 5v since they are more useful. Examples: FT232RL FTDI USB To TTL Serial Converter AdapterUSB To TTL / COM Converter Module buildin-in CP2102 Both SoftSerial and UART ports can be connected to your computer via USB to UART converter boards. "},{"title":"Serial Configuration​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#serial-configuration","content":"Serial port configuration is best done via the configurator. Configure serial ports first, then enable/disable features that use the ports. To configure SoftSerial ports the SOFTSERIAL feature must be enabled. "},{"title":"Constraints​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#constraints","content":"If the configuration is invalid the serial port configuration will reset to its defaults and features may be disabled. There must always be a port available to use for MSP/CLI.There is a maximum of 3 MSP ports.To use a port for a function, the function's corresponding feature must be also be enabled. e.g. after configuring a port for GPS enable the GPS feature.If SoftSerial is used, then all SoftSerial ports must use the same baudrate.Softserial is limited to 19200 baud.All telemetry systems except MSP will ignore any attempts to override the baudrate.MSP/CLI can be shared with EITHER Blackbox OR telemetry. In shared mode blackbox or telemetry will be output only when armed.Smartport telemetry cannot be shared with MSP.No other serial port sharing combinations are valid.You can use as many different telemetry systems as you like at the same time.You can only use each telemetry system once. e.g. FrSky telemetry cannot be used on two port, but MSP Telemetry + FrSky on different ports is fine. "},{"title":"Configuration via CLI​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#configuration-via-cli","content":"You can use the CLI for configuration but the commands are reserved for developers and advanced users. The serial CLI command takes 6 arguments: serial &lt;port identifier&gt; &lt;port function&gt; &lt;msp baudrate&gt; &lt;gps baudrate&gt; &lt;telemetry baudrate&gt; &lt;blackbox baudrate&gt;  Serial cli command arguments1. Serial Port Identifier 2. Serial Port Function 3. MSP baud rate 4. GPS baud rate 5. Telemetry baud rate 6. Blackbox baudrate Note: for Identifier see serialPortIdentifier_e in the source; for Function bitmask see serialPortFunction_e in the source code. "},{"title":"1. Serial Port Identifier​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#1-serial-port-identifier","content":"Identifier\tValueSERIAL_PORT_NONE\t-1 SERIAL_PORT_USART1\t0 SERIAL_PORT_USART2\t1 SERIAL_PORT_USART3\t2 SERIAL_PORT_UART4\t3 SERIAL_PORT_UART5\t4 SERIAL_PORT_USART6\t5 SERIAL_PORT_USART7\t6 SERIAL_PORT_USART8\t7 SERIAL_PORT_UART9\t8 SERIAL_PORT_USART10\t9 SERIAL_PORT_USB_VCP\t20 SERIAL_PORT_SOFTSERIAL1\t30 SERIAL_PORT_SOFTSERIAL2\t31 SERIAL_PORT_LPUART1\t40 ID's 0-19 reserved for UARTS 1-20 ID's 20-29 reserved for USB 1-10 ID's 30-39 reserved for SoftSerial 1-10 ID's 40-49 reserved for LPUART 1-10 Other devices can be added starting from id 50. "},{"title":"2. Serial Port Function​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#2-serial-port-function","content":"Function\tValue\tBitFUNCTION_NONE\t0\t0 FUNCTION_MSP\t1\t1 &lt;&lt; 0 FUNCTION_GPS\t2\t1 &lt;&lt; 1 FUNCTION_TELEMETRY_FRSKY_HUB\t4\t1 &lt;&lt; 2 FUNCTION_TELEMETRY_HOTT\t8\t1 &lt;&lt; 3 FUNCTION_TELEMETRY_LTM\t16\t1 &lt;&lt; 4 FUNCTION_TELEMETRY_SMARTPORT\t32\t1 &lt;&lt; 5 FUNCTION_RX_SERIAL\t64\t1 &lt;&lt; 6 FUNCTION_BLACKBOX\t128\t1 &lt;&lt; 7 NOT USED\t256\t1 &lt;&lt; 8 FUNCTION_TELEMETRY_MAVLINK\t512\t1 &lt;&lt; 9 FUNCTION_ESC_SENSOR\t1024\t1 &lt;&lt; 10 FUNCTION_VTX_SMARTAUDIO\t2048\t1 &lt;&lt; 11 FUNCTION_TELEMETRY_IBUS\t4096\t1 &lt;&lt; 12 FUNCTION_VTX_TRAMP\t8192\t1 &lt;&lt; 13 FUNCTION_RCDEVICE\t16384\t1 &lt;&lt; 14 FUNCTION_LIDAR_TF\t32768\t1 &lt;&lt; 15 FUNCTION_FRSKY_OSD\t65536\t1 &lt;&lt; 16 FUNCTION_VTX_MSP\t131072\t1 &lt;&lt; 17 FUNCTION_MSP_DISPLAYPORT\t262145\t(1 &lt;&lt; 18) | FUNCTION_MSP Note: FUNCTION_FRSKY_OSD = (1&lt;&lt;16) requires 17 bits. Note2: We can use up to 32 bits (1&lt;&lt;32) here. "},{"title":"3. MSP Baudrates​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#3-msp-baudrates","content":"Baudrate9600 19200 38400 57600 115200 230400 250000 500000 1000000 "},{"title":"4 GPS Baudrates​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#4-gps-baudrates","content":"Baudrate9600 19200 38400 57600 115200 Note: Also has a boolean AUTOBAUD. It is recommended to use a fixed baudrate. Configure GPS baudrate according to device documentation. "},{"title":"5. Telemetry Baudrates​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#5-telemetry-baudrates","content":"BaudrateAUTO 9600 19200 38400 57600 115200 "},{"title":"6. Blackbox Baudrates​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#6-blackbox-baudrates","content":"Baudrate19200 38400 57600 115200 230400 250000 400000 460800 500000 921600 1000000 1500000 2000000 2470000 "},{"title":"Serial Port Baud Rates​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#serial-port-baud-rates","content":"The Serial Port baudrates are defined as follows: ID\tBaudrate0\tAuto 1\t9600 2\t19200 3\t38400 4\t57600 5\t115200 6\t230400 7\t250000 8\t400000 9\t460800 10\t500000 11\t921600 12\t1000000 13\t1500000 14\t2000000 15\t2470000 "},{"title":"Passthrough​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#passthrough","content":"Betaflight can enter a special passthrough mode whereby it passes serial data through to a device connected to a UART/SoftSerial port. This is useful to change the configuration of a Betaflight peripheral such as an OSD, bluetooth dongle, serial RX etc. To initiate passthrough mode, use the CLI command serialpassthrough This command takes four arguments. serialpassthrough &lt;port1 id&gt; [port1 baud] [port1 mode] [port1 DTR PINIO] [port2 id] [port2 baud] [port2 mode]  PortX ID is the internal identifier of the serial port from Betaflight source code (see serialPortIdentifier_e in the source). For instance UART1-UART4 are 0-3 and SoftSerial1/SoftSerial2 are 30/31 respectively. PortX Baud is the desired baud rate, and portX mode is a combination of the keywords rx and tx (rxtx is full duplex). The baud and mode parameters can be used to override the configured values for the specified port. port1 DTR PINIO identifies the PINIO resource which is optionally connected to a DTR line of the attached device. If port2 config(the last three arguments) is not specified, the passthrough will run between port1 and VCP. The last three arguments are used for Passthrough between UARTs, see that section to get detail. For example. If you have your MWOSD connected to UART 2, you could enable communicaton to this device using the following command. This command does not specify the baud rate or mode, using the one configured for the port (see above). serialpassthrough 1  If a baud rate is not specified, or is set to 0, then serialpassthrough supports changing of the baud rate over USB. This allows tools such as the MWOSD GUI to dynamically set the baud rate to, for example 57600 for reflashing the MWOSD firmware and then 115200 for adjusting settings without having to powercycle your flight control board between the two. To use a tool such as the MWOSD GUI, it is necessary to disconnect or exit Betaflight configurator. To exit serial passthrough mode, power cycle your flight control board. In order to reflash an Arduino based device such as a MWOSD via serialpassthrough if is necessary to connect the DTR line in addition to the RX and TX serial lines. The DTR is used as a reset line to invoke the bootloader. The DTR line may be connected to any GPIO pin on the flight control board. This pin must then be associated with a PINIO resource, the instance of which is then passed to the serialpassthrough command. If you don't need it, you can ignore it or set it to none. The DTR line associated with any given UART may be set using the CLI command resource specifying it as a PINIO resource. For example, the following configuration for an OpenPilot Revolution shows the UART6 serial port to be configured with TX on pin C06, RX on pin C07 and a DTR connection using PINIO on pin C08. resource SERIAL_TX 1 A09 resource SERIAL_TX 3 B10 resource SERIAL_TX 4 A00 resource SERIAL_TX 6 C06 resource SERIAL_RX 1 A10 resource SERIAL_RX 3 B11 resource SERIAL_RX 6 C07 resource PINIO 1 C08  To assign the DTR line to another pin use the following command. resource PINIO 1 c05  To disassociate DTR from a pin use the following command. resource PINIO 1 none  Having configured a PINIO resource assocaited with a DTR line as per the above example, connection to an MWOSD attached to an Openpilot Revolution could be achieved using the following command. serialpassthrough 5 0 rxtx 1 This will connect using UART 6, with the baud rate set over USB, full duplex, and with DTR driven on PINIO resource 1. A (desirable) side effect of configuring the DTR line to be associated with a PINIO resource, is that when the FC is reset, the attached Arduino device will also be reset. Note that if DTR is left configured on a port being used with a standard build of MWOSD firmware, the display will break-up when the flight controller is reset. This is because, by default, the MWOSD does not correctly handle resets from DTR. There are two solutions to this: Assign the DTR pin using the resource command above prior to reflashing MWOSD, and then dissasociate DTR from the pin.Rebuild MWOSD with MAX_SOFTRESET defined. The MWOSD will then be reset correctly every time the flight controller is reset. "},{"title":"Passthrough between UARTs​","type":1,"pageTitle":"Serial","url":"/betaflight.com/docs/development/Serial#passthrough-between-uarts","content":"in BetaFlight 4.1 or later, you can make a serial passthrough between UARTs. the last three arguments of serialpassthrough are used to the passthrough between UARTs: [port2 id] [port2 baud] [port2 mode], if you don't need passthrough between UARTs, just ignore them, and use serialpassthrough according to above description. if you want passthrough between UARTs, [port2 id] is a required argument, the value range is same with port1 ID argument, it is the internal identifier of the serial port. [port2 baud]and[port2 mode] is optional argument, the default of them are 57600 and MODE_RXTX. For example. If you using a filght controller built-in BLE chip, and the BLE chip was inner connected to a UART, you can use the following command to let the UART to talk with other UART: serialpassthrough 0 115200 rxtx none 4 19200  the command will run a serial passthrough between UART1 and UART5, UART1 baud is 115200, mode is MODE_RXTX, DTR is none, UART5 baud is 19200, mode is not specific, it will take default value MODE_RXTX. "},{"title":"Connecting a Spektrum-compatible satellite to a Flip32+ flight controller​","type":1,"pageTitle":"Spektrum Bind Support","url":"/betaflight.com/docs/development/Spektrum bind#connecting-a-spektrum-compatible-satellite-to-a-flip32-flight-controller","content":"The Flip32/Flip32+ is wired in a rather strange way, i.e. the dedicated connector for the satellite module uses the same UART pins as the USB adapter. This means that you can't use that connector as it maps to UART1 which you really shouldn't assign to SERIAL_RX as that will break USB functionality. (Looks this problem is fixed in later versions of the Flip32/Flip32+) In order to connect the satellite to a Flip32+, you have to wire the serial data pin to RC_CH4. This is the fourth pin from the top in the left column of the 3x6 header on the right side of the board. GND and +3.3V may either be obtained from the dedicated SAT connector or from any ground pin and pin 1 of the BOOT connector which also provides 3.3V. Tested satellite transmitter combinations​ Satellite\tRemote\tRemarkOrange R100\tSpektrum DX6i\tBind value 3 Lemon RX DSMX\tSpektrum DX6i\tBind value 9 Lemon RX DSM2/DSMX\tSpektrum DX8\tBind value 5 Lemon RX DSMX\tWalkera Devo10\tBind value 9, Deviation firmware 4.01 up to 12 channels Lemon RX DSM2\tWalkera Devo7\tBind value 9, Deviation firmware Lemon RX DSMX\tSpektrum DXe\tBind value 8, Supports up to 9 channels "},{"title":"Transponder","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Transponder","content":"","keywords":""},{"title":"iLap Provider​","type":1,"pageTitle":"Transponder","url":"/betaflight.com/docs/development/Transponder#ilap-provider","content":""},{"title":"Links:​","type":1,"pageTitle":"Transponder","url":"/betaflight.com/docs/development/Transponder#links","content":"WebContact "},{"title":"Description:​","type":1,"pageTitle":"Transponder","url":"/betaflight.com/docs/development/Transponder#description","content":"iLap is a commercial system that uses 6 byte transponder codes and a 460kHz carrier. Transponder codes are entered in the CF Configurator Transponder tab as 12 hex digits. Codes are theoretical unique. Codes are obtained for iLap or come with some flight controllers.  "},{"title":"ArcTimer Provider​","type":1,"pageTitle":"Transponder","url":"/betaflight.com/docs/development/Transponder#arctimer-provider","content":""},{"title":"Links:​","type":1,"pageTitle":"Transponder","url":"/betaflight.com/docs/development/Transponder#links-1","content":"WebContact "},{"title":"Description:​","type":1,"pageTitle":"Transponder","url":"/betaflight.com/docs/development/Transponder#description-1","content":"Arctimer is a commercial system that uses 9 byte transponder codes and a 42kHz carrier. There are only 9 unique Arctimer codes. Codes are pick from a list on CF Configurator Transponder tab.  "},{"title":"EasyRaceLapTimer (ERLT) Provider​","type":1,"pageTitle":"Transponder","url":"/betaflight.com/docs/development/Transponder#easyracelaptimer-erlt-provider","content":""},{"title":"Links:​","type":1,"pageTitle":"Transponder","url":"/betaflight.com/docs/development/Transponder#links-2","content":"WebFacebookRCGroupsGitHub "},{"title":"Description​","type":1,"pageTitle":"Transponder","url":"/betaflight.com/docs/development/Transponder#description-2","content":"EasyRaceLapTimer is a open source system that uses 6bit transponder codes and a 38kHz carrier. There are 64 unique ERLT codes. Codes are pick from a list on CF Configurator Transponder tab.  "},{"title":"Units","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Units","content":"","keywords":""},{"title":"Units​","type":1,"pageTitle":"Units","url":"/betaflight.com/docs/development/Units#units-1","content":"Unit\tSpeed\tDistance\tTemperatureImperial\tMPH\tMiles\tFahrenheit Metric\tKPH\tKM\tCelcius British\tMPH\tKM\tCelcius "},{"title":"Affected OSD Elements​","type":1,"pageTitle":"Units","url":"/betaflight.com/docs/development/Units#affected-osd-elements","content":"OSD Element\tImperial\tMetric\tBritishAltitude\tFeet\tMetre\tMetre GPS Speed\tMPH\tKPH\tMPH Home Distance\tFeet\tMetre\tMetre Numerical Vario\tFTPS\tMPS\tMPS Flight Distance\tFeet\tMetre\tMetre OSD Efficiency\tMiles\tKM\tKM Note: Configuration is done in cli with set osd_units = &lt;UNIT&gt; or in the OSD tab in the Betaflight Configurator. For example set osd_units = BRITISH "},{"title":"Affected FrSky Hub Telemetry Elements​","type":1,"pageTitle":"Units","url":"/betaflight.com/docs/development/Units#affected-frsky-hub-telemetry-elements","content":"Element\tImperial\tMetric\tBritishHDOP\tFahrenheit\tCelcius\tCelcius The FrSky hub telemetry setting can be changed in cli by set frsky_unit = &lt;UNIT&gt;. For example set frsky_unit = METRIC "},{"title":"Telemetry","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/Telemetry","content":"","keywords":""},{"title":"FrSky telemetry​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#frsky-telemetry","content":"FrSky telemetry is transmit only and just requires a single connection from the TX pin of a serial port to the RX pin on an FrSky telemetry receiver. FrSky telemetry signals are inverted. To connect a Betaflight capable board to an FrSKy receiver you have some options. A hardware inverter - Built in to some flight controllers.Use software serial and enable frsky_inversion.Use a flight controller that has software configurable hardware inversion (e.g. STM32F30x). For 1, just connect your inverter to a usart or software serial port. For 2 and 3 use the CLI command as follows: set tlm_inverted = ON  "},{"title":"Available sensors​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#available-sensors","content":"The following sensors are transmitted : Name\tDescriptionVspd\tvertical speed, unit is cm/s. Hdg\theading, North is 0°, South is 180°. AccX,Y,Z\taccelerometers values. Tmp1\tbaro temp if available, gyro otherwise. RPM\tif armed, throttle value. battery capacity otherwise. (Blade number needs to be set to 12 in Taranis). VFAS\tactual vbat value (see VFAS precision section bellow). Curr\tactual current comsuption, in amp. Fuel\tif capacity set, remaining battery percentage mah drawn otherwise. GPS\tGPS coordinates. Alt\tbarometer based altitude, init level is zero. Date\ttime since powered. GSpd\tcurrent speed, calculated by GPS. GAlt\tGPS altitude, sea level is zero. Tmp2\tnumber of sats. Every second, a number &gt; 100 is sent to represent GPS signal quality. Cels\taverage cell value, vbat divided by cell number. Betaflight will send Cels (FLVSS Individual Cell Voltages Telemetry), disable the setting to use actual FLVSS sensor with: set telemetry_send_cells = OFF Note: cell voltage values are an assumed reputation of the cell voltage based on the packs voltage. Actual cell voltage may differ. To view individual cells or more importantly to get lowest cell (all cells are the sum of vbat, so each cell is the same in this case): See OpenTX 2.1 &amp; FrSky FLVSS Individual Cell Voltages. Add a new sensor, to display the lowest cell voltage set it up like this: Type: CalculatedFormula: CellCell Sensor: Cels (pack total voltage, sum of all cells)Cell Index: Lowest "},{"title":"Precision setting for VFAS​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#precision-setting-for-vfas","content":"Betaflight can send VFAS (FrSky Ampere Sensor Voltage) in two ways: set frsky_vfas_precision = 0  This is default setting which supports VFAS resolution of 0.2 volts and is supported on all FrSky hardware. set frsky_vfas_precision = 1  This is new setting which supports VFAS resolution of 0.1 volts and is only supported by OpenTX radios (this method uses custom ID 0x39). "},{"title":"HoTT telemetry​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#hott-telemetry","content":"Only Electric Air Modules and GPS Modules are emulated. Use the latest Graupner firmware for your transmitter and receiver. Older HoTT transmitters required the EAM and GPS modules to be enabled in the telemetry menu of the transmitter. (e.g. on MX-20) You can connect HoTT-Telemetry in two ways: Old way:​ Serial ports use two wires but HoTT uses a single wire so some electronics are required so that the signals don't get mixed up. The TX and RX pins of a serial port should be connected using a diode and a single wire to the T port on a HoTT receiver. Connect as follows: HoTT TX/RX T -&gt; Serial RX (connect directly)HoTT TX/RX T -&gt; Diode -( |)- &gt; Serial TX (connect via diode) The diode should be arranged to allow the data signals to flow the right way -( |)- == Diode, | indicates cathode marker.  1N4148 diodes have been tested and work with the GR-24. When using the diode disable tlm_halfduplex, go to CLI and type set tlm_halfduplex = OFF, don't forget a save afterwards. New way:​ You can use a single connection, connect HoTT RX/TX only to serial TX, leave serial RX open and make sure tlm_halfduplex is ON. As noticed by Skrebber the GR-12 (and probably GR-16/24, too) are based on a PIC 24FJ64GA-002, which has 5V tolerant digital pins. Note: The SoftSerial ports may not be 5V tolerant on your board. Verify if you require a 5v/3.3v level shifters. "},{"title":"LightTelemetry (LTM)​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#lighttelemetry-ltm","content":"LTM is a lightweight streaming telemetry protocol supported by a number of OSDs, ground stations and antenna trackers. The Betaflight implementation of LTM implements the following frames: G-FRAME: GPS information (lat, long, ground speed, altitude, sat info)A-FRAME: Attitude (pitch, roll, heading)S-FRAME: Status (voltage, current+, RSSI, airspeed+, status). Item suffixed '+' not implemented in Betaflight.O-FRAME: Origin (home position, lat, long, altitude, fix) In addition, in the inav (navigation-rewrite) fork: N-FRAME: Navigation information (GPS mode, Nav mode, Nav action, Waypoint number, Nav Error, Nav Flags). LTM is transmit only, and can work at any supported baud rate. It is designed to operate over 2400 baud (9600 in Betaflight) and does not benefit from higher rates. It is thus usable on soft serial. More information about the fields, encoding and enumerations may be found athttps://github.com/stronnag/mwptools/blob/master/docs/ltm-definition.txt "},{"title":"MAVLink telemetry​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#mavlink-telemetry","content":"MAVLink is a very lightweight, header-only message marshalling library for micro air vehicles. Betafight supports MAVLink for compatibility with ground stations, OSDs and antenna trackers built for PX4, PIXHAWK, APM and Parrot AR.Drone platforms. MAVLink implementation in Betaflight is transmit-only and usable on low baud rates and can be used over soft serial. "},{"title":"SmartPort (S.Port)​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#smartport-sport","content":"Smartport is a telemetry system used by newer FrSky transmitters and receivers such as the Taranis/XJR and X8R, X6R and X4R(SB). More information about the implementation can be found here: https://github.com/frank26080115/cleanflight/wiki/Using-Smart-Port "},{"title":"Available sensors​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#available-sensors-1","content":"The following sensors are transmitted : Name\tDescriptionA4\taverage cell value. Warning : unlike FLVSS sensors, you do not get actual lowest value of a cell, but an average : (total lipo voltage) / (number of cells) Alt\tbarometer based altitude, init level is zero. Vspd\tvertical speed, unit is cm/s. Hdg\theading, North is 0°, South is 180°. AccX,Y,Z\taccelerometers values. Tmp1\tactual flight mode, sent as 4 digits. Number is sent as (1)1234. Please ignore the leading 1, it is just there to ensure the number as always 5 digits (the 1 + 4 digits of actual data) the numbers are aditives (for example, if first digit after the leading 1 is 6, it means GPS Home and Headfree are both active) 1 is GPS Hold, 2 is GPS Home, 4 is Headfree1 is mag enabled, 2 is baro enabled, 4 is sonar enabled3. 1 is angle, 2 is horizon, 4 is passthrough4. 1 is ok to arm, 2 is arming is prevented, 4 is armed Tmp2\tGPS lock status, Number is sent as 1234, the numbers are aditives 1 is GPS Fix, 2 is GPS Home fixHDOP (0-9, 0 is HDOP &gt;= 5.5m, 9 is HDOP &lt;= 1.0m)number of satsnumber of sats VFAS\tactual vbat value. GAlt\tGPS altitude, sea level is zero. GSpd\tcurrent speed, calculated by GPS. GPS\tGPS coordinates. 420\tGPS distance to home Cels\taverage cell value, vbat divided by cell number. Betaflight will send Cels (FLVSS Individual Cell Voltages Telemetry), disable the setting to use actual FLVSS sensor with: set report_cell_voltage = OFF Note: cell voltage values are an assumed reputation of the cell voltage based on the packs voltage. Actual cell voltage may differ. It is recommeded that you chain the flight controllers telemetry with a real Frsky FLVSS s.port sensor. To view individual cells or more importantly to get lowest cell (all cells are the sum of vbat, so each cell is the same in this case): See OpenTX 2.1 &amp; FrSky FLVSS Individual Cell Voltages. Add a new sensor, to display the lowest cell voltage set it up like this: Type: CalculatedFormula: CellCell Sensor: Cels (pack total voltage, sum of all cells)Cell Index: Lowest "},{"title":"Integrate Betaflight telemetry with FrSky Smartport sensors​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#integrate-betaflight-telemetry-with-frsky-smartport-sensors","content":"While Betaflight telemetry brings a lot of valuable data to the radio, there are additional sensors, like Lipo cells sensor FLVSS, that can be a great addition for many aircrafts. Smartport sensors are designed to be daisy chained, and CF telemetry is no exception to that. To add an external sensor, just connect the &quot;S&quot; port of the FC and sensor(s) together, and ensure the sensor(s) are getting connected to GND and VCC either from the controler or the receiver  "},{"title":"SmartPort on F3 targets with hardware UART​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#smartport-on-f3-targets-with-hardware-uart","content":"Smartport devices can be connected directly to STM32F3 boards such as the SPRacingF3 and Sparky, with a single straight through cable without the need for any hardware modifications on the FC or the receiver. Connect the TX PIN of the UART to the Smartport signal pin. For Smartport on F3 based boards, enable the telemetry inversion setting. set tlm_inverted = ON  "},{"title":"SmartPort on F1 and F3 targets with SoftSerial​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#smartport-on-f1-and-f3-targets-with-softserial","content":"Since F1 targets like Naze32 or Flip32 are not equipped with hardware inverters, SoftSerial might be simpler to use. Enable SoftSerial feature SOFTSERIALIn Configurator assign Telemetry &gt; Smartport &gt; Auto to SoftSerial port of your choiceEnable Telemetry feature TELEMETRYConfirm telemetry invesion set tlm_inverted = ONYou have to bridge TX and RX lines of SoftSerial and connect them together to S.Port signal line in receiver Notes: This has been tested with Flip32 and SPracingF3 boards and FrSky X8R and X4R receiversTo discover all sensors board has to be armed, and when GPS is connected, it needs to have a proper 3D fix. When not armed, values like Vfas or GPS coordinates may not sent. "},{"title":"Ibus telemetry​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#ibus-telemetry","content":"Ibus telemetry requires a single connection from the TX pin of a bidirectional serial port to the Ibus sens pin on an FlySky telemetry receiver. (tested with fs-iA6B receiver, iA10 should work) It shares 1 line for both TX and RX, the rx pin cannot be used for other serial port stuff. It runs at a fixed baud rate of 115200.  _______ / \\ /---------\\ | STM32 |--UART TX--&gt;[Bi-directional @ 115200 baud]&lt;--| IBUS RX | | uC |--UART RX--x[not connected] \\---------/ \\_______/  It should be possible to daisy chain multiple sensors with ibus. This is implemented but not tested because i don't have one of the sensors to test with, the FC shall always be the last sensor in the chain. It is possible to combine serial rx and ibus telemetry on the same uart pin on the flight controller, see Rx. "},{"title":"Configuration​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#configuration","content":"Ibus telemetry can be enabled in the firmware at build time using defines in target.h. It is enabled by default in those targets that have space left. #define TELEMETRY #define TELEMETRY_IBUS  CLI command to enable: serial 1 1024 115200 57600 115200 115200  CLI setting to determine if the voltage reported is Vbatt or calculated average cell voltage set report_cell_voltage=[ON/OFF]  "},{"title":"Available sensors​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#available-sensors-2","content":"The following sensors are transmitted : Tmp1 : baro temp if available, gyro otherwise. RPM : throttle value Vbatt : configurable battery voltage or the average cell value, vbat divided by number of cells. "},{"title":"RX hardware​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#rx-hardware","content":"These receivers are reported to work with i-bus telemetry: FlySky/Turnigy FS-iA6B 6-Channel Receiver (http://www.flysky-cn.com/products_detail/&amp;productId=51.html)FlySky/Turnigy FS-iA10B 10-Channel Receiver (http://www.flysky-cn.com/products_detail/productId=52.html) Note that the FlySky/Turnigy FS-iA4B 4-Channel Receiver (http://www.flysky-cn.com/products_detail/productId=46.html) seems to work but has a bug that might lose the binding, DO NOT FLY the FS-iA4B! "},{"title":"Jeti EX Bus telemetry​","type":1,"pageTitle":"Telemetry","url":"/betaflight.com/docs/development/Telemetry#jeti-ex-bus-telemetry","content":"If telemetry is to be used, only the telemetry feature needs to be activated. The telemetry names will be transmitted for the first 5-10 seconds. The following values are available: Name\tUnitVoltage\t[V] Current\t[A] Altitude\t[m] Capacity\t[mAh] Power\t[W] Roll angle\t[°] Pitch angle\t[°] Heading\t[°] Vario\t[m/s] GPS Sats\t[1] GPS Long GPS Lat GPS Speed\t[m/s] GPS H-Distance\t[m] GPS H-Direction\t[°] GPS Heading\t[°] GPS Altitude\t[m] G-Force X G-Force Y G-Force Z\t The telemetry values that are transmitted depend on whether a suitable sensor is available. Value\tSensorVoltage\tVoltage measurement Current\tCurrent measurement Capacity and Power\tVoltage &amp; Current Measurement Heading\tMagnetometer Altitude and Vario\tBarometer Roll angle, pitch angle and G-Froce X, Y, Z\tACC GPS Sats, GPS...\tGPS "},{"title":"USB Flashing","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/USB Flashing","content":"","keywords":""},{"title":"Charging-Only Cables​","type":1,"pageTitle":"USB Flashing","url":"/betaflight.com/docs/development/USB Flashing#charging-only-cables","content":"If you see no signs of life on your host computer when you plug in your board, check your cable with your mobile phone or some other USB device - some charging cables have only the power pins connected. These will power up the board, so the leds light up, but the host computer will not react to the device at all. You need a proper USB cable to connect your board to the Betaflight Configurator. "},{"title":"Platform Specific: Linux​","type":1,"pageTitle":"USB Flashing","url":"/betaflight.com/docs/development/USB Flashing#platform-specific-linux","content":"In order for Betaflight configurator to be able to access serial ports, your account needs to be in the dialout group. You can add yourself to this group as below: sudo usermod -a -G dialout &lt;username&gt;  If your logs show unable to open serial port you might have skipped this step. "},{"title":"Ubuntu​","type":1,"pageTitle":"USB Flashing","url":"/betaflight.com/docs/development/USB Flashing#ubuntu","content":"Linux requires udev rules to allow write access to USB devices for users. An example shell command to achieve this on Ubuntu is shown here: (echo '# DFU (Internal bootloader for STM32 MCUs)' echo 'SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0483&quot;, ATTRS{idProduct}==&quot;df11&quot;, MODE=&quot;0664&quot;, GROUP=&quot;plugdev&quot;') | sudo tee /etc/udev/rules.d/45-stdfu-permissions.rules &gt; /dev/null  This assigns the device to the plugdev group(a standard group in Ubuntu). To check that your account is in the plugdev group type groups in the shell and ensure plugdev is listed. If not you can add yourself as shown (replacing &lt;username&gt; with your username): sudo usermod -a -G plugdev &lt;username&gt;  "},{"title":"Fedora​","type":1,"pageTitle":"USB Flashing","url":"/betaflight.com/docs/development/USB Flashing#fedora","content":"If you are using Fedora, you will not need to add your account to the plugdev group. Instead use the uaccess tag in your udev rule for dfu: (echo '# DFU (Internal bootloader for STM32 MCUs)' echo 'SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0483&quot;, ATTRS{idProduct}==&quot;df11&quot;, MODE=&quot;0664&quot;, TAG+=&quot;uaccess&quot;') | sudo tee /etc/udev/rules.d/45-stdfu-permissions.rules &gt; /dev/null  "},{"title":"Connectivity Issues: Modem Manager​","type":1,"pageTitle":"USB Flashing","url":"/betaflight.com/docs/development/USB Flashing#connectivity-issues-modem-manager","content":"If you see your ttyUSB device disappear right after the board is connected, chances are that the ModemManager service (that handles network connectivity for you) thinks it is a GSM modem. If this happens, you can issue the following command to disable the service: sudo systemctl stop ModemManager.service  If your system lacks the systemctl command, use any equivalent command that works on your system to disable services. You can likely add your device ID to a blacklist configuration file to stop ModemManager from touching the device, if you need it for cellural networking, but that is beyond the scope of betaflight documentation. If you see the ttyUSB device appear and immediately disappear from the list in Betaflight Configurator when you plug in your flight controller via USB, chances are that NetworkManager thinks your board is a GSM modem and hands it off to the ModemManager daemon as the flight controllers are not known to the blacklisted. "},{"title":"Platform Specific: Windows​","type":1,"pageTitle":"USB Flashing","url":"/betaflight.com/docs/development/USB Flashing#platform-specific-windows","content":"Chrome can have problems accessing USB devices on Windows. A driver should be automatically installed by Windows for the ST Device in DFU Mode but this doesn't always allow access for Chrome. The solution is to replace the ST driver with a libusb driver. The easiest way to do that is to download Zadig. With the board connected and in bootloader mode (reset it by sending the character R via serial, or simply attempt to flash it with the correct serial port selected in Configurator): Open ZadigChoose Options &gt; List All DevicesSelect STM32 BOOTLOADER in the device listChoose WinUSB (v6.x.x.x) in the right hand boxClick Replace DriverRestart Chrome (make sure it is completely closed, logout and login if unsure)Now the DFU device should be seen by Configurator "},{"title":"Manufacturer Section","type":0,"sectionRef":"#","url":"/betaflight.com/docs/manufacturer","content":"Manufacturer Section","keywords":""},{"title":"VTX","type":0,"sectionRef":"#","url":"/betaflight.com/docs/development/VTX","content":"","keywords":""},{"title":"VTX Systems​","type":1,"pageTitle":"VTX","url":"/betaflight.com/docs/development/VTX#vtx-systems","content":"Current support includes RTC6705 directly connected to the CPU (maybe via a PCB board interconnect, e.g. SPRACINGF3NEO)IRC TrampTBS Smart Audio "},{"title":"VTX Button​","type":1,"pageTitle":"VTX","url":"/betaflight.com/docs/development/VTX#vtx-button","content":"If your FC has a button, excluding a BOOT buttons, then it can be used for VTX control. Some boards like the SPRacingF3NEO have both a VTX module and a button. Other boards like the SPRacingF3MINI have multiple buttons. "},{"title":"VTX Button usage​","type":1,"pageTitle":"VTX","url":"/betaflight.com/docs/development/VTX#vtx-button-usage","content":"While the VTX button is held the STATUS 2 LED will flash N times per second indicating the action that will be taken when the button is released. The flashing starts as soon as the button is held. e.g. You press the button, count flashes and then release as appropriate. Duration\tFunction\tFlashes25ms to 1s\tCycle Channel\t4 1s to 3s\tCycle Band\t3 3s to 5s\tCycle Power and RF Power\t2 5s or more\tSave FC settings\t1 Example to cycle VTX power | 0 seconds | 1 second | 2 seconds | 3 seconds | 4 seconds | 5 seconds | 6 seconds or more | |-HOLD BUTTON-----------------------------------|-RELEASE BUTTON-NOW------------|-RELEASED TOO LATE TO CHANGE POWER-| | 4 Flashes | 3 flashes | 3 flashes | 2 flashes | 2 flashes | 1 flash | 1 flash |  The VTX button works with ALL VTX systems including onboard RTC6705, Tramp and SmartAudio. If the VTX can be turned off then POWER 0 will turn off the VTX and POWER 1 will set the VTX into it's lowest power output. If the VTX cannot be turned off then POWER 0 will set the VTX into it's lowest power output. "},{"title":"VTX Table​","type":1,"pageTitle":"VTX","url":"/betaflight.com/docs/development/VTX#vtx-table","content":"As of Betaflight 4.1.0, band/channel and power level information needed to control videotransmitters is no longer hardcoded, but stored in a new facility called vtxTable. The contents of the vtxTable need to be setup manually. They need to match the hardware, local laws and regulations, as well as user preferences. The contents of the table can be examined by typing the command vtxtable into the cli. Example: # vtxtable vtxtable bands 5 vtxtable channels 8 vtxtable band 1 BOSCAM_A A FACTORY 0 5845 5825 5805 5785 5765 5745 0 vtxtable band 2 BOSCAM_B B FACTORY 0 5752 5771 5790 5809 5828 5847 0 vtxtable band 3 BOSCAM_E E FACTORY 0 0 0 0 0 0 0 0 vtxtable band 4 MYBAND M CUSTOM 5745 5769 0 5806 0 5843 0 0 vtxtable band 5 RACEBAND R FACTORY 0 0 0 5769 5806 5843 0 0 vtxtable powerlevels 3 vtxtable powervalues 14 20 26 vtxtable powerlabels 25 100 400  "},{"title":"Bands and channels​","type":1,"pageTitle":"VTX","url":"/betaflight.com/docs/development/VTX#bands-and-channels","content":"The example above contains 5 bands, each with a name, a single-letter abbreviation, a factory flag and eight frequencies. The factory flag controls how Betaflight communicates with the vtx. When the flag is set to FACTORY, Betaflight sends the vtx a band and channel number.The vtx will then use its built-in frequency table. In this mode, the actual contents of the vtxtable are not send the vtx. They are only used for display in the OSD and similar places. As such, bands with the flag set to FACTORY should be set to match the built-in frequency table of the vtx. When the flag is set to CUSTOM, Betaflight sends the vtx the frequency it should use.This mode utilizes the contents of the table and allows the user to create custom bands with whatever frequencies they like.Videotransmitters without a built-in table, such as IRC Tramp or rtc6705 only support CUSTOM. Entries of the vtxtable can be blocked by setting their frequency to 0. This is especially useful for bands set to FACTORY: The spots of unwanted entries of the videotransmitter's built-in table can be set to 0, effectively disabling them. In the example above this was used to only allow frequencies between 5725 and 5875 MHz, as a German pilot would want it to comply with German laws. Additionally, the Fatshark band was replaced with a new custom one. As a starting point, the following table contains the commonly used frequencies: # This table should not be used as-is, but trimmed down according to local laws and regulations. vtxtable band 1 BOSCAM_A A FACTORY 5865 5845 5825 5805 5785 5765 5745 5725 vtxtable band 2 BOSCAM_B B FACTORY 5733 5752 5771 5790 5809 5828 5847 5866 vtxtable band 3 BOSCAM_E E FACTORY 5705 5685 5665 5645 5885 5905 5925 5945 vtxtable band 4 FATSHARK F FACTORY 5740 5760 5780 5800 5820 5840 5860 5880 vtxtable band 5 RACEBAND R FACTORY 5658 5695 5732 5769 5806 5843 5880 5917  "},{"title":"Power levels​","type":1,"pageTitle":"VTX","url":"/betaflight.com/docs/development/VTX#power-levels","content":"In addition the the frequency, videotransmitters also need to know how much power they should use for transmission. The example shown previously contains three power levels, each with a value and a label. The label is shown to the user in the OSD, while the value is sent to the vtx. Power levels should be setup to match the hardware in use. IRC Tramp devices should use:​ vtxtable powerlevels 5 vtxtable powervalues 25 100 200 400 600 vtxtable powerlabels 25 100 200 400 600  rtc6705 should use:​ vtxtable powerlevels 2 vtxtable powervalues 1 2 vtxtable powerlabels MIN MAX  Please note that turning off rtc6705 devices is not possible using powervalues. Use pitmode instead. SmartAudio V1.0 devices should use:​ vtxtable powerlevels 4 vtxtable powervalues 7 16 25 40 vtxtable powerlabels 25 200 500 800  SmartAudio V2.0 devices should use:​ vtxtable powerlevels 4 vtxtable powervalues 0 1 2 3 vtxtable powerlabels 25 200 500 800  SmartAudio V2.1 devices vary depending on their model. Check the manufacturers website.​ For these devices the powervalues are the output power in dBm. To query the available power levels from a SmartAudio 2.1 VTX enter the vtx_info command with no parameters. This will report the available power settings thus: # vtx_info level 14 dBm, power 25 mW level 20 dBm, power 100 mW level 26 dBm, power 400 mW  For example the TBS Unify Pro32 Nano 5G8: vtxtable powerlevels 3 vtxtable powervalues 14 20 26 vtxtable powerlabels 25 100 400  TBS Unify Pro 5G8 HV - Race 2 (MMCX): vtxtable powerlevels 3 vtxtable powervalues 13 20 26 vtxtable powerlabels 25 100 400  TBS Unify Pro32 HV (MMCX): vtxtable powerlevels 4 vtxtable powervalues 14 20 26 30 vtxtable powerlabels 25 100 400 1W  TBS Unify EVO: vtxtable powerlevels 4 vtxtable powervalues 14 20 26 29 vtxtable powerlabels 25 100 400 800  Power levels may be omitted. This is useful for compliance with local laws and regulations. Additionally, powerlabels (but not values!) can be set to anything three characters long. For example a TBS Unify EVO will also work the this config: vtxtable powerlevels 2 vtxtable powervalues 20 26 vtxtable powerlabels .1W .4W  "},{"title":"Complete Examples​","type":1,"pageTitle":"VTX","url":"/betaflight.com/docs/development/VTX#complete-examples","content":"IRC Tramp device​ # This example enables a lot of power levels and channels. # Almost nobody will be able to legally use this without modification. # Check your local laws and regulations before use! vtxtable bands 5 vtxtable channels 8 vtxtable band 1 BOSCAM_A A CUSTOM 5865 5845 5825 5805 5785 5765 5745 5725 vtxtable band 2 BOSCAM_B B CUSTOM 5733 5752 5771 5790 5809 5828 5847 5866 vtxtable band 3 BOSCAM_E E CUSTOM 5705 5685 5665 5645 5885 5905 5925 5945 vtxtable band 4 FATSHARK F CUSTOM 5740 5760 5780 5800 5820 5840 5860 5880 vtxtable band 5 RACEBAND R CUSTOM 5658 5695 5732 5769 5806 5843 5880 5917 vtxtable powerlevels 5 vtxtable powervalues 25 100 200 400 600 vtxtable powerlabels 25 100 200 400 600  SmartAudio 1.0 device​ # This example enables a lot of power levels and channels. # Almost nobody will be able to legally use this without modification. # Check your local laws and regulations before use! vtxtable bands 5 vtxtable channels 8 vtxtable band 1 BOSCAM_A A FACTORY 5865 5845 5825 5805 5785 5765 5745 5725 vtxtable band 2 BOSCAM_B B FACTORY 5733 5752 5771 5790 5809 5828 5847 5866 vtxtable band 3 BOSCAM_E E FACTORY 5705 5685 5665 5645 5885 5905 5925 5945 vtxtable band 4 FATSHARK F FACTORY 5740 5760 5780 5800 5820 5840 5860 5880 vtxtable band 5 RACEBAND R FACTORY 5658 5695 5732 5769 5806 5843 5880 5917 vtxtable powerlevels 4 vtxtable powervalues 7 16 25 40 vtxtable powerlabels 25 200 500 800  SmartAudio 2.0 device​ # This example enables a lot of power levels and channels. # Almost nobody will be able to legally use this without modification. # Check your local laws and regulations before use! vtxtable bands 5 vtxtable channels 8 vtxtable band 1 BOSCAM_A A FACTORY 5865 5845 5825 5805 5785 5765 5745 5725 vtxtable band 2 BOSCAM_B B FACTORY 5733 5752 5771 5790 5809 5828 5847 5866 vtxtable band 3 BOSCAM_E E FACTORY 5705 5685 5665 5645 5885 5905 5925 5945 vtxtable band 4 FATSHARK F FACTORY 5740 5760 5780 5800 5820 5840 5860 5880 vtxtable band 5 RACEBAND R FACTORY 5658 5695 5732 5769 5806 5843 5880 5917 vtxtable powerlevels 4 vtxtable powervalues 0 1 2 3 vtxtable powerlabels 25 200 500 800  SmartAudio 2.1 device​ # This example enables a lot of power levels and channels. # Almost nobody will be able to legally use this without modification. # Check your local laws and regulations before use! vtxtable bands 5 vtxtable channels 8 vtxtable band 1 BOSCAM_A A FACTORY 5865 5845 5825 5805 5785 5765 5745 5725 vtxtable band 2 BOSCAM_B B FACTORY 5733 5752 5771 5790 5809 5828 5847 5866 vtxtable band 3 BOSCAM_E E FACTORY 5705 5685 5665 5645 5885 5905 5925 5945 vtxtable band 4 FATSHARK F FACTORY 5740 5760 5780 5800 5820 5840 5860 5880 vtxtable band 5 RACEBAND R FACTORY 5658 5695 5732 5769 5806 5843 5880 5917 vtxtable powerlevels 4 vtxtable powervalues 14 20 26 30 vtxtable powerlabels 25 100 400 1W  rtc6705​ # This example enables a lot of power levels and channels. # Almost nobody will be able to legally use this without modification. # Check your local laws and regulations before use! vtxtable bands 5 vtxtable channels 8 vtxtable band 1 BOSCAM_A A CUSTOM 5865 5845 5825 5805 5785 5765 5745 5725 vtxtable band 2 BOSCAM_B B CUSTOM 5733 5752 5771 5790 5809 5828 5847 5866 vtxtable band 3 BOSCAM_E E CUSTOM 5705 5685 5665 5645 5885 5905 5925 5945 vtxtable band 4 FATSHARK F CUSTOM 5740 5760 5780 5800 5820 5840 5860 5880 vtxtable band 5 RACEBAND R CUSTOM 5658 5695 5732 5769 5806 5843 5880 5917 vtxtable powerlevels 2 vtxtable powervalues 1 2 vtxtable powerlabels MIN MAX  "},{"title":"Pitmode​","type":1,"pageTitle":"VTX","url":"/betaflight.com/docs/development/VTX#pitmode","content":"Pitmode is separate from vtxTable. No power level should be created for pitmode. Pitmode can be controlled in a variety of ways including OSD, AUX switches and lua scripts. Some videotransmitters have restrictions on its usage. For example, SmartAudio V1.0 and V2.0 devices can only enter pitmode on power-up. Betaflight can make the these devices leave pitmode, but not enter it. rtc6705 devices do not support a proper ultra-low power pitmode. Instead, if the board supports it, pitmode turns off rtc6705 devices completely. "},{"title":"How to Create a Target Configuration","type":0,"sectionRef":"#","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target","content":"","keywords":""},{"title":"1. Considerations for Target Configurations​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#1-considerations-for-target-configurations","content":""},{"title":"1.1. General​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#11-general","content":"Target Configurations are very flexible - anything that can be configured in Betaflight can be added to a Target Configuration. This is intentional, as it allows Target Configurations to be adapted to many different kinds of targets, from 'general purpose' flight controller boards over 'all in one' boards with on-board ESC and RX all the way to targets for 'ready to fly' craft that come pre-configured and pre-tuned. However, this flexibility also puts the onus on target designers to be reasonable about what they add to the Target Configurations that they create and propose for publication. In general, Betaflight tries to minimise the risk of damage or injury to users, and to avoid configurations that will create problems and potential support issues for a majority of users of a particular target. We reserve the right to refuse to add Target Configurations that are in breach of these principles. Furthermore, target creators are advised to use common sense, and refrain from using configuration that is likely to annoy most users of their hardware - users are not likely to consider products from a manufacturer that has annoyed them in the past for future purchases. Another expectation is that Target Configurations that are submitted for publication are tested - please, in the interest of your customers, do not submit untested configurations. Instructions on how to install Betaflight with a new and unpublished Target Configuration can be found here. "},{"title":"1.2. Minimum configuration​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#12-minimum-configuration","content":"The expectation is that a Target Configuration contains at least all of the settings to make the hardware on a board work for the user out of the box. The instructions in 2. can be used to create such a configuration from a legacy target. For any hardware that is not configured to work in the Target Configuration, Betaflight's answer to support requests for this hardware will be 'target X does not support this hardware'. "},{"title":"1.3. Don'ts​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#13-donts","content":"These are things that will result in a Target Configuration being rejected by Betaflight, such as: any settings that are equal to the defaults in the firmware (e.g. resource ... NONE). Having such settings included results in targets that are more likely to break with new versions of the firmware, and are therefore harder to maintain and more likely to cause support issues;pre-setting any calibration settings that are dependent on and different for every board, like acc_calibration - these are designed for the user to be prompted to calibrate them when connecting to Betaflight Configurator, in order to get the correct calibration for their hardware;Target Configurations that result in safety issues or a setup that is potentially illegal to be used where the user is, such as: setting motor_pwm_protocol to any digital protocol - if this default configuration is used with ESCs that do not support digital protocols, it is likely to result in motors spinning up as soon as a battery is connected. The default of DISABLED is safe, and the user will be asked to select a motor protocol that is appropriate for their ESCs when they connect to Betaflight Configurator. (Exception: If a Target Configuration is to be used for an all-in-one / RTF product only, an appropriate value for motor_pwm_protocol for the on-board ESCs can be selected.)pre-setting any VTX table settings - allowable values for these are governed by law in most countries, and it is up to the manufacturer / supplier of the VTX hardware and the user to make sure that they are complying with the laws in their country. setting any values that default to auto-detection (like baro_hardware, mag_hardware) to NONE - the default of AUTO is designed to work with no hardware present, and setting the value to NONE will result in support issues from users wanting to add their own hardware. (Exception: Boards that do not have any pins or pads for an SPI or I2C bus exposed can define these settings as NONE.)pre-setting tuning settings for general purpose boards. Betaflight puts a lot of effort into shipping firmware with a default tune that is designed to work reliably across a wide range of hardware, and is extensively tested before every release. All of our documentation is based on this default tune. Adding a different tune to a Target Configuration will result in additional support issues from users for whom the instructions provided by Betaflight do not work. Furthermore, these custom defaults are likely to become outdated with future releases of Betaflight. (Exception: For Target Configurations that are used with only one RTF offering with fixed hardware, it may make sense to add a tune that is optimised for the hardware.) "},{"title":"1.4 Discouraged​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#14-discouraged","content":"Betaflight advises target creators against adding any setting to their Target Configuration if it is not strictly related to hardware configuration. Example settings that are discouraged: OSD element configuration;craft name;rates All of these are really user preferences, and adding them as part of a Target Configuration just means that most customers of this hardware will have to spend extra time on reverting the presets before they can set up their own preferences. There are no strict rules here, and what is reasonable will be dependent on what type of target it is, but manufacturers are advised to use common sense. "},{"title":"2. Creating a Target Configuration for a new Board​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#2-creating-a-target-configuration-for-a-new-board","content":"These instructions explain how to create a new Target configuration. Creating Targets for a new board means you must start with a firmware for your MCU and build up the required pin mappings. The firmware can be a generic one, or one you have built locally. Start with this firmware and then validate pin mappings and hardware functionality needed in the configuration file. "},{"title":"2.1 Obtaining a target firmware for your MCU​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#21-obtaining-a-target-firmware-for-your-mcu","content":"Betaflight Configurator distributes customised targets featuring settings specific to each board. To create firmware for a new board it is recommended to build a generic firmware for your MCU type - STM32F411, STM32F405, STM32F7X2, and so on. If your board has special &quot;compile time&quot; configuration for specific hardware or boot configuration, these flags should be added as EXTRA_PARAMS on the make command line (e.g. make TARGET=STM32F405 EXTRA_PARAMS=&quot;-D'MPU_I2C_INSTANCE=I2CDEV_1'&quot;. The EXTRA_PARAMS can be considered like the old target.h file. These firmware types can be created by building locally and specifying the MCU type such as make STM32F405. Firmware files are created in the obj directory and can be flashed by choosing Load local file in Betaflight Configurator. "},{"title":"2.2 Flashing the target firmware​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#22-flashing-the-target-firmware","content":"(Theoretically there is no need for the board to match the firmware that is flashed in this step, but there is a chance that the board configuration is setting an input pin on the board to be an output pin, thus leading to a short and potential hardware damage.) the important part is that this is the firmware for the MCU type your board uses. make sure to enable 'Full chip erase' before flashing, or reset to default with defaults in CLI. verify that your board is properly reset to defaults. "},{"title":"2.3 Resource Mappings​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#23-resource-mappings","content":"In CLI enter the command resource show and observe the pin mappings. Betaflight shows pin mappings as a single letter and two digits - PA2 is shown as A02. Validate that the key mappings for UARTs, motors, SPI, ADC and other common resources are correct. Then check that any unique hardware on your board is added. Configure changed or additional hardware with the command resource &lt;DEVICE&gt; &lt;ID&gt; &lt;PIN&gt; where device refers to the type of (resource)[https://github.com/betaflight/betaflight/blob/master/src/main/drivers/resource.c] and ID allows for multiple resources of the same type and represents the number of the motor or UART port. Once all resources are present type save and the board configuration will be persisted. "},{"title":"2.4 Validate resources​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#24-validate-resources","content":"After saving your resource please test your board to ensure all hardware is fully operational. If hardware is not fully working repeat the &quot;Resource Mappings&quot; step. Once testing is completed proceed to &quot;Get a dump of your board configuration&quot; "},{"title":"2.5 Get a dump of your board configuration​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#25-get-a-dump-of-your-board-configuration","content":"re-start CLI (Disconnect / Connect), then do a dump hardware, save the output into a file with 'Save to File'. "},{"title":"2.6 Add #defines for hardware drivers​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#26-add-defines-for-hardware-drivers","content":"edit the file from the previous step, and add #defines for accelerometer, barometer, gyro and magnetometer hardware drivers to be included for the cloud build API. For example on this target this will look like: # Betaflight / STM32F411 (S411) 4.1.0 Oct 16 2019 / 11:57:34 (c37a7c91a) MSP API: 1.42 #define USE_GYRO_SPI_MPU6000 #define USE_GYRO_SPI_MPU6500 #define USE_ACC_SPI_MPU6000 #define USE_ACC_SPI_MPU6500 #define USE_MAX7456 board_name NOX manufacturer_id AIRB  For more information see reference at the Hardware specification "},{"title":"2.7 Add the board and manufacturer information​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#27-add-the-board-and-manufacturer-information","content":"edit the file from the previous step, and verify that board_name is set to the target name, and manufacturer_id is set to the manufacturer's id as listed in this document;if the manufacturer is not listed, open an issue and ask for a new id to be assigned. This issue needs to contain the following: name of the company selling the board and supporting customers of it; a website URL for this company. In a future release of the Betaflight configurator, the listing for every board will include this company name, and users will be able to open the company's website from within Betaflight configurator. Allow for a day or two for the Betaflight team to respond to your issue and assign a manufacturer it;for boards that are homebrew and / or not planned for commercial availability, use CUST as the manufacturer_id. "},{"title":"2.8 Flash the Target firmware​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#28-flash-the-target-firmware","content":"find the correct Target for your board based on the MCU type, according to the table below. If your target's MCU is not listed, please open an issue about this to let us know there is demand. Currently, MCU types with only one or two boards using them are not released as unified targets. Target\tMCU TypeSTM32F405\tSTM32F405 STM32F411\tSTM32F411 STM32G47X\tSTM32G471 STM32F7X2\tSTM32F722 STM32F745\tSTM32F745 STM32H743\tSTM32H743 STM32H750\tSTM32H750 find and install the firmware (4.0 or newer) for the Target identified above. The firmware is available the releases page as assets (generic) for Betaflight, or you may need to build your own. Be aware that after flashing this firmware, the LEDs on your board will not be working - this is normal. "},{"title":"2.9 Do the initial setup for your Target configuration​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#29-do-the-initial-setup-for-your-target-configuration","content":"connect to your board running the Target firmware, enter CLI; copy / paste the contents of the dump created in 2. into CLI, then enter save; when the board reboots now, the LEDs should start working again - this is a sign that the previous step was successful. "},{"title":"2.10 Add custom settings for your board to the Target configuration​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#210-add-custom-settings-for-your-board-to-the-target-configuration","content":"enter the command: feature OSD in CLI, just before the #master section (to switch on OSD by default); the following steps are optional (omitting it will give users of your board a minimal but working board configuration when using a Target):; set all the custom settings that are specific to your board (e.g. presets for serial RX on a specific port if the board's instructions are for users to use this port for the serial RX). Changes can be done in the UI or in CLI; try to only include extra settings if you are certain that most / all of your users will want them - unwanted extra changes just make it harder for your users to use your board; save the changes; "},{"title":"2.11 Create a Target configuration file for your board​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#211-create-a-target-configuration-file-for-your-board","content":"re-start CLI (Disconnect / Connect), then do a diff all bare, save the output into a file named &lt;manufacturer_id&gt;-&lt;board_name&gt;.config with 'Save to File'. It is crucial that the name exactly matches the manufacturer id and board name specified in the file, or else checking of the pull request you are going to open in a subsequent step will fail; edit the resulting file and identify the first line in the file starting with # Betaflight. This line (called the banner line) should be left untouched, and it has to be the first line in the file. Whatever content is found above this line, delete it. Likewise, there must be no extra lines after the last line starting with set - delete all subsequnet lines otherwise; "},{"title":"2.12 Test​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#212-test","content":"thoroughly test your new Target configuration with the actual hardware (or a prototype of it). Make sure you test all peripherals (gyro, OSD, flash, SDcard, ...) and all motor outputs (with analog and digital protocols). Ideally you want to flight test as well. Remember that Betaflight does no testing of your Target configuration, and once it has been accepted it will become available to your customers through Betaflight Configurator immediately - if it does not work then this will reflect badly onto your company and its products; "},{"title":"3.0 Get it added to Betaflight​","type":1,"pageTitle":"How to Create a Target Configuration","url":"/betaflight.com/docs/manufacturer/Creating An Unified Target#30-get-it-added-to-betaflight","content":"open a pull request to put your target configuration into configs/default. "},{"title":"Requirements for the submission of new and updated targets","type":0,"sectionRef":"#","url":"/betaflight.com/docs/manufacturer/Requirements for submission of targets","content":"Requirements for the submission of new and updated targets The following new requirements for pull requests adding new targets or modifying existing targets are put in place from now on: Read the hardware specification For any new target that is to be added, only a Unified Target config into https://github.com/betaflight/unified-targets/tree/master/configs/default needs to be submitted. See the instructions for how to create a Unified Target configuration. If there is no Unified Target for the MCU type of the new target (see instructions above), then a 'legacy' format target definition into src/main/target/ has to be submitted as well; For changes to existing targets, the change needs to be applied to the Unified Target config in https://github.com/betaflight/unified-targets/tree/master/configs/default. If no Unified Target configuration for the target exists, a new Unified Target configuration will have to be created and submitted. If there is no Unified Target for the MCU type of the new target (see instructions above), then an update to the 'legacy' format target definition in src/main/target/ has to be submitted alongside the update to the Unified Target configuration.","keywords":""},{"title":"Welcome to the Wiki","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki","content":"","keywords":""},{"title":"Find everything betaflight related​","type":1,"pageTitle":"Welcome to the Wiki","url":"/betaflight.com/docs/wiki#find-everything-betaflight-related","content":"You may or may not know that there was an old GitHub wiki. On one hand, it was a great resource to find all sorts of info... on the other, it was pretty clunky, outdated and hard to maintain. So we decided to upgrade it to a new, more modern wiki, which you're currently reading! Work in progress This wiki is still new. Very new. As of writing this, it's only 5 days since we started working on it. So it's still very much a work in progress. Pages going to be added, updated and improved pretty every day in the weeks to come. So if you're missing something, please be patient. It will come! You can also help us out, check out the #documentation channel on the Discord serverfor more info. "},{"title":"What's new?​","type":1,"pageTitle":"Welcome to the Wiki","url":"/betaflight.com/docs/wiki#whats-new","content":"The new wiki is built with Docusaurus, which is far better than what the GitHub Wiki feature offers. It's a lot more modern, easier to maintain and has a lot more features. Plus, I'd say that it looks a lot better too. We're planning on writing nearly every page from scratch, so that we can make sure that the information is up to date and correct. This does mean that we're going to be missing a lot of pages for a little while. "},{"title":"How to use​","type":1,"pageTitle":"Welcome to the Wiki","url":"/betaflight.com/docs/wiki#how-to-use","content":"The wiki is split up into different sections. You can find the sidebar on the left side of the page, which contains links to all the different sections. You can also use the search bar at the top of the page to search for a specific word or phrase "},{"title":"How to contribute​","type":1,"pageTitle":"Welcome to the Wiki","url":"/betaflight.com/docs/wiki#how-to-contribute","content":"If you want to help out, you can do so by creating a pull request on the GitHub repo. You can find a reference page for writing MDX with the features we use, and if you're still not sure how to do something, you can ask in the #documentation channel on the Discord server as we mentioned above "},{"title":"Betaflight Flight Controller Manufacturer Design Guidelines","type":0,"sectionRef":"#","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines","content":"","keywords":""},{"title":"1.1 Intent​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#11-intent","content":"The goal of achieving a certified hardware ecosystem for Betaflight Flight Controller hardware and firmware targets is to ensure that hardware design supports correct operation of Betaflight features and supports an improved user experience for ‘connecting’, flashing, programming, and flying. The cutting edge flight performance achieved by Betaflight relies on proper hardware design, microcontroller resource allocation, and the ability of end users to correctly configure the software with Betaflight. Achieving state of the art performance requires minimizing latency in craft response to perturbations and command inputs, efficient filtering to remove oscillations from flight control calculations, and leveraging the capabilities of peripheral components to enhance the flight experience. For example, features such as advanced RPM filtering, RPM Dynamic Idle and Multi-Dynamic Notch rely on achieving microsecond scale timing jitter for best performance while simultaneously communicating with electronic speed controllers using bidirectional DShot, determining craft attitude and calculating optimal mixer outputs, as well as operating the myriad of desired user peripherals. This symphony of delicately scheduled operations can be achieved reliably with proper flight controller design. "},{"title":"1.2 Important Terms and Glossary​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#12-important-terms-and-glossary","content":"Term\tDefinition\tReferenceADC\tAnalog to Digital Converter BEC\tBattery Elimination Circuit\tElectronic voltage regulator circuit that provides a specified voltage to a single output power rail Bidirectional DSHOT\tTwo-Way DSHOT communication protocol to enable Electronic Speed Controller telemetry to be sent back to the flight controller\thttps://betaflight.com/archive/Bidirectional-DSHOT-and-RPM-Filter Bit Bang\tBit-banging refers to any instance of utilizing GPIO functionality to digitally create signals in place of dedicated hardware. This can alleviate some specific data buffer timing requirements DSHOT\tDigital Shot Communication Protocol used for Flight Controller to Electronic Speed Controller\thttps://betaflight.com/docs/wiki/archive/DSHOT-ESC-Protocol ESC\tElectronic Speed Controller\thttps://us.aspina-group.com/en/learning-zone/columns/what-is/021/ FPV\tFirst Person View\tThis can also refer to the complete avionics-telemetry supplied via a camera &amp; video transmission system GPIO\tGeneral Purpose Input/Output\tReconfigurable digital signal pin that can be selected from an MCU pin IMU\tInertial Motion Unit\tInertial Navigation hardware systems using combined gyroscope and accelerometer unit intended to provide accurate estimates of angular rates, acceleration, and orientation. These can also incorporate magnetometers, barometers, and GPS signals I2C\tInter-Integrated Circuit synchronous serial communication protocol used for connecting microcontroller CPU to peripheral devices MCU\tMicro Controller Unit\tSingle integrated circuit microprocessor with integrated processor, memory, and programmable input/output modules SPI Bus\tSerial Peripheral Interface that enables MCU to interface with ADC, DAC, registers, RAM storage, and GPIO\thttps://www.analog.com/en/analog-dialogue/articles/introduction-to-spi-interface.html PCB\tPrinted Circuit Board\tMay also refer to a populated PCB with components PDB\tPower Distribution Board\tA PCB intended to provide power distribution to electronic speed controller, flight controller, and other peripheral elements VDD\tVoltage - Operating Voltage for a particular chip VDD_IO\tVoltage range permissible as I/O Supply voltage (Typically 3.3V or less)\t 2 Engaging with the Betaflight Development Team "},{"title":"2.1 Hardware Approval Process - Example​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#21-hardware-approval-process---example","content":"Manufacturer initiates contact with Betaflight developer(s) at hardware@betaflight.com Betaflight team will establish a closed Discord channel for ongoing private discussion between key members of the development team and manufacturer designees Work in progress schematics, PCB renders, and similar documentation prior to initial production provides opportunities for early feedback Initial Submission This will require key information to be available, such as specific MCU arrangement (e.g. SPI Bus allocations) may be required in order to support complete feature sets. Desired Target name, MCU type, and which target architecture to be used required. Optionally, if any Official Betaflight Presets are to be requested with this hardware, what specific configurations will be used, and a rough plan of what complete system hardware will be provided to support these efforts. Initial PR for target implementation will need to also include a maintainer, with the intention of providing permission to make future edits on the target. Request for specific targets If the flight controller design is intended to have a dedicated Betaflight target, then a new target submission can accompany the process For additional information, see here: https://betaflight.com/news/new-target-requirements/ Production Representative Samples To complete hardware certification, representative hardware samples of initial production run, or pre-production batches which are representative of the final release design must be furnished to designated Betaflight development team member(s) to conduct final validation and certification operations. This will indirectly provide access to the adjacent benefits of leveraging Betaflight developer expertise by using this hardware in complete systems, including flight testing as desired and comprehensive blackbox log analysis. For configurations requiring specific hardware to be tested (e.g. a Bind &amp; Fly or Plug &amp; Play UAS), providing complete representative hardware systems is best. Reporting of performance With sufficient test time using the final product, developers can agree to recommend products which meet our guidelines and performance expectations. Products will be noted on Betaflight Github. Submission Once hardware has been approved, it will be added to the list of Betaflight approved hardware If new target(s) and/or presets have been added, pull requests will be evaluated, completed, and merged for inclusion in subsequent Betaflight releases Target Maintenance After approval and release, the designated contact is expected to provide any continuing support that may be required in order to keep the approved hardware working well for end users "},{"title":"2.2 Adjacent Benefits and Opportunities​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#22-adjacent-benefits-and-opportunities","content":"Betaflight developers are likely to provide significant indirect benefits for manufacturers adhering to this program. These benefits could include reviews of board designs, pad location recommendations, evaluation of EMI behaviors in builds, analysis of Blackbox logging outputs, and even insights into forward compatibility with other subsystems used in complete builds. Improved customer experience with software interactions, development of presets for BNF multicopter configurations, and validation with specific FPV and RC segments of craft to ensure customer experience will be positive. The key integration aspects of supporting various remote control and video combinations can only be fully validated with testing hardware samples. This thorough testing by expert team members, will help verify and then allow recommendation from the Betaflight development team. Betaflight official recommendation will be highly valuable promotion for the manufacturer so we urge manufacturers to take up this opportunity and work with us. 3.0 Flight Controller Design Guidelines These guidelines provide best practices for physical, electrical, and documentation support of flight controllers. These recommendations are provided as guidelines, however deviating from these provided suggestions should only be undertaken through a collaborative effort with Betaflight developers during the design and prototyping process. "},{"title":"3.1 Best Practices for Flight Controller Design and Performance​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#31-best-practices-for-flight-controller-design-and-performance","content":"When asked to review hardware our first action will be to review schematics/layouts against the application notes for the applicable data sheets. The specifics of how the hardware is interconnected is of course going to be driven by a number of constraints, such as recommended pinouts, as outlined below, but is it essential that good design practises are followed with respect to providing good quality power regulation, appropriate use of ground/power planes, decoupling component positioning etc. "},{"title":"3.1.1 Physical Configuration​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#311-physical-configuration","content":"Primary configurations that place the inertial motion unit and other EMI-sensitive components on the side of the PCB that should be mounted away from the electronic speed controller performs best in vertically stacked configurations. Similarly, physically larger components such as inverters in more protected locations from impacts or adjacent PCB boards in stacked build configurations is recommended. The commonly accepted and used board layouts include 16x16mm for M2 hardware (perpendicularly aligned), 25.4x25.4mm for M2 hardware (typically diagonally aligned), 20x20mm for M2 or M3 hardware (perpendicularly aligned), and 30.5x30.5mm for M3 hardware (perpendicularly aligned). In the case of 20x20 boards, selecting a hardware mounting size should be informed by the ability to use threaded inserts and shock-absorbing grommets in oversized holes, while dedicated M2 mounting limits mounting options if hardware is capable of being used in larger craft that tend to utilize M3 mounting. Boards with oversized holes (e.g. M4 holes and silicone inserts for M3 stack mounting) experience longer service life and experience fewer failures due to PCB deformation during impacts. For standalone flight controllers, integrated ‘AIO’ flight controllers, and even adjacent configurations provided as ‘stacks’ with additional PCBs, this architecture has been proven to be the most robust over time. Board layouts should provide redundancy for all critical functions. For example, solder locations with identical pin arrangements to JST connector located adjacent to the JST header mounting is strongly recommended, providing end users significant added value and opportunities to produce more robust craft. Castellations and use of mounting pads with through holes or edge continuity are also strongly recommended, especially with more compact flight controller designs. For board layouts implementing transistor PINIO functionality for ‘pit switch’ or similar behaviors, solder bridge options are strongly recommended to enable users to select output voltage, or physically bypass the switching functionality by connecting to voltage sources. Particularly for video systems, it is strongly recommended to avoid performing this switching on the ground, due to interference concerns demonstrated with inconsistent ground planes. If providing direct mounting support for receivers, the following specification should be followed: the pin sequence must be GND, 5V, UART RX, UART TX with a 2.54mm pin pitch, and permit receivers sized up to 12x20mm. This mirrors the standard mounting (Gnd/5V/Tx/Rx) of CRSF Nano and ELRS Nano receivers, with mirrored UART communication allowing for Tx and Rx to be paired to the same UART. Rules: GND should be as close to a signal as possible.High speed signals should be away from power.Keep similar signals next to each other.Always minimize current flow path. note BAT/GND/CUR/TLM/M1/M2/M3/M4 is far better as it keeps noisy power far away from high-speed digital signals. M1-M4 being very high-speed, TLM being low speed, CUR being analog and current flow loop/return path between GND and BAT minimized. "},{"title":"3.1.2 Inertial Measurement Unit (IMU) Selection​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#312-inertial-measurement-unit-imu-selection","content":"Selecting an appropriate IMU for flight controller operation is critical to the resulting flight performance of systems. Proven examples of hardware using single Invensense MPU-6000, single or dual ICM-20602, and also Bosch BMI-270 and BMI-180 units have been successfully demonstrated to operate with Betaflight, although the latter two examples have required significand development effort to bring performance of the IMU gyroscope and accelerometer sensing behaviors up to the standards required to maximize flight performance. "},{"title":"3.1.3 Future IMU Options and how to select preferred options​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#313-future-imu-options-and-how-to-select-preferred-options","content":"Future IMU selection should be carried out with close involvement of the Betaflight development group. In cases such as the ICM-42688-P, ICM-42688-V, or ICM-42605, early hardware validation samples should be explored in collaboration with Betaflight developers to determine the suitability of these IMU units in relevant environments. The ability to customize IMU lowpass filtering and operate within the same GRMS/Shock environment allows for maximum portability of existing filtering and tune schemes, but this development must occur with complete hardware samples and flown in representative flight regimes in order to replicate the EMI environment end users will experience. The IMU sensors, designed for applications outside of sUAS, are typically subjected to very harsh electromagnetic environments. Ensuring electromagnetic compatibility when using these immediately adjacent to ultrasonically switched power MOSFET devices, constantly operational radio frequency devices (such as remote control and FPV video systems), under thermal stresses of moving over 1kW through the complete flight stack, are a nontrivial operation. In order to minimize risks of flyaway and brownout behaviors which can be observed if IMU data filtering and power delivery are inadequate, proper circuit design and validation testing must be performed. // Mention examples such as the ICM-42688-P and similar options that offer the same high precision and GRMS/Shock tolerances required. // Also reiterate the importance of these sensors being able to operate in the sometimes harsh EMI environment of being mounted immediately adjacent to, or on the same PCB as a system that is pushing 1kW or more power via ultrasonic power MOSFET switching through lightweight flight control stacks. "},{"title":"3.1.4 Electrical Isolation for Sensor Components​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#314-electrical-isolation-for-sensor-components","content":"Separate VDD from VDD_IO Implement additional filtering on VDD if using a single 3v reg for MCU and Sensor 3.1.4.1 Regulated Power and LDO Power Configurations​ A key aspect of flight controller performance and longevity is design of the low powered rails that supply power to inertial motion units and the STM microcontroller. Providing robust low-ripple power to these devices provides the maximum performance potential and hardware longevity for operation in the challenging EMI environments present on these craft. Similarly, 3.3V, 5V, and 9-12V BEC power needs to provide consistent power at the intended current draw. For example, 3.3V 500mA is a recommended minimum current. ‘4.5V’ (5V USB supplied power) should be capable of powering a receiver and GPS unit, which may require over 700mA. Standard battery powered 5V rails should provide at least 1A, preferably 1.5A to 2A in order to provide higher current if anticipated to be used with a large number of peripherals (such as LED strips, 5V powered FPV Video Systems, or as source power to HD cameras). Providing a 10V 2A BEC is also strongly recommended with flight controller designs, as this supports high definition video systems, and even enables better analog video system power options. Each of these can be optionally connected to PINIO driven pit switches, and/or jumper pad setups that enable end users to select constant-on or transistor switched behavior, particularly if located to support video transmission systems. Such 10V regulators should function at full rated current down to 10V input voltage to support the BEC output from some ESCs. Again, providing robust low-ripple power to these devices provides the maximum performance potential and hardware longevity for operation in the challenging EMI environments present on these craft. 3.1.4.2 ADC Circuitry (e.g. for Current Sensors)​ Using ADC measurements on the flight controller to actively monitor current information from ESCs, or if using integral FC-PDB, minimizing noise on the circuit improves the accuracy and jitter of these signals. To reduce noise from current reading, instead of transfering voltage to FC, send current to FC then move RL Load resistor associated with INA31 onto FC with capacitor in parallel.https://www.ti.com/lit/ds/symlink/ina139.pdf Ideally there should be a pair of bridgeable pads on the ESC in series with the load resistor so that with legacy FCs one can bridge it to include the resistor. Correspondingly on FCs we should have a 82K resistor (and parallel 100nF cap), again with series bridging pads which would be left unbridged when paired with legacy ESCs. When using an ESC/FC stack supporting the above bridging pads, one would leave the ESC pads open and short those on the FC for noise free current reading. In all other cases the ESC pads would be bridged or the FC’s left open to support the current configuration at the expense of higher noise. Note that the above recommendation is based on the fact that if current if fed into one end of a wire, that same current will always flow out of the other end, whereas with a voltage there will be a voltage drop due to resistance in both that wire and the ground return, and the currents flowing through them. Converting the current to a voltage at the input of the ADC will result in significant noise reduction. 3.1.4.3 Supporting Additional Features​ Numerous standard features have become common with flight controller design, for example chips such as MAX7456 to enable monochrome On-Screen Display (OSD) functionality, including Barometers to supplement IMU functionality to provide more accurate altitude estimates, PINIO transistor switched output pads, LED pads, or additional PWM/Motor outputs. In order to fully support these additional features, it remains strongly recommended that hardware manufacturers incorporate early developer feedback to ensure complete functionality. 3.1.4.4 SWD Debug Support​ In order to aid development of Betaflight firmware, and to debug FC specific issues, it is highly beneficial to have test points for the SWDIO/SWCLK lines together with 3V3 and ground connections to enable connection of a debugger such as a Segger JLink or ST-Link. This speeds up resolution of issues hugely, so if at all possible do not use those pins (PA13/PA14) for other purposes. 3.1.4.5 Blackbox Support​ Black box of at least 8mb should also be standard on all fcs as it’s literally impossible to problem solve a tune or flight issues with out black box. 3.1.4.6 LEDs​ FCs should implement at least one LED to indicate activity. The second is preferable, and the third optional. Having at least one LED is essential for users to help diagnose basic faults. More LEDs are beneficial to developers as we can build custom images to help diagnose user reported issues. Each LED should be connected to a GPIO line. Polarity of the output doesn not matter. LED Number\tColour\tRequired0\tBlue\tYes 1\tGreen\tPreferably 2\tAmber\tNo For details of the use of these LEDs, please see the [FC LEDs](FC LEDs.md) documentation "},{"title":"3.2 Resource Selection Considerations​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#32-resource-selection-considerations","content":""},{"title":"3.2.1 Assigning Resource by Priority​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#321-assigning-resource-by-priority","content":"Good resource allocation ensures maximum flexibility in the selection of the modes available to users (for example with DSHOT) and also minimizes conflict in timer and DMA stream allocation. Assign motor channels with highest priority … 3.2.1.1 G4 and H7 Resource Selection​ G4 and H7 have very flexible DMA controls, therefore we have no specific requirement for these processors. 3.2.1.2 F7 Resource Selection​ F7X2 MCUs provide greater flexibility and do not require inverters in order to support protocols such as SBUS, SmartPort, or F.Port. They also do not exhibit the SPI 1 DMA limitations of F4 processors. Bitbang Dshot communcation protocol will always use Timer 1 and Timer 8 - Do NOT use these timers for any other functions 3.2.1.3 F4 Resource Selection​ Due to F4 MCU management of serial inversion, any pins that implement inversion should be clearly marked, and ideally not result in reduced capability of that UART when used with un-inverted peripheral connections. For Betaflight 4.4 and later versions, the expected default configuration will take advantage of Bidirectional DShot, therefore default Looprates and DShot of 8k/4k/DShot-300 are anticipated to be the stock configuration. This does specifically require Motor Resource allocation to enable proper bidirectional DShot communication. If using Bitbang DShot, when SPI Bus #1 is to be used for the gyro, care must be taken to ensure that motor pins are assigned to appropriate timers. This is because Bitbang DSHOT uses DMA2 to write to GPIO ports. If this is enabled, it is not possible to enable DMA on an SPI bus using DMA2. Practically speaking this means that we can’t support DMA on SPI bus 1 (which uses DMA2) on F405 and F411 processors. It is better to put multiple devices on other SPI busses that use SPI bus 1, which is typically used for the gyro. Bitbang Dshot communcation protocol will always use Timer 1 and Timer 8 - do NOT use these pins for any other functions. Further reading: Section 2.1.10 of the errata athttps://www.st.com/resource/en/errata_sheet/dm00037591-stm32f405407xx-and-stm32f415417xx-device-limitations-stmicroelectronics.pdf Corruption may occurs on DMA2 if AHB peripherals (e.g. GPIO ports) are accessed concurrently with APB peripherals (eg SPI busses). Practically, this means that all pins should be on the same port, or at most two ports, so that only one (or two) DMA streams are required for bitbanged operation. Additional Recommendations: Use A00 for LED Strip (diatone fury resources insert as example) Use pins PA13 and 14 for debug options. Including test point pads (these can by tiny) as well as the necessary 3.3v/Ground pads is strongly recommended. The DIAT-FURYF4OSD is a good example configuration for F405 boards, because it uses pins with timers that do not experience any conflicts. Motors are on port pins with associated timers and use neither TIM 1 nor N Channels. As an additional reference design, see the Fenix F405: https://oshwlab.com/jyesmith/fenix-f405 "},{"title":"3.3 Markings, version numbers, and documentation​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#33-markings-version-numbers-and-documentation","content":"It is highly recommended that the flight controller Manufacturer Name, Board Name, and Board Design Revision be marked clearly on the flight controller itself. Where possible, indicating the firmware target name, or selecting a firmware target name to minimize confusion reduces the likelihood of an end user attempting to configure the flight controller with an incorrect target. "},{"title":"3.3.1 Creating Design Revisions and Communicating Changes​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#331-creating-design-revisions-and-communicating-changes","content":"Providing sufficient marking and documentation will be required for hardware approval. Screen printing on the flight controller critical information - pin identifiers, board name, revision, and manufacturer will be necessary, with sufficient detail to enable end users to properly connect devices to the flight controller. When creating flight controller revisions and improvements, it is strongly recommended that indications and documentations are made available, particularly when pinout changes, output rating changes, or hardware bill of material changes. Any board configuration change requiring a user to change configuration behavior must have an accompanying change in marking to indicate (e.g. changing an IMU, or altering the pinout of solder pads). Following standard marking practices (e.g. V, VCC, or VBAT for battery voltage, G or GND for ground, T for ESC Telemetry, C for Current Sensing ADC, etc.) is also strongly recommended. Similarly, providing consistent color selections for pin header JST wiring looms, and consistent marking on the PCB is always preferable for robust building and troubleshooting. Providing a CLI dump file that enables users to reset their flight controller to stock configuration is needed if a dedicated target is not provided. This is particularly relevant if multiple versions of a board which share targets but have significant hardware changes are present, a CLI dump file for each flight controller revision must be made available to users. "},{"title":"3.3.2 Implementing Flight Controller Designs for Ready-To-Fly Craft​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#332-implementing-flight-controller-designs-for-ready-to-fly-craft","content":"3.3.2.1 General Recommendations and Documentation​ // A good example of properly documenting and supporting ready-to-fly craft would be the way EMAX makes entire CLI dumps of every craft which enables users to revert systems to the as-shipped software configuration 3.3.2.2 Leveraging the Betaflight Preset System​ One of the most powerful tools for end users that can save significant time and reduce the likelihood of misconfiguration is the Preset system. Developing an Official Betaflight preset and generating a pull request with the assistance of the Betaflight development team allows for end users to quickly and easily configure their craft. The versatility of selectable options, RC Link presets, and even Tune &amp; Filter presets allow for diverse configurations of RTF craft products to be supported. Applying and using presets not only saves users significant time, but reduces the likelihood of data entry errors or incorrect configurations to be applied, which can be of particular importance for products aimed at less experienced users. For manufacturers providing configuration presets for flight controllers (strongly recommended), providing documentation of suggested locations to connect peripheral devices, match the provided preset menu selections can greatly assist end users with proper configuration of their craft. These should include selecting appropriate PID loop rates, DShot data rates, IMU-specific Gyro Lowpass Filtering, Receiver installation (including options with the correct Port, protocol, SerialRX_Inversion, and SerialRX_HalfDuplex), HD FPV MSP port installation, VTX control (including protocol(s), port, and optional pit mode states), GPS (port and protocols), LEDs, and any PINIO type peripheral connections where applicable. Working with the Betaflight development team provides opportunities to develop presets that can bring RTF craft back to stock configuration, enable users to rapidly configure ‘Plug &amp; Play’ systems based on selected RC link hardware installed per documentation, and even permit Betaflight developers with extensive experience developing precise tunes for craft to generate a range of tunes for that specific product. "},{"title":"3.4 Electronic Speed Controller Compatibility​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#34-electronic-speed-controller-compatibility","content":"A significant amount of the added performance available in Betaflight 4.X and beyond is based on leveraging ESC RPM telemetry data in order to use RPM Notch Filters and Dynamic Idle features. "},{"title":"3.4.1 For 32 Bit ESCs (BLHeli_32 and AM32)​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#341-for-32-bit-escs-blheli_32-and-am32","content":"Betaflight supports all 32-bit ESCs currently available, with BLHeli_32 and AM32 configurations, as well as APD configurations being capable of supporting bidirectional DShot, and user-configured operation with bidirectional DShot disabled. Additional DShot extended telemetry will be implemented over time as demonstrated stable, however current extended telemetry options will only be enabled by user selection. Providing 32b ESCs with firmware prior to 32.66 will require end users to reflash ESCs. Craft will not arm due to the RPMFILTER error that will be present due to a lack of RPM Telemetry. The required solution will be disabling Bidirectional DShot (not recommended) or reflashing ESC (strongly recommended). "},{"title":"3.4.2 For 8 Bit ESCs (BLHeli_S)​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#342-for-8-bit-escs-blheli_s","content":"Betaflight will continue to support all current 8-bit ESC configurations, however these will rely on bidirectional DShot enabled by default. For Betaflight 4.4 and subsequent releases, the Betaflight team will NO LONGER support BLHeli_S as a default configuration. The enhanced flight performance made possible by operating with Bidirectional DShot features enabled will become the default behavior for all Betaflight craft.. 8-bit ESCs can run BlueJay, JESC. For hardware, such as AIO boards which incorporate ESC and FC, the expectation will be that hardware comes with installed firmware meeting these requirements. The preferred option in this case is BlueJay, due to the ability to adjust PWM frequencies and ease of end user support for other functionality across MCU layouts. Failure to comply with this requirement will require end users to perform firmware reflash of ESCs, and without reflashing craft will not arm due to the RPMFILTER error that will be present due to a lack of RPM Telemetry. The required solution will be disabling Bidirectional DShot (not recommended) or reflashing ESC (strongly recommended). "},{"title":"3.4.3 For Legacy ESCs​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#343-for-legacy-escs","content":"For legacy ESCs that are only capable of OneShot and Multishot utilization, end users will be required to disable DShot in order to continue with operations. This situation only applies to pre-BLHeli_S ESC architectures, and is not anticipated to be an issue for the vast majority of users. The lack of DShot capability has been part of Betaflight operation since 3.2 (in 2017), therefore legacy support for this obsolescent hardware will require additional end user configuration, however these are still indirectly supported and may exhibit improved performance with the most recent Betaflight versions despite being unable to take advantage of bidirectional DShot features. 4 Reference Tables "},{"title":"4.1 Rated Looptime and Performance​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#41-rated-looptime-and-performance","content":"Rated Performance of specific MCU, IMU, and ESC DShot Protocol Combinations These are the strongly recommended default configurations For stock configurations, and implementations of ready-to-fly craft, the following configurations are the officially recommended configurations. Importantly, although the Bidirectional DShot ENABLED may require lower PID Loop Rates for F411 and F405 flight controllers, the difference in loop time is 125us or 250us. These are microseconds. The improvements in filtering using RPM Notches alongside Sliding-DFT Multi-Dynamic notches can provide improvements on the scale of milliseconds for phase latency when processing IMU signals to post-filter information that can be used for PID/Mixer calculations. The flight performance of using bidirectional DShot is absolutely worth the PID Looptime Tradeoff, due to that order of magnitude improvement in cumulative signal pathway delay enabled with more targeted notch filtering schema. Looptime and Performance Recommendation Table: MCU\tIMU\tSampling Rate\tBidirectional DShot Status\tPID Loop Rate\tDShot ProtocolF7X2, H7XX, G4XX, and similar\tMPU60X0, ICM2060X, ICM42688P\t8 kHz\tEnabled or Disabled\t8 kHz\tDShot 600 BMI-270\t3.2 kHz\tEnabled or Disabled\t3.2 kHz\tDShot 300 F405\tMPU6000, MPU6050, ICM20601, ICM42688P\t8 kHz\tEnabled\t4 kHz\tDShot 300 MPU6000, MPU6050, ICM20601, ICM42688P\t8 kHz\tDisabled (not recommended)\t8 kHz\tDShot 600 BMI-270\t3.2 kHz\tEnabled or Disabled\t3.2 kHz\tDShot 300 F411 UART Rx **\tMPU6000, MPU6050, ICM20601\t8 kHz\tEnabled\t4 kHz\tDShot 300 MPU6000, MPU6050, ICM20601\t8 kHz\tDisabled (not recommended)\t8 kHz\tDShot 600 BMI-270\t3.2 kHz\tEnabled\t3.2 kHz\tDShot 300 F411 SPI Rx ***\tMPU6000, MPU6050, ICM20601\t8 kHz\tEnabled\t2 kHz\tDShot 300 MPU6000, MPU6050, ICM20601\t8 kHz\tDisabled (not recommended)\t4 kHz\tDShot 300 BMI-270\t3.2 kHz\tEnabled\t1.6 kHz\tDShot 300 BMI-270\t8 kHz\tDisabled (not recommended)\t3.2 kHz\tDShot 300 ** For F411 UART Rx applications, using both available UARTs AND enabling SoftSerial, Accelerometer, large numbers of OSD elements, and using a larger number of filters, stability may require lowering looprate to 2kHz *** There are no SPI Rx solutions that are strongly recommended for future development due to challenges in resource allocation and scheduler inconsistency that consistently emerge with SPI Rx designs. Additionally, there are no RC ecosystems that are actively developing a supported SPI Rx solution (ExpressLRS 3.0 and later do not support SPI; FrSky does not support SPI Rx over any protocol, and other SPI Rx solutions have been fully deprecated). Note that the use of gyros such as the BMI270 lowers the gyro loop rate from 8kHz to 3.2kHz and is therefore advantageous for F411 designs. "},{"title":"4.2 Definitions for targets​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#42-definitions-for-targets","content":"As reference please choose the defines for your target from this list as applicable for the target to select appropiate hardware for the cloud build. "},{"title":"4.2.1 Defines for GYRO and ACC​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#421-defines-for-gyro-and-acc","content":"Define at least one gyro and one accelerometer. #define USE_GYRO_SPI_MPU6000 #define USE_ACC_SPI_MPU6000 #define USE_GYRO_SPI_MPU6500 #define USE_ACC_SPI_MPU6500 #define USE_GYRO_SPI_ICM20689 #define USE_ACC_SPI_ICM20689 #define USE_ACCGYRO_BMI270 #define USE_GYRO_SPI_ICM42605 #define USE_ACC_SPI_ICM42605 #define USE_GYRO_SPI_ICM42688P #define USE_ACC_SPI_ICM42688P  "},{"title":"4.2.2 Defines for FLASH​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#422-defines-for-flash","content":"Define correct flash driver(s) only if physical present on the board. #define USE_FLASH_M25P16 // 16MB Micron M25P16 and others (https://github.com/betaflight/betaflight/blob/master/src/main/drivers/flash_m25p16.c#L68) #define USE_FLASH_W25N01G // 1Gb NAND flash support #define USE_FLASH_W25M // 16, 32, 64 or 128MB Winbond stacked die support #define USE_FLASH_W25M512 // 512Kb (256Kb x 2 stacked) NOR flash support #define USE_FLASH_W25M02G // 2Gb (1Gb x 2 stacked) NAND flash support #define USE_FLASH_W25Q128FV // 16MB Winbond 25Q128 and the 8MB Winbond W25Q8 types  "},{"title":"4.2.3 Defines for BARO​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#423-defines-for-baro","content":"Define a barometer only if physical present on the board. #define USE_BARO_MS5611 #define USE_BARO_SPI_MS5611 #define USE_BARO_BMP280 #define USE_BARO_SPI_BMP280 #define USE_BARO_BMP388 #define USE_BARO_SPI_BMP388 #define USE_BARO_LPS #define USE_BARO_SPI_LPS #define USE_BARO_QMP6988 #define USE_BARO_SPI_QMP6988 #define USE_BARO_DPS310 #define USE_BARO_SPI_DPS310 #define USE_BARO_2SMBP_02B #define USE_BARO_SPI_2SMBP_02B  "},{"title":"4.2.4 Defines for MAG​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#424-defines-for-mag","content":"Define a magnetometer only if physical present of the board. #define USE_MAG_DATA_READY_SIGNAL #define USE_MAG_HMC5883 #define USE_MAG_SPI_HMC5883 #define USE_MAG_QMC5883 #define USE_MAG_LIS3MDL #define USE_MAG_AK8963 #define USE_MAG_MPU925X_AK8963 #define USE_MAG_SPI_AK8963 #define USE_MAG_AK8975  "},{"title":"4.2.5 Defines for SX1280​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#425-defines-for-sx1280","content":"For SPI based SX1280 target designs add the following defines: #define USE_RX_EXPRESSLRS #define USE_RX_EXPRESSLRS_TELEMETRY #define USE_RX_SX1280 #define RX_CHANNELS_AETR  "},{"title":"4.2.6 Defines for OSD​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#426-defines-for-osd","content":"#define USE_MAX7456  "},{"title":"4.2.7 Defines for SDCARD​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#427-defines-for-sdcard","content":"#define USE_SDCARD  "},{"title":"4.2.8 Defines for CC2500​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#428-defines-for-cc2500","content":"For SPI based CC2500 target designs add the following define: #define USE_RX_CC2500  "},{"title":"4.3 Usage of the cloud build API​","type":1,"pageTitle":"Betaflight Flight Controller Manufacturer Design Guidelines","url":"/betaflight.com/docs/manufacturer/Manufacturer Design Guidelines#43-usage-of-the-cloud-build-api","content":"See reference to cloud build API 5 Information for Marketing Purposes Betaflight is an open source flight controller software (firmware) used to fly multi-rotor and fixed wing aircraft. Betaflight is a fork of Baseflight and Cleanflight, with an emphasis focused on flight performance, leading-edge feature additions, and wide target support. Combining cutting edge flight performance with diverse hardware support, Betaflight is the leading solution for high performance small unmanned aircraft. This project is operated and maintained by volunteers, with community support from pilots with a diverse range of flight goals. Pilots flying Betaflight have won every major FAI, MultiGP, and other major FPV multirotor racing event since 2019. "},{"title":"archive","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive","content":"","keywords":""},{"title":"Welcome to the BetaFlight Wiki!​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#welcome-to-the-betaflight-wiki","content":"New to Betaflight and just want to get started? See the installation section. This Wiki is available in other languages: 简体中文 "},{"title":"Events​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#events","content":"Date\tEvent9 November 2021\tLatest release of Betaflight 4.2 "},{"title":"News​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#news","content":"To get the latest update from us, you can now also visit our webpage at https://betaflight.com/. "},{"title":"Merchandise:​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#merchandise","content":"For a limited time only: Buy a Betaflight Shirt or Hoodie! "},{"title":"Wiki Tips:​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#wiki-tips","content":"Searching the Wiki- Type in URL bar of the Web Browser: &quot;site:github-wiki-see.page/m/betaflight/betaflight/wiki PT1&quot; (wiki search for term 'PT1' with a third-party service as GitHub does not permit native indexing of Wiki pages) or &quot;site:github.com/betaflight/betaflight PT1&quot; (broader search for term 'PT1') Note that Default settings as well as CLI commands may change from one Version to the next. We try to list these under the Version Release Notes but not always get them all. a method to use to keep track of changes and to check these yourself is: After Flashing but before configuring do the CLI Dump then Copy/paste this into a Text file named with V#. Then on next update do this again to a new text file. This allows you to check for differences by either manually compared the two text files or by using an Difference option in a text editor. NotePad++ is one such editor with a good difference feature. If not in this Wiki please try the docs directory as another source for information. Note: includes some documentation from Cleanflight All BASICs and alternate methods to config and flash are in the NAZE32 Manual here: http://www.abusemark.com/downloads/naze32_rev2.pdf "},{"title":"Introduction​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#introduction","content":"Betaflight is software that is open source and is available free of charge without warranty to all users. Betaflight is a Cleanflight fork started by BorisB. It used to work as a beta test platform for Cleanflight and kept pushing the envelope in terms of performance, but it eventually evolved into a fully grown up, stable and well maintained firmware by various developers. In fact it looks like it is the number 1 open source multi-rotor firmware according to Google Trends analysis around January 2017. The name &quot;Beta&quot; comes from the fact it started with a goal to keep trying new things out and have quick and easy test distributions available. The name &quot;Beta&quot; has stuck as the brand name was strong at the moment where it transitioned from beta to stable and there was already a lot of documentation around. &quot;This project also helps by contributing to other open source projects like iNav.&quot; - says Boris B (lead developer) Some interactive statistics on how Betaflight is used: "},{"title":"Tools​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#tools","content":"Betaflight is also always being adjusted to support most current Cleanflight tools like Configurator and EzGui devices and many other MSP tools. There is no special tool needed just for Betaflight. "},{"title":"Firmware Releases​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#firmware-releases","content":"Releases can be found here: https://github.com/betaflight/betaflight/releases or downloaded from configurator. Also check the Upgrading List to the Right for Release Notes and other Details on the various Versions. BETA TESTING (WARNING) If you want to contribute to better development you can download and test the latest nightly beta builds directly from: https://ci.betaflight.tech/job/Betaflight/lastBuild/artifact/obj/ "},{"title":"Pull Requests​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#pull-requests","content":"When proposing a change to the code, whether a bug fix or an improvement, create a pull request, or 'PR', using Github. PR's are carefully checked and tested before being merged. You can contribute greatly to the development by testing PR's and providing feedback on the PR. Pre-built hex files for every pull request are available for testing. The Betaflight download includes hex files for the four main unified targets; Configurator and BlackBox downloads include applications for Windows, Mac and Linux. scroll to the bottom of the PR.at All checks have passed line, click Show all checks to the right,in the Release Release line, click Details, to the right,under Release Release succeeded, click 0 errors / 0 warnings,In the Stages / Build section, at the bottom, click on ’artifact’. For Betaflight PR's, click 1 artefact, for Configurator PR's click ‘4 artefacts’.A new window opens; hover over the download line. A three vertical dot dropdown appears at right, choose Download artefacts. This should download a zip file containing hex files of the PR. You can find release planning here:https://github.com/betaflight/betaflight/milestones "},{"title":"Configuration Tool​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#configuration-tool","content":"To configure Betaflight you should use the latest stable Betaflight-configurator GUI tool (Windows/OSX/Linux) that can be found in the Betaflight Configurator repository:https://github.com/betaflight/betaflight-configurator/releases BETA TESTING If you want to contribute to better development you can download the latest beta build from:https://github.com/betaflight/betaflight-configurator-nightlies/releases We really appreciate testing of beta code, including pull requests. Make a Github account and give us your feedback! "},{"title":"BlackBox Viewer​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#blackbox-viewer","content":"Viewer Releases are here:https://github.com/betaflight/blackbox-log-viewer/releases The Latest Viewer source is here:https://github.com/betaflight/blackbox-log-viewerSee BB Logging and Usage Wiki page on using the BB logger. "},{"title":"BetaFlight Logos​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#betaflight-logos","content":"Links to logos (Note: The bee/wasp in the logo is different from the one that was finally adopted):https://www.rcgroups.com/forums/showpost.php?p=34909081&amp;postcount=29679 Here the original ones designed by skaman82:https://www.dropbox.com/s/viczizbjz0fwod4/Betaflight.Logos.zip?dl=0 Or The logo bf uses is at the top of this wiki page, just mouse right and save image as, cut the writing if you don't want it "},{"title":"Other Firmware that runs on same hardware as BF and has related source code:​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#other-firmware-that-runs-on-same-hardware-as-bf-and-has-related-source-code","content":"Official CleanFlight documentation: http://github.com/cleanflight/cleanflight/wiki Check out the INAV project. It's focused on GPS/Alt Hold/Autonomous flight.http://inavflight.com "},{"title":"Providing feedback and contributing to this project​","type":1,"pageTitle":"archive","url":"/betaflight.com/docs/wiki/archive#providing-feedback-and-contributing-to-this-project","content":"Visit this RC Groups Forum to join the discussion: http://www.rcgroups.com/forums/showthread.php?t=2464844 Financial support to the Betaflight Team by PayPal donation:  "},{"title":"Acro Trainer","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Acro-Trainer","content":"Acro Trainer Adds a new angle limiting mode for pilots who are learning to fly in acro mode. Primarily targeted at new LOS acro pilots, but can be used with FPV as well. The feature is activated with a new mode named &quot;ACRO TRAINER&quot;. When the feature is active, the craft will fly in normal acro mode but will limit roll/pitch axes so that they don't exceed the configured angle limit. New pilots can start with a small angle limit and progressively increase as their skills improve. The accelerometer must be enabled for the feature to be configured and function. Also the feature will only be active while in acro flight and will disable if ANGLE or HORIZON modes are selected. For most users all they need to do is simply configure the new mode to be active as desired on the &quot;Modes&quot; tab in the configurator and configure the desired angle limit in the cli. Configuration parameters: acro_trainer_angle_limit: (range 10-80) Angle limit in degrees. acro_trainer_lookahead_ms: (range 10-200) Time in milliseconds that the logic will &quot;look ahead&quot; to help minimize overshoot and bounce-back if the limit is approached at high gyro rates. The default value of 50 should be good for most users. For low powered or unresponsive craft (micros or brushed) it may be helpful to increase this setting if you're seeing substantial overshoot. acro_trainer_debug_axis: (ROLL, PITCH) The axis that will log information if debugging is active. acro_trainer_gain: (range 25-255) The angle limiting strength. Higher numbers can reduce overshoot, but can also lead to oscillation around the angle limit. The default value of 75 seems to work well for most situations. To enable debugging:set debug_mode = ACRO_TRAINER debug(0) - Current angledebug(1) - The internal logic statedebug(2) - Modified setpointdebug(3) - Projected angle based gyro rate and look-ahead period Note that there are no changes to the functioning or calculations in the PID controller. This feature simply intercepts the pilot input on the roll and pitch axes and adjusts to prevent exceeding the configured angle limit.","keywords":""},{"title":"3D Setup","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/3D-Setup","content":"","keywords":""},{"title":"Required information:​","type":1,"pageTitle":"3D Setup","url":"/betaflight.com/docs/wiki/archive/3D-Setup#required-information","content":"When FEATURE 3D is enabled, either by the configuration GUI or CLI command, it allows operation with bi-directional ESCs to provide inverted as well as normal, upright operation by allowing bi-directional operation of the motors to produce positive or negative thrust. You may need to set the proper rotation for each motor by wiring order for the motor, check the ESC manual to confirm. Full power negative will be at low stick and full power positive will be at full high stick. Center stick will be zero throttle. Switch arming is a must for 3D flight and can be set up in the Mode tab of the configuration GUI, motor_stop and stick arming do NOT work in 3D mode for obvious reasons. Arming will only occur when the throttle stick is centered (+/- 3d_deadband_throttle) and the arming switch is active. The motors will immediately spin at 3d_deadband_low or _high, depending on throttle position above or below mid_rc. De-activating the arming switch will stop the motors immediately independent of throttle stick position providing disarm_kill_switch is enabled. disarm_kill_switch is enabled by default. (This needs to be tested to confirm it causes disarm when entering mid_rc +- 3d_deadband_throttle. 3D props are highly recommended to get reasonable and equal power inverted or upright. ONESHOT option works in this mode, transparently if the ESC supports it. "},{"title":"Setup:​","type":1,"pageTitle":"3D Setup","url":"/betaflight.com/docs/wiki/archive/3D-Setup#setup","content":"Enable FEATURE 3D in the firmware: This can be done via the checkbox on the config page of the configurator or via the CLI. Setup ESC to BIDIRECTIONAL MODE: Consult your ESC manual for how to enable bi-directional mode on your ESC. Set both max_throttle and min_command before calibrating the ESC. BL Heli ESC: (norm/reverse/birectional slider in BLHeli GUI) and set max pwm in the ESC GUI to the maximum your transmitter outputs on the throttle channel (normally 2000us) and min pwm to the minimum (normally 1000us) and the midpoint to halfway between (normally 1500us). The ESC will not ouput to the motors if its input is at the midpoint +/- a small deadband. Kiss 24A ESC: To teach the transmitter path (throttle path) the ESC / controller must be connected to a receiver or FC, set the throttle signal at full throttle (peak throttle).Connect the LiPo to the ESC / controller. A beep indicates the confirmation that the programming mode is activated. Now reduce the throttle signal to minimum (normally 1000μs,), and wait for the restart of the speed controller (audible signal high-low-high). The throttle pas is now programmed and the ESC/controller is ready for use. Caution: The loads, that arise for the ESC in the 3D mode, are up to 3 times higher! 3D mode: After the throttle travel has been programmed as described, the 3D mode can be activated as follows: Disconnect the power supply, put the transmitter signal at full throttle, connect power again, wait for beep. Adjusting the throttle to the middle position (half throttle path) and wait for restart of the ECS/ speed controller (signal: high-low-high). The 3D mode is now active. Important! speed controller now s tarts only at the throttle center position. Deactivation: Teach new master travel. Simon K ESC:Unlike BLHeli, SimonK firmware must be compiled specifically to support 3D mode. To program a SimonK ESC to support 3D mode, one must edit the appropriate firmware configuration file to enable the following feature : RC_PULS_REVERSE = 1 It is also recommended to disable stick calibration, as there is no way to reconfigure the mid_point at runtime. RC_CALIBRATION = 0 By default, SimonK sets the neutral throttle point (MID_RC_PULS) to halfway between minimum (STOP_RC_PULS, set to 1060), and maximum, (FULL_RC_PULSE, set to 1860) - so a value of 1460. You can change these values as you desire, but these defaults work well. MID_RC_PULS = = (STOP_RC_PULS + FULL_RC_PULS) / 2 The most common way to configure, compile, and flash SimonK esc's is using the KKFlash tool or the Chrome App &quot;RapidFlash&quot;. Both remove the complexity of building a compile environment for the Atmel MCU on the ESC. The RapidFlash tool is a bit easier to use than the KKFLash tool.  Setup the following parameters in the CLI: 3d_deadband_high: This is the lowest value for positive throttle output from the flight controller to the ESC when armed, the highest value for positive throttle output from the flight controller to the ESC when armed is max_throttle. The range between 3d_deadband_high and max_throttle is the total positive throttle output range. 3d_deadband_low: This is the lowest value for negative throttle output from the flight controller to the ESC when armed, the highest value for negative throttle output from the flight controller to the ESC when armed is min_command. The range between 3d_deadband_low and min_command is the total negative throttle output range. NOTE: To find values for 3d_deadband_high and 3d_deadband_low the motors tab in the configurator can be used to find the value closest to mid_rc which spins all motors consistently in each direction. These numbers should be fairly evenly spaced from mid_rc and should be set as close to mid_rc as possible with mid_rc being centered between the values for 3d_deadband_high and 3d_deadband_low in order to rotate the motors at identical speed in either direction while the throttle is centered. 3d_neutral: This is the output value from the flight controller to the ESC when disarmed. This is similar to how min_command works in normal mode, but for 3d operation. Unless you have a specific reason not to, failsafe_throttle should also be set to the same value as 3d_neutral. failsafe_throttle: This is the output value from the flight controller to the ESC once the failsafe conditions have been met. This should be set to the same value as 3d_neutral to cause the ESC to stop the motors under failsafe conditions. 3d_deadband_throttle: This is the throttle stick range around mid_rc which allows arming to occur, within this deadband the flight controller will output either 3d_deadband_high or 3d_deadband_low to the ESC. The value output (3d_deadband_high or 3d_deadband_low) is dependent on whether the throttle stick entered the deadband from a higher or lower value than mid_rc. max_throttle: This is the maximum value the flight controller will output to the ESC. ESC calibration should be performed after changing max_throttle. min_command: This is the minimum value the flight controller will output to the ESC. ESC calibration should be performed after changing min_command. "},{"title":"Dshot Section:​","type":1,"pageTitle":"3D Setup","url":"/betaflight.com/docs/wiki/archive/3D-Setup#dshot-section","content":"Currently Dshot is working with 3D and according to Boris B still requires some serious flight testing as of 01-01-2017. Updates will be here as we get a greater understanding of 3D with Dshot. Dshot is definitely different with regards to behavior in the configurator, I'm not sure if the calibration process is still required e.t.c. but for now I'm setting up as before and then doing Dshot specific tasks on top of the original setup. (30-04-2017EDIT: It has come to my attention that calibration is not required being that Dshot is a digital signal, I should have realised this earlier, Teracis) Be aware that when using Dshot and having 3D mode activated in the configurator if you go to the motor tab and then un-check the &quot;I understand the risks...&quot; box the configurator will tell the FC to send 1500us (the equivalent digital signal) to the ESCs which will spin the motors forward whilst running the Dshot protocol. As always, props off on the bench! Some flight testing with Kiss 24A ESCs using Build #861 on a CC3D Revo F4 has been completed and no issues regarding flight performance were found as of 05-01-2017. 30-04-2017: Additional information for BLHeliS is that there's currently an issue where the motors _may spin a different way using Dshot to using oneshot/pwm and therefore motor direction MUST be checked when switching to Dshot with 3D, you may need to set some motors to Bi-Directional and others to Bi-Directional reverse. Dshot has an inverted lower section when compared to standard 3D. This means that full negative thrust in Dshot3D is 1499 and minumum negative thrust is 1000 (as opposed to standard/oneshot 3D where full negative thrust would be 1000 and minimum would be 1499). Positive thrust has it's minimum at 1501 and maximum at 2000 Positive values are a guess, needs confirmation You will notice this in the configurator. Idle Percent is used for idle speed in BOTH directions. TODO: Clean up this whole section and add more thorough Dshot information. "},{"title":"ESC Tuning:​","type":1,"pageTitle":"3D Setup","url":"/betaflight.com/docs/wiki/archive/3D-Setup#esc-tuning","content":""},{"title":"BL Heli_S Tuning​","type":1,"pageTitle":"3D Setup","url":"/betaflight.com/docs/wiki/archive/3D-Setup#bl-heli_s-tuning","content":"For ALL tests, safety glasses on (props will be on for step 4 onward), quad held in hand or locked in vice and pointed away from everything, Airmode DISABLED, monitor motor temperature. Take notes for each test to compare. Get all motors spinning in correct directions and 3D mode enabled on FC with default BL Heli_S settings other than direction.Set idle values to not stall in either direction when touched lightly, this is the same process for 2D setups but needs to be done in BOTH directions for 3D.Enable brake on stop.Fit props and safety equipment. Use props intended for flight, or heaviest props intended for flight.Disable Airmode or any similar function.Change motor timing and test which has the smoothest direction changing. This can be subtle and it's worth testing all options (Low, Med/Low, Med, Med/High, High) confirm the final selection by going back and forwards between the other options and the selected best.Change startup power to determine the smoothest direction changing. This can also be subtle, however initial testing has indicated that higher startup power has been the smoothest and quickest to recover from a desync.Check the idle values again, lift these if direction changing is still problematic.Tune PID values (if not already complete) and test hover to confirm no motor heating issues.Test fly and confirm motor direction changes are satisfactory, if not, start at step 4 again, potentially with lighter props. If a single motor is lagging severely, consider swapping motors around to see if the problem follows the motor (motor issue) or stays on that arm (esc issue) or even swapping the motor bells around or the entire motor for a spare. "},{"title":"Arming Sequence & Safety","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Arming-Sequence-And-Safety","content":"","keywords":""},{"title":"Switch arming​","type":1,"pageTitle":"Arming Sequence & Safety","url":"/betaflight.com/docs/wiki/archive/Arming-Sequence-And-Safety#switch-arming","content":"The AUX channel configured for arming will choose a default value that falls outside of the configured arm range (as configured in the &quot;Modes&quot; configurator tab), this value is either 1 &quot;step&quot; (25us) above or below the configured range. This is a safety feature to ensure the default value would not cause accidental arming. Note that this default value is overwritten by the first values data from the receiver, therefore bad RX initial states or failsafe settings can still cause issues. "},{"title":"Arming Prevention​","type":1,"pageTitle":"Arming Sequence & Safety","url":"/betaflight.com/docs/wiki/archive/Arming-Sequence-And-Safety#arming-prevention","content":"Betaflight 3.2 (and above) includes more detailed troubleshooting information for the case when a craft will not arm. This information is available via: the CLIBetaflight OSDbeep patternsBetaflight Configurator Several of these conditions are to assist in preventing accidental arming via bad radio system configuration, unreliable/poor quality receivers and user mistakes. These reasons for not arming are encoded as a set of flags (see runtime_config.h). "},{"title":"CLI​","type":1,"pageTitle":"Arming Sequence & Safety","url":"/betaflight.com/docs/wiki/archive/Arming-Sequence-And-Safety#cli","content":"Flags can be viewed via the status command. Some targets with limited flash space will only provide the hexadecimal representation of these flags, in which case the active flags must be derived from the armingDisableFlags_e enum in runtime_config.h (ensure the version of the file you are looking at matches that of your firmware). "},{"title":"Beeper​","type":1,"pageTitle":"Arming Sequence & Safety","url":"/betaflight.com/docs/wiki/archive/Arming-Sequence-And-Safety#beeper","content":"When arming is attempted and fails, if a beeper is connected to the flight controller it will emit a warning signal indicating the most important (lowest number) reason why disarming is disabled. The signal is as follows: five short 'attention' beeps;a number of long beeps (may be 0);a number of short beeps with long intervals (may be 0). The arming prevention condition that is active can be calculated as (5 * &lt;number of long beeps&gt;) + &lt;number of short beeps&gt;. For example: 1 long and 2 short beeps = 72 long beeps = 10 "},{"title":"Description of arming prevention flags​","type":1,"pageTitle":"Arming Sequence & Safety","url":"/betaflight.com/docs/wiki/archive/Arming-Sequence-And-Safety#description-of-arming-prevention-flags","content":"What each flag means and what you should do to (probably) fix the issue. This list should be kept up to date with the code in master (armingDisableFlags_e in src/main/fc/runtime_config.h) so can be used to find what flag corresponds to a certain index, however if you run an older version you'd have to check this manually as mentioned above. Name\tDescription\tBeep code\tRequired Actions 3.2\t3.3\t3.4/3.5\t4.0\t4.1\t4.2+ NOGYRO\tA gyro was not detected\t1\t1\t1\t1\t1\t1\tYou may have a hardware failure, if a previous firmware version works then it may be a firmware issue. Or you might have flashed a wrong target. FAILSAFE\tFailsafe is active\t2\t2\t2\t2\t2\t2\tRectify the failure condition and try again. RXLOSS(1) or RX_FAILSAFE\tNo valid receiver signal is detected\t3\t3\t3\t3\t3\t3\tYour receiver is either faulty or has no link to the transmitter. BADRX(1)\tYour receiver has just recovered from receiver failsafe but the arm switch is on\t4\t4\t4\t4\t4\t4\tSwitch the arm switch off. BOXFAILSAFE\tThe 'FAILSAFE' switch was activated\t5\t5\t5\t5\t5\t5\tSee FAILSAFE RUNAWAY\tRunway Takeoff Prevention has been triggered 6\t6\t6\t6\t6\tDisarm to clear this condition. CRASH\tCrash Recovery has been triggered 7\t7\tDisarm to clear this condition. THROTTLE\tThrottle channel is too high\t6\t7\t7\t7\t8\t8\tLower throttle below min_check. ANGLE\tCraft is not level (enough)\t7\t8\t8\t8\t9\t9\tLevel craft to within small_angle degrees (default 25). BOOTGRACE\tArming too soon after power on\t8\t9\t9\t10\t10\t10\tWait until pwr_on_arm_grace seconds (default 5) have elapsed. NOPREARM\tPrearm switch is not activated or prearm has not been toggled after disarm\t9\t10\t10\t10\t11\t11\tToggle the prearm switch. LOAD\tSystem load is too high for safe flight\t10\t11\t11\t11\t12\t12\tRevisit configuration and disable features. CALIB\tSensor calibration is still ongoing\t11\t12\t12\t12\t13\t13\tWait for sensor calibration to complete. CLI\tCLI is active\t12\t13\t13\t13\t14\t14\tExit the CLI. CMS\tCMS (config menu) is Active - over OSD or other display\t13\t14\t14\t14\t15\t15\tExit the CMS (or OSD menu). OSD\tOSD menu is active\t14\t15\t16 Exit OSD menu. BST\tA Black Sheep Telemetry device (TBS Core Pro for example) disarmed and is preventing arming\t15\t16\t16\t15\t16\t16\tRefer to the manual for your hardware. MSP MSP connection is active, probably via Betaflight Configurator\t16\t17\t17\t16\t17\t17\tTerminate the Betaflight Configurator connection (disconnect). PARALYZE\tParalyze mode has been activated 18\t17\t18\t18\tPower cycle/reset FC board. GPS\tGPS rescue mode is configured but required number of satellites has not been fixed 19\t18\t19\t19\tWait for GPS fix, enable arming without GPS fix, or disable GPS rescue mode. RECOVERY\t(wiki incomplete) (wiki incomplete)\t(wiki incomplete)\t(wiki incomplete)\t(wiki incomplete) RESCUE_SW\tGPS Rescue switch is in an unsafe position 19\t20\t20\tTurn off the GPS Rescue switch to arm. RPMFILTER(2)\tMotor RPM-based filtering is not functioning 21\t21\t21\tOne or more ESC's are not supplying valid RPM telemetry. REBOOT_REQD\tReboot required 22\t22\tReboot the flight controller for settings changes to take effect. DSHOT_BBANG\tDSHOT Bitbang is not working 23\t23\t(3) NO_ACC_CAL\tAccelerometer calibration required 24\tCalibrate the accelerometer or disable features that use it MOTOR_PROTO\tESC/Motor Protocol not configured 25\tSelect the ESC/Motor protocol to use on the Configuration tab. ARMSWITCH\tArm switch is in an unsafe position\t17\t18\t20\t21\t24\t26\tToggle the arm switch to arm. (1) This may appear on the Betaflight OSD during flight, take it as a sign that your radio system is either faulty or you are flying at the edge of your range. Treat it the same you would an &quot;RSSI critically low&quot; warning. (2) RPM-based filtering is enabled but one or more ESC's are not supplying valid DSHOT telemetry. Check that the ESC's are capable of and have the required firmware installed to support bidirectional DSHOT telemetry. (3) Bitbang DSHOT is not working properly and the motors can't be controlled. Likely caused by a timer conflict with other features enabled on the flight controller. "},{"title":"Barometer Configuration","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Barometer-Configuration","content":"","keywords":""},{"title":"Barometer configuration with CLI​","type":1,"pageTitle":"Barometer Configuration","url":"/betaflight.com/docs/wiki/archive/Barometer-Configuration#barometer-configuration-with-cli","content":"Barometer related CLI variables Variable\tRange\tDescriptionbaro_bustype\tNONE, I2C, SPI\tSpecifies a type of bus a selected barometer device is connected. baro_i2c_device\t0 ~ Max I2C bus ordinate for MCU type (1 origin, same as x in I2Cx expression in target.h)\tSpecifies a bus ordinate of the I2C bus the device is connected when baro_bustype is I2C. 0 meanns &quot;none&quot;. baro_i2c_address\t0 ~ 119 (0x77)\tSpecifies an I2C address of the device in 7-bit representation. 0 is a special value to specify &quot;driver default address&quot;. Values 1~7 are invalid and behavior is unpredictable. baro_spi_device\t0 ~ Max SPI bus ordinate for MCU type (1 origin, same as x in SPIx expression in target.h)\tSpecifies a bus ordinate of the SPI bus the device is connected when baro_bustype is SPI. 0 means &quot;none&quot;. baro_hardware\tNONE, AUTO, BMP280, MS5611, BMP085\tNONE = Barometer support disabled. AUTO = Firmware will determine device to use under pre-defined rule. BMP280, MS5611 and BMP085 = Explicitly specifies device to use. If the device is SPI connected, CS (Chip Select) pin can be specified with the resource CLI command Resource name\tDescriptionBARO_CS\tSpecifies CS (Chip Select) pin to enable the SPI connected barometer device. Note that not all combination of bus type and devices are built-in for a particular target. A combination of baro_hardware = AUTO, baro_bustype = I2C and baro_i2c_address = 0 will cause all built-in I2C devices types to be scanned on the specified baro_i2c_device, in the order of BMP280, MS5611 and BMP085. "},{"title":"Target definition changes​","type":1,"pageTitle":"Barometer Configuration","url":"/betaflight.com/docs/wiki/archive/Barometer-Configuration#target-definition-changes","content":"This section is intended for target maintainers and developers. USE_BARO_xxx and USE_BARO_SPI_xxx are now independent.​ Prior to 3.2, to configure a device xxx on SPI required both USE_BARO_xxx and USE_BARO_SPI_xxx defined (and this combination disabled I2C support for the device xxx). With 3.2, this dependency/relationship has been removed. USE_BARO_xxx configures an I2C variant of the xxx and USE_BARO_SPI_xxx configures an SPI variant of xxx. If both specified, both I2C and SPI variants are configured. Right now, as inherited from 3.1.7, targets that use SPI connected barometer defines both USE_BARO_xxx and USE_BARO_SPI_xxx, so they are configured for both I2C and SPI variants, in which case, a run time selection will be the SPI variant as explained next. Default device determination (compile time)​ When a single barometer device is configured in the target definition, then the device will be the default device. When multiple barometer devices are configured in the target definition, then the following rule are applied sequentially to determine the default device. In an order of pre-defined precedence: BMP280, MS5611 then BMP085; the order was decided based on popularity.When both I2C and SPI variants are configured, then SPI is selected; it is assumed that the SPI variant is more likely to be onboard.Note that when baro_bustype = I2C and baro_i2c_address = 0 and baro_hardware = AUTO, then I2C devices on specified I2C bus will be scanned in the order of precedence described in 1 (this is a run time behavior). Overriding default configuration​ If above rule does not bring intended default configuration, macro names DEFAULT_BARO_bbb_xxx can be used to override the rule. See beginning of the sensors/barometer.c for specific macro names. "},{"title":"CLI Command Line Reference","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Betaflight-4.0-CLI-commands-_Work-in-progress","content":"","keywords":""},{"title":"GET command​","type":1,"pageTitle":"CLI Command Line Reference","url":"/betaflight.com/docs/wiki/archive/Betaflight-4.0-CLI-commands-_Work-in-progress#get-command","content":"Type a &quot;get&quot; and part of a CLI command name (example: &quot;get acc&quot;). The cli will return all CLI commands that have the name part with the current value plus what the valid value range or valid Names. This is a very handy feature and allows easy to find variable names that can then be copy/pasted from the CLI display to the command line entry box. "},{"title":"dump​","type":1,"pageTitle":"CLI Command Line Reference","url":"/betaflight.com/docs/wiki/archive/Betaflight-4.0-CLI-commands-_Work-in-progress#dump","content":"**align_gyro = DEFAULT**Allowed values: DEFAULT, CW0, CW90, CW180, CW270, CW0FLIP, CW90FLIP, CW180FLIP, CW270FLIP Used to orient the gyro chip in the direction of flight. (less CPU load than Board orientation) gyro_hardware_lpf = NORMALAllowed values: NORMAL, 1KHZ_SAMPLING, EXPERIMENTAL Gyro Low pass filter setting gyro_32khz_hardware_lpf = NORMALAllowed values: NORMAL, EXPERIMENTAL 32K gyro low pass filter setting gyro_sync_denom = 1Allowed range: 1 - 32 gyro sync denominator used for blackbox. example Gyro_sync_denom = 8 means blackbox records 1/8th of the gyro data. gyro_lowpass_type = BIQUADAllowed values: PT1, BIQUAD gyro_lowpass_hz = 150Allowed range: 0 - 16000 gyro_lowpass2_type = PT1Allowed values: PT1, BIQUAD gyro_lowpass2_hz = 0Allowed range: 0 - 16000 gyro_notch1_hz = 0Allowed range: 0 - 16000 gyro_notch1_cutoff = 0Allowed range: 0 - 16000 gyro_notch2_hz = 0Allowed range: 0 - 16000 gyro_notch2_cutoff = 0Allowed range: 0 - 16000 gyro_calib_duration = 125Allowed range: 50 - 3000 gyro_calib_noise_limit = 48Allowed range: 0 - 200 gyro_overflow_detect = ALLAllowed values: OFF, YAW, ALL Axis where gyro overflow detection applies Gyro_overflow_detect is special code intended to deal with overflow issues on ICM gyros. The default is to be on, for all axes. It is unwise to disable this if your quad has an ICM gyro. It is not needed or helpful for MPU gyros. ICM gyros are susceptible to overflow-inversion problems if exposed to very high turn rates. If enabled and set to ALL, overflow protection will kick in and disable all PIDs whenever any axis exceeds 1950 degrees/second. yaw_spin_recovery = ONAllowed values: OFF, ON Yaw-Spin-Recovery-and-Gyro-Overflow-Detect This new feature, enabled by default in betaflight 3.4, reduces the severity and duration of un-commanded severe yaw spins. For example, if a quadcopter clips a gate, tree, branch or other object and causes a high rate yaw spin, it may go into a 'never-ending' uncontrollable spin. Typically it makes a distinctive warbling noise and climbs rapidly - the so-called Yaw Spin To The Moon (YSTTM) problem. 3.4 introduces two code features that should bring such spins under control more quickly and cleanly. Yaw Spin Recovery is intended primarily for FPV pilots, and works best with MPU gyros. LOS acro pilots who use high yaw rates may prefer to disable this function. yaw_spin_threshold = 1950Allowed range: 500 - 1950 The 'threshold' value is the spin rate, in degrees per second, at which the spin protection kicks in. The default threshold of 1950 was chosen to minimise false triggering. For FPV, a lower value, e.g. 100-200 above your maximum configured yaw rate, is recommended. For example, a quad with a maximum configured yaw rate of 700 degrees/sec: Too low a threshold may cause false triggering, and delay return to normal control. gyro_use_32khz = OFFAllowed values: OFF, ON gyro_to_use = FIRSTAllowed values: FIRST, SECOND, BOTH dyn_notch_range = AUTOAllowed values: HIGH, MEDIUM, LOW, AUTO dyn_notch_width_percent = 8Allowed range: 0 - 20 dyn_notch_q = 120Allowed range: 1 - 1000 dyn_notch_min_hz = 150Allowed range: 1 - 1000 dyn_lpf_gyro_min_hz = 150Allowed range: 0 - 1000 dyn_lpf_gyro_max_hz = 450Allowed range: 0 - 1000 align_acc = DEFAULTAllowed values: DEFAULT, CW0, CW90, CW180, CW270, CW0FLIP, CW90FLIP, CW180FLIP, CW270FLIP acc_hardware = AUTOAllowed values: AUTO, NONE, ADXL345, MPU6050, MMA8452, BMA280, LSM303DLHC, MPU6000, MPU6500, MPU9250, ICM20601, ICM20602, ICM20608G, ICM20649, ICM20689, BMI160, FAKE acc_lpf_hz = 10Allowed range: 0 - 400 acc_trim_pitch = 0Allowed range: -300 - 300 acc_trim_roll = 0Allowed range: -300 - 300 acc_calibration = 0,0,0Array length: 3 mid_rc = 1500Allowed range: 1200 - 1700 min_check = 1050Allowed range: 750 - 2250 max_check = 1900Allowed range: 750 - 2250 rssi_channel = 0Allowed range: 0 - 18 rssi_src_frame_errors = OFFAllowed values: OFF, ON rssi_scale = 100Allowed range: 1 - 255 rssi_invert = OFFAllowed values: OFF, ON rc_interp = AUTOAllowed values: OFF, PRESET, AUTO, MANUAL rc_interp_ch = RPYTAllowed values: RP, RPY, RPYT, T, RPT rc_interp_int = 19Allowed range: 1 - 50 rc_interp_ch = RPYTAllowed values: RP, RPY, RPYT, T, RPT rc_interp_int = 19Allowed range: 1 - 50 rc_smoothing_type = FILTERAllowed values: INTERPOLATION, FILTER Tuning-Tips-for-Betaflight-3.4#i-just-want-to-fly-not-read-all-this-stuffrc_smoothing_input_hz = 0Allowed range: 0 - 255 Spektrum-and-RC-Smoothing-Filter rc_smoothing_derivative_hz = 0Allowed range: 0 - 255 Spektrum-and-RC-Smoothing-Filter rc_smoothing_debug_axis = ROLLAllowed values: ROLL, PITCH, YAW, THROTTLE rc_smoothing_input_type = BIQUADAllowed values: PT1, BIQUAD rc_smoothing_derivative_type = BIQUADAllowed values: OFF, PT1, BIQUAD rc_smoothing_auto_smoothness = 10Allowed range: 0 - 50 fpv_mix_degrees = 0Allowed range: 0 - 90 max_aux_channels = 14Allowed range: 0 - 14 serialrx_provider = SPEK1024Allowed values: SPEK1024, SPEK2048, SBUS, SUMD, SUMH, XB-B, XB-B-RJ01, IBUS, JETIEXBUS, CRSF, SRXL, CUSTOM, FPORT serialrx_inverted = OFFAllowed values: OFF, ON spektrum_sat_bind = 0Allowed range: 0 - 10 spektrum_sat_bind_autoreset = ONAllowed values: OFF, ON airmode_start_throttle_percent = 32Allowed range: 0 - 100 This keeps AirMode OFF until the the first time throttle reaches this value. AirMode is always on after this. Note that 3D users have to reconfigure their threshold to something else otherwise airmode would be always enabled. x_min_usec = 885Allowed range: 750 - 2250 rx_max_usec = 2115Allowed range: 750 - 2250 serialrx_halfduplex = OFFAllowed values: OFF, ON adc_device = 1Allowed range: 0 - 3 adc_vrefint_calibration = 0Allowed range: 0 - 2000 adc_tempsensor_calibration30 = 0Allowed range: 0 - 2000 adc_tempsensor_calibration110 = 0Allowed range: 0 - 2000 input_filtering_mode = OFFAllowed values: OFF, ON blackbox_p_ratio = 32Allowed range: 0 - 32767 blackbox_device = SDCARDAllowed values: NONE, SPIFLASH, SDCARD, SERIAL blackbox_record_acc = ONAllowed values: OFF, ON blackbox_mode = NORMALAllowed values: NORMAL, MOTOR_TEST, ALWAYS min_throttle = 1070Allowed range: 750 - 2250 pid_at_min_throttle = ONprofile 0 Allowed values: OFF, ON pid_at_min_throttle enables the copter to continue process the PID algorithm even at minimum throttle. But pid_at_min_throttle only keeps P and D active, I is zero’ed max_throttle = 2000Allowed range: 750 - 2250 min_command = 1000Allowed range: 750 - 2250 dshot_idle_value = 550Allowed range: 0 - 2000 dshot_burst = OFFAllowed values: OFF, ON Bidirectional-DSHOT-and-RPM-Filter#dma use_unsynced_pwm = OFFAllowed values: OFF, ON motor_pwm_protocol = ONESHOT125Allowed values: OFF, ONESHOT125, ONESHOT42, MULTISHOT, BRUSHED, DSHOT150, DSHOT300, DSHOT600, DSHOT1200, PROSHOT1000 motor_pwm_rate = 480Allowed range: 200 - 32000 motor_pwm_inversion = OFFAllowed values: OFF, ON motor_poles = 14Allowed range: 4 - 255 The escs report erpm which needs to be converted to rpm using the number of poles (magnets) of the motors. Regular 5&quot; motors have 14 poles and that's the default setting. Smaller motors have less poles, often 12. Count them or look up the motor specs Bidirectional-DSHOT-and-RPM-Filter thr_corr_value = 0Allowed range: 0 - 150 thr_corr_angle = 800Allowed range: 1 - 900 failsafe_delay = 4Allowed range: 0 - 200 failsafe_throttle = 1000Allowed range: 750 - 2250 failsafe_throttle_low_delay = 100Allowed range: 0 - 300 failsafe_switch_mode = STAGE1Allowed values: STAGE1, KILL, STAGE2 failsafe_throttle_low_delay = 100Allowed range: 0 - 300 failsafe_procedure = DROPAllowed values: AUTO-LAND, DROP, GPS-RESCUE align_board_roll = 0Allowed range: -180 - 360 align_board_pitch = 0Allowed range: -180 - 360 align_board_yaw = 0Allowed range: -180 - 360 gimbal_mode = NORMALAllowed values: NORMAL, MIXTILT bat_capacity = 0Allowed range: 0 - 20000 vbat_max_cell_voltage = 430Allowed range: 100 - 500 vbat_full_cell_voltage = 410Allowed range: 100 - 500 vbat_min_cell_voltage = 330Allowed range: 100 - 500 vbat_warning_cell_voltage = 350Allowed range: 100 - 500 vbat_hysteresis = 1Allowed range: 0 - 250 current_meter = ADCAllowed values: NONE, ADC, VIRTUAL, ESC, MSP battery_meter = ADCAllowed values: NONE, ADC, ESC vbat_detect_cell_voltage = 300Allowed range: 0 - 2000 use_vbat_alerts = ONAllowed values: OFF, ON use_cbat_alerts = OFFAllowed values: OFF, ON cbat_alert_percent = 10Allowed range: 0 - 100 force_battery_cell_count = 0Allowed range: 0 - 24 vbat_scale = 110Allowed range: 0 - 255 vbat_divider = 10Allowed range: 1 - 255 vbat_multiplier = 1Allowed range: 1 - 255 ibata_scale = 250Allowed range: -16000 - 16000 ibata_set  ibatv_scale = 0Allowed range: -16000 - 16000 ibatv_set  beeper_inversion = ONAllowed values: OFF, ON beeper_od = OFFAllowed values: OFF, ON beeper_frequency = 3800Allowed range: 0 - 16000 beeper_dshot_beacon_tone = 1Allowed range: 1 - 5 yaw_motors_reversed = OFFAllowed values: OFF, ON crashflip_motor_percent = 0Allowed range: 0 - 100 3d_deadband_low = 1406Allowed range: 750 - 1500 3d_deadband_high = 1514Allowed range: 1500 - 2250 3d_neutral = 1460Allowed range: 750 - 2250 3d_deadband_throttle = 50Allowed range: 1 - 100 3d_limit_low = 1000Allowed range: 750 - 1500 3d_limit_high = 2000Allowed range: 1500 - 2250 3d_switched_mode = OFFAllowed values: OFF, ON servo_center_pulse = 1500Allowed range: 750 - 2250 servo_pwm_rate = 50Allowed range: 50 - 498 servo_lowpass_hz = 0Allowed range: 0 - 400 tri_unarmed_servo = ONAllowed values: OFF, ON channel_forwarding_start = 4Allowed range: 4 - 18 reboot_character = 82Allowed range: 48 - 126 serial_update_rate_hz = 100Allowed range: 100 - 2000 imu_dcm_kp = 2500Allowed range: 0 - 32000 imu_dcm_ki = 0Allowed range: 0 - 32000 small_angle = 25Allowed range: 0 - 180 auto_disarm_delay = 5Allowed range: 0 - 60 gyro_cal_on_first_arm = OFFAllowed values: OFF, ON gps_provider = NMEAAllowed values: NMEA, UBLOX, MSP gps_sbas_mode = AUTOAllowed values: AUTO, EGNOS, WAAS, MSAS, GAGAN gps_auto_config = ONAllowed values: OFF, ON gps_auto_baud = OFFAllowed values: OFF, ON gps_ublox_use_galileo = OFFAllowed values: OFF, ON gps_rescue_angle = 32Allowed range: 0 - 200 GPS-rescue-mode gps_rescue_initial_alt = 50Allowed range: 20 - 100 gps_rescue_descent_dist = 200Allowed range: 30 - 500 gps_rescue_ground_speed = 2000Allowed range: 30 - 3000 gps_rescue_throttle_p = 150Allowed range: 0 - 500 gps_rescue_throttle_i = 20Allowed range: 0 - 500 gps_rescue_throttle_d = 50Allowed range: 0 - 500 gps_rescue_velocity_p = 80Allowed range: 0 - 500 gps_rescue_velocity_i = 20Allowed range: 0 - 500 gps_rescue_velocity_d = 15Allowed range: 0 - 500 gps_rescue_yaw_p = 40Allowed range: 0 - 500 gps_rescue_throttle_min = 1200Allowed range: 1000 - 2000 gps_rescue_throttle_max = 1600Allowed range: 1000 - 2000 gps_rescue_throttle_hover = 1280Allowed range: 1000 - 2000 gps_rescue_sanity_checks = RESCUE_SANITY_ONAllowed values: RESCUE_SANITY_OFF, RESCUE_SANITY_ON, RESCUE_SANITY_FS_ONLY gps_rescue_min_sats = 8Allowed range: 0 - 50 gps_rescue_min_dth = 100Allowed range: 50 - 1000 3d_deadband_low = 1406Allowed range: 750 - 1500 3d_deadband_high = 1514Allowed range: 1500 - 2250 3d_deadband_throttle = 50Allowed range: 1 - 100 deadband = 0Allowed range: 0 - 32 yaw_deadband = 0Allowed range: 0 - 100 yaw_deadband = 0Allowed range: 0 - 100 yaw_control_reversed = OFFAllowed values: OFF, ON pid_process_denom = 4Allowed range: 1 - 16 runaway_takeoff_prevention Runaway-Takeoff-Prevention Set this to OFF to completely disable the feature. Note that there will be no protection against runaway takeoff events and the firmware will behave as it did before the feature was implemented. The remaining parameters affect the logic used to detect normal controlled flight and deactivate the feature for the remainder of the battery: runaway_takeoff_deactivate_delay This is the amount of successful flight time in milliseconds that must be accumulated to deactivate the feature. Valid values range from 100 (0.1 seconds) to 1000 (1 second). The default value of 500 (0.5 seconds) seems to be very reliable and shouldn't need to be adjusted. The goal is to deactivate the logic after a &quot;reasonable&quot; but short period of time once we've determined the craft is flying normally. However we want it to deactivate before we might reach the first point where a crash or other event may occur (like at the first gate during a race). Raising this value will delay the deactivation and it's possible that a crash or gate/branch clip could cause an unintended disarm. Lowering this value too much could result in the logic deactivating too soon and not providing protection in a runaway event. It's important to note that the delay is the accumulated amount of flight time where the other criteria like throttle level, stick activity, etc. are met. Thus the &quot;real&quot; elapsed time before deactivation may be longer than 0.5 seconds if the throttle was dropping below the limit or if the R/P/Y sticks were centered. The actual behavior can be viewed by using blackbox logging - see the debugging section below. runaway_takeoff_deactivate_throttle_percent Determines the minimum throttle percentage threshold where successful flight can be considered. Valid values range from 0 to 100. Along with throttle level the logic also requires activity on the roll, pitch or yaw sticks along with the PID controller successfully controlling the craft with the PID_sum staying under control. When these conditions are met the logic accumulates successful flight time. Generally you won't need to adjust this value as most quads require around 25% or more throttle to takeoff/hover. The exception may be if you have and extremely powerful or light craft that is capable of flying well below 25% throttle. In this case you may want to lower this value closer to your actual hover throttle percent. If this value is set too low it's possible that the logic will deactivate too quickly and may not trigger in a real runaway event. Setting it too high will result in the logic taking more flight time to deactivate as it only accumulates flight time when the throttle is above the setting. tlm_inverted = OFFAllowed values: OFF, ON tlm_halfduplex = ONAllowed values: OFF, ON frsky_default_lat = 0Allowed range: -9000 - 9000 frsky_default_long = 0Allowed range: -18000 - 18000 frsky_gps_format = 0Allowed range: 0 - 1 frsky_unit = IMPERIALAllowed values: IMPERIAL, METRIC frsky_vfas_precision = 0Allowed range: 0 - 1 hott_alarm_int = 5Allowed range: 0 - 120 pid_in_tlm = OFFAllowed values: OFF, ON report_cell_voltage = OFFAllowed values: OFF, ON ibus_sensor = 1,2,3,0,0,0,0,0,0,0,0,0,0,0,0Array length: 15 mavlink_mah_as_heading_divisor = 0Allowed range: 0 - 30000 ledstrip_visual_beeper = OFFAllowed values: OFF, ON When set to on, and the LEDLOW mode is active (i.e. LED strip off), blink the LED strip in synch with beeping, as a visual indicator in cases where the craft is too far away for the beeper to be heard / multiple craft are flying. ledstrip_grb_rgb = GRBAllowed values: GRB, RGBhttps://betaflight.com/docs/development/LedStrip#ws2811-vs-ws2812 sdcard_detect_inverted = OFFAllowed values: OFF, ON sdcard_mode = SPIAllowed values: OFF, SPI, SDIO sdcard_dma = OFFAllowed values: OFF, ON sdcard_spi_bus = 2Allowed range: 0 - 3 osd_units = METRICAllowed values: IMPERIAL, METRIC osd_warn_arming_disable = ONAllowed values: OFF, ON osd_warn_batt_not_full = ONAllowed values: OFF, ON osd_profile = 1Allowed range: 1 - 3 system_hse_mhz = 8Allowed range: 0 - 30 task_statistics = ONAllowed values: OFF, ON debug_mode = NONEAllowed values: NONE, CYCLETIME, BATTERY, GYRO_FILTERED, ACCELEROMETER, PIDLOOP, GYRO_SCALED, RC_INTERPOLATION, ANGLERATE, ESC_SENSOR, SCHEDULER, STACK, ESC_SENSOR_RPM, ESC_SENSOR_TMP, ALTITUDE, FFT, FFT_TIME, FFT_FREQ, RX_FRSKY_SPI, RX_SFHSS_SPI, GYRO_RAW, DUAL_GYRO, DUAL_GYRO_RAW, DUAL_GYRO_COMBINE, DUAL_GYRO_DIFF, MAX7456_SIGNAL, MAX7456_SPICLOCK, SBUS, FPORT, RANGEFINDER, RANGEFINDER_QUALITY, LIDAR_TF, ADC_INTERNAL, RUNAWAY_TAKEOFF, SDIO, CURRENT_SENSOR, USB, SMARTAUDIO, RTH, ITERM_RELAX, ACRO_TRAINER, RC_SMOOTHING, RX_SIGNAL_LOSS, RC_SMOOTHING_RATE, ANTI_GRAVITY, DYN_LPF, RX_SPEKTRUM_SPI rate_6pos_switch = OFFAllowed values: OFF, ON cpu_overclock = OFFAllowed values: OFF, 192MHZ, 216MHZ, 240MHZ pwr_on_arm_grace = 5Allowed range: 0 - 30 vtx_band = 4Allowed range: 0 - 5 0=user, 1=A, 2=B, 3=E, 4=F(Airwaves/Fatshark), 5=Raceband vtx_channel = 1Allowed range: 1 - 8 VTX-CLI-Settings vtx_power = 1Allowed range: 0 - 4 for SmartAudio: 0=25mW, 1=25mW, 2=200mW, 3=500mW, 4=800mW for TBS Unify Nano: 0=25mW, 1=25mW, 2=50mW for IRC-Tramp: 0=25mW, 1=25mW, 2=100mW, 3=200mW, 4=400mW, 5=600mW vtx_low_power_disarm = OFFAllowed values: OFF, ON, UNTIL_FIRST_ARM If ON and the flight controller is disarmed, the video transmitter output power will be set to its lowest value (vtx_power=1). Otherwise, the video transmitter output power will be set to the configured 'vtx_power' value. (Note one exception: If a receiver failsafe has occurred then the output power will not be lowered.) vtx_freq = 5740Allowed range: 0 - 5999 if vtx_band!=0 and VTX connected then shows freq in MHz if vtx_band==0 then sets frequency in MHz if vtx_band==0 and vtx_freq==0 then the settings will not be sent out to the VTX For example, to configure the VTX to use band 'F' and channel '6' (5840 MHz), enter the CLI and input: set vtx_band = 4 set vtx_channel = 6 save The VTX configuration will not be changed until after the 'save' and restart. If it is successful then entering 'get vtx_freq' will show the current frequency value in MHz. Frequency table: Channel 1 2 3 4 5 6 7 8 Band 1: 5865 5845 5825 5805 5785 5765 5745 5725 (A: Boscam A / TBS / RC305) Band 2: 5733 5752 5771 5790 5809 5828 5847 5866 (B: Boscam B) Band 3: 5705 5685 5665 5645 5885 5905 5925 5945 (E: Boscam E / DJI) Band 4: 5740 5760 5780 5800 5820 5840 5860 5880 (F: IRC NexWave / Fatshark) Band 5: 5658 5695 5732 5769 5806 5843 5880 5917 (R: Raceband) vtx_pit_mode_freq = 0Allowed range: 0 - 5999 vtx_halfduplex = ONAllowed values: OFF, ON vcd_video_system = AUTOAllowed values: AUTO, PAL, NTSC max7456_clock = DEFAULTAllowed values: HALF, DEFAULT, FULL max7456_spi_bus = 3Allowed range: 0 - 3 max7456_preinit_opu = OFFAllowed values: OFF, ON displayport_msp_col_adjust = 0Allowed range: -6 - 0 displayport_msp_row_adjust = 0Allowed range: -3 - 0 displayport_max7456_col_adjust = 0Allowed range: -6 - 0 displayport_max7456_row_adjust = 0Allowed range: -3 - 0 displayport_max7456_inv = OFFAllowed values: OFF, ON displayport_max7456_blk = 0Allowed range: 0 - 3 displayport_max7456_wht = 2Allowed range: 0 - 3 esc_sensor_halfduplex = OFFAllowed values: OFF, ON led_inversion = 0Allowed range: 0 - 7 camera_control_mode = HARDWARE_PWMAllowed values: HARDWARE_PWM, SOFTWARE_PWM, DAC mode of operation, software_pwm is the least restrictive in terms of available PIN selection, but it requires both a resistor and a capacitor to work properly; hardware_pwm is almost guaranteed to work with just a resistor given you can spare a timer for it; dac (not yet implemented) is supported on the very few FCs that have a DAC pin broken out and unoccupied by other functions, it works by direct connection to the camera. FPV-Camera-Control-(Joystick-Emulation) camera_control_ref_voltage = 330Allowed range: 200 - 400 voltage (in 10 mV steps) measured across your camera's floating OSD and GND pins, usually 3V3, but not guaranteed, e.g. my RunCam Sky has 3V4, and some cameras have reportedly have as low as 3V1. camera_control_key_delay = 180Allowed range: 100 - 500 the duration of each key press (in ms presence at the camera_control pin, after consulting with RunCam it was set to 180 ms to accommodate most cameras, while some of them accept as low as 125 ms. camera_control_internal_resistance = 470Allowed range: 10 - 1000 the internal resistance (in 100 Ω steps) of your camera, most HS1177 derivatives have 47 kΩ, but that's not guaranteed. You'll have to derive this value for your camera in case the default one doesn't work. camera_control_inverted = OFFAllowed values: OFF, ON pinio_config = 1,1,1,1Array length: 4 Pinio-and-PinioBox pinio_box = 255,255,255,255Array length: 4 usb_hid_cdc = OFFAllowed values: OFF, ON HID joystick support is currently only available on F4 / F7 boards. usb_msc_pin_pullup = ONAllowed values: OFF, ON flash_spi_bus = 3Allowed range: 0 - 3 rcdevice_init_dev_attempts = 6Allowed range: 0 - 10 rcdevice_init_dev_attempt_interval = 1000Allowed range: 0 - 327680500 gyro_1_bustype = SPIAllowed values: NONE, I2C, SPI, SLAVE gyro_1_spibus = 1Allowed range: 0 - 3 gyro_1_i2cBus = 0Allowed range: 0 - 3 gyro_1_i2c_address = 0Allowed range: 0 - 119 gyro_1_sensor_align = CW0Allowed values: DEFAULT, CW0, CW90, CW180, CW270, CW0FLIP, CW90FLIP, CW180FLIP, CW270FLIP gyro_2_bustype = SPIAllowed values: NONE, I2C, SPI, SLAVE gyro_2_spibus = 1Allowed range: 0 - 3 gyro_2_i2cBus = 0Allowed range: 0 - 3 gyro_2_i2c_address = 0Allowed range: 0 - 119 gyro_2_sensor_align = DEFAULTAllowed values: DEFAULT, CW0, CW90, CW180, CW270, CW0FLIP, CW90FLIP, CW180FLIP, CW270FLIP timezone_offset_minutes = 0 dyn_lpf_dterm_min_hz = 150profile 0 Allowed range: 0 - 1000 dyn_lpf_dterm_max_hz = 250profile 0 Allowed range: 0 - 1000 dterm_lowpass_type = BIQUADprofile 0 Allowed values: PT1, BIQUAD dterm_lowpass_hz = 150profile 0 Allowed range: 0 - 16000 dterm_lowpass2_type = BIQUADprofile 0 Allowed values: PT1, BIQUAD dterm_lowpass2_hz = 150profile 0 Allowed range: 0 - 16000 dterm_notch_hz = 0profile 0 Allowed range: 0 - 16000 dterm_notch_cutoff = 0profile 0 Allowed range: 0 - 16000 vbat_pid_gain = OFFprofile 0 Allowed values: OFF, ON pid_at_min_throttle = ONprofile 0 Allowed values: OFF, ON anti_gravity_mode = SMOOTHprofile 0 Allowed values: SMOOTH, STEP anti_gravity_threshold = 250profile 0 Allowed range: 20 - 1000 anti_gravity_gain = 5000profile 0 Allowed range: 1000 - 30000 feedforward_transition = 0profile 0 Allowed range: 0 - 100 acc_limit_yaw = 0profile 0 Allowed range: 0 - 500 acc_limit_yaw = 0profile 0 Allowed range: 0 - 500 acc_limit = 0profile 0 Allowed range: 0 - 500 crash_dthreshold = 50profile 0 Allowed range: 0 - 2000 crash_gthreshold = 400profile 0 Allowed range: 0 - 2000 crash_setpoint_threshold = 350profile 0 Allowed range: 0 - 2000 crash_time = 500profile 0 Allowed range: 0 - 5000 crash_delay = 0profile 0 Allowed range: 0 - 500 crash_recovery_angle = 10profile 0 Allowed range: 0 - 30 crash_recovery_rate = 100profile 0 Allowed range: 0 - 255 crash_limit_yaw = 200profile 0 Allowed range: 0 - 1000 crash_recovery_angle = 10profile 0 Allowed range: 0 - 30 crash_recovery_rate = 100profile 0 Allowed range: 0 - 255 crash_recovery = OFFprofile 0 Allowed values: OFF, ON, BEEP iterm_rotation = ONprofile 0 Allowed values: OFF, ON smart_feedforward = OFFprofile 0 Allowed values: OFF, ON iterm_relax = RPprofile 0 Allowed values: OFF, RP, RPY, RP_INC, RPY_INC iterm_relax_type = SETPOINTprofile 0 Allowed values: GYRO, SETPOINT iterm_relax_cutoff = 20profile 0 Allowed range: 1 - 100 iterm_relax_type = SETPOINTprofile 0 Allowed values: GYRO, SETPOINT iterm_relax_cutoff = 20profile 0 Allowed range: 1 - 100 iterm_windup = 100profile 0 Allowed range: 30 - 100 iterm_limit = 400profile 0 Allowed range: 0 - 500 pidsum_limit = 500profile 0 Allowed range: 100 - 1000 pidsum_limit_yaw = 400profile 0 Allowed range: 100 - 1000 pidsum_limit_yaw = 400profile 0 Allowed range: 100 - 1000 yaw_lowpass_hz = 0profile 0 Allowed range: 0 - 500 throttle_boost = 5profile 0 Allowed range: 0 - 100 throttle_boost_cutoff = 15profile 0 Allowed range: 5 - 50 throttle_boost_cutoff = 15profile 0 Allowed range: 5 - 50 acro_trainer_angle_limit = 20profile 0 Allowed range: 10 - 80 acro_trainer_lookahead_ms = 50profile 0 Allowed range: 10 - 200 acro_trainer_debug_axis = ROLLprofile 0 Allowed values: ROLL, PITCH acro_trainer_gain = 75profile 0 Allowed range: 25 - 255 p_pitch = 50profile 0 Allowed range: 0 - 200 i_pitch = 75profile 0 Allowed range: 0 - 200 align_board_pitch = 0Allowed range: -180 - 360 d_pitch = 32profile 0 Allowed range: 0 - 200 f_pitch = 60profile 0 Allowed range: 0 - 2000 p_roll = 46profile 0 Allowed range: 0 - 200 i_roll = 65profile 0 Allowed range: 0 - 200 align_board_roll = 0Allowed range: -180 - 360 d_roll = 30profile 0 Allowed range: 0 - 200 f_roll = 60profile 0 Allowed range: 0 - 2000 p_yaw = 45profile 0 Allowed range: 0 - 200 i_yaw = 100profile 0 Allowed range: 0 - 200 align_board_yaw = 0Allowed range: -180 - 360 d_yaw = 0profile 0 Allowed range: 0 - 200 use_integrated_yaw = OFFprofile 0 Allowed values: OFF, ON integrated_yaw_relax = 200profile 0 Allowed range: 0 - 255 f_yaw = 100profile 0 Allowed range: 0 - 2000 angle_level_strength = 50profile 0 Allowed range: 0 - 200 horizon_level_strength = 50profile 0 Allowed range: 0 - 200 horizon_transition = 75profile 0 Allowed range: 0 - 200 level_limit = 55profile 0 Allowed range: 10 - 90 horizon_tilt_effect = 75profile 0 Allowed range: 0 - 250 horizon_tilt_expert_mode = OFFprofile 0 Allowed values: OFF, ON abs_control_gain = 0profile 0 Allowed range: 0 - 20 abs_control_limit = 90profile 0 Allowed range: 10 - 255 abs_control_error_limit = 20profile 0 Allowed range: 1 - 45 abs_control_cutoff = 11profile 0 Allowed range: 1 - 45 use_integrated_yaw = OFFprofile 0 Allowed values: OFF, ON integrated_yaw_relax = 200profile 0 Allowed range: 0 - 255 launch_control_mode = NORMALprofile 0 Allowed values: NORMAL, PITCHONLY, FULL Launch-Control launch_trigger_allow_reset = ONprofile 0 Allowed values: OFF, ON launch_trigger_throttle_percent = 20profile 0 Allowed range: 0 - 90 launch_angle_limit = 0profile 0 Allowed range: 0 - 80 launch_control_gain = 40profile 0 Allowed range: 0 - 200 thr_mid = 50rateprofile 0 Allowed range: 0 - 100 thr_expo = 0rateprofile 0 Allowed range: 0 - 100 rates_type = BETAFLIGHTrateprofile 0 Allowed values: BETAFLIGHT, RACEFLIGHT Allowed range: 0 - 100 tpa_breakpoint = 1500rateprofile 0 Allowed range: 750 - 2250 tpa_mode = Drateprofile 0 Allowed values: PD, D throttle_limit_type = OFFrateprofile 0 Allowed values: OFF, SCALE, CLIP throttle_limit_percent = 100rateprofile 0 Allowed range: 25 - 100 roll_rate_limit = 1998rateprofile 0 Allowed range: 200 - 1998 pitch_rate_limit = 1998rateprofile 0 Allowed range: 200 - 1998 yaw_rate_limit = 1998rateprofile 0 Allowed range: 200 - 1998 *telemetry_disabled_voltage = OFF Through *telemetry_disabled_temperature = OFF *gps_ublox_use_galileo = OFF *gps_set_home_point_once = OFF *gps_rescue_allow_arming_without_fix = OFF *gps_rescue_use_mag = ON *thrust_linear = 0 https://github.com/betaflight/betaflight/pull/7304 *scheduler_optimize_rate = OFF *dterm_cut_percent = 65 d_cut *dterm_cut_gain = 15 *dterm_cut_range_hz = 40 *dterm_cut_lowpass_hz = 7 *integrated_yaw_relax = 200 *use_integrated_yaw = OFF *gyro_rpm_notch_q = 500 *gyro_rpm_notch_min = 100 *dterm_rpm_notch_harmonics = 1 *dterm_rpm_notch_q = 500 *dterm_rpm_notch_min = 100 *gyro_rpm_notch_harmonics *airmode_noise_reduction "},{"title":"ESC pass-through","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Betaflight-ESC-pass-through","content":"","keywords":""},{"title":"Betaflight BLHeli ESC pass-through​","type":1,"pageTitle":"ESC pass-through","url":"/betaflight.com/docs/wiki/archive/Betaflight-ESC-pass-through#betaflight-blheli-esc-pass-through","content":"1- Connect FC to computer and note COMM port number. 2- Open BLHeli Suite. Select Comm Port and click Connect. 3- In 'Select ATEM/SILABS Interface' menu select 'SILABS BLHeli Bootloader (CleanFlight)'. 4- Apply power the ESCs (through a Current Limiter). 5- Click 'Read Setup'. Now ready to change ESC settings or Flash new firmware. "},{"title":"Betaflight KISS ESC pass-through​","type":1,"pageTitle":"ESC pass-through","url":"/betaflight.com/docs/wiki/archive/Betaflight-ESC-pass-through#betaflight-kiss-esc-pass-through","content":"New feature for 3.1 allows to flash kiss escs with a pass-through and KISS flash loader app. Note: it is apparently not yet active on all targets. The FLASH LOADER is a Chrome App and must be 'installed' in Extensions with 'Developer Mode' enabled. For now you have to enable passthrough in the cli and than flash through flash loader app. Later it might be done from the app directly. KISSESC_flashloader also attached to First Post of Dshot Thread in the &quot;Files&quot; section. Flydiuno Down Loads Command for esc #1: escprog ki 1 Command for esc #2: escprog ki 2 Command for all 4 escs at the same time: escprog ki 255 Procedure is easy: Enter above commands in the cli and disconnect from configurator by clicking disconnect button.Go to kiss flash loader app and select com port to connect.Select USB-uartSelect dshot hex file to flashYou can enable fast bootloader for faster flashing. Some report Fast not working so disable if fails.Connect lipo (through a Current Limiter). Do not connect before this step.Press flash and you will see led blinking on the escs.Disconnect lipo and usb cable and you are now able to use dshot If the above command doesnt work escserial flash passthrough is not enabled yet. Btw also castle escs can be flashed on the same way. KISS Flashing Tips "},{"title":"Current Limiter​","type":1,"pageTitle":"ESC pass-through","url":"/betaflight.com/docs/wiki/archive/Betaflight-ESC-pass-through#current-limiter","content":""},{"title":"Always use a Current Limiter when ever a LiPo is connected on the Bench for Testing or ESC Flashing, Calibrating or any time the Configurator is open.​","type":1,"pageTitle":"ESC pass-through","url":"/betaflight.com/docs/wiki/archive/Betaflight-ESC-pass-through#always-use-a-current-limiter-when-ever-a-lipo-is-connected-on-the-bench-for-testing-or-esc-flashing-calibrating-or-any-time-the-configurator-is-open","content":"Light Bulb Current Limiter Build thread, ie: The Smoke Stopper:[https://www.rcgroups.com/forums/showthread.php?2327875-DIY-SAVE-YOUR-ELECTRONICS!-BUILD-A-SmokeStopper%C2%99-!] "},{"title":"Official Betaflight T-Shirts and Hoodies!","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Betaflight-Merchandise","content":"Official Betaflight T-Shirts and Hoodies! For limited time we are offering two Betaflight T-Shirt designs. We are earning $5 for each shirt to fund some shirts for the developers. So please support us and buy one! White shirt: HERE &gt; Black shirt: HERE &gt; Shirt (multiple colors!): HERE &gt; New Hoodie: HERE &gt; Thank you!","keywords":""},{"title":"Blackbox Logging And Usage","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Black-Box-logging-and-usage","content":"","keywords":""},{"title":"Black Box Logger​","type":1,"pageTitle":"Blackbox Logging And Usage","url":"/betaflight.com/docs/wiki/archive/Black-Box-logging-and-usage#black-box-logger","content":"RCGroups Thread with links to OpenLogger and firmware:https://www.rcgroups.com/forums/showthread.php?2299805-Blackbox-flight-data-recorder-feature-for-Baseflight-Cleanflight Notion: for 4.0 and later version, OpenLogger is not recommended. "},{"title":"Black Box OpenLager​","type":1,"pageTitle":"Blackbox Logging And Usage","url":"/betaflight.com/docs/wiki/archive/Black-Box-logging-and-usage#black-box-openlager","content":"This has an SPI interface for faster logging (same as when the SD card is integrated onto an FC board).https://github.com/d-ronin/openlager/wikiAvailable from: https://store.myairbot.com/accessory/openlager.htmland: http://www.readytoflyquads.com/high-rate-f4-data-logger-openlager "},{"title":"BlackBox Viewer​","type":1,"pageTitle":"Blackbox Logging And Usage","url":"/betaflight.com/docs/wiki/archive/Black-Box-logging-and-usage#blackbox-viewer","content":"The Latest Viewer and source is here:https://github.com/betaflight/blackbox-log-viewer "},{"title":"Videos and tutorials​","type":1,"pageTitle":"Blackbox Logging And Usage","url":"/betaflight.com/docs/wiki/archive/Black-Box-logging-and-usage#videos-and-tutorials","content":"Joshua Bardwell just started a new video series which he calls BlackBox 101:https://www.youtube.com/playlist?list=PLwoDb7WF6c8l0-ABsIcnJt1FyhX9MBoVW "},{"title":"RCG threads on learning to analyze BB logs:​","type":1,"pageTitle":"Blackbox Logging And Usage","url":"/betaflight.com/docs/wiki/archive/Black-Box-logging-and-usage#rcg-threads-on-learning-to-analyze-bb-logs","content":"Joshua's Blackbox Log Video ResponsesBlackbox log analyzation\\help thread "},{"title":"Notes on new Black Box Viewer​","type":1,"pageTitle":"Blackbox Logging And Usage","url":"/betaflight.com/docs/wiki/archive/Black-Box-logging-and-usage#notes-on-new-black-box-viewer","content":"If you open a Betaflight Log, then the logo shown is the Betaflight Logo and the colour scheme is orange;If you open an iNav log, then the logo changes to iNav and the colour scheme is blue;If you open a Cleanflight log (or if it can't tell what kind of firmware you were running e.g. an old version of Betaflight perhaps) then the logo shows the Cleanflight logo and the colour scheme is green.... Some features are automatically disabled depending upon the firmware you are running that creates the log. Do click on all the buttons to learn what they do and '?' for the Keyboard Short cuts. "},{"title":"How to obtain data to evaluate noise frequency for setting the Notch filter.​","type":1,"pageTitle":"Blackbox Logging And Usage","url":"/betaflight.com/docs/wiki/archive/Black-Box-logging-and-usage#how-to-obtain-data-to-evaluate-noise-frequency-for-setting-the-notch-filter","content":"Super simple visual explanation of the gyro data sequence through the filters: raw gyro-&gt;(debug gyro here)-&gt;soft lpf-&gt;(debug notch here)-&gt;notch1-&gt;notch2 Betaflight Version 3.4​ As a part of the filtering overhaul, the names of the debug modes available to log filtering / tuning data have been improved NOTCH (gyro data after scaling, before filtering) is now GYRO_SCALED, GYRO (gyro data after all filtering has been applied) is now GYRO_FILTERED e.g set debug_mode = gyro_scaled or set debug_mode = gyro_filtered Changes were made in BetaFlight 3.0 &amp; 3.1 along with a newer BB Viewer (see debug_mode on the 3.1.x wiki page).​ CLI DEBUG_MODE now can be GYRO or NOTCH. This will log all three axis but only for Pre-LPF or Pre-Notch Filter.Still Add a Custom Graph then select the debug Pre-filter.Analysis is the same. BetaFlight Ver2.X​ Use this CLI setting: set debug_mode = notchMake sure your blackbox logging rate is at least 1khz. The logging rate is based on pid-loop so 1/4 for 4k pid loop would be enough.Fly as usualOpen your log in blackbox viewerAdd all debug options to your graph setupClick on debug[0] Note: This action of clicking on the graph section traces to the right will show the analyzer screen :DMake the graph fullscreen (next to playback options)You can now see where your motor noise is most significant The debug setting will log additional data to debug[0]-debug[3]: debug[0] is unfiltered and raw gyro data on roll axis.debug[1] is only notch filtered gyro data on roll axis.debug[2] is unfiltered and raw gyro data on pitch axis.debug[3] is only notch filtered gyro data on pitch axis. Two images showing how to view the spectrum and the result of the notch filter. If the notch filter is disabled 0/1 and 2/3 will be identical. Otherwise you can directly see what the filter does. More details on phase shift for example can be found here: https://github.com/betaflight/betaflight/pull/668 Post by r.a.v. You can view earlier BB logs (pre BF 3.0) but the analyzer won't know at which rate it was recorded. This will probably result in a correct looking spectrum but with incorrect frequency labels. Clicking on the traces on the Graph section to the right will show the analyzer screen. Post by ctzsnooze: Remember the spectrum is a relative comparator of the frequencies in the noise spectrum. It won't tell you about the absolute amount of noise. It can only be compared to other traces, and even then only when A fixed and comparable amount of vertical gain is setThe horizontal scale is set to be comparable to other tracesmost important the duration of the data to be analyzed is fixed. ie 30s. use the i and o keys to select a 30s realm for example. The most important thing is to scroll through and look at the motors traces for how big that noise is. The spectrum is useful for analyzing what you see there, but the motor trace and how it looks is what matters. See Gyro and Filters for more info. "},{"title":"The Spectral data is accumulative which means the longer the time frame of a log the higher the noise in the spectra;l display will be. This makes it impossible to compare the noise from two logs if they are different lengths of time. Therefore, you must compare spectras of same length - say 30 sec on each log, else it has zero meaning. To do it use \"I\" and \"O\" keys to mark start and end for analysis.​","type":1,"pageTitle":"Blackbox Logging And Usage","url":"/betaflight.com/docs/wiki/archive/Black-Box-logging-and-usage#the-spectral-data-is-accumulative-which-means-the-longer-the-time-frame-of-a-log-the-higher-the-noise-in-the-spectral-display-will-be-this-makes-it-impossible-to-compare-the-noise-from-two-logs-if-they-are-different-lengths-of-time-therefore-you-must-compare-spectras-of-same-length---say-30-sec-on-each-log-else-it-has-zero-meaning-to-do-it-use-i-and-o-keys-to-mark-start-and-end-for-analysis","content":"So by disabling all notches you mean, gyro_notch_1, gyro_notch_2, AND dterm_notch... correct?​ Won't set debug_mode=notch do the same thing or am I misunderstanding? Answer from ctzsnooze: The filtering sequence for P is gyro lpf -&gt; gyro notch 1 -&gt; gyro notch 2 -&gt; P. For D it is gyro lpf -&gt; gyro notch 1 -&gt; gyro notch 2 -&gt; Dterm LPF -&gt; D notch -&gt; D Disabling all three notch filters means that they are gone. The gyro data goes into the PID loop without any attenuation from the notches. Frequencies that might otherwise have been filtered out by the notches will now be amplified by the PID loop. What you see in the gyro, P, D and motor spectrums is how your quad actually behaves when they aren't there at all. Set debug_mode = notch keeps the notch filters active, but records a version of the gyro trace from just after the gyro LPF - before the notch filters are implemented. The P, D and motor traces will be affected by the notches, because they are still active. Because they remain active, PID related noise amplification at those frequencies will be attenuated, reducing the amount of noise in those regions even in the pre-notch gyro trace. It just doesn't show what it would be like with no notch filters. Disabling a notch filter completely is the only way to really know what the noise state of the machine is like without it. Set debug_mode = notch isn't nearly as useful, that's why I don't recommend using it for this purpose. "},{"title":"Tuning Tips using BB logs​","type":1,"pageTitle":"Blackbox Logging And Usage","url":"/betaflight.com/docs/wiki/archive/Black-Box-logging-and-usage#tuning-tips-using-bb-logs","content":"ctzsnooze:​ Clicking the little 'i' at top left of the blackbox viewer, shows all your settings. On that quad, both gyro and D lowpass are PT1 (not what you thought it was). I'm suggesting putting the D lowpass to BiQuad and cutting its low pass to 70Hz. You could, as R.A.V. suggests, leave it at 100, but I doubt you'd notice any difference, and lower would be better in your case. Flight performance generally does not deteriorate very much if you filter D more heavily; all that happens is that D sort of disappears from high frequencies. This is good. On the other hand, it's best to try and filter gyro/P the least possible. To get an idea of whether overall noise is a problem, look at the motor traces. Less than 1-2% noise is great, 5% marginal, any more than that is not so good. To find out what your gyro filters are doing, set the spectrum to the P trace. P trace includes the effect of gyro lowpass and both gyro notches. To find out what your D filters are doing, set the spectrum to the D trace. Remember that first the gyro low-pass and the gyro notch filters are applied to the gyro data, then D is calculated (amplifying the fast noise), then the D filters are applied. So if you apply a notch to gyro, you probably won't find anything useful by applying the same filter again to D. To directly compare the overall contribution of P compared to D, leave the spectrum scaling alone and click on P then D then P then D. The relative height of the peaks tells you which of P or D is contributing most tot he noise. I don't change the slider positions from default. Note that the spectrum is calculated, by default, from the entire log. Longer logs will make a 'taller' spectrum than shorter logs because there is more data to build the spectrum from. To directly compare spectrums log to log, always select the same amount of time. To do that, scroll to a start point, press 'i', then scroll to an end point, press 'o'. Now the spectrum is created only from the data in the smaller selection. This allows direct comparison of equal time length bits of different logs. Very short selections can also look at small bits eg just a short full throttle period to analyze that period alone. Also in the graph setup, be sure to set smoothing to zero and expo to 100 on all traces. After that, you can save the graph setup by pressing shift-1. Then pressing 1 will recall it. Same for all the number keys on your keyboard. This is very useful, you can save different setups for roll, pitch and yaw separately, and recall them quickly, with smoothing and expo as you set it. ctzsnooze comments on a log posted:​ PS seems to me like a bit more D on roll might be better. Also the log shows that the motors seem a bit slow to develop the requested amount of thrust. Lighter props might give better handling. mtfinger22: Can you explain what you are looking at in the logs that show that? I'm currently looking at different props for my recent build, and I would like to have an educated guess on what I should do without buying 10 different sets of props and trying them all out. ctzsnooze: The time taken between the RC input signal and the resulting gyro change when doing a fast roll or flip tells you how long it took your motors to turn the quad. In the log posted, the motors go to full 100% signal to turn it at the requested speed, but then it overshoots and the reverse pair have to speed up to slow down the overshoot. And there is a fair amount of delay, overall, between RC input and achieved actual roll. That kind of stuff implies either relatively weak motor power compared to rotational inertia, or over-propped motors for their kv, or battery current limitation, or heavy props, or any combination of those things. Light weight props allow motors to spool up faster and generate thrust more quickly, so the delay becomes less, and the amount of overshoot becomes less as well. Also if you look at the absolute height of your P and D traces (make sure you have no expo on the PID traces in blackbox), you can see that D is relatively small compared to P. That means it is relatively ineffective in controlling your P overshoot. As a very rough 'rule of thumb', a good 'ratio' is D about half the amplitude of P during roll stops. Ensure you don't have expo on the blackbox P and D traces, or comparing heights of P and D is meaningless! You could add more D, which most likely would allow more P, making for a crisper overall response without any more overshoot. Additionally, if your D setpoint weight was set above 1, D will drive the motors harder at the initial part of a stick input, which may help a little in scenarios like this. I have quite a few underpowered quads like this. They need a lot of P and a lot of D to handle as crisp as the more powerful ones, but with tuning they fly great, though they cannot control propwash nearly as well. With a more sensitive throttle they can actually feel much the same in ordinary flight, they just don't go so fast at the top end. These questions are really just basic P and D tuning questions not really betaflight related. "},{"title":"Bidirectional DShot","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter","content":"","keywords":""},{"title":"Recent Announcements​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#recent-announcements","content":"Bluejay is a new, free, well-supported BlHeli-S firmware that supports DShot telemetry, with a range of options. It is most easily flashed using the https://esc-configurator.com online ESC configurato, which can flash both BlHeli-S and Bluejay to BLHeli-S ESCs, and AM32 to BlHeli-32 ESCs.JazzMaverick is another free BlHeli-S firmware option. WARNING! Some JazzMaverick BLHeli_S firmware versions do not work well. The 16.73 version is OK, and properly supports RPM filtering. Versions 16.74 though 16.8 may be problematic and are best avoided. 16.9 appears to be OK.JESC was the first ESC firmware to support RPM filtering on BLHeli_S escs. It was written by the JoeLucid, who wrote the DShot telemetry code that underpins all bidirectional DShot functionality, such as Dynamic Idle and RPM Filtering. JESC is free on L ESCs, but payment is required for H ESCs. 48khz and 96khz PWM versions are available.BlHeli-32 fully supports Bidirectional DShot in versions 32.7.0 and higherAM32 can also be flashed (but not readily un-flashed) to BlHeli-32 type ESCs, and also fully supports Bidirectional DShot. "},{"title":"Introduction​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#introduction","content":"Bidirectional DShot Telemetry allows the ESC to report RPM data back to the flight controller over the same single wire that we use to control the ESC. When the Flight Controller knows the RPM of each motor, it can set notch filters at exactly the right frequency to remove that noise. We can also use that RPM information to dynamically control idle RPM, and prevent it dropping too low. This is the Dynamic Idle feature, which gives better protection against ESC desync than conventional idle. RPM based filtering gives better control over motor RPM related noise than was possible previously. Motors are cooler, bent prop tolerance is better, and full throttle sounds cleaner and often is faster. With RPM filtering, the dynamic notch filter can be narrower, reducing delay, and since it doesn't need to track motor rpm related noise, is now better at eliminating frame resonances. Configurator automatically makes these adjustments when RPM filtering is enabled or disabled. On clean quads, lowpass filter delay can usually be improved by moving cutoff frequencies higher or disabling some gyro filtering once RPM filtering is enabled. This should be done carefully, after reading the tuning guide. "},{"title":"Underlying technology:​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#underlying-technology","content":"Bidirectional DSHOT, a new feature in Betaflight 4.x which lets the flight controller receive accurate RPM telemetry over each motor's ESC signal line. No additional wiring or additional telemetry back-channel is needed. Each DSHOT frame from the FC gets acknowledged by a frame from the ESC containing the current eRPM. The FC uses the motor pole count to convert ERPM to RPM. RPM filtering is a bank of 36 notch filters on gyro and (optionally) on Dterm which use the RPM telemetry data to remove motor noise with surgical precision. By default it runs 12 notch filters each on pitch, roll, and yaw, covering the first 3 harmonics of each motor's noise signature. For RPM Filtering to work, the ESC must support the Bidirectional DShot protocol and Bidirectional DShot must be enabled in the CLI. These two features are supported by BetaFlight 4.1 and higher on all flight controllers, and most modern BLHeli_32 and BLHeli-S ESCs. Betaflight 4.0 is no longer supported. Here's a demo in flight. Quad has minimal filtering other than the rpm filter, handles very well and shows close to no prop wash:https://youtu.be/jwFYaGHp91c, https://youtu.be/SoG245vmaLo "},{"title":"Arming Prevention Check​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#arming-prevention-check","content":"If the RPM Filter is enabled but one or more of the ESC's are not supplying valid telemetry data, arming will be prevented, and the RPMFILTER message will be shown on the OSD (see Arming Sequence &amp; Safety). This prevents arming with incomplete or non-working configurations that may result in flyaways or hot motors. See below to ensure the ESC's are properly configured to support this feature. "},{"title":"ESC Configuration​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#esc-configuration","content":""},{"title":"Bidirectional DShot Firmware​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#bidirectional-dshot-firmware","content":"The Bidirectional DShot protocol is different (and more robust) in BetaFlight 4.1 than BetaFlight 4.0. The ESC code must be correct for the version of Betaflight you are running. For BLHeli_32 ESCs, Bidirectional DShot is now a fully supported feature in version 32.7.0. Just upgrade using blheli32 configurator. AM32 also fully supports For BLHeli-S ESCs, various options exist. Option\tModel\tLinkJFlight\tPaid\thttps://jflight.net/ JazzMaverick\tFree\thttps://github.com/JazzMaverick/BLHeli/tree/JazzMaverick-patch-1/BLHeli_S%20SiLabs BlueJay\tFree\thttps://github.com/mathiasvr/bluejay using https://esc-configurator.com JFlight This is the original BlHeli-S RPM firmware, from the developer of the underlying RPM filtering and DShot telemetry code. Install Betaflight 4.1, go to jflight.net, check that your ESC and FC are supported, purchase enough licences, and follow the install instructions - download the custom JESC BLHeli-S configurator, select your ESC, select the correct hex, click the blue 'flash all' button, then then flash the telemetry code over that by clicking 'flash all telemetry'. Use the flash version at the top of the list. JESC requires Betaflight 4.1. JazzMaverick The current build is 16.9, often referred to as BlHeli-M. The easiest way to flash 16.9 is with Asizon's Configurator. For earlier versions, go to JazzMaverick's code on github. Flash as usual with the conventional BlHeli-S Configurator. Take a look wich version you have to flash correctly. Use either version 16.73 or 16.9. BlueJay BlueJay by Mathias, a Betaflight developer, is a more recent RPM-aware BlHeli-S firmware. It is easily flashed with an elegant online flashing tool, or a custom configurator (https://github.com/mathiasvr/bluejay-configurator/releases). The firmware supports both L and H type ESCs, with a range of options, and has been tested on various ESC models. "},{"title":"Betaflight Configuration​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#betaflight-configuration","content":""},{"title":"Motor Poles​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#motor-poles","content":"When running 8k8k, choose Dshot600. The ESCs report eRPM. This must be converted to RPM using the number of magnets of the motors. The magnets to count are those on the bell of the motor. Do not count the stators where the windings are located. Typical 5&quot; motors have 14 magnets, so that is the default setting. Smaller motors have fewer magnets, often 12. Count them or look up the motor specs. If you don't have 14 magnets, change the number of magnets using Betaflight Configurator on the Configuration tab. "},{"title":"DShot150, DShot300 or DShot600?​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#dshot150-dshot300-or-dshot600","content":"For 4k PID loops, eg 8k4k or 4k4k, use Dshot 300 for greatest reliability; Dshot 600 may be used but is not recommended. For 8k8k setups, you should use DShot600. With 8k PID loops, Dshot300 will only update the motors every second PID loop. On L ESCs (efm8bb1) DShot150 and a loop time of 2k2k is strongly recommended. "},{"title":"Config Snippet​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#config-snippet","content":"With 4.1 and above it's no longer necessary to install a snippet. Instead just use Betaflight Configurator and enable bidirectional dshot on the Configuration tab. "},{"title":"Config Verification​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#config-verification","content":"Your FC is now set up for bidirectional dshot - let's verify that it works. To do so power cycle FC and ESC. Connect the lipo first to the ESC, then the USB cable. Now open the Motors tab in Betaflight Configurator. There should be no red line indicating significant errors on any motor. When you spin the motors you should see the reported rpm. The reported error percentage should not exceed 1%. All motors should report an RPM of 0 unless spun. Important:If you connect your FC via USB cable without connecting your LIPO battery, then at the Motors tab in Betaflight Configurator you will notice an invalid indication &quot;Error 100%&quot; (E: 100%). Connect the LIPO and wait ESC to initialize, the indication will drop down to 0% (E: 0%). Disconnecting the battery will keep showing 0% errors afterwards. "},{"title":"Tuning​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#tuning","content":"The RPM filter will do the heavy lifting of removing nearly all motor noise without adding much latency. Typically no 'tuning' is required. Although RPM filtering will remove nearly all motor noise, general 'junk' noise from bearings, wind and turbulence will not be removed by the RPM filters. Lowpass filtering will still be required to control those noise elements. Frame or prop resonances, which manifest as large fixed frequency noise lines, won't be removed by the RPM filters either; they are best managed by keeping the Dynamic Notch active. The Dynamic Notch needs to be reconfigured when RPM filtering is active, since it now no longer needs to eliminate motor noise. In 4.1, set the Dynamic Notch Filter Range to Medium, the Dynamic Notch Width Percent to 0 and the Dynamic Notch Q to 250. In 4.2 and higher, set the Dynamic Notch Count to 1 and Q to 500. In 4.3 Configurator will make these changes automatically. For existing builds that already fly well, don't change any filter settings for your first flights after enabling RPM filtering. If your motors are running cool and sounding good, you may well be able to reduce filter delay by reducing or removing some of the other filters. You may be able to: move gyro lowpass filtering to higher values.disable gyro lowpass 1 entirely (by setting its cutoff value to zero, or switching it off).increasing the Q factor on the RPM filter, making the RPM notches narrower and reducing delay. Above 750 is not recommended.reduce the number of Dynamic Notch filters (width = 0 for 4.1, count = 1 for 4.2 and higher).increase the Q factor of the Dynamic Notch filter (avoid going about 750).convert existing biquad filters, if any, to PT1s, Each of these actions lets more noise through the filter bank to the PIDs and then to the motors. Filters should only be changed one at a time. After each change, always do a test hover and and a short test flight. Listen to the motors carefully, and land quickly to confirm that your motors aren't getting too hot. Then repeat with a more solid flight, and again check motor temps on landing. Black box logging, before and after, and using PID Toolbox to look at the spectral graphs is very useful. Logging can help you decide which filters can be lifted, or aren't needed, and to check that you haven't suddenly gained too much extra noise after making a change. It's best to save a diff all listing of your starting filter settings before changing anything, so you can go back. "},{"title":"Changing filtering in 4.1 after adding RPM filtering (not relevant to 4.2 or 4.3)​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#changing-filtering-in-41-after-adding-rpm-filtering-not-relevant-to-42-or-43","content":"Lifting all filter values by an equal amount is probably the safest and most reliable way of reducing filter delay. The following snippet shifts all 4.1 lowpass filters up by about 50%, reducing total delays to 2.3ms at idle and 0.9ms on full throttle: # 4.1 lowpass filter set shifted up 1.5x set gyro_lowpass_type = PT1 set gyro_lowpass_hz = 300 set dyn_lpf_gyro_min_hz = 300 set dyn_lpf_gyro_max_hz = 900 set gyro_lowpass2_type = PT1 set gyro_lowpass2_hz = 350 set dterm_lowpass_type = PT1 set dterm_lowpass_hz = 150 set dyn_lpf_dterm_min_hz = 100 set dyn_lpf_dterm_max_hz = 250 set dterm_lowpass2_type = PT1 set dterm_lowpass2_hz = 200  If you started with 4.1 default filters, this is modest but significant change. You should notice improved propwash handling. If, on first arming, the quad makes a grinding noise or makes strange noises and jumps up on arming or during hover, typically you've gone up to high on the filters, or you have too much D. Don't fly it like that. The next step would be 2x defaults. Only the very cleanest quads will be ok when filters are twice as high as normal. However filter delay is now half normal, and that may help propwash significantly. Here are 2x 4.1 filter settings; their total latency is 1.7ms at idle and 0.65ms on full throttle: # 4.1 lowpass filter set shifted up 2x set gyro_lowpass_hz = 400 set dyn_lpf_gyro_max_hz = 1000 set dyn_lpf_gyro_min_hz = 400 set gyro_lowpass2_type = PT1 set gyro_lowpass2_hz = 500 set dterm_lowpass_type = PT1 set dterm_lowpass_hz = 200 set dyn_lpf_dterm_max_hz = 340 set dyn_lpf_dterm_min_hz = 140 set dterm_lowpass2_type = PT1 set dterm_lowpass2_hz = 300  "},{"title":"Disabling low-pass filters completely​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#disabling-low-pass-filters-completely","content":"To disable lowpass filters completely, without cooking your motors, you are going to need a mechanically sound build that doesn't have de-laminated arms, loose bolts, a bad gyro chip or noisy motor bearings. Disabling filters have fairly substantial effects and should only be done by people familiar with filtering. Generally it is safer to move filters up or down as a group, as described above. The following will disable the first gyro lowpass completely: set gyro_lowpass_hz = 0 set dyn_lpf_gyro_max_hz = 0  We do not recommend disabling both gyro lowpass 1 and gyro lowpass 2 unless you are certain that the build is really clean. This will disable the second gyro lowpass completely: set gyro_lowpass2_hz = 0  Disabling D filters completely is not recommended. A minimum of two PT1 filters (as per the defaults) or one second order lowpass (biquad or PT2) are required by all quads. Reducing D filtering is very hazardous. It can be very easy to smoke your motors. If you do want to experiment with reduced D filtering, do so very cautiously. "},{"title":"Configuring the Dynamic Notch with RPM filtering​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#configuring-the-dynamic-notch-with-rpm-filtering","content":"In 4.1 and 4.2 there is a need to manually re-configure the Dynamic Notch to the narrower single notch configuration, saving filter delay time. In 4.3 the appropriate changes are actioned automatically when you enable or disable RPM filtering, greatly simplifying RPM filter setup. The following notes apply to 4.1 only: In 4.1, the Dynamic Notch range is, by default, set to AUTO mode, and uses the value of dyn_lpf_gyro_max_hz to select the frequency range over which the dynamic notch will operate. Because frame resonances usually happen in the LOW or MEDIUM dynamic notch range, it is best, when rpm filtering is used, to manually configure the Dynamic Notch on one of those ranges. If you know you have no frame resonances below 150hz, choosing MEDIUM will reduce delay and keep the dynamic notch higher. If you want the dynamic notch to stay above a certain minimum value, because you know you have no resonances below that value, set the dynamic notch minimum frequency accordingly (just below the resonance that you are targeting). For example, this snippet would let the dynamic notch run between 90 to about 330hz with a narrow single notch: set dyn_notch_range = LOW set dyn_notch_width_percent = 0 set dyn_notch_q = 200 set dyn_notch_min_hz = 90  This snippet would let the dynamic notch range from 180 to about 550hz with a narrow single notch: set dyn_notch_range = MEDIUM set dyn_notch_width_percent = 0 set dyn_notch_q = 200 set dyn_notch_min_hz = 180  If the resonance line is very narrow, you can likely get away with the dynamic notch Q of 250. Wider or more diffuse resonance bands may need a Q of 120-150. It is always best to compare spectrums with dynamic filter on or off to check exactly what it is doing. It is possible to turn the dynamic notch filter off altogether on stiff resonance-free builds, but this should be done with caution, and is best tested by before and after logging confirms that it is not contributing meaningfully to the end result. "},{"title":"Advanced Topics​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#advanced-topics","content":""},{"title":"Timer Based Bidirectional Dshot​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#timer-based-bidirectional-dshot","content":"If your FC supports it you can use our timer based bidirectional dshot implementation to lower the cpu load of bidirectional dshot a bit. Prior to 4.1 RC1 this was the only available implementation. Its downside is that it requires remapping of timers and DMA channels on some boards and does not work everywhere. Don't be discouraged if your target isn't listed. Many targets will work. Use this Default Snippet, try it out and report back. Starting from 4.1 RC1 you need to disable the default dshot bitbang implementation using the command set dshot_bitbang=off. Don't forget to set this back to auto if you want to switch back to dshot bitbang. "},{"title":"Snippets for supported targets​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#snippets-for-supported-targets","content":"Target\tInstall Snippet\tNotes\tSupported Motors\tAG3XF4\tSnippet M1 - M4 (tested Mister_M) AIKONF4\tSnippet M1 - M4 (tested fujin) AIRBOTF7\tSnippet M1-M4 (tested by Asizon) ALIENFLIGHTNGF7\tSnippet\tM3 doesn't work, use one of M5-9 instead. LED doesn't work with M1\tM1-M2, M4-M9 ALIENWHOOP\tSnippet M1-M4 ANYFCF7\tSnippet M1 M2 M3 M4 M5 M6 M9 ANYFCM7\tSnippet M1 M2 M3 M4 M5 M7 M9 M10 BETAFLIGHTF4\tSnippet M1 - M4 ok (tested Balint) CLRACINGF4\tSnippet M1-M4 ok CLRACINGF7\tSnippet\tMotor 4 doesn't work. Use the LED pad instead\tM1 M2 M3 M5 CRAZYBEEF4DX\tSnippet M1-M4 ok (tested Noctaro) CRAZYBEEF4FR\tSnippet M1-M4 ok (tested joelucid) DALRCF4\tSnippet M1-M6 (tested QuadMcFly) DALRCF722DUAL\tSnippet M1-M6. But either M5 or M6 DYSF4PRO\tSnippet M1-M4 (tested BRadFPV) ELINF405\tSnippet M1-M4 (tested elin-neo) ELINF722\tSnippet M1-M4 (tested elin-neo) EXF722DUAL\tSnippet M1-M8 FLYWOOF7DUAL\tSnippet M1-M6 FORTINIF4\tSnippet M1-M4(tested QuadMcFly) FOXEERF722DUAL\tSnippet M1-M6 FURYF4\tSnippet M1-M4, No LED support, Tested RawFPV FURYF7\tSnippet M1-M4 HAKRCF722\tSnippet M1-M6 KAKUTEF4V2\tSnippet M1-M4 tested KISSFCV2F7\tSnippet M1-M6 LUXF4OSD\tSnippet M1-M4 tested (Mister_M) MAMBAF411\tSnippet DMA &amp; timer reviewed by joelucid MAMBAF722\tSnippet M1-M4 tested (kc10kevin) MATEKF405\tSnippet M1-M4 tested (Wudz_17) MATEKF411\tSnippet DMA &amp; timer reviewed by joelucid MATEKF411RX\tSnippet DMA &amp; timer reviewed by joelucid MATEKF722\tSnippet M1-M8 MATEKF722SE\tSnippet\tM5 does not work\tM1-M4, M6-M8 MLTEMPF4\tSnippet M1-M4 (tested RC2 monko760) NERO\tSnippet M1-M8 NOX\tSnippet M1-M4 NUCLEOF7\tSnippet\tM4 does not work but can be replaced with M6\tM1-M3,M6 NUCLEOF722\tSnippet\tM4 does not work but can be replaced with M6\tM1-M3,M6 OMNIBUSF4\tSnippet M1-M4 (tested omerco) OMNIBUSF4SD\tSnippet M1-M4 (tested joe lucid) OMNIBUSF4FW\tSnippet M1-M4 tested (skonk) OMNIBUSF7\tSnippet M1-M4 (tested in RC2 IgguT) OMNINXTF7\tSnippet M1-M4 PYRODRONEF4\tSnippet M1-M4 (tested fujin) REVOLTOSD\tSnippet M1-M4 (tested JayBird) SPEEDYBEEF4\tSnippet Flavoredcrayon SPRACINGF7DUAL\tSnippet M1-M10 TMOTORF4 M4-M5 does not work but can be replaced with M6\tM1-M3, M6 YUPIF7\tSnippet M1-M6\t Please add additional verified configurations here. "},{"title":"Unsupported targets​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#unsupported-targets","content":"Target\tNotes Below is a description of the settings in the config snippets. "},{"title":"Loop times and DSHOT protocol​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#loop-times-and-dshot-protocol","content":"Bidirectional DSHOT works with DSHOT 300, 600 and 1200, and also with Proshot 1000. For practical purposes, DShot 600 works well at all PID loop rates. Remember that for each frame sent there will now be a frame coming back, and between input and output frames there is a period of 25us to switch the line, DMA, and timers. The loop time selection needs to be low enough that given the DSHOT protocol rate both frames + 50 us fit into one gyro loop iteration. Both bidirectional DSHOT and the RPM filter are fairly CPU intensive and it is very important for the loop rates to be exactly on spot so that the filters get tuned to the right frequencies. It is recommended to run at 4k/4k with DShot 600 for your initial test flight. All DSHOT speeds should work at that loop rate. On F4, RPM telemetry costs about 3-4uS per motor per line direction change. Something around 24-32uS is required for the line direction switching both directions together. The RPM filter has 36 notch filters that get dynamically tuned at 1000Hz update frequency. 8k4k is good on most F405's; 8k8k is possible, but often needs overclocking. F411's will require over-clocking to run at 8k4k. F7's run 8k8k without problems. You may need to switch off any extended startup melody, since that may interfere with bidirectional DSHOT. The standard startup tones are fine. "},{"title":"DMA​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#dma","content":"The current implementation requires normal DMA to be used, not burst DMA. Turning burst DMA off may, of itself, not work with a given FC. You can try it out in advance: set dshot_burst = OFF And test whether your quad still flies. If so proceed to the next step: "},{"title":"Enabling new scheduler policy​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#enabling-new-scheduler-policy","content":"Since the RPM filter works with very narrow notch filters, it's imperative that the gyro loop time does not vary and is exactly as specified. This used to require low loop rates and overclocking. A scheduler change has now been added, which allows consistent gyro rates even at higher loop rates. Bidirectional DSHOT requires enabling this feature: set scheduler_optimize_rate = ON "},{"title":"Enabling Bidirectional Dshot​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#enabling-bidirectional-dshot","content":"set dshot_bidir = ON See if your motors still spin up. If so try detach the USB cable, connect a battery and reconnect USB. Now go to the CLI and type status. You should see DSHOT telemetry being reported. The reported RPM should be zero for each motor and there should be few errors. "},{"title":"Motor Poles​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#motor-poles-1","content":"The ESCs report eRPM, which needs to be converted to RPM using the number of poles (magnets) of the motors. These are found on the bell of the motor, not the stator magnets where the windings are located. Typical 5&quot; motors have 14 poles, so that is the default setting. Smaller motors have fewer poles, often 12. Count them or look up the motor specs and configure using: set motor_poles = 14 "},{"title":"Verifying consistent loop time​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#verifying-consistent-loop-time","content":"Important: After enabling all of the above features double check that your loop rate is consistent. If not select a lower loop rate. Remember that unlike effective filtering, loop time has very minimal effect on flight performance. To do so enter tasks in the CLI and check that the gyro rate matches what you have specified (Note: Battery should be connected to FC to get accurate loop rate results). For example: # tasks Task list rate/hz max/us avg/us maxload avgload total/ms 00 - ( SYSTEM) 10 1 0 0.5% 0.0% 0 01 - ( SYSTEM) 1000 3 1 0.8% 0.6% 522 02 - ( GYRO/PID) 7999 43 34 34.8% 27.6% 2845 03 - ( ACC) 1000 12 10 1.7% 1.5% 107 04 - ( ATTITUDE) 100 17 10 0.6% 0.6% 11 05 - ( RX) 32 34 32 0.6% 0.6% 12 06 - ( SERIAL) 100 851 3 9.0% 0.5% 8 08 - (BATTERY_VOLTAGE) 50 4 2 0.5% 0.5% 1 09 - (BATTERY_CURRENT) 50 1 1 0.5% 0.5% 0 10 - ( BATTERY_ALERTS) 5 3 2 0.5% 0.5% 0 11 - ( BEEPER) 100 2 1 0.5% 0.5% 1 14 - ( BARO) 43 98 66 0.9% 0.7% 34 15 - ( ALTITUDE) 40 7 3 0.5% 0.5% 1 17 - ( TELEMETRY) 250 1 0 0.5% 0.0% 27 19 - ( OSD) 60 21 13 0.6% 0.5% 9 21 - ( CMS) 60 1 1 0.5% 0.5% 0 22 - ( VTXCTRL) 5 1 1 0.5% 0.5% 0 23 - ( CAMCTRL) 5 1 1 0.5% 0.5% 0 25 - ( ADCINTERNAL) 2 3 1 0.5% 0.5% 0 26 - ( PINIOBOX) 19 1 1 0.5% 0.5% 0 RX Check Function 2 1 0 Total (excluding SERIAL) 46.0% 37.1%  You need to check the GYRO/PID line: 02 - ( GYRO/PID) 7999 43 34 34.8% 27.6% 2845  In this case we have the Gyro/PID configured in 8k/8k and this line show us that it is executing at a rate of 7999Hz. This must be very, very close to the 8k value (8000Hz). A recommendation will be maintain the error under the 1%. "},{"title":"Debug modes​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#debug-modes","content":"There are two blackbox debug modes to verify the RPM filter: RPM_FILTER logs the frequency of each motor as reported by the ESC. DSHOT_RPM_TELEMETRY logs the unconverted eRPM. "},{"title":"TPA​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#tpa","content":"This snippet will set a 4.0x build to the 4.1 default of 65% D only TPA starting at 1250 set tpa_rate = 65 set tpa_breakpoint = 1250  Note: The RC Smoothing fix for FrSky section has been moved to the 4.0 Tuning Notes page.​ "},{"title":"References​","type":1,"pageTitle":"Bidirectional DShot","url":"/betaflight.com/docs/wiki/archive/Bidirectional-DSHOT-and-RPM-Filter#references","content":"Bidirectional Dshot PR Rpm Filter PR A test version of blheli32 with erpm telemetry on signal line support is now available. Download your ESC firmware for your target from BLHeli_32 Test code Rev32.6.X hex files folder where X is the current test revision. "},{"title":"Buzzer Mute Mode","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Buzzer-Mute-Mode","content":"Buzzer Mute Mode With Beeper Mute Mode you can silence the buzzer as long it's not needed. Setup a switch to activate beeper and deactivate beeper mute mode. We can do that in the &quot;Modes&quot; tab of the Configurator. Eg.: AUX5 &lt; 1500 -&gt; 'Beeper mute' is active, 'Beeper' is inactive. AUX5 &gt; 1500 -&gt; 'Beepr mute' is inactive, 'Beeper' is active. ","keywords":""},{"title":"Configuring Crossfire","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Configuring-Crossfire-LQ-for-use-as-RSSI-on-the-Betaflight-OSD","content":"","keywords":""},{"title":"Betaflight 4.1 and later, with native Crossfire LQ and RSSI dbm support:​","type":1,"pageTitle":"Configuring Crossfire","url":"/betaflight.com/docs/wiki/archive/Configuring-Crossfire-LQ-for-use-as-RSSI-on-the-Betaflight-OSD#betaflight-41-and-later-with-native-crossfire-lq-and-rssi-dbm-support","content":"Configure your flight controller to use the CRSF protocolOn the Configuration page select the serial-based receiver and the CRSF protocol, make sure RSSI_ADC is disabled.On the Receiver page, make sure RSSI Channel is disabled.Select LQ in the osd menu. "},{"title":"Betaflight 4.0 and earlier:​","type":1,"pageTitle":"Configuring Crossfire","url":"/betaflight.com/docs/wiki/archive/Configuring-Crossfire-LQ-for-use-as-RSSI-on-the-Betaflight-OSD#betaflight-40-and-earlier","content":"Configure your Crossfire RX to transmit LQ on an unused RC channel, by using the Crossfire OLED menu or Lua Script.On the Configuration page select the serial-based receiver and the CRSF protocol, make sure RSSI_ADC is disabled.On the Receiver page, set the RSSI Channel to the correct AUX (channel number - 4).Enable and place the RSSI element on your OSD. "},{"title":"Current Sensor Calibration","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Current-Sensor-Calibration","content":"Current Sensor Calibration Some boards include a current sensor in order to provide measures such as &quot;Battery current draw&quot;, &quot;Battery current mAh drawn&quot; and others. More often than not, the current sensor has to be thoroughly calibrated for the measures to be accurate. Also, Betaflight includes a Virtual Current Sensor feature that can be used when the current sensor is missing or broken. This sensor needs a different calibration procedure to be performed in order to provide reasonably accurate measures. The Betaflight documentation includes very valuable advice on how to calibrate both sensors: Battery","keywords":""},{"title":"Debug Modes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Debug-Modes","content":"","keywords":""},{"title":"CLI INFORMATION COMMANDS​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#cli-information-commands","content":"&quot;VERSION&quot; - Shows the current firmware loaded and the last github code commit [ie: &quot;(9f67a584b)&quot;] for the specific build of the firmware. &quot;STATUS&quot; - Shows various information about the quad setup such as ROM space available for firmware, gyro type, detected voltage, etc... &quot;TASKS&quot; - Shows the active tasks running and their CPU utilization. Make sure the &quot;gyro/PID tasks rate/hz is running at the specified rate. &quot;DSHOT_TELEMETRY_INFO&quot; - Shows the Dshot RPM bi-directional telemetry packet success for each ESC. (4.1+) &quot;RC_SMOOTHING_INFO&quot; - Shows the detected RX frame rate. This only works if the &quot;Filter&quot; RC signal smoothing type is selected in the Receiver tab, and both &quot;Input Cutoff Type&quot; and &quot;Derivative Cutoff Type&quot; are set to &quot;auto&quot;. The radio and RX need to be connected and powered up for the detected frame rate data to be valid. &quot;get DEBUG_MODE&quot; - Shows the current debug mode and all available debug modes.  "},{"title":"DEBUG MODES​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#debug-modes-1","content":""},{"title":"GYRO SIGNAL (https://youtu.be/A09sprstYqI)​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#gyro-signal-httpsyoutubea09sprstyqi","content":"GYRO_RAW: (Raw gyro data without scaling or filtering) For use in seeing the unscaled gyro signal into the firmware for use in stack overflow detection (ICM gyros). [0] = roll: gyro signal input to firmware UNscaled[1] = pitch: gyro signal input to firmware UNscaled[2] = yaw: gyro signal input to firmware UNscaled[3] = [empty] GYRO_SCALED: (Gyro data converted to deg/s, before any flight controller filtering) [0] = roll: gyro signal input to firmware scaled into deg/sec[1] = pitch: gyro signal input to firmware scaled into deg/sec[2] = yaw: gyro signal input to firmware scaled into deg/sec[3] = [empty] GYRO_FILTERED: (SAME AS GYRO TRACES RECORDED BY DEFAULT) [0] = roll: filtered gyro trace[1] = pitch: filtered gyro trace[2] = yaw: filtered gyro trace[3] = [empty] GYRO_SAMPLE: ( [0] = Gyro data before down-sampling to PID loop rate[1] = Gyro data at PID loop rate[2] = Gyro data at PID loop rate after RPM filtering[3] = Gyro data at PID loop rate, after RPM and all static filters, but before Dynamic Notch filters "},{"title":"FILTERS (https://youtu.be/__vyp60cU_8)​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#filters-httpsyoutube__vyp60cu_8","content":"D_LPF: [0] = roll: unfiltered D[1] = pitch: unfiltered D[2] = roll: filtered, after DMin/Dmax modification, pre application of TPA[3] = pitch: filtered, after DMin/Dmax modification, pre application of TPA DYN_LPF: [0] = roll: raw gyro data (scaled)[1] = roll: notch center frequency[2] = roll: lowpass filter cutoff frequency[3] = roll: pre-dyn notch (post lowpass filters)gyro data FFT_FREQ: [0] = gyroDebugAxis: notch 1 center frequency[1] = gyroDebugAxis: notch 2 center frequency[2] = gyroDebugAxis: notch 3 center frequency[3] = gyroDebugAxis: pre-dyn notch gyro data (post lowpass and RPM filter) FFT: [0] = gyroDebugAxis: pre-dyn notch gyro data (post lowpass and RPM filter)[1] = gyroDebugAxis: post-dyn notch gyro data[2] = gyroDebugAxis: downsampled data used for FFT[3] = [empty] FFT_TIME: [0] = currently active calculation step[1] = duration of this step[2] = [empty][3] = [empty] RPM_FILTER: [0] = motor #1 RPM Notch center frequency (where peak motor noise is anticipated)[1] = motor #2 RPM Notch center frequency[2] = motor #3 RPM Notch center frequency[3] = motor #4 RPM Notch center frequency "},{"title":"PIDs​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#pids","content":"D_MIN: [0] = gyro factor (percent, scaled by d_min_gain)[1] = setpoint factor (percent, scaled by d_min_advance). The larger of gyro and setpoint factors takes effect.[2] = roll: active D-term gain[3] = pitch: active D-term gain ITERM_RELAX: (https://youtu.be/QfiGTG5LfCk) [0] = highpass filter to detect large setpoint changes[1] = relax factor (percent, only used in SETPOINT mode)[2] = relaxed I-term Error[3] = absolute control axis error [roll] ANTI_GRAVITY: I and P boost during rapid throttle changes [0] = simple I gain factor from high-pass throttle (* 1000)[1] = final I gain factor (includes a delayed smoothed lowpass element (* 1000)[2] = P gain factor (* 1000) [roll][3] = P gain factor (* 1000) [pitch] FEEDFORWARD_LIMIT (FF_LIMIT): Cuts back on Feedforward when sticks rapidly approach max rate [0] = Limit factor [roll][1] = Limit factor [pitch][2] = Limited feedforward [roll][3] = Not used FEEDFORWARD (4.3): [0] = Interpolated Setpoint [roll][1] = Setpoint delta, smoothed [roll][2] = Boost factor, smoothed [roll][3] = RC Command delta [roll] (us) FF_INTERPOLATED (4.2): [0] = Setpoint Delta [roll][1] = Setpoint Acceleration [roll][2] = Setpoint Acceleration, clipped [roll][3] = Duplicate Counter FF_INTERPOLATED (4.0): [0] = Setpoint Delta Impl[roll][1] = Boost Amount [roll][2] = Boost Amount, clipped [roll][3] = Clip Amount "},{"title":"ESC and MOTORS​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#esc-and-motors","content":"DSHOT_RPM_TELEMETRY: RPM in Configurator 10.8, eRPM for &lt;10.8 (where RPM = eRPM * motor_magnet_count) [0] = motor #1 RPM[1] = motor #2 RPM[2] = motor #3 RPM[3] = motor #4 RPM DSHOT_RPM_ERRORS: [0] = Motor #1: the per-motor invalid packet percentages in hundredths of a percent (so 123 is 1.23%)[1] = Motor #2: &quot;[2] = Motor #3: &quot;[3] = Motor #4: &quot; DYN_IDLE (4.3): [0] = Dyn Idle P [roll][1] = Dyn Idle I [roll][2] = Dyn Idle D [roll][3] = min RPM (lowest current motor rpm) DYN_IDLE (&lt;4.3): [0] = motorRangeMinIncrease * 1000[1] = targetRpsChangeRate (simple RPM error * idle_adjustment_speed)[2] = error (amount of error to fix)[3] = minRps (lowest current motor rpm, in revolutions per second 10) So, for example, a minRps value of 500 corresponds to 50.0 60 = 3000rpm "},{"title":"LOOPTIME STABILITY​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#looptime-stability","content":"CYCLETIME: [0] = The time in microseconds since the PID task last ran[1] = The current CPU load in percent[2] = The time since the previous motor update (uS)[3] = The variance in the motor update interval vs. the target PID loop time (uS) note: with 4.2.x restructuring of the gyro/PID loops [2] &amp; [3] are pointless since the motor updates are part of the PID task now. PIDLOOP: [0] The time the Gyro Task ran (Useless post BF 4.2.x)[1] Time microseconds the PID calculations[2] Time in microseconds for mixer, servos, motor update, dshot telemetry stats[3] Time in microseconds the mag hold and blackbox processing logic SCHEDULER_DETERMINISM: [0] - Gyro task start cycle time in 10th of a us[1] - ID of late task[2] - Amount task is late in 10th of a us[3] - Gyro lock skew in clock cycles TIMING_ACCURACY: [0] - % CPU busy[1] - Tasks late in last second[2] - Total lateness in last second in 10ths us[3] - Total tasks run in last second "},{"title":"RC SMOOTHING (https://youtu.be/M50fKpvFjT8)​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#rc-smoothing-httpsyoutubem50fkpvfjt8","content":"RC_INTERPOLATION: [0] = raw un-smoothed rc channel data [roll][1] = current RX frame rate[2] = interpolation step count[3] = rc setpoint [roll] RC_SMOOTHING: [0] = raw un-smoothed rc channel data[1] = raw un-smoothed setpoint derivative[2] = filtered setpoint derivative before applied to setpoint weight[3] = the current calculated average (shows the current &quot;locked&quot; rate used to set the filters) RC_SMOOTHING_RATE: [0] = log each RX frame interval (shows the delay from the previous frame in microsecond)[1] = log the training step count[2] = the current calculated average (shows the current &quot;locked&quot; rate used to set the filters)[3] = indicates whether guard time is active "},{"title":"FLIGHT DYNAMICS​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#flight-dynamics","content":"AC_ERROR (Absolute Control Error): [0] = roll: axis error * 10[1] = pitch: axis error * 10[2] = yaw: axis error * 10[3] = [none] AC_CORRECTION (AC = Absolute Control): [0] = roll: axis AC correction * 10[1] = pitch: axis AC correction * 10[2] = yaw: axis AC correction * 10[3] = [none] FF_THUMB (Absolute Control Correction): [0] = roll normal FF[1] = roll FF after stick limit[2] = FF after max deflection[3] = projected max rate due to stick extrapolation "},{"title":"SENSOR FUSION GYRO BOARDS:​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#sensor-fusion-gyro-boards","content":"DUAL_GYRO_RAW: [0] = roll: RAW gyro #1 data (NOT scaled to Deg/sec)[1] = pitch: RAW gyro #1 data (NOT scaled to Deg/sec)[2] = roll: RAW gyro #2 data (NOT scaled to Deg/sec)[3] = pitch: RAW gyro #2 data (NOT scaled to Deg/sec) DUAL_GYRO_SCALED: [0] = roll: RAW SCALED gyro #1 data (scaled to Deg/sec)[1] = pitch: RAW SCALED gyro #1 data (scaled to Deg/sec)[2] = roll: RAW SCALED gyro #2 data (scaled to Deg/sec)[3] = pitch: RAW SCALED gyro #2 data (scaled to Deg/sec) DUAL_GYRO_DIFF: [0] = roll: gyro #1 filter – gyro #2 filtered[1] = pitch: gyro #1 filter – gyro #2 filtered[2] = yaw: gyro #1 filter – gyro #2 filtered[3] = [empty] DUAL_GYRO_COMBINED: (programmer useful only) [0] = [empty][1] = roll: filtered gyro (same as “gyro” trace)[2] = pitch: filtered gyro (same as “gyro” trace)[3] = [empty] DUAL_GYRO_COMBINED: (programmer useful only) [0] = [empty][1] = roll: filtered gyro (same as “gyro” trace)[2] = pitch: filtered gyro (same as “gyro” trace)[3] = [empty] "},{"title":"VTX​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#vtx","content":"SMARTAUDIO: [0] = SmartAudio Version * 100 + Device Mode[1] = Device Channel[2] = Device Frequency[3] = Device Power TRAMP [0] = Status[1] = Reply Code[2] = Pit Mode[3] = Retry Count "},{"title":"RX​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#rx","content":"SBUS (FrSky SBUS) [0] = Frame flags[1] = State Flags[2] = Frame Time[3] = not used FPORT (FrSky FPORT) [0] = Frame Interval[1] = Frame Errors[2] = Last Error[3] = Telemetry Interval GHST (Ghost) [0] = CRC Error Count[1] = RSSI[2] = Link Quality[3] = Unknown Frame count CRSF_LINK_STATISTICS_UPLINK [0] = Uplink RSSI 1[1] = Uplink RSSI 2[2] = Uplink Link Quality[3] = RF Mode CRSF_LINK_STATISTICS_UPLINK [0] = Uplink RSSI 1[1] = Uplink RSSI 2[2] = Uplink Link Quality[3] = RF Mode CRSF_LINK_STATISTICS_PWR [0] = Antenna[1] = SNR[2] = Tx Power[3] = not used CRSF_LINK_STATISTICS_DOWN [0] = Downlink RSSI[1] = Downlink LQ[2] = Downlink SNR[3] = not used RX_SFHSS_SPI (FrSky SPI software based Rx) [0] = Data State[1] = Missing Frame[2] = Offset Max[3] = Offset Min RX_EXPRESSLRS_PHASELOCK (ExpressLRS software based PPL) [0] = rawOffsetUs: instantaneous phase offset measured by last timer tick[1] = offsetUs: filtered offset value used in software PLL[2] = frequencyOffsetTicks: frequency offset (in timer ticks) between ELRS transmitter and RX[3] = phaseShiftUs: current instantaneous phase shift value that will applied next timer tick RX_EXPRESSLRS_SPI (ExpressLRS SPI RX) [0] = lostConnectionCounter: counts the number of times the connection has been lost since startup[1] = rssiFiltered: current low-pass filtered RSSI value reported from sx1280/sx127x[2] = snr: current SNR reported by sx1280/sx127s[3] = uplinkLQ: uplink link quality percentage "},{"title":"Debug List​","type":1,"pageTitle":"Debug Modes","url":"/betaflight.com/docs/wiki/archive/Debug-Modes#debug-list","content":"Not all debug options are available in some firmware builds. | DEBUG TYPE | | :--- | | DEBUG_CYCLETIME | | DEBUG_BATTERY | | DEBUG_GYRO | | DEBUG_GYRO_FILTERED | | DEBUG_ACCELEROMETER | | DEBUG_PIDLOOP | | DEBUG_GYRO_SCALED | | DEBUG_RC_INTERPOLATION | | DEBUG_ANGLERATE | | DEBUG_ESC_SENSOR | | DEBUG_SCHEDULER | | DEBUG_STACK | | DEBUG_ESC_SENSOR_RPM | | DEBUG_ESC_SENSOR_TMP | | DEBUG_ALTITUDE | | DEBUG_FFT | | DEBUG_FFT_TIME | | DEBUG_FFT_FREQ | | DEBUG_RX_FRSKY_SPI | | DEBUG_RX_SFHSS_SPI | | DEBUG_GYRO_RAW | | DEBUG_DUAL_GYRO_RAW | | DEBUG_DUAL_GYRO_COMBINED | | DEBUG_DUAL_GYRO_DIFF | | DEBUG_MAX7456_SIGNAL | | DEBUG_MAX7456_SPICLOCK | | DEBUG_SBUS | | DEBUG_FPORT | | DEBUG_RANGEFINDER | | DEBUG_RANGEFINDER_QUALITY | | DEBUG_LIDAR_TF | | DEBUG_ADC_INTERNAL | | DEBUG_RUNAWAY_TAKEOFF | | DEBUG_SDIO | | DEBUG_CURRENT_SENSOR | | DEBUG_USB | | DEBUG_SMARTAUDIO | | DEBUG_RTH | | DEBUG_ITERM_RELAX | | DEBUG_ACRO_TRAINER | | DEBUG_RC_SMOOTHING | | DEBUG_RX_SIGNAL_LOSS | | DEBUG_RC_SMOOTHING_RATE | | DEBUG_ANTI_GRAVITY | | DEBUG_DYN_LPF | | DEBUG_RX_SPEKTRUM_SPI | | DEBUG_DSHOT_RPM_TELEMETRY | | DEBUG_RPM_FILTER | | DEBUG_D_MIN | | DEBUG_AC_CORRECTION | | DEBUG_AC_ERROR | | DEBUG_DUAL_GYRO_SCALED | | DEBUG_DSHOT_RPM_ERRORS | | DEBUG_CRSF_LINK_STATISTICS_UPLINK | | DEBUG_CRSF_LINK_STATISTICS_PWR | | DEBUG_CRSF_LINK_STATISTICS_DOWN | | DEBUG_BARO | | DEBUG_GPS_RESCUE_THROTTLE_PID | | DEBUG_DYN_IDLE | | DEBUG_FF_LIMIT | | DEBUG_FF_INTERPOLATED | | DEBUG_BLACKBOX_OUTPUT | | DEBUG_GYRO_SAMPLE | | DEBUG_RX_TIMING | | DEBUG_D_LPF | | DEBUG_VTX_TRAMP | | DEBUG_GHST | | SCHEDULER_DETERMINISM | | TIMING_ACCURACY | | DEBUG_RX_EXPRESSLRS_SPI | | DEBUG_RX_EXPRESSLRS_PHASELOCK | "},{"title":"Deep Dive","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Deep-Dive","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"Deep Dive","url":"/betaflight.com/docs/wiki/archive/Deep-Dive#introduction","content":"The purpose of this page is to provide the reader with detailed information about the inner workings of the BetaFlight firmware. This information has been collected from sources such as: The BetaFlight RC Groups Forum (credit will be given where possible).YouTube Channels that have provided relevant content. Grab a snack and make yourself comfortable !  "},{"title":"Contents​","type":1,"pageTitle":"Deep Dive","url":"/betaflight.com/docs/wiki/archive/Deep-Dive#contents","content":"How Opensource Software Development WorksGyro based loop implementationThe delta_from_gyro setting and all about the PID Controller D valuesFiltering, Aliasing and Gyro Sync explainedRates / rc rate translations into deg/sec TablesMotor update "},{"title":"How Opensource Software Development Works​","type":1,"pageTitle":"Deep Dive","url":"/betaflight.com/docs/wiki/archive/Deep-Dive#how-opensource-software-development-works","content":"This video covers how multiple versions of the same software in the hobby exist (CleanFlight/BetaFlight/RaceFlight etc) and how developers exchange ideas and promote code between the projects. http://www.youtube.com/watch?v=kZvoei1dzNQ "},{"title":"Gyro based loop implementation​","type":1,"pageTitle":"Deep Dive","url":"/betaflight.com/docs/wiki/archive/Deep-Dive#gyro-based-loop-implementation","content":"Gyro update is leading the loop. The loop will start after interrupt is triggered for new gyro sample. The PID controller will always be doing the calculation of the most fresh gyro value. The sampling gyro rate of 1khz will be used and that will automatically run looptimes of 1000us or 500us depending of configuration and target capabilities. This also makes the looptime setting unnecessary. There is no need for this parameter as our gyro decides when loop will run. There is no drift between gyro and control loop and your PID tune will be consistent. No aliasing should be experienced. This also helps filters to do better job in giving clean gyro traces.  "},{"title":"The delta_from_gyro setting and all about the PID Controller D values​","type":1,"pageTitle":"Deep Dive","url":"/betaflight.com/docs/wiki/archive/Deep-Dive#the-delta_from_gyro-setting-and-all-about-the-pid-controller-d-values","content":"Boris B wrote: On = delta from measurement / gyro Off = delta from error It is really hard to explain without reading a lot about pid controllers and how they really work. But here's my attempt for a quick and &quot;easy&quot; to understand explanation: Before explaining I will first tell you what determines the Dterm part of PIDsum. It is the derivative or, in other words, rate of change. It is basically the speed of something. Lets say you're driving at a constant speed of 50km/h, then your speed derivative is 0. But when you push the pedal and keep accelerating and start speeding up with 5km/h per second then the derivative of your speed is 5. When you start slowing down, your speed derivative goes negative. Delta from error: This is the classical Derivative approach. It reflects the speed of error. Error is derived from stick input. Once you move the stick you introduce an error and PID controller has to correct the error. The faster the error grows the the bigger derivative gets. It helps PID loop to reach target faster. It is accelerating it more what creates the dampening effect. Delta from measurement/gyro: This is mathematically simplified formula for Derivative from error assuming that error is 0. When you leave out error out of the formula as it is 0 anyway that there is just -(measurement delta) left. And this is the speed of change from gyro. The faster the gyro grows in positive direction the higher Dterm part will be in opposite direction. This has a direct dampening effect to P. The main difference is that Delta from error kind of accelerates your stick input, but also creates derivative kick because it follows the stick which is slower refresh rate and delta from gyro doesn't accelerate your stick input at all and doesn't create derivative kick.  ctzsnooze wrote: Actually, Dterm in gyro mode is inversely proportional to the rate of change of the gyro signal. It always opposes changes to the gyro signal. Frame inertia delays the response of the gyros to P changes, but since Dterm always opposed gyro changes, it typically is opposite in sign to Pterm (definitely opposite in sign to Dterm. When Pterm increases due to positive stick inputs, inertia of the quad initially results in a big Pterm error signal. Initially, the quad isn't moving, due to inertial mass. With no movement, Dterm is zero, while Pterm is quite large. Very quickly the motors spool up and start to rotate the quad, reducing Pterm as the rotation rate reaches target (i.e. as error falls). Dterm slows down the onset of the rotation, smoothing out both the start of the rotation and the end of the roll. But Pterm is always stronger, so the quad eventually gets the desired rotation rate. Because the rate of rotation is now constant, both Pterm and Dterm head to to zero. Momentum may cause the frame to keep rotating a bit past the point at which it was supposed to stop. P weakly opposes this since typically the actual magnitude of the offset due to momentum errors is small, but Dterm is very sensitive to the high velocity of Pterm overshoots and damps them away much more quickly than Pterm can. In the absence of stick movement, Pterm opposes an external force on the frame. The magnitude of the Pterm response is always in proportion to the error between the intended rotation rate and the measured rotation rate (e.g. unwanted rotation from flying into a gust of wind). When there is a positive stick movement, the positive rcCommand will result in a sudden negative error because the frame won't be rotating as fast as the new value for rcCommand requests - at least immediately it won't. That causes a small spike up in Pterm that can be seen with every positive rcCommand step. This is what it means to say that P term is error based . As a result, PTerm changes in the same direction as rcCommand with stick inputs. Once the frame starts to rotate at the desired rotation rate, the Pterm error falls, and reaches zero when it is rotating at the desired speed. When Dterm is gyro based, it is proportional to the rate of change of the gyro signal, and opposite in sign. A non-error based Dterm doesn't care about stick inputs. It just opposes the rate of change of gyro - smoothing out sudden changes in rate, however they arise. While mathematically a derivative, it acts as a damping mechanism for oscillations, like the shock absorber in a car's suspension. While a gyro based Dterm will be delayed a little behind Pterm due to frame inertia, it will typically be of opposite sign to Pterm during stick inputs.  ctzsnooze wrote: Dterm can be calculated on rate of change of gyro signal alone, or the error from rcCommand to gyros. The former approach was first used in Lux, whereas multiwii and Rewrite Dterm were historically error based. Until recently, BetaFlight used error based Dterm calculations, but as of 2.3.4 Boris has gone back to the original Lux approach where Dterm is derived only from rate of change of the gyro signal. Dterm fundamentally opposes changes in gyros, and opposes fast changes more than slow changes. If you hand hold your quad in acro mode and, without stick input, suddenly tilt it a tiny bit, but very, very quickly, the immediate opposition to that sudden small change is coming almost entirely from Dterm. The two methods behave exactly the same in the absence of stick inputs, but differ markedly when a control input results in a sudden 'error' between current roll rate and the new intended roll rate. When D is based on error, a strong 'dterm kick' happens when rcCommand suddenly changes the error value. The kick is usually in phase with the desired outcome, and speeds up the response to stick inputs, because the kick typically overrides the usual Dterm response of opposing movement. However the kick effect causes 'spikes' on the Dterm trace, smaller with Sbus but big on PPM. Dealing with those spikes was the main reason why rcSmoothing was implemented - it removes the spikes, but retains the 'kick' effect. During a sudden stick input, the quad will respond a bit quicker if Dterm is error seeking because D will not oppose the movement resulting from your stick inputs. Whether this is noticeable is unclear, but theoretically it should be a bit more responsive. There is a possible downside, however, in that that wobble after sudden stick inputs (e.g. at the end of a roll) may be less of a problem when Dterm is not error seeking. Additionally if the 'kicks' aren't smoothed they can cause noise in motors during stick inputs, reducing efficiency, and since RC smoothing to smooth them out may cause delays or otherwise be problematic, I think Boris is keen to revisit which approach is best. It might be useful, purely for testing purposes, if we could select the Dterm calculation mode via a switch, so we could change the functionality in flight to really see if it makes much of a difference. Or change it via a CLI parameter. Otherwise its a bit difficult to really know which approach is best, you have to reflash with a custom version and then it's not so easy to compare one to the other. But yeah, with big stick inputs, the new Dterm approach will be smoother on BlackBox during the input, and will always be out of phase with gyros so may delay responsiveness a little to Pterm during stick inputs. It could be that a small increase in P will override the loss of Dterm kick. If so it is tempting to no longer use the error seeking Dterm calculation. "},{"title":"Additional information​","type":1,"pageTitle":"Deep Dive","url":"/betaflight.com/docs/wiki/archive/Deep-Dive#additional-information","content":"Effect of D term on P/D controller: http://www.youtube.com/watch?v=xMygUvegC80 General explanation of D term: http://en.wikipedia.org/wiki/Derivative "},{"title":"Filtering, Aliasing and Gyro Sync explained​","type":1,"pageTitle":"Deep Dive","url":"/betaflight.com/docs/wiki/archive/Deep-Dive#filtering-aliasing-and-gyro-sync-explained","content":"The following videos have been produced with BetaFlight in mind, and provide a great resource for in-depth learning of these complex subjects. Filtering Basics: http://www.youtube.com/watch?v=CpW8_fOJ7_M Nuhertz Spectra for analyzing copter gyro data: http://www.youtube.com/watch?v=fZm9N-WFkQk Analyzing FFT graphs for multirotor tuning: http://www.youtube.com/watch?v=nxHK-V7GCYY Aliasing and Gyro Sync Explained: http://www.youtube.com/watch?v=-lmoKal_e4s New Biquad filter in BetaFlight V2.3.x: http://www.youtube.com/watch?v=Q2tSWU1MsVk "},{"title":"Rates rc rate translations into deg sec Tables​","type":1,"pageTitle":"Deep Dive","url":"/betaflight.com/docs/wiki/archive/Deep-Dive#rates-rc-rate-translations-into-deg-sec-tables","content":"Boris posted Tables in: Effect of rate combined with static rc rate of 100. (rc rate doesn't affect yaw). Full Stick inputhttp://www.rcgroups.com/forums/showpost.php?p=34028934&amp;postcount=18514 Effect of rc rate with static rate of 0. Full stick inputhttp://www.rcgroups.com/forums/showpost.php?p=34028937&amp;postcount=18515 and to make it complete. Only effect of yaw ratehttp://www.rcgroups.com/forums/showpost.php?p=34028986&amp;postcount=18516 "},{"title":"Motor update​","type":1,"pageTitle":"Deep Dive","url":"/betaflight.com/docs/wiki/archive/Deep-Dive#motor-update","content":"I am also coming from the world of VOIP what is completaly different than control laws, but there jitter is even much more of an issue in realtime audio/video processing. There are several ways to deal with it. Another option would be dropping motor output signals when they come to soon....before the old signal finished. That would be the only other option. Another example: The new way runs cycletime of 125us and PID loop of 375us The motor update happens at begin of the new cycletime and not the begin of new PID looptime! Start GYRO/PID loop------&gt;+125us GYRO/MOTOR-----&gt;+125us GYRO----&gt; +125 PID/GYRO-------&gt;+125 GYRO/MOTOR (375us) Having faster motor rate than loop rate is complete nonsense as the value will still be overwritten and cause jittering. Thats why i am reworking the tasking at the moment. The ideal motor handling would be to only write motors when there are new mixer calculations available and with the time interval between the motor updates never lower than the desired period. Longer motor updates are even not bad just as long as next motor update doesnt fall into previous one. Lets say the pid controller / mixer requests full motor power on oneshot125 which is about 250us PWM interval.....if we were updating motors at 2k interval than there is in total 250us free interval where it doesnt matter when you update it. so allowed jitter period is a bit less than 250us. On 4k speed the motor update period is totally not allowed to jitter to make full throttle possible. It doesnt matter if the motor gets updated too late but should never be updated too soon. With low looptimes like now we are reaching the point where motor updates happen near the end of cycletime. So there is no such thing as delay there. It doesnt matter if you do something at the end or beginning. Imagine like running circles you can't tell what is begin or end. The order doesnt matter anymore. It's near the end of the cycletime where there is the most jitter. The time variations there are between 0 and 100us. Especially on low looptimes with scheduled tasking mechanism to get the maximum efficiency the end of loop cycle is really jittery. So when moving the motor update to the beginning of the loop you always have the constant timing. The variable delay you would have when writing the motors at the end of the loop now becomes a constant delay. Jitter is quite crucial on oneshot signals as period of 60us is almost a half oneshot signal. "},{"title":"DFU Hijacking","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/DFU-Hijacking","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"DFU Hijacking","url":"/betaflight.com/docs/wiki/archive/DFU-Hijacking#introduction","content":"If your board is not going into DFU mode even if you are 120% sure that you have a right set of drivers installed for flashing and a healthy set of computer hardwares including USB cable, oreven if you can flash other boards with the host computer environment, orthe board goes into DFU intermittently under some special conditions, then this page may explain why and provide you with a work around. "},{"title":"What is DFU Hijacking?​","type":1,"pageTitle":"DFU Hijacking","url":"/betaflight.com/docs/wiki/archive/DFU-Hijacking#what-is-dfu-hijacking","content":"STM32 family of MCUs, when in boot loader mode, look for input from several different peripherals, including USB VCP and UARTs. If there is a chatty device connected a UART and sends something looks valid, then the boot loader focus es on the UART port and try to load a firmware from the UART port. In other words, the chatty device hijack s the boot loader. "},{"title":"Possible Workarounds​","type":1,"pageTitle":"DFU Hijacking","url":"/betaflight.com/docs/wiki/archive/DFU-Hijacking#possible-workarounds","content":"Work arounds against DFU hijacking by chatty devices are as follow. Shut the chatty device up by powering them down or physically disconnecting while flashing. Using a power supply pad not powered when only USB is connected is an alternative way of doing this. Many receivers does not send valid output until they are first bound (connected) to a transmitter after power cycle. Turning off your transmitter before powering up such receiver prevents the hijacking in this case. Use half-duplex protocol and use TX pin to connect the chatty devices. Since the boot loader does not turn on half-duplex and only listens to RX pin, something received on TX pin does not induce the hijacking. Avoid connecting chatty devices to boot loader sensitive UART ports. The boot loader sensitive UART ports on F4 are PA10, PB11 and PC11. For CLRACINGF4 (and JBF4), UART1 (PA10) and UART3 (PB11) falls into this category. Well designed FCs avoids assigning default receiver port the boot loader sensitive pins. "},{"title":"Note:​","type":1,"pageTitle":"DFU Hijacking","url":"/betaflight.com/docs/wiki/archive/DFU-Hijacking#note","content":"If none of the above solves the problem you need to look at your udev rules. "},{"title":"DMin","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/DMIN","content":"","keywords":""},{"title":"Application​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#application","content":"D_min allows the pilot to have low D most of the time, leading to reduced D delay, cooler motors, and faster stick responsiveness, while allowing more D when needed to provide stronger control overshoot during quick moves and propwash. Freestylers would typically set Dmin to close to the 'normal' or default D value, and set Dmax some 20-30% higher, to help control propwash and overshoot. Racers would typically leave the Dmin to Dmax proportion as per default. Cinematic HD pilots need high P and high D values all the time, so Dmin should to a high-normal value. 7&quot; or larger cinematic quads will usually have least background cruising wobble with a relatively high D, typically Dmin about 10% higher than P. Dmax can then be higher again, but should be applied cautiously and only if required. When using high D, you should always use stronger overall D filtering to control D noise (D filter sliders hard left). Gyro movement itself is how the code knows to boost Dmin towards Dmax. Stronger gyro movements, including flips and rolls, propwash shaking, and shaking from bent props, will trigger an increased in the amount of D being applied to the quad. Dmin advance pushes D towards Dmax whenever setpoint changes quickly, and since setpoint changes happen earlier than gyro changes, this leads to an earlier lift in D towards Dmax. This is not usually needed, except in quads targeting very high maximum roll rates that need a lot of D and can tolerate some delay. The `dmin_gain "},{"title":"Background​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#background","content":"Lower than usual amounts of D in normal flight gives the following advantages: less noise, cooler motorscleaner motor traces at full throttlefaster gyro responses to quick inputsD related oscillation or grinding on arming is less likely However, low D also has disadvantages: greater prop washgreater overshoot and bounce-backP oscillations around fast moves, due to lack of damping when P is highlow level slow oscillations in smooth forward flight The intent of d_min is to get the best of both worlds, i.e. low D when flying smoothly and during low rate turns, higher D when needed to dampen overshoots or deal with prop wash. "},{"title":"My quad is already flying great, will d_min improve it?​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#my-quad-is-already-flying-great-will-d_min-improve-it","content":"Maybe. If the quad flies well, doesn't have overshoot, doesn't oscillate, doesn't have excessively warm motors, and doesn't have much propwash, there may not be much benefit from enabling d_min. If the quad has warm to hot motors, and you hit things and sometimes need to fly with bent props, or if you are a racer, Dmin at a value lower than 'normal' D is typically very helpful, improving turn-in responsiveness, bent prop tolerance, and reducing motor heat. For freestyle purposes, if the quad is flying well and has cool motors, but has propwash, or some P wobble, setting Dmin to your 'normal' D value and using Dmax as a 'boost' for propwash, by setting Dmax 20-40% higher than Dmin, may help attenuate the propwash. Sometimes quads that have an 'on the edge' tune, with relatively high P, will get noticeable, audible P oscillation during tight power-on turns. Using Dmax as a D boost will give you more D at these times. This can help control those kinds of P oscillation better, allowing higher overall P values. "},{"title":"How do I disable d_min?​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#how-do-i-disable-d_min","content":"Switch it off in the Configurator. D_min can also be disabled, in the CLI, by setting d_min = 0, or if d_min is misconfigured to be greater than D. When disabled, the users Dmax value becomes the D value, and D is constantly at that value, all the time. "},{"title":"How should I set it up for my first flights?​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#how-should-i-set-it-up-for-my-first-flights","content":"The default Dmin values will be 23, 25 and 0 on roll, pitch and yaw. These are good, safe, starting points, for most quads. For high-performance builds, and all new builds, the first flights should be done with the master P and D slider left a few clicks, just in case the PIDs are a bit high. When tuning P and D with Dmin active, be sure to appreciate that the Dmax value is active during the faster periods of flips and rolls, and the Dmin value is active during steady flight and for smaller moves. Some people advocate tuning P and D with Dmin off. The idea is to determine the P value that causes oscillation, and then the amount of D required to control it. The pilot should first set D to about a third of P, push both upwards stepwise until P oscillation occurs, eg during tight fast turns, then back off both P and D until there is only a hint of P oscillation remaining. Then D can be brought up to a value that controls it, which usually would be about a number close to or just below the P value. Freestylers should use this value for Dmin. They may then be able to drive P higher until P oscillations just re-occur, and use Dmax at a higher value to control it. This should give optimal propwash handling as well. "},{"title":"Will adding D_min improve prop wash handling?​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#will-adding-d_min-improve-prop-wash-handling","content":"If the Dmin value is set to your optimal D value, and Dmax is set to a higher value, this is likely to improve propwash. If the Dmin value is set below the optimal D value, to keep motors cool / make the quad more responsive / improve bent prop tolerance, eg for racing, then propwash will likely be worse. During propwash events, D typically climbs only about half-way to the Dmax value. The 'sensitivity' of the Dmin code to propwash is affected by the d_min_boost_gain parameter. Higher gains will push D up more quickly and more aggressively. The default is conservative. It can be set to 30-35 on most reasonable quads, and to 40-45 on really clean freestyle builds. If propwash is the primary problem, and motors are cool, bring the d_max value up, and the d_min_boost_gain up. For fine tuning of that kind, it's best to make a blackbox log with the debug mode set to D_MIN. This will show the amount of D you're actually getting at different times in the flight. "},{"title":"Will adding d_min improve overshoot control?​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#will-adding-d_min-improve-overshoot-control","content":"Yes so long as it's overall effect is to give more D than you'd otherwise have had. The increase in D from the d_min boost effect is timed to work at exactly the best time to help control overshoot. "},{"title":"What about the 'd_min_advance' parameter?​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#what-about-the-d_min_advance-parameter","content":"D_min_advance speeds up of onset of the boost effect, by boosting D when setpoint changes (as well as when gyro changes). Changes in setpoint happen immediately you move the sticks, before the quad starts to move, and before the gyro detects any change at all. The default is 20, which is very little. Zero advance is best for racers, and probably for most quads. Stronger advance (up to 100, say) will push D up very early and that may improve overshoot control on some freestyle setups and in LOS quads that target extremely high maximum roll rates and are very susceptible to overshoot. Because strong advance adds delay, try to use the lowest value possible. Always try it at zero, and if there is no apparent change in the handling of the quad, use zero. With an advance of zero, the D boost won't start until the motors start to turn the quad, which will happen some time after the sticks are moved. This allows FF and P to 'get started' on turning the quad early, and without any suppression by D, maximising initial turn responsiveness. But for very responsive quads, a gyro derived boost signal can come on a bit too late. Adding some advance will bring start boosting D as the sticks are moved, without waiting for the motors to spin. "},{"title":"What about the d_min_boost_gain parameter?​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#what-about-the-d_min_boost_gain-parameter","content":"d_min_boost_gain determines how quickly, and strongly, D is boosted in response to flips and rolls and propwash. The default value of 20 is safe for the majority of quads. 30-35 is a good value for a clean freestyle quad. Some extremely noise free quads can be OK with gain at 40-45. Dmin gain at the default of 20 is optimal for racers. It will keep D at the Dmin value most of the time, only coming up for stronger moves to prevent overshoot. It will not help much for propwash like this but gives the racer all the responsiveness and overshoot control benefits. Dmin gain of 35 is good for freestyle generally. Higher values to about 40-45 may be used on very clean quads but are best checked by logging with the debug set to D_MIN to check exactly what is happening. The ideal gain value should result in little or no boost in gentle forward flight but a quick and significant boost effect with propwash. Note that high Dmin gain will make the Dmin boost come on whenever there is fast quad movement or shaking. If set high, a bent prop, or any other shaking process, may cause D to go to the Dmax value, and you may then get a lot of D mediated motor heating. Hence it is really important not to use high gain and high Dmax value unless the build is clean and shake-free. High Dmin gains should only be used for really clean builds that won't be flown with bad props. If the quad can be logged, the ideal gain value for general use is where the realtime D value is at the minimum value in normal flight (not sitting exactly on the min value, but going up a tiny bit at times), and rising to about half way to max in propwash, and to Dmax with flips and rolls. Logging is really helpful to properly optimise the gain value. "},{"title":"How do I know what the actual value of D is that I'm getting during a flight?​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#how-do-i-know-what-the-actual-value-of-d-is-that-im-getting-during-a-flight","content":"Use the OSD: Enter set debug_mode = D_MIN in the CLI, and set your OSD to show debug2 on-screen. The number you see is roll D times ten. If it shows 350, you have 35 of D at that instant. Make a log: Enter set debug_mode = D_MIN in the CLI. Debug2 in blackbox explorer will show instantaneous D on roll, and debug3 shows D on pitch (note the numerical values are expressed as D*10). Debug 2 shows D on roll, Debug 3 shows D on pitch. Both are before TPA attenuation. Debug 0 shows the gyro contribution, and Debug 1 the setpoint (advance) contribution, to the boosting effect. Note from @docteh: The debug OSD element in 4.0 and 4.1 shows debug 0 1 2 3 on one big line. You will only see values here if d_min is enabled. "},{"title":"What is the technology behind this?​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#what-is-the-technology-behind-this","content":"Propwash is characterised by gyro oscillations in the 20-60hz range. Quick flips and turns are associated with larger gyro changes at frequencies in the 10-20hz range. The D_min code: gets the differential of the gyro (its rate of change),applies an 80hz biquad lowpass filter (to reject high frequency D noise),get its absolute value, thensmooths and delays that signal it using a 10hz lowpass filterapplies the user specified amount of gain to the smoothed signalboosts D up to a threshold where Dmax is reached. The short delay from the 10hz filter is good because the boost occurs more towards the end of fast flip, rather than at the beginning. Hence the boost does not dampen the quad's initial responsiveness to commanded inputs. "},{"title":"Does d_min add more CPU load?​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#does-d_min-add-more-cpu-load","content":"Yes, but only a tiny bit; one biquad filter and one PT1 filter, and some simple maths. To find out how much extra CPU, temporarily set d_min to zero on all axes and re-check CPU use in the CLI. Turning advance to zero reduces the amount of processing required. "},{"title":"Is d_min available on all F3 targets?​","type":1,"pageTitle":"DMin","url":"/betaflight.com/docs/wiki/archive/DMIN#is-d_min-available-on-all-f3-targets","content":"No. Some F3 chips don't have enough flash space for d_min. Boards with those chips will not show d_min options in CLI or OSD. Special F3 builds can be made that include d_min, by re-enabling it in the relevant target definition files, but it will be necessary to exclude something else to make room. See also: the original d_cut PR7373 by ctzsnooze Jan 2019d_min PR7538, updating d_cut to d_min, by ctzsnooze Feb 2019d_min PR7559, CMS menu changes, by eTracer Feb 2019  "},{"title":"Dshot & BetaFlight 3.1","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/DSHOT-ESC-Protocol","content":"","keywords":""},{"title":"Some known limitations are:​","type":1,"pageTitle":"Dshot & BetaFlight 3.1","url":"/betaflight.com/docs/wiki/archive/DSHOT-ESC-Protocol#some-known-limitations-are","content":"3.1 seems most issues are fixed. Any issues discovered should be in the 3.1.X wiki page now. All STM32F1 Target do not support DSHOTSome ESCs that have a signal filter cap may not work until the cap is removed.Some targets have a DMA conflict between a motor and the LEDs. Some have work-arounds but some do not. If no work-around is listed then disable LEDs and contact the FC designer/support.No reports of Dshot working for HEX copter. "},{"title":"A quick way to determine IF the Firmware flashed into the FC supports Dshot:​","type":1,"pageTitle":"Dshot & BetaFlight 3.1","url":"/betaflight.com/docs/wiki/archive/DSHOT-ESC-Protocol#a-quick-way-to-determine-if-the-firmware-flashed-into-the-fc-supports-dshot","content":"Go to the CLI and type &quot;get pwm&quot;. All settings with 'pwm' in the name will be shown with all options. If DSHOT150, DSHOT300, DSHOT600 is NOT in the list for the &quot;motor_pwm_protocol&quot; then this firmware does NOT support Dshot. Example for NAZE that does Not support Dshot: motor_pwm_protocol = ONESHOT42 Allowed values: OFF, ONESHOT125, ONESHOT42, MULTISHOT, BRUSHED "},{"title":"Setting Minimum Throttle​","type":1,"pageTitle":"Dshot & BetaFlight 3.1","url":"/betaflight.com/docs/wiki/archive/DSHOT-ESC-Protocol#setting-minimum-throttle","content":"Note: In Firmware 3.1.1 and earlier min_check and min_throttle are affecting the Dshot idle value so adjusting the motor idle speed is not straight forward. If running these earlier versions of firmware try defaults and then adjust 'digital_idle_percent' until the motors ilde at the desired speed. This got fixed in 3.1.2 and up so now digital_idle_percent Only sets the Dshot idle speed. Be aware that Dshot ESCs can run motors at much slower speeds but if idle speed is too low the motor may Stall in flight during hard maneuvers and you get a 'death roll'. If this happens increase the value of digital_idle_percent. Post by Cheredanine on setting up IDLE in ßF 3.1.2 and up:​ Ok first Point - dshot does not use min and max throttle, you don't need to do that. Second point - when not using min and max throttle you should calibrate from bf, not manually set in blheli. Could someone please explain if I need to type the &quot;digital_idle_offset&quot; command? So let's deal with your question. To check what value digital idle should be set to, connect to configurator, go to the motor tab, take your props off. Click the little check box half way down the page that says you have taken your props off, you know what you are doing, you take full responsibility for your actions and you consider fingers pointless appendages anyway. Then plug in the LiPo to the quad (USE a Current Limiter Always). Click on the master slider and use the up arrow on the keyboard to increase the master slider one point at a time until you reach a point where all 4 motors have just started to spin, I don't mean twitch, stutter or start stop, I mean the lowest value where they are spinning, it is probably about 1010, don't worry if it isn't, but I am going to use that number as an example. You can now take the master slider back to zero and unplug the LiPo. Take the number (for example purposes 1010) and add thirty points to it (so in the example we are now at 1040). Not we need work out what percentage of the throttle range this is, I don't know your math skills so sorry if this is a little hand to mouth. Subtract 1000 from it, then divide by 10 So in the example: 1040-1000=40 40/10=4 Go to the cli tab in configurator Click in the box at the bottom and type: set digital_idle_percent = 4 (Replace 4 with whatever digital idle you arrived at in the calculation) Hit return, you will see the command processed in the back bit above, Then click in the box again and type save Hit return and done "},{"title":"ESC Cal and min/max throttle​","type":1,"pageTitle":"Dshot & BetaFlight 3.1","url":"/betaflight.com/docs/wiki/archive/DSHOT-ESC-Protocol#esc-cal-and-minmax-throttle","content":"ßF firmware with Dshot does Not use the min_throttle or max_throttle setting, these are ignored. Just ensure that in the ESCs (BLHeli Suite) that PPM_MIN_THROTTLE is set to 1000 and PPM_MAX_THROTTLE is set to 2000. Note: This is not needed in BLHeli_S 16.43 and up since the PPM_MIN &amp; MAX values are not used for Dshot. This means that when DSHOT is use NO ESC Calibration is required. Just Select DSHOT. Max ESC update speed supported by different dshot versions:​ WARNING: due to processor tasks, FC and/or ESC, the maximum update rate may not work-​ TEST without props and a Current Limiter.​ Theoretical speeds are a lot higher. The speed is limited in firmware to give more spreading between signals. DSHOT150: 4kHz maxDSHOT300: 10,6kHz max (10,6khz is only available on 32khz gyro boards)DSHOT600: 16kHz maxDSHOT1200: &gt;32khz max (Currently only KISS24 supports DSHOT1200) Note: When DSHOT is enabled Unsyced PWM is disabled. DSHOT always runs at the PID loop rate. Dshot digital Values:​ 0 = disarmed. 1 to 47 = Reserved for special commands. 48 to 2047 = Active throttle control. "},{"title":"Originally Posted by airmaxx23​","type":1,"pageTitle":"Dshot & BetaFlight 3.1","url":"/betaflight.com/docs/wiki/archive/DSHOT-ESC-Protocol#originally-posted-by-airmaxx23","content":"I recently finished building a new quad with the BFF3 controller and Armattan 20a ESCs with d-shot 300 enabled. The first thing I've noticed is that the ESCs tones are out of sync when I plug a battery in and I'm having a flip/roll of death once in a while. What should I check first? Answer from AILERON8​ I've been reloading the BLHeli configurator and reflashing the ESCs, then setting the ESCs to MS, syncing my FC/ESC loop, and calibrating. Then I've been going back to DShot and setting things up normally. Don't ask me why or how it works, but I've had to do this on more than one occasion now or I get a distant ESC song or two playing out of sequence in the background like you have now. This worked each time, but not saying it will work for you with certainty. "},{"title":"Does Dshot work on other models besides the Quad-X, like hex and tri-copters?​","type":1,"pageTitle":"Dshot & BetaFlight 3.1","url":"/betaflight.com/docs/wiki/archive/DSHOT-ESC-Protocol#does-dshot-work-on-other-models-besides-the-quad-x-like-hex-and-tri-copters","content":"They should surely work if the FC was designed for them. You will need to re-map a motor to a Servo for a Tri-copter. See the SERVO_TILT wiki page for help. There is also info for Tri-copter setup on the MOTOLAB page. "},{"title":"It all start with the Dshot thread (link above):​","type":1,"pageTitle":"Dshot & BetaFlight 3.1","url":"/betaflight.com/docs/wiki/archive/DSHOT-ESC-Protocol#it-all-start-with-the-dshot-thread-link-above","content":"The information posted herein is all provided on an AS-IS basis. It has been derived from posts on this forum (RCGroups/Boris' Betaflight, FC, DSHOT and ESC threads), and direct correspondences with users. USE THE FOLLOWING INFORMATION AT YOUR OWN RISK BETAFLIGHT AND DSHOT - Betaflight may not be able to support all Targets ( or specific boards) due to the design of each one differing on the DMA pinout. Look below to find what may or may not be working. "},{"title":"Flight Controllers Tested to Support Dshot on Betaflight 3.1 without Mods or remapping:​","type":1,"pageTitle":"Dshot & BetaFlight 3.1","url":"/betaflight.com/docs/wiki/archive/DSHOT-ESC-Protocol#flight-controllers-tested-to-support-dshot-on-betaflight-31-without-mods-or-remapping","content":"AIORACERF3Airbot F3 (SPRACINGF3)ALIENFLIGHTF3ALIENFLIGHTNGF7BETAFLIGHTF3BLUEJAYF4BrainFPV RE1 (needs build from BrainFPV repo)Colibri Race v2.0Dodo (RMDO)Dodo (SPRACINGF3)DTFc - Build #389 - working on the benchDTFC (DOGE)FLIP32F4FURY F3FURY F4HGLRC AIO F3 v3 (SPRACINGF3)IMPULSERCF3KISSFC Note from sskaug: KISS FCs use a resistor to drive the throttle signal high (pull-up). So it is quite sensitive to capacitance on the ESC signal.LUX_RACELUXV2_RACEMRM Mantis F3 (SPRACINGF3) - Dshot300OMNIBUS (What about Omnibus F4? Are F3 &amp; F4 the same thing with different processor?)OMNIBUSPRO (Blheli Configurator Hangs on read in 3.1, failed flash in 3.01)RACEBASE FCREVO (and clones)Rotorgeeks RG SSDSIRINFPVSOULF4 - (SOULF4) - works with REVO.hexSPRacingF3 (Acro/Deluxe)SPRacingF3NEO - Full hardware support on all the standard motor outputs - tested by the designer of the board.YuPi F4X-Racer V2.1 (SPRACINGF3)X-Racer F303 (X_RACERSPI) - "},{"title":"FC Targets that work with Dshot but require hardware mods and re-mapping pins with the Resource command:​","type":1,"pageTitle":"Dshot & BetaFlight 3.1","url":"/betaflight.com/docs/wiki/archive/DSHOT-ESC-Protocol#fc-targets-that-work-with-dshot-but-require-hardware-mods-and-re-mapping-pins-with-the-resource-command","content":"Boris' comment: I had many requests for MOTOLAB (and other FCs) but that one doesn't have DMA available on all motors. It may be that we will assign one of the motors to PPM pin so you can resolder it. Not great, but better than nothing I guess? General instructions for re-mapping pins:​ 1- All FCs that require using the FC's PPM input pin as a motor output therefore can NOT use a PPM RX. Any of the Serial RXs that use a UART do work. Set-up Serial RX normally as needed for the FC board. 2- Check pins for the FC board below on which STM32 pins need to be re-mapped. It is a Good Idea to first type in the CLI:resource resource list and copy/paste these into a Text file and save for reference of the Default pin Mappings. 3- In the config tab select OneShot(42 or 125). Click Save. Leave this select until pins are re-mapped. 4- In the CLI type (x = motor #, yyy = STM32 pin #): resource ppm none resource motor x yyy save  5- Now select the DSHOT protocol of your choice. See: CLI resource command ALIENFLIGHTF4​ Move the motor 2 wire to the PPM pad at the bottom of the board. You can also directly connect the motor 2 signal pad with the PPM pad. There are updated board designs available with an added DSHOT solder jumper at the bottom which is making this connection. In this case, you can leave the motor 2 soldered output #2. Note: a PPM receiver can not be used in this configuration. If your controller has an SDCard slot (V2.0) you also need to use the following command in addition to get motor 4 working with DSHOT:set sdcard_dma=off Enter the following commands into the CLI window to re-map output:resource ppm none resource motor 2 A08 save  See: [AlienFlightNG Support](https://www.alienflightng.com/support/)  MOTOLAB - (MotoF3, Cyclone &amp; Tempest)​ Move motor 1 from Output #1 header pin to the PPM input header pin.See MOTOLAB board for wiring detail Follow above and to re-map output type in CLI:resource ppm none resource motor 1 A07 save See the MOTOLAB Wiki page for other Remapping info. PIKOBLX - Re-map motor 1 to the PPM pin (same as MotoLab). Solder motor 1 signal to the PPM pad leaving the SBUS jumper 'shorted'.​ To allow the use of the LED pin Re-map motor 4 to motor 5 signal out a01, which must also be soldered as such. Note: RX must use SBUS since PPM pin is now reassigned to motor 1.  Link to modification details: https://www.rcgroups.com/forums/showpost.php?p=36608148&amp;postcount=43149Follow above and to re-map output type in CLI:resource ppm none resource motor 1 A07 save  Starting with BetaFlight 3.3 no hardware mode or remap is needed anymore. SPRACINGF3EVO - Must move MOTOR 4 to new pin assignment (CLI = resource MOTOR 4 A06). Then solder ESC for motor #4 to motor output #5, fixes DMA conflict with motor outputs 2 and 4.​ Follow above and to re-map output type in CLI:resource motor 5 none resource motor 4 A06 save There also seems to be a DMA conflict with BB logging. see Github issue #2162 the fix seems to be disable BB logging DMA in the CLI:set sdcard_dma = OFF Note: SD card DMA is set to OFF on 3.1.6+ by default Since Betaflight 3.3.x with enabled DMA burst on F3 chips we have one more DMA conflict with the ledstrip if dshot are enabled. Move ledstrip to motor #8 output then enter following in the CLI to re-map ledstrip output:resource motor 8 none resource LED_STRIP 1 B01 save  SPRACINGF3MINI - Move motor #4 to the PPM pin. Then use resource command to disable PPM and map motor 4 output to B04.​ Follow above and to re-map output type in CLI:resource ppm none resource motor 4 B04 save  Limitation: BlackBox on the internal SDCard works with MultiShot but not with DShot.  KOMBINI V1 - Move motor #1 from Output #1 header pin to the PPM input header pin.​ Follow above and to re-map output type in CLI:resource ppm none resource motor 1 A07 save  Limitation: no LED functionality with DShot is allowed. Video on getting this FC working: https://www.rcgroups.com/forums/showpost.php?p=36269451&amp;postcount=1966 Starting with BetaFlight 3.3 no hardware mode or remap is needed anymore. LED stripe will also work. AIORACERF3 - Must move MOTOR 2 to new pin assignment since it has a DMA conflict with MOTOR 1:​ Connect ESC for motor 2 to 'LED' pin on the board. Then re-map motor 2 output: type in CLI:resource motor 2 A08saveThe new mapping for motor 2 conflicts wit LED_STRIP and TRANSPONDER, so make sure these two features are disabled in the configurator. EMAX FEMTO F3 - Motor 4 needs to be moved to the LED pad on the underside of the fc.​ LED_STRIP needs disabled and then motor 4 gets remapped to that pad.resource LED_STRIP noneresource motor 4 A08save Daryoon got Dshot outputs &amp; the LED Strip to both work:  Connect motor 4 to PPM pad and enter following in the CLI.resource ppm none resource motor 4 A15 save  See Github Issue #2282 Emax Femto (SPRACING F3EVO) - DSHOT 600 Motor 4 not spinning BF 3.1 for more details. BeeRotor F4 - (for use with a Hexacopter) Motor 6 needs to be moved to the LED pin on the 'SC' connector.​ LED_STRIP needs to be disabled, and then motor 6 gets remapped to this pin:feature -LED_STRIPresource motor 6 B08save AIR32 - instructions​ FC Target reported NOT working​ SPARKY2 - Oz reports: I tried DS600 and only motors 2 &amp; 4 will spin, 1 &amp; 3 will not spin, I am guessing motor output 1 &amp; 3 don't have dma's or ? FC Targets with DSHOT code added but in need of testing:​ All other targets not listed above. "},{"title":"ESCs supporting Dshot:​","type":1,"pageTitle":"Dshot & BetaFlight 3.1","url":"/betaflight.com/docs/wiki/archive/DSHOT-ESC-Protocol#escs-supporting-dshot","content":"BLHeli_32​ Announced on 3 April 2017:https://www.rcgroups.com/forums/showthread.php?2864611-BLHeli_32-Power-to-perform#post37240208 KISS 24​ https://www.rcgroups.com/forums/showthread.php?2555162-KISS-ESC-24A-Race-Edition-Flyduino-32bit-ESC 150, 300, 600, 900, 1200 See the Dshot thread (link above) for ESC code. KISS24 ESC Beep Codes: 1beep/second = too many dshot errors (more then 10% are bad) but it doesn't disarm it just tells 2beep/second = no valid signal for at last 1/3 second, it disarmed and stopped the motor (ESC failsave) 3beep/second = it couldn't start the motor or the motor stopped because it was blocked NOTE: There Seems to be an Issue with the KISS24 Firmware when running faster Loop Rates. Rossbow reports: We have been doing some testing of the Kiss 24a esc's on BF and it appears the they will not run safely at 4 or 8 khz with Dshot. If you want to test it take the props off and arm the quad in air mode and just let it run at idle on the bench. At 8khz we are seeing between 1 and 6 mins before the esc's start shutting down, it seems they may be getting too many crc errors at 8khz. At 1 and 2 khz we can get 15mins or more, So be warned as you most likely will get dead ducks at 8khz. I have tested 1.08a, 1.08f and 110b RC7 all with the same issue. Oneshot 42 and 125 are fine. BTW its not Betaflight related, it seems the reason the Kiss FC works with the 24a esc's is because it only runs on 1khz with Kiss fw and up to 4 khz on Betaflight. The higher you go in khz the shorter the time before the esc's start to shutdown. So the Kiss FC on BF fw may not show the issue because in the cold weather the flight times are short and at 4khz you may get a full 2 to 2.5min flight with no issue. My advice for using these 24a esc's on BF is either run oneshot42 or run no more than 2khz on Dshot. This is not a guarantee but the best solution until a permanent fix can be found. The Kiss hardware is more than capable of running 8 + khz so I would say its just an esc fw issue. juuuut: No haste I'm on it. I talked with Boris and i have a 8k setup here where I can reproduce it. seems to be some watchdog misbehavior in some throttle situations. but I think i will have a new version soon that fixes it! regards, Felix Alpha fix: https://www.rcgroups.com/forums/showpost.php?p=37048819&amp;postcount=3510 BLheli-S:​ DSHOT on BLHELI_S ESCs is supported starting with v16.43 and Offically supported in v16.5 and Up. Older ESCs with BB1 processor will likely only support Dshot150 &amp; 300. Here is why: https://www.rcgroups.com/forums/showpost.php?p=36025232&amp;postcount=376Now found that all BLHeli_S ESCs will run on DSHOT150, 300 &amp; 600 if using a BB2 processor and any input signal filtering is Removed. See list below for details on removing filter cap.DSHOT O'scope captures before and after the typical RC filter. BLHeli_S Rev16.6 posted on github (10Jan2017).Get Firmware from Github here. Check for the latest ESC firmware in BLHeli Github and BLHlei Suite and Documents. See BLHeli_S Knowledge Base for Which HEX to use. Note: Many of these ESC have an RC filter on the control input signal line. The cap of this RC filter must be removed to use Dshot as per the list below. It is recommended to remove the cap from any ESC even if Dshot seems to work. All other protocols will still work without this filter cap. Many ESCs are now being built and shipped without the signal filter Cap but it is best to check yourself to ensure the cap is not installed. Post on testing Dshot before and after adding Large, low ESR caps to power system:https://www.rcgroups.com/forums/showpost.php?p=36713066&amp;postcount=3133https://www.rcgroups.com/forums/showpost.php?p=36718584&amp;postcount=3144https://www.rcgroups.com/forums/showpost.php?p=36720323&amp;postcount=3157 An Over View from Cheredanine:​ Folks there are various people posting stuff that clearly don't understand or haven't read the wiki. So to straighten stuff out: Min and max throttle D shot does not use it. &quot;I changed min throttle&quot; - well that's nice but pointless Calibration​ You don't need to do it, it doesn't make any difference to dshot, claibration is about calibrating PWM pulse length, dshot is a serial protocol, not PWM, don't waste your time And the most important - Caps on or off and the wiki​ Caps on the signal line smooth the signal, removing jitter. Dshot is a rapid change of signal, it looks like jitter, the faster the signal, the more chance the caps will smooth it out, obliterating the signal. Because dshot is 16bits, some signal,values look more like jitter than others. The signal is also effected by other factors than just the caps So removing caps makes dshot more likely to work BUT the records in the wiki are not black and white, they are a record of what people have claimed to work, your quad with the same escs may not react the same. (I have 2 quads with exactly the same escs, one works fine up to dshot300 with caps on, the other needs caps off for dshot at all) What if the ESC I have is not listed or the Picture does not match?​ You are then the Experimental Tester for this ESC. Here is a link to Generic instructions on how to find signal input and cap on any BLHeli ESC:https://www.rcgroups.com/forums/showpost.php?p=36216745&amp;postcount=1645Another Post on finding the signal filter cap:https://www.rcgroups.com/forums/showpost.php?p=36897835&amp;postcount=3488 with caps off Motors are smooth from the motor tab but I get jitter on sticks​ So dshot is fine, when you use your sticks the radio, the reciever, the wiring to the receiver, the gyro, the physical components of the quad and the PID loops are all combining, something somewhere is causing the flight controller to command the shakes you are seeing, fix the problem and stop worrying about dshot Will dshot work with these escs ......​ Dshot will work on blheli_s escs (and of course kiss but there is now a seperate thread for kiss) if the escs are flashed with a version of blheli_s that supports it and the caps don't interfere with the signal. Bb1 processors will not do faster speeds, but bb2 will do up to dshot600. Just because the esc doesn't overtly say it on the literature - dshot came out after many blheli_s escs - or because it is 4 in 1 or 2 in 1 or 0.5 in 1 , well perhaps not the last, but if it is blheli_s bb2 make sure the caps are removed from the signal line and it will run dshot So if you want to run dshot - TAKE THE CAPS OFF (manufacturers are starting to ship with out the caps on) If you don't and you have problems, then guess what? Tested BLheli ESC:s​ Note: there are ESCs that are exactly the Same sold by different names. It is good to check the pictures in the Cap removal links and compare to the ESC you have in your hand. Aikon 20A/Spedix 20A Cap removal for both: https://www.rcgroups.com/forums/showpost.php?p=36182572&amp;postcount=1319Aikon SEFM v2 30A - (C-H-25) Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36214609&amp;postcount=1614Aikon SEFM v1 30A - (C-H-15) Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36213821&amp;postcount=1611Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36214609&amp;postcount=1614AIKON SEFM 20A - with cap removed Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36214609&amp;postcount=1614Armattan 20A and 30A - 2v1 need cap removal, v2 (now shipping from Armattan) work without modification Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36416316&amp;postcount=2432BeeRotor BLS20A - with cap removed Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36217144&amp;postcount=1654BumpBee_S - with cap removed Cap removal: https://nathan.vertile.com/blog/2016/11/14/flash-blheli_s-with-dshot/#flashingCicada BB2 10A -Cicada v1 20A -Cicada v2 20A -Cicada v1 30A -Cicada v2 30A - with cap removed Cap removal: https://www.electricwingman.com/guides/building-fpv-racing-quadcopter.aspxCicada 4n1 20a V2 - with caps removed Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36286446&amp;postcount=2036Cicada 35Ax4 35A - with caps removed Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36384215&amp;postcount=2337Cobra CP30A ESC 30A BLheli_S -DALRC BS25A 16.5 - with cap removed Cap removal: https://www.rcgroups.com/forums/showthread.php?t=2777858#post36223562https://www.rcgroups.com/forums/showthread.php?t=2777858DYS XS20 v1.x Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36297135&amp;postcount=2068DYS XS20A v2 or XSC20A Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36253268&amp;postcount=1878DYS XS30A - with cap removed Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36133930&amp;postcount=836https://www.rcgroups.com/forums/showpost.php?p=36245544&amp;postcount=1848DYS XSD20A | XSD30A - New product announcement:https://www.rcgroups.com/forums/showthread.php?t=2784634#post36278564Emax Lightning S 35A -Flycolor Raptor BLS-02 - Cap removal: https://www.rcgroups.com/forums/showpost.php?p=37070719&amp;postcount=10FVT Littlebee 20A-SFVT LittleBee-Spring 20Ax4 - Claims Dshot but Unknown Thread: https://www.rcgroups.com/forums/showthread.php?2800280-Favourite-FVT-LittleBee-Spring-20Ax4-4-in-1-Blheli_S-ESC-w-built-in-5V-12V-BECLB30a 4 in 1 spring edition - works with dshot600 out of the box.LittleBee_S 20A (A-H-15)- Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36181966&amp;postcount=40934Littlebee_S 30A Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36230015&amp;postcount=1745Lumenier 30AMaverick 24A - New product announcement:https://www.rcgroups.com/forums/showthread.php?2795245-Fully-compatible-with-Dshot-New-upgraded-32-bit-Maverick-24A-ESC#post36408093MRM ZEUS-S 20A - with CAP removed (see FVT littlebee-s 20a cap removal)Multistar BLHeli_S 20A - shipped without the signal filter capMultistar BLHeli_S 30A -Racerstar v2 6a - Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36268041&amp;postcount=1961Racerstar v1 20A -Racerstar v1 30A -Racerstar v2 30a - Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36209787&amp;postcount=1569Racerstar v2 12A -Racerstar v2 20A -Racerstar 25a -Racerstar v2 35A - Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36654973&amp;postcount=3006Racerstar MS15A - Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36426101&amp;postcount=336Racerstar MS25A - (A_H_20) - need signal cap removed, same cap as Racerstar MS35ARacerstar MS35A - Cap removal with before and after O'scope traces: https://www.rcgroups.com/forums/showpost.php?p=36588994&amp;postcount=2834Racerstar 4in1 20A V1 - need the signal cap(s) removed. Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36550495&amp;postcount=178Racerstar RS20Ax4 V2 Blheli_S 20A 2-4S 4 in 1 ESC - Link: https://www.rcgroups.com/forums/showthread.php?t=2782732#post36254434Cap removal:https://www.rcgroups.com/forums/showpost.php?p=36654973&amp;postcount=3006Racerstar RS20A v2 - with cap removed Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36503849&amp;postcount=2672Racerstar RS30A LiteS - with cap removed. Cap removal: https://www.rcgroups.com/forums/showthread.php?2690769-Racerstar-Blheli_S-ESCs-%28v2-just-released%29-10-for-20a-12-for-30a-30-4in1-20a/page38Racerstar RS30Ax4 v2 (4in1) - More info: https://www.rcgroups.com/forums/showthread.php?2790572-Dshot-bench-test-super-smooth-motor-spining-at-1011-REVO-and-Racerstar-BLHeli_SSchubkraft 35A 4in1 (SCHUBKRAFT X4 BB21, 45A Burst) V2 - works out of the boxSpedix ES 20 lite - with cap removed Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36203466&amp;postcount=1509Spedix 25a - with signal cap removed Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36324412&amp;postcount=2157Spedix ES30 HV 16.43 - with signal cap removed Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36205800&amp;postcount=1527TBS 25 - with cap removed Cap removal: https://www.rcgroups.com/forums/showpost.php?p=36209076&amp;postcount=1548Xrotor mini 30A BL_S - need signal cap removedXRotor Micro BLHeli-S 30A - need signal cap removedZTW polaris 30A (A_H_20 16.42) - Cap Removal Methods:​ Caution - if improper done can render the ESC unusable and have the possibility to burning the ESC upon applying power. Method 1. Clippers - used this when there is enough room, just clipped the cap in half the clipped each end off the boardMethod 2. Craft knife - used when other components are too close to use clippers, for example tbs escs - slide the blade so that it is sliding along the surface of the board and in a direction away from other components and apply force, cutting the cap off the escMethod 3. Soldering iron - Heat both ends of the cap with a tinned iron. Then wipe the cap off the pads with the iron's tip. Be Careful NOT to unsolder any other parts and examine the board with a good magnifier for any solder splashes.BeeRotor BS20A video- http://scontent.cdninstagram.com/t50.2886-16/15378420_376830535984172_2316137375807307776_n.mp4 Components tried and are not currently working:​ None To Report Components that will NOT likely ever work:​ Naze32 and clonesAll FCs with STM32F1 processorAll ESCs that can not run BLHeli_S firmware (except KISS24A) "},{"title":"Community Presets","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Community-Presets","content":"","keywords":""},{"title":"The below presets are by the community, for the community. You will see the BF version the preset is targeted toward and the pilot's name who published their recommended preset(s). We encourage communitymembers to provide their own presets on this wiki page. To do so, you simply need a Github account. Enjoy!​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#the-below-presets-are-by-the-community-for-the-community-you-will-see-the-bf-version-the-preset-is-targeted-toward-and-the-pilots-name-who-published-their-recommended-presets-we-encourage-communitymembers-to-provide-their-own-presets-on-this-wiki-page-to-do-so-you-simply-need-a-github-account-enjoy","content":""},{"title":"IMPORTANT: These settings are NOT provided or endorsed by the Betaflight project. They are examples that others have found helpful for their particular quad. THEY MAY NOT BE SUITABLE FOR YOUR QUAD! A better use might be to examine similar configurations to yours and get ideas on possible tuning directions rather than blindly copy/pasting someone else's settings. Always test carefully and safely.​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#important-these-settings-are-not-provided-or-endorsed-by-the-betaflight-project-they-are-examples-that-others-have-found-helpful-for-their-particular-quad-they-may-not-be-suitable-for-your-quad-a-better-use-might-be-to-examine-similar-configurations-to-yours-and-get-ideas-on-possible-tuning-directions-rather-than-blindly-copypasting-someone-elses-settings-always-test-carefully-and-safely","content":"To use, simply copy and paste the preset CLI commands into the Betaflight CLI tab. After the paste, type &quot;save&quot; and hit [enter]. That will load the settings of the preset which you can see (mostly) through the GUI tabs. BF 4.2 Betaflight 4.2 with configurator 10.7 introduces significant and helpful features for tuning, many of which are highly recommended. These features include VBat Sag Compensation, Feed Forward Interpolation, fixed I-Term Relax operation on Setpoint, and looptime improvements that allow for more stable filtering calculations. Existing features can also be leveraged to produce better performing and more robust tunes, including DMin/Boost Gain &amp; Advance, TPA, and Thrust Linearization VBat Sag Compensation is a feature which aims to produce consistent motor response across the entire flyable voltage profile of a battery pack, and does this by slightly reducing peak motor outputs from the mixer at high voltage, and increases these values as battery sag comes into play. This is a highly recommended feature, although if you rely on 'feeling sag' as an indicator to land shortly, or are concerned about damaging batteries, particularly 6-Cell batteries on relatively efficient rigs, you can use values lower than 100 to receive most of the benefits, and also receive a small amount of extra initial 'punch' on fully charged batteries with values such as vbat_sag_comp = 70. Feed Forward (FF) Interpolation has been improved, which uses a trailing average of 2-4 radio control setpoint samples to set feed-forward input values (which are then multiplied by the FF Gains). For noisier or less consistent RC signals (e.g. FrSky R9), using ff_interpolate_sp = 4 is a significant improvement, while more consistent signals (CRSFShot, AFHDS2A-IBUS, Futaba FASSTer) produce smooth enough traces to use ff_interpolate_sp = 2 (default) values with lower automatic RC_Smoothness values (around 8 is still stable enough for long range capable 7&quot; craft). I Term Relax now works correctly on Setpoint mode at values below 20. Particularly for large craft, lower values result in reduction or complete elimination of I-Term driven bounceback on flips and rolls. DMin/Boost tools such as the DMin-Gain and DMin-Advance can be leveraged to increase effective D gains during stick movements (dMin Advance mostly) and propwash (dMin Gain mostly). Values of Gain = 44-55 and Advance values of 80-100 can result in much higher and more consistent D-Term response to damp P-term step responses, while still allowing for lower DMin values during normal flight that does not amplify higher frequency noise. Thrust_Linear is intended to linearize aspects of thrust delivery (which is typically a quadratic response to throttle position) in order to produce more consistent PID response across the range of throttle inputs. In practical implementations, it is most frequently used as a way to increase PID gains at low throttle to compensate for lower authority craft (low voltage 65mm and 3&quot; lightweight quadcopters, as well as 6-8&quot; quadcopters on smaller motors can benefit from values of thrust_linear from 20-30 in order to remove low-RPM bobbles and instability. Quite often, best results are achieved by simultaneously increasing the TPA (Throttle PID Attenuation - most practically this is a throttle-DTerm-attenuation factor at default) value, and moving the breakpoint higher (e.g. TPA = 0.72-0.78, TPA_Breakpoint = 1270-1420). This combined effect allows for boosted PID response at low throttle values, but does not result in excessive motor heat from amplified D gains at high throttle. Preferred tuning methods can lean heavily on the Slider functionality in the 10.7 configurator, with many archetypes of copters being fairly quick to tune quickly with sliders based on quick information, following a standard procedure of determining the correct P:D gain ratio, incrementing the P&amp;D Gains until oscillations or trilling sounds are observed (then reducing 1-2 clicks), then finally adjusting FeedForward through gain sliders and FeedForward Transition (which reduces effective feed forward gain from center point out to the specified value linearly) until desired stick feel is achieved. Note: The D Ratio tuning slider in the 10.7 Configurator is different from previous versions - moving the slider to the right increases D gains while leaving the P gains as-is. Values of 1.2 on the P:D Balance slider produce gains of P≈D, while 1.0 produces a P:D ratio where D gains are roughly 0.8x of P gains. Dynamic Notch Filter ranges are specified by minimum and maximum Hz - if you transport a tune from BF4.1.X to BF4.2, you will need to change the dyn_notch_max_hz value to an actual value in Hertz - recommend setting this value to dyn_notch_max_hz = 350 for most applications. "},{"title":"Pilot: Krunked​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#pilot-krunked","content":"About: This is my base tune that i give everyone to try. slight adjustments might be needed but this works GREAT for 99% of pilots. you must be using the below highlighted esc settings and RPM filtering!! F7 = DShot600 8k8k, F4= DShot300 8k4k.. Lots of people complain about 4.2 'wobbles' -- THRUST_LINEAR = 25 is what solves this with the right PD gain... it BOOSTS the PIDs' at 0 throttle, giving low-end authority back, due to the loss of torque from 48khz. but 48khz markedly flies better all around in all of my quads and in all of the people ive had use these settings. "},{"title":"5inch quad base tune. 48khz, 23 timing, demag high, thrust_linear = 25​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#5inch-quad-base-tune-48khz-23-timing-demag-high-thrust_linear--25","content":"Krunked's Universal CLI Settings 5inch - Copy/Paste # ESC SETTINGS # 48khz, 23 motor timing, demag high *this is important for this tune* #Settings for 5inch quads set feedforward_transition = 100 #this just makes FF attenuated across the stick, reducing its effect near center stick and being 100% engaged at full deflection set iterm_relax_cutoff = 10 set ff_spike_limit = 55 set ff_smooth_factor = 50 set ff_boost = 0 set vbat_sag_compensation = 100 set anti_gravity_gain = 7000 set iterm_windup = 30 set pidsum_limit = 1000 set thrust_linear = 25 # this is the golden setting for wobbles and 48khz set rc_smoothing_derivative_type = PT1 set rc_smoothing_auto_smoothness = 20 # PID settings for 5 inch quads 48khz 23 timing # sliders = 1.0 master, 1.3 pd balance, 1.2 pd gain, 1.5 stick response, DMIN OFF. set p_pitch = 55 set d_pitch = 50 set f_pitch = 143 set p_roll = 50 set d_roll = 46 set f_roll = 135 set p_yaw = 54 set f_yaw = 135 set d_min_roll = 0 set d_min_pitch = 0 #FILTER settings (these are safe for any quad, you can get more aggressive based on your gyro logs and noise profiles, but these are good to start) # set gyro_rpm_notch_q = 800 # use this if u want to reduce delay further, but only if you have noise free using 800. set gyro_lowpass_hz = 300 set gyro_lowpass2_hz = 0 set dyn_notch_width_percent = 8 # feel free to use 0 here, if you don't have noise.... set dyn_notch_q = 200 # this can go to 250, if 250 is sufficient and crushing any resonance/peak noise bleeding around the rpm notches set dyn_notch_min_hz = 90 set dyn_notch_max_hz = 450 set dyn_lpf_gyro_min_hz = 0 set dyn_lpf_dterm_min_hz = 105 set dyn_lpf_dterm_max_hz = 225 set dyn_lpf_dterm_curve_expo = 10 # this setting makes the dyn lpf on D shoot up must faster in the throttle range, reducing delay set dterm_lowpass2_hz = 250 # krunked freestyle rates set rates_type = KISS set roll_rc_rate = 145 set pitch_rc_rate = 145 set yaw_rc_rate = 143 set roll_expo = 22 set pitch_expo = 22 set yaw_expo = 18 set roll_srate = 75 set pitch_srate = 75 set yaw_srate = 74 save  "},{"title":"Pilot: Tehllama​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#pilot-tehllama","content":"About: Tehllama prefers a racing feel, set up for racing rates that achieves minimum step response latency and maximizes motor temperature overhead. While a sharper tune is possible, for racing setups these carry lots of margin for completing heats on damaged props. Tehllama's Universal CLI Settings - Copy/Paste # Settings for All Quadcopters set debug_mode = GYRO_SCALED set iterm_relax = RPY set vbat_pid_gain = OFF set vbat_sag_compensation = 70 set yaw_motors_reversed = ON set small_angle = 180 # LlamaRates - 360°/s on Roll/Pitch, 270°/s on Yaw set roll_rc_rate = 72 set pitch_rc_rate = 72 set yaw_rc_rate = 54 set roll_expo = 0 set pitch_expo = 0 set yaw_expo = 0 set roll_srate = 60 set pitch_srate = 60 set yaw_srate = 60 #LaunchControl_Preferred set launch_control_mode = PITCHONLY set launch_trigger_allow_reset = OFF set launch_angle_limit = 60 save  "},{"title":"Racing Configurations - RotorBuild Description Links and CLI Copy/Paste Tunes​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#racing-configurations---rotorbuild-description-links-and-cli-copypaste-tunes","content":" 3&quot; 1105 5500KV 3S on Gemfan 3016-3 (Diatone GTB-339) [F411 on DShot300]​ CLI Copy/Paste # For these lightweight 3&quot; Craft, 48kHz PWM, Bidirectional DShot, MedHigh/23° Timing, 0.25 Startup Power, and DemagComp=Low # Settings for All Quadcopters - Motors Reversed set debug_mode = GYRO_SCALED set iterm_relax = RPY set vbat_pid_gain = OFF set vbat_sag_compensation = 70 set small_angle = 180 # Filters set gyro_lowpass_hz = 275 set gyro_lowpass2_hz = 425 set dyn_notch_width_percent = 0 set dyn_notch_q = 250 set dyn_notch_min_hz = 115 set dyn_notch_max_hz = 444 set dyn_lpf_gyro_min_hz = 0 # Configuration - 1105/1106/1204 Motors set dshot_bidir = ON set motor_pwm_protocol = DSHOT300 set motor_poles = 12 set dshot_idle_value = 475 # Dynamic Idle Set Below set tpa_rate = 72 set tpa_breakpoint = 1370 # Profiles 3S and 2S - Uses Thrust_Linear set thrust_linear = 20 profile 0 # profile 0 - 3S for 450-550 mAh batteries set dyn_lpf_dterm_min_hz = 98 set dyn_lpf_dterm_max_hz = 333 set dterm_lowpass2_hz = 225 set vbat_sag_compensation = 70 set anti_gravity_gain = 4400 set iterm_rotation = ON set iterm_relax = RPY set iterm_relax_cutoff = 33 set yaw_lowpass_hz = 115 set throttle_boost = 8 set p_pitch = 51 set i_pitch = 72 set d_pitch = 44 set f_pitch = 238 set p_roll = 47 set i_roll = 68 set d_roll = 40 set f_roll = 222 set p_yaw = 50 set i_yaw = 72 set f_yaw = 222 set d_min_roll = 28 set d_min_pitch = 30 set d_min_boost_gain = 33 set d_min_advance = 0 set auto_profile_cell_count = 3 set launch_control_mode = PITCHONLY set launch_trigger_allow_reset = OFF set launch_angle_limit = 60 set ff_max_rate_limit = 102 set ff_smooth_factor = 33 set ff_boost = 20 set dyn_idle_min_rpm = 16 profile 1 # profile 1 - 2S for 450-650mAh batteries set dyn_lpf_dterm_min_hz = 98 set dyn_lpf_dterm_max_hz = 288 set dterm_lowpass2_hz = 240 set anti_gravity_gain = 4400 set iterm_rotation = ON set iterm_relax = RPY set iterm_relax_cutoff = 33 set yaw_lowpass_hz = 115 set throttle_boost = 10 set p_pitch = 67 set i_pitch = 81 set d_pitch = 55 set f_pitch = 238 set p_roll = 60 set i_roll = 77 set d_roll = 50 set f_roll = 222 set p_yaw = 65 set i_yaw = 81 set f_yaw = 222 set d_min_roll = 38 set d_min_pitch = 35 set d_min_boost_gain = 33 set d_min_advance = 0 set auto_profile_cell_count = 2 set ff_max_rate_limit = 102 set ff_smooth_factor = 33 set ff_boost = 25 set dyn_idle_min_rpm = 16 save   3&quot; 1408 4100KV 4S on Gemfan 3052-3​ Build Link: [https://rotorbuilds.com/build/18675] CLI Copy/Paste # For these lightweight 3&quot; Craft, 48kHz PWM, Bidirectional DShot, MedHigh/23° Timing, 0.25 Startup Power, and DemagComp=Low # Settings for All Quadcopters - Motors Reversed set debug_mode = GYRO_SCALED set iterm_relax = RPY set vbat_pid_gain = OFF set vbat_sag_compensation = 70 set small_angle = 180 # Filters set gyro_lowpass2_hz = 500 set dyn_notch_width_percent = 0 set dyn_notch_q = 250 set dyn_notch_min_hz = 115 set dyn_notch_max_hz = 333 set dyn_lpf_gyro_min_hz = 400 set dyn_lpf_gyro_max_hz = 1000 # Configuration - 1407/1408 Motors # Users of 1507 motors should verify by counting magnets set dshot_bidir = ON set motor_pwm_protocol = DSHOT300 set motor_poles = 12 # Profiles - Aggressive Props set thrust_linear = 20 set gyro_rpm_notch_harmonics = 2 set gyro_rpm_notch_q = 750 profile 0 # profile 0 - 3S 650-1000mAh batteries set dyn_lpf_dterm_min_hz = 112 set dyn_lpf_dterm_max_hz = 272 set dterm_lowpass2_hz = 240 set vbat_sag_compensation = 88 set anti_gravity_gain = 5000 set iterm_rotation = ON set iterm_relax = RPY set iterm_relax_cutoff = 33 set yaw_lowpass_hz = 111 set throttle_boost = 10 set p_pitch = 64 set d_pitch = 56 set f_pitch = 190 set p_roll = 59 set d_roll = 52 set f_roll = 180 set p_yaw = 63 set f_yaw = 180 set d_min_roll = 39 set d_min_pitch = 42 set d_min_boost_gain = 33 set d_min_advance = 0 set auto_profile_cell_count = 3 # Launch Stand Mode set launch_control_mode = PITCHONLY set launch_trigger_allow_reset = OFF set launch_angle_limit = 60 set ff_max_rate_limit = 102 set ff_smooth_factor = 33 set ff_boost = 22 set dyn_idle_min_rpm = 16 profile 1 # profile 1 - 4S for 520-850mAh batteries set dyn_lpf_dterm_min_hz = 112 set dyn_lpf_dterm_max_hz = 320 set dyn_lpf_dterm_curve_expo = 8 set dterm_lowpass2_hz = 240 set vbat_sag_compensation = 70 set anti_gravity_gain = 4400 set iterm_rotation = ON set iterm_relax = RPY set iterm_relax_cutoff = 33 set yaw_lowpass_hz = 111 set i_pitch = 81 set f_pitch = 190 set p_roll = 41 set i_roll = 77 set f_roll = 180 set i_yaw = 81 set f_yaw = 180 set d_min_roll = 25 set d_min_pitch = 27 set d_min_boost_gain = 33 set d_min_advance = 0 set auto_profile_cell_count = 4 # Launch Stand Mode set launch_control_mode = PITCHONLY set launch_trigger_allow_reset = OFF set launch_angle_limit = 60 set ff_max_rate_limit = 102 set ff_smooth_factor = 33 set dyn_idle_min_rpm = 16 save   5&quot; Neutron-R Hybrid-SX :: 2150KV 6S // 2650KV 5S on Gemfan 51433/51466/51477​ Build Link: [https://rotorbuilds.com/build/18676] Build Link: [https://rotorbuilds.com/build/21176] CLI Copy/Paste # For racing 5&quot; craft, preferred ESC settingss are 48kHz PWM, 23° Timing, 0.25 Rampup Power, DemagComp=Low # Settings for All Quadcopters - Motors Reversed set debug_mode = GYRO_SCALED set iterm_relax = RPY set vbat_pid_gain = OFF set vbat_sag_compensation = 70 set small_angle = 180 # Filters - Aggressive set gyro_lowpass_hz = 222 set gyro_lowpass2_hz = 500 set dyn_notch_width_percent = 0 set dyn_notch_q = 333 set dyn_notch_min_hz = 115 set dyn_notch_max_hz = 444 set dyn_lpf_gyro_min_hz = 0 set dshot_idle_value = 440 set dshot_bidir = ON # Profiles - Aggressive set gyro_rpm_notch_harmonics = 2 set gyro_rpm_notch_q = 750 # Default PID/Filter profile - 6S profile 0 set auto_profile_cell_count = 6 set dyn_lpf_dterm_min_hz = 105 set dyn_lpf_dterm_max_hz = 288 set dyn_lpf_dterm_curve_expo = 8 set dterm_lowpass2_hz = 210 set vbat_sag_compensation = 70 set anti_gravity_gain = 5000 set iterm_rotation = ON set iterm_relax = RPY set yaw_lowpass_hz = 105 set p_pitch = 41 set i_pitch = 72 set d_pitch = 40 set p_roll = 37 set i_roll = 68 set d_roll = 37 set p_yaw = 40 set i_yaw = 72 set d_min_roll = 24 set d_min_pitch = 26 set f_pitch = 190 set f_roll = 180 set f_yaw = 180 set d_min_boost_gain = 33 set d_min_advance = 0 set ff_max_rate_limit = 102 set ff_smooth_factor = 33 set ff_boost = 15 # Launch Stand Operations - First Arm Only set launch_control_mode = PITCHONLY set launch_trigger_allow_reset = OFF set launch_angle_limit = 60 # Auto-Applies for 5S profile 1 set auto_profile_cell_count = 5 set dyn_lpf_dterm_min_hz = 105 set dyn_lpf_dterm_max_hz = 266 set dyn_lpf_dterm_curve_expo = 9 set dterm_lowpass2_hz = 210 set vbat_sag_compensation = 75 set anti_gravity_gain = 5000 set iterm_rotation = ON set iterm_relax = RPY set yaw_lowpass_hz = 105 set i_pitch = 81 set d_pitch = 45 set p_roll = 41 set i_roll = 77 set d_roll = 41 set i_yaw = 81 set d_min_roll = 27 set d_min_pitch = 30 set f_pitch = 190 set f_roll = 180 set f_yaw = 180 set d_min_boost_gain = 33 set d_min_advance = 0 set ff_max_rate_limit = 102 set ff_smooth_factor = 33 set ff_boost = 18 # Launch Stand Operations - First Arm Only set launch_control_mode = PITCHONLY set launch_trigger_allow_reset = OFF set launch_angle_limit = 60 # Auto-Applies for 4S profile 2 set auto_profile_cell_count = 4 set dyn_lpf_dterm_min_hz = 98 set dyn_lpf_dterm_max_hz = 238 set dyn_lpf_dterm_curve_expo = 10 set dterm_lowpass2_hz = 210 set vbat_sag_compensation = 80 set anti_gravity_gain = 5000 set iterm_rotation = ON set iterm_relax = RPY set yaw_lowpass_hz = 105 set p_pitch = 55 set d_pitch = 55 set p_roll = 50 set d_roll = 50 set p_yaw = 54 set d_min_roll = 33 set d_min_pitch = 36 set f_pitch = 190 set f_roll = 180 set f_yaw = 180 set d_min_boost_gain = 33 set d_min_advance = 0 set ff_max_rate_limit = 102 set ff_smooth_factor = 33 set ff_boost = 21 # Launch Stand Operations - First Arm Only set launch_control_mode = PITCHONLY set launch_trigger_allow_reset = OFF set launch_angle_limit = 60 # restore default profile selection profile 0 save   7&quot; 2408 1622KV 6S // 7&quot; 2507 1500KV 6S // 7&quot; 2408 1900KV 5S​ Build Link: [https://rotorbuilds.com/build/21178] Build Link: [https://rotorbuilds.com/build/10199] CLI Copy/Paste # For these 7&quot; Craft, I use 48kHz PWM, Med/19° Timing, 0.125 Startup Power, and DemagComp=Low # Settings for All Quadcopters - Motors Reversed set debug_mode = GYRO_SCALED set iterm_relax = RPY set vbat_pid_gain = OFF set vbat_sag_compensation = 70 set yaw_lowpass_hz = 100 set yaw_motors_reversed = ON set small_angle = 180 # Filters - 7&quot; Biblade, 7&quot; Triblade, F7 Folding Compatible set gyro_lowpass2_hz = 500 set dyn_notch_width_percent = 0 set dyn_notch_q = 333 set dyn_notch_min_hz = 80 set dyn_notch_max_hz = 270 set dyn_lpf_gyro_min_hz = 400 set dyn_lpf_gyro_max_hz = 1000 # Configuration - Racing, Mountain Surfing, Cinematic Cruising, and Chasing Fast Cars set dshot_bidir = ON set motor_pwm_protocol = DSHOT300 set rc_smoothing_auto_smoothness = 20 set ff_interpolate_sp = AVERAGED_3 set feedforward_transition = 33 # Profile - Low-Throttle Smoothness Enhanced set dyn_lpf_dterm_min_hz = 91 set dyn_lpf_dterm_max_hz = 221 set dterm_lowpass2_hz = 150 set iterm_rotation = ON set thrust_linear = 33 # This is a fairly high thrust_linear value, but for lower authority (2408, 2507) this is what I've found works set tpa_rate = 75 set tpa_breakpoint = 1350 set iterm_relax_type = SETPOINT set iterm_relax_cutoff = 7 set throttle_boost = 15 set p_pitch = 72 set i_pitch = 117 set d_pitch = 72 set f_pitch = 148 set p_roll = 65 set i_roll = 111 set d_roll = 65 set f_roll = 140 set p_yaw = 70 set i_yaw = 117 set f_yaw = 140 set d_min_roll = 43 set d_min_pitch = 47 set d_min_boost_gain = 44 set d_min_advance = 100 set dshot_idle_value = 399 set idle_min_rpm = 12 # LaunchControl_Preferred - Yes, I do actually use launch mode on my Long Range rigs set launch_control_mode = PITCHONLY set launch_trigger_allow_reset = OFF set launch_angle_limit = 60 save  "},{"title":"Pilot: Furadi​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#pilot-furadi","content":"Furadi 5&quot; NBD Infinity CLI Settings - Copy/Paste Quad - (not affiliate links) RR CL1 [https://tinyurl.com/trq8dat]NBD Infinity 20x20 [https://tinyurl.com/wgatgat]Hypetrain Vanover [https://tinyurl.com/rdoaxpb]Caddx Vista [https://tinyurl.com/rebl4xy]Hero Mount - [https://tinyurl.com/ycblvodd]Pyrodrone 1100 6s - [https://tinyurl.com/wtd7jph]Gemfan 51466 - [https://tinyurl.com/ycjn76ag] # DIFF for Furadi 5&quot; NBD Infinity Build # name: INFINITY # master set gyro_lowpass2_hz = 500 set dyn_notch_width_percent = 0 set dyn_notch_q = 250 set dyn_lpf_gyro_min_hz = 400 set dyn_lpf_gyro_max_hz = 1000 set dshot_bidir = ON set yaw_motors_reversed = OFF set yaw_deadband = 10 profile 0 # profile 0 set dyn_lpf_dterm_min_hz = 140 set dyn_lpf_dterm_max_hz = 340 set dyn_lpf_dterm_curve_expo = 7 set dterm_lowpass2_hz = 300 set vbat_sag_compensation = 50 set throttle_boost = 0 set p_pitch = 90 set i_pitch = 117 set d_pitch = 60 set f_pitch = 112 set p_roll = 82 set i_roll = 111 set d_roll = 55 set f_roll = 105 set p_yaw = 88 set i_yaw = 117 set f_yaw = 105 set d_min_roll = 36 set d_min_pitch = 39 set d_min_advance = 32 rateprofile 0 # rateprofile 0 - Furadi Rates set rates_type = KISS set roll_rc_rate = 90 set pitch_rc_rate = 90 set yaw_rc_rate = 90 set roll_srate = 77 set pitch_srate = 75 save  Furadi 7&quot; FR-7 NBD Infinity CLI Settings - Copy/Paste FR7 - Frame files - [https://www.thingiverse.com/thing:359...]Print Files - [https://www.thingiverse.com/thing:360...] Newbeedrone Infinity Stack - [https://tinyurl.com/ulqey7j]Hyperlite 2408.5 1922kv - [https://tinyurl.com/r7jkk3m]Dynogy 6s 3700 65c - [https://tinyurl.com/w5wmtf7]HQ 7x4x3 - [https://tinyurl.com/uvvdu96]Lumenier AXII 2 LR - [https://tinyurl.com/u9la6zg] # DIFF for Furadi 7&quot; NBD Infinity Build # master set gyro_lowpass2_hz = 500 set dyn_notch_width_percent = 0 set dyn_notch_q = 250 set dyn_lpf_gyro_min_hz = 400 set dyn_lpf_gyro_max_hz = 1000 set dshot_bidir = ON # GPS Setup (Optional) set failsafe_procedure = GPS-RESCUE set yaw_motors_reversed = OFF set gps_provider = UBLOX set gps_sbas_mode = AUTO set gps_ublox_use_galileo = ON set gps_set_home_point_once = ON set gps_rescue_initial_alt = 60 set gps_rescue_descent_dist = 120 set gps_rescue_min_sats = 6 set gps_rescue_allow_arming_without_fix = ON set gps_rescue_alt_mode = FIXED_ALT set yaw_deadband = 10 set pid_process_denom = 2 profile 0 # profile 0 set dyn_lpf_dterm_min_hz = 140 set dyn_lpf_dterm_max_hz = 340 set dterm_lowpass2_hz = 300 set vbat_sag_compensation = 80 set throttle_boost = 0 set p_pitch = 77 set i_pitch = 108 set d_pitch = 58 set f_pitch = 114 set p_roll = 71 set i_roll = 102 set d_roll = 53 set f_roll = 108 set p_yaw = 76 set i_yaw = 108 set f_yaw = 108 set d_min_roll = 35 set d_min_pitch = 38 set d_min_advance = 27 # rateprofile 0 - Furadi Rates set rates_type = KISS set roll_rc_rate = 90 set pitch_rc_rate = 90 set yaw_rc_rate = 90 set roll_srate = 77 set pitch_srate = 75 save  "},{"title":"Pilot: JJang FPV​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#pilot-jjang-fpv","content":"About: 'Responsive but Smooth' feel, set up for 5&quot; normal freestyle(cinematic, juicy and more) with Gopro 6/7/8, 4S battery. There is no propwash at all. Caution: You should activate 'Bidirectional Dshot' for rpm filter and adjust 'idle_min_rpm' about 70% of dshot_idle_rpm or start with '21'. JJang's PIDs: 5&quot; 4S Normal Freestyle CLI Settings - Copy/Paste set gyro_lowpass2_hz = 300 set dyn_notch_width_percent = 0 set dyn_notch_q = 250 set dyn_notch_min_hz = 90 set dyn_notch_max_hz = 515 set dyn_lpf_gyro_min_hz = 240 set dyn_lpf_gyro_max_hz = 600 set min_check = 1020 set max_check = 1995 set rc_smoothing_auto_smoothness = 7 set blackbox_device = NONE set min_throttle = 1020 set dshot_idle_value = 500 set dshot_bidir = ON set use_unsynced_pwm = OFF set motor_pwm_protocol = DSHOT300 set deadband = 2 set yaw_deadband = 2 set pid_process_denom = 2 set gyro_rpm_notch_q = 700 set dyn_lpf_dterm_min_hz = 84 set dyn_lpf_dterm_max_hz = 204 set dyn_lpf_dterm_curve_expo = 7 set dterm_lowpass2_hz = 180 set vbat_sag_compensation = 100 set anti_gravity_gain = 3900 set feedforward_transition = 40 set iterm_relax_type = GYRO set iterm_relax_cutoff = 20 set yaw_lowpass_hz = 100 set throttle_boost = 7 set throttle_boost_cutoff = 25 set p_pitch = 65 set i_pitch = 104 set d_pitch = 58 set f_pitch = 116 set p_roll = 60 set i_roll = 99 set d_roll = 54 set f_roll = 109 set p_yaw = 69 set i_yaw = 99 set f_yaw = 109 set d_min_roll = 35 set d_min_pitch = 39 set ff_interpolate_sp = AVERAGED_3 set ff_spike_limit = 70 set ff_smooth_factor = 40 set idle_min_rpm = 21 set roll_rc_rate = 120 set pitch_rc_rate = 120 set yaw_rc_rate = 175 set roll_expo = 15 set pitch_expo = 15 set yaw_expo = 20 set roll_srate = 72 set pitch_srate = 75 set yaw_srate = 41 set tpa_rate = 70 set tpa_breakpoint = 1150 set throttle_limit_type = CLIP set throttle_limit_percent = 98 save  BF 4.1.X Betaflight 4.1.X with configurator 10.6 Note: the P:D Ratio slider in the 10.6 Configurator is reversed from the later releases - in 10.6 moving the slider to right increases P gains while decreasing D gains, which is not the behavior in the 10.7 Configurator. A value of 0.8 on the PD Balance slider produce gains of P≈D, while 1.0 produces a P:D ratio where D gains are roughly 0.8x of P gains. There are added features, and a couple of noteworthy bugs present in 4.1.X. Setup for enabling bidirectional DShot features (RPM filtering, dynamic idle) is simpler in BF4.1.X, as is configuring RC Smoothing using the configurator parameters. With utilizing RPM Notch filters for attenuation of motor noise bands, changes in lowpass filtering (particularly dynamic lowpass filtering) are typically required in order to achieve the substantial improvements possible with RPM filtering. Feed Forward (FF) Interpolation has been introduced, which uses a trailing average of 2 radio control setpoint samples to set feed-forward input values (which are then multiplied by the FF Gains). For noisier or less consistent RC signals (e.g. FrSky R9), using ff_interpolate_sp = averaged is an improvement, though BF4.2 and later allows for higher numbers of samples to be required (up to 4). The I-Term Relax mode in Setpoint does not achieve any effective values below 20 - for larger craft where lower iTermRelax values are needed or tuning strategies that rely on removing I term involvement to tune P/D Ratios and gain, shift this to Gyro (in 4.2 and later, you can use Setpoint again). VBat PID Compensation is often helpful for tuning flights, and is a recommended setting when conducting blackbox logging, or if craft authority as battery voltage approaches sag points is important. This has been effectively replaced by VBAT Sag compensation in BF4.2 releases. Preferred tuning methods can lean heavily on the Slider functionality in the 10.6 configurator, with many archetypes of copters being fairly quick to tune quickly with sliders based on quick information, following a standard procedure of determining the correct P:D gain ratio, incrementing the P&amp;D Gains until oscillations or trilling sounds are observed (then reducing 1-2 clicks), then finally adjusting FeedForward through gain sliders and FeedForward Transition (which reduces effective feed forward gain from center point out to the specified value linearly) until desired stick feel is achieved. Running higher Yaw P gains is entirely possible, although sliders do not allow this behavior - the defaults in BF4.2 (using the same effective PID gains) allow for running Yaw P Gains equal to Roll P gains, and works very well for most craft, so do not be concerned if during the tuning process higher Yaw P gains are required, you should proceed to increase those gains until matching Roll P gains without concerns. BF 4.0.X  Back to 4.0.x Defaults​ This will take your setup back to BF 4.0.x defaults CLI Copy\\Paste #Filter Settings set dyn_notch_min_hz = 150 set dyn_lpf_gyro_min_hz = 150 set dyn_lpf_gyro_max_hz = 450 set gyro_lowpass_hz = 0 set gyro_lowpass_type = BiQUAD set gyro_lowpass2_hz = 150 set gyro_lowpass2_type = PT1 set dyn_lpf_dterm_min_hz = 150 set dyn_lpf_dterm_max_hz = 250 set dterm_lowpass_type = BiQUAD set dterm_lowpass_hz = 0 set dterm_lowpass2_type = PT1 set dterm_lowpass2_hz = 100 set dyn_notch_width_percent = 8 #Dual Dynamic Notches is as default; 8% spread from center to center. #PID Gains Settings set vbat_pid_gain = OFF set anti_gravity_gain = 5000 set p_pitch = 46 set i_pitch = 70 set d_pitch = 38 set f_pitch = 75 set p_roll = 42 set i_roll = 60 set d_roll = 35 set f_roll = 70 set p_yaw = 35 set i_yaw = 100 set d_yaw = 0 set f_yaw = 0 set d_min_pitch = 20 set d_min_roll = 22 set d_min_boost_gain = 27 set d_min_advance = 20 set pidsum_limit = 500 #restricted to 50% by default #For racing use &quot;Setpoint&quot; and cutoff = 20 set iterm_relax_type = Setpoint set iterm_relax_cutoff = 20 #TPA Settings (which is D-term only by default) set tpa_rate = 50 set tpa_breakpoint = 1500 save   "},{"title":"Pilot: UAV TECH​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#pilot-uav-tech","content":"ALWAYS CHECK YOUR MOTOR TEMPS AFTER A SHORT 15 SECOND FORWARD FLIGHT WARNING: If your mechanical/electrical issues are not addressed (most of the time those are the issues folks have), the below settings may require heavier filtering and lower PID gains (the BF default). Heavier filtering and lower PID gains can provide for cooler motors, but also has worse flight performance. A clean build is when a spectrograph of the RAW gyro noise trace (Debug_Mode=Gyro_Scaled) on a FULL &amp; HARD flight looks like the below or better: ![https://github.com/spatzengr/UAVtech-Resources/blob/master/Gyro_Raw%20Noise%20Profiles/Clean/Nova%20on%20BF4.0.png] &quot;Better&quot; means the spektrograph lines are lower or have more well defined peaks. An important factor is the dip in raw motor vibrations (&quot;noise&quot;) from 80 to 200hz.  Brushless Whoop Class (based on Mobula 7 w/ 2s)​ CLI Copy\\Paste #Filter Settings set dyn_notch_min_hz = 100 set dyn_lpf_gyro_min_hz = 100 set dyn_lpf_gyro_max_hz = 300 set gyro_lowpass_type = PT1 set gyro_lowpass_hz = 0 set gyro_lowpass2_type = PT1 set gyro_lowpass2_hz = 0 set dyn_lpf_dterm_min_hz = 70 set dyn_lpf_dterm_max_hz = 170 set dterm_lowpass_type = BiQUAD set dterm_lowpass_hz = 0 set dterm_lowpass2_type = PT1 set dterm_lowpass2_hz = 0 #PID Gains Settings set vbat_pid_gain = ON set anti_gravity_gain = 5000 set p_pitch = 80 set i_pitch = 25 set d_pitch = 80 set f_pitch = 100 set p_roll = 80 set i_roll = 25 set d_roll = 80 set f_roll = 100 set p_yaw = 90 set i_yaw = 90 set d_yaw = 0 set f_yaw = 100 set d_min_pitch = 0 set d_min_roll = 0 set d_min_boost_gain = 30 set d_min_advance = 0 set pidsum_limit = 1000 #unleashes PID Sum to be 100% (not restricted to 50% by default) #Assumes Freestyle | For racing use &quot;Setpoint&quot; and cutoff = 20 set iterm_relax_type = GYRO set iterm_relax_cutoff = 10 #TPA Settings (which is D-term only by default) set tpa_rate = 80 set tpa_breakpoint = 1750 save   2&quot; - 3&quot; Quad - 11xx-12xx Motors​ (in coordination with George Hartmann) CLI Copy\\Paste #Filter Settings set gyro_lowpass_type = BiQUAD set dyn_notch_min_hz = 150 set dyn_lpf_gyro_min_hz = 150 set dyn_lpf_gyro_max_hz = 700 set dyn_lpf_dterm_min_hz = 150 set dyn_lpf_dterm_max_hz = 250 set dterm_lowpass_type = BiQUAD set dterm_lowpass2_hz = 150 #PID Gains Settings set vbat_pid_gain = ON set anti_gravity_gain = 5000 set p_pitch = 33 set i_pitch = 85 set d_pitch = 35 set p_roll = 28 set i_roll = 78 set d_roll = 32 set d_min_pitch = 18 set d_min_roll = 16 set d_min_boost_gain = 30 set d_min_advance = 0 set pidsum_limit = 1000 #unleashes PID Sum to be 100% (not restricted to 50% by default) #Assumes Freestyle | For racing use &quot;Setpoint&quot; and cutoff = 20 set iterm_relax_type = GYRO set iterm_relax_cutoff = 10 #TPA Settings (which is D-term only by default) set tpa_rate = 80 set tpa_breakpoint = 1800 save   3&quot; Quad - 14xx-15xx Motors​ (in coordination with George Hartmann) CLI Copy\\Paste #Filter Settings set gyro_lowpass_type = BiQUAD set dyn_notch_min_hz = 150 set dyn_lpf_gyro_min_hz = 150 set dyn_lpf_gyro_max_hz = 650 set dyn_lpf_dterm_min_hz = 150 set dyn_lpf_dterm_max_hz = 250 set dterm_lowpass_type = BiQUAD set dterm_lowpass2_hz = 150 #PID Gains Settings set vbat_pid_gain = ON set anti_gravity_gain = 5000 set p_pitch = 38 set i_pitch = 85 set d_pitch = 35 set p_roll = 35 set i_roll = 78 set d_roll = 32 set d_min_pitch = 18 set d_min_roll = 16 set d_min_boost_gain = 30 set d_min_advance = 0 set pidsum_limit = 1000 #unleashes PID Sum to be 100% (not restricted to 50% by default) #Assumes Freestyle | For racing use &quot;Setpoint&quot; and cutoff = 20 set iterm_relax_type = GYRO set iterm_relax_cutoff = 10 #TPA Settings (which is D-term only by default) set tpa_rate = 80 set tpa_breakpoint = 1800 save  5&quot; Quad - Setpoint Tracker - Lower Cutoffs Filters (more filtering)​ For: 650g to 725g AUW Kwads | 1000 to 1100 deg/sec rates. Kwads with Noise between 50hz and 200hz CLI Copy\\Paste #Filter Settings set dyn_notch_min_hz = 80 set dyn_lpf_gyro_min_hz = 0 set dyn_lpf_gyro_max_hz = 0 set gyro_lowpass_hz = 0 set gyro_lowpass_type = PT1 set gyro_lowpass2_hz = 200 set gyro_lowpass2_type = PT1 set dyn_lpf_dterm_min_hz = 0 set dyn_lpf_dterm_max_hz = 0 set dterm_lowpass_type = PT1 set dterm_lowpass_hz = 0 set dterm_lowpass2_type = BiQUAD set dterm_lowpass2_hz = 125 #For RPM Filter: Without RPM leave at = 8 (default) #Set to 0 if you can afford less Dynamic Notch filtering because RPM is added (reduces to one notch instead of two on DN) #set dyn_notch_width_percent = 8 #PID Gains Settings set vbat_pid_gain = ON set anti_gravity_gain = 10000 set p_pitch = 60 set i_pitch = 70 set d_pitch = 60 set f_pitch = 350 set p_roll = 65 set i_roll = 60 set d_roll = 65 set f_roll = 325 set p_yaw = 100 set i_yaw = 100 set d_yaw = 0 set f_yaw = 125 set d_min_pitch = 45 set d_min_roll = 45 set d_min_boost_gain = 30 set d_min_advance = 0 set pidsum_limit = 1000 #unleashes PID Sum to be 100% (not restricted to 50% by default) #Assumes Freestyle | For racing use &quot;Setpoint&quot; and cutoff = 20 set iterm_relax_type = GYRO set iterm_relax_cutoff = 10 #TPA Settings (which is D-term only by default) set tpa_rate = 80 set tpa_breakpoint = 1750 save   5&quot; Quad - Setpoint Tracker - Higher Cutoffs Filters (less filtering)​ For: 650g to 725g AUW Kwads | 1000 to 1100 deg/sec rates. Kwads with NO Noise between 50hz and 200hz Requires a quad with NO noise issues from 50hz to 200hz! So, if you are not sure, use the above first and if that goes well try these settings next. CLI Copy\\Paste #Filter Settings set dyn_notch_min_hz = 80 set dyn_lpf_gyro_min_hz = 0 set dyn_lpf_gyro_max_hz = 0 set gyro_lowpass_hz = 0 set gyro_lowpass_type = PT1 set gyro_lowpass2_hz = 0 set gyro_lowpass2_type = PT1 set dyn_lpf_dterm_min_hz = 80 set dyn_lpf_dterm_max_hz = 175 set dterm_lowpass_type = BiQUAD set dterm_lowpass_hz = 0 set dterm_lowpass2_type = PT1 set dterm_lowpass2_hz = 0 #For RPM Filter: Without RPM leave at = 8 (default) #Set to 0 if you can afford less Dynamic Notch filtering because RPM is added (reduces to one notch instead of two on DN) #set dyn_notch_width_percent = 8 #PID Gains Settings set vbat_pid_gain = ON set anti_gravity_gain = 10000 set p_pitch = 60 set i_pitch = 70 set d_pitch = 60 set f_pitch = 350 set p_roll = 65 set i_roll = 60 set d_roll = 65 set f_roll = 325 set p_yaw = 100 set i_yaw = 100 set d_yaw = 0 set f_yaw = 125 set d_min_pitch = 45 set d_min_roll = 45 set d_min_boost_gain = 30 set d_min_advance = 0 set pidsum_limit = 1000 #unleashes PID Sum to be 100% (not restricted to 50% by default) #Assumes Freestyle | For racing use &quot;Setpoint&quot; and cutoff = 20 set iterm_relax_type = GYRO set iterm_relax_cutoff = 10 #TPA Settings (which is D-term only by default) set tpa_rate = 80 set tpa_breakpoint = 1750 save   6&quot;/7&quot; Quads​ CLI Copy\\Paste #Filter Settings set gyro_lowpass_type = PT1 set dyn_notch_min_hz = 100 set dyn_lpf_gyro_min_hz = 100 set dyn_lpf_gyro_max_hz = 300 set dyn_lpf_dterm_min_hz = 100 set dyn_lpf_dterm_max_hz = 200 set dterm_lowpass_type = PT1 set dterm_lowpass2_hz = 0 #For RPM Filter: Without RPM leave at = 8 (default) #Set to 0 if you can afford less Dynamic Notch filtering because RPM is added (reduces to one notch instead of two on DN) #set dyn_notch_width_percent = 8 #PID Gains Settings set vbat_pid_gain = ON set anti_gravity_gain = 10000 set d_pitch = 58 set d_roll = 55 set d_min_pitch = 28 set d_min_roll = 25 set d_min_boost_gain = 45 set d_min_advance = 0 set pidsum_limit = 1000 #unleashes PID Sum to be 100% (not restricted to 50% by default) #Assumes Freestyle | For racing use &quot;Setpoint&quot; and cutoff = 20 set iterm_relax_type = GYRO set iterm_relax_cutoff = 10 #TPA Settings (which is D-term only by default) set tpa_rate = 80 set tpa_breakpoint = 1800 save   X-Class [IN PROGRESS!!!]​ CLI Copy\\Paste #Filter Settings set gyro_lowpass_type = PT1 set dyn_notch_min_hz = 50 set dyn_lpf_gyro_min_hz = 50 set dyn_lpf_gyro_max_hz = 200 set dyn_lpf_dterm_min_hz = 60 set dyn_lpf_dterm_max_hz = 150 set dterm_lowpass_type = BIQUAD set dterm_lowpass2_hz = 0 #PID Gains Settings set vbat_pid_gain = ON set anti_gravity_gain = 10000 set d_pitch = ?? set d_roll = ?? set d_min_pitch = ?? set d_min_roll = ?? set d_min_boost_gain = 45 set d_min_advance = 0 #Assumes Freestyle | For racing use &quot;Setpoint&quot; and cutoff = 20 set iterm_relax_type = GYRO set iterm_relax_cutoff = 10 #TPA Settings (which is D-term only by default) set tpa_rate = 80 set tpa_breakpoint = 1750 save   PID Tuning Preset​ CLI Copy\\Paste #Filter Settings set dyn_notch_min_hz = 80 set gyro_lowpass_type = PT1 set dyn_lpf_gyro_min_hz = 100 set dyn_lpf_gyro_max_hz = 350 set gyro_lowpass2_hz = 0 set dterm_lowpass_type = BiQUAD set dyn_lpf_dterm_min_hz = 80 set dyn_lpf_dterm_max_hz = 175 set dterm_lowpass2_hz = 0 #PID Gains Settings set vbat_pid_gain = ON set anti_gravity_gain = 10000 set f_pitch = 0 set f_roll = 0 set f_yaw = 0 set d_min_pitch = 0 set d_min_roll = 0 set pidsum_limit = 1000 #unleashes PID Sum to be 100% (not restricted to 50% by default) #PID Controller Settings set feedforward_transition = 0 set abs_control_gain = 0 set use_integrated_yaw = OFF set iterm_relax_type = GYRO set iterm_relax_cutoff = 10 #TPA Settings (which is D-term only by default) set tpa_rate = 80 set tpa_breakpoint = 1800 save   "},{"title":"Pilot: RipperDrone​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#pilot-ripperdrone","content":"5&quot; Quad (5s-6s)​ CLI Copy\\Paste #Filter Settings set gyro_lowpass_type = PT1 set dyn_notch_min_hz = 100 set dyn_lpf_gyro_max_hz = 510 set dterm_lowpass_type = PT1 set dterm_lowpass2_hz = 0 #PID Gains Settings set vbat_pid_gain = ON set anti_gravity_gain = 10000 set p_pitch = 35 set d_pitch = 25 set f_pitch = 32 set p_roll = 33 set d_roll = 23 set f_roll = 30 set p_yaw = 30 set i_yaw = 90 set d_min_roll = 0 set d_min_pitch = 0   "},{"title":"Pilot: CUDA KEER​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#pilot-cuda-keer","content":"3&quot; toothfairy with Emax RS1306b BF4.2​ Floss 2.1 hybrid with Hyperlite 2207 1922kv BF4.2 race rig​ 6&quot; Floss 2.1 with Hyperlite 2207 1922kv BF4.0 race rig​ 5&quot; Massive Droner with T-Motor F60pro II​  "},{"title":"Pilot: TehLlama​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#pilot-tehllama-1","content":"6&quot; Neutron-R with BrotherHobby R6 2207 Race Rig​ Build Details​ CLI Copy\\Paste # Filter Settings set dyn_lpf_dterm_min_hz = 91 set dyn_lpf_dterm_max_hz = 221 set dterm_lowpass_type = PT1 set dterm_lowpass_hz = 150 set dterm_lowpass2_type = PT1 set dterm_lowpass2_hz = 225 #PID Gains Settings set vbat_pid_gain = ON set anti_gravity_gain = 3000 set p_pitch = 53 set i_pitch = 70 set d_pitch = 37 set f_pitch = 180 set p_roll = 48 set i_roll = 68 set d_roll = 34 set f_roll = 170 set p_yaw = 40 set i_yaw = 80 set d_yaw = 0 set f_yaw = 100 set d_min_pitch = 24 set d_min_roll = 27 # This is my preferred, but unconventional iTermRelax Setup - relies on FF to push Yaw axis around set iterm_relax = RPY set iterm_relax_type = SETPOINT set iterm_relax_cutoff = 12 # Rates - These are good novice racer rates # Max stick deflection values are 375°/375°/275° rates (R/P/Y) set rates_type = BETAFLIGHT set roll_rc_rate = 75 set pitch_rc_rate = 75 set yaw_rc_rate = 55 set roll_expo = 0 set pitch_expo = 0 set yaw_expo = 0 set roll_srate = 60 set pitch_srate = 60 set yaw_srate = 60   "},{"title":"REVERT 4.0.x DEFAULTS TO AN OLDER VERSION OF BETAFLIGHT DEFAULTS​","type":1,"pageTitle":"Community Presets","url":"/betaflight.com/docs/wiki/archive/Community-Presets#revert-40x-defaults-to-an-older-version-of-betaflight-defaults","content":"These are presets to apply to BF 4.0.x to get the defaults of an older versions of Betaflight. This WILL give you the same flight experience as an older release if that is what you like, but want the new features of BF 4.0.x. Revert to BF 3.5.X​ CLI Copy\\Paste #Features to be off by Default feature -AIRMODE # Filter Settings set gyro_lowpass_type = PT1 set gyro_lowpass_hz = 100 set gyro_lowpass2_type = PT1 set gyro_lowpass2_hz = 300 set dyn_lpf_gyro_min_hz = 0 set dyn_lpf_dterm_min_hz = 0 set dyn_notch_range = Auto set dyn_notch_width_percent = 0 set dyn_notch_q = 70 set dyn_notch_min_hz = 130 set dterm_lowpass_type = PT1 set dterm_lowpass_hz = 100 set dterm_lowpass2_type = PT1 set dterm_lowpass2_hz = 200 set d_min_roll = 0 set d_min_pitch = 0 set d_min_yaw = 0 # Default PIDs set p_pitch = 50 set i_pitch = 50 set d_pitch = 27 set f_pitch = 60 set p_roll = 46 set i_roll = 45 set d_roll = 25 set f_roll = 60 set p_yaw = 65 set i_yaw = 45 set d_yaw = 0 set f_yaw = 60 #PID Controller Settings set iterm_relax_type = GYRO set iterm_relax_cutoff = 11 set abs_control_gain = 0 set use_integrated_yaw = OFF set tpa_mode = PD set tpa_rate = 10 set tpa_breakpoint = 1650 #RC smoothing settings set rc_smoothing_type = INTERPOLATION save   Revert to BF 3.4.X​ CLI Copy\\Paste #Features to be off by Default feature -AIRMODE # Filter Settings set gyro_lowpass_type = PT1 set gyro_lowpass_hz = 100 set gyro_lowpass2_type = PT1 set gyro_lowpass2_hz = 300 set dyn_lpf_gyro_min_hz = 0 set dyn_lpf_dterm_min_hz = 0 set dyn_notch_range = Low set dyn_notch_width_percent = 0 set dyn_notch_q = 70 set dyn_notch_min_hz = 125 set dterm_lowpass_type = PT1 set dterm_lowpass_hz = 100 set dterm_lowpass2_type = PT1 set dterm_lowpass2_hz = 200 set d_min_roll = 0 set d_min_pitch = 0 set d_min_yaw = 0 # Default PIDs set p_pitch = 50 set i_pitch = 50 set d_pitch = 27 set f_pitch = 150 set p_roll = 46 set i_roll = 45 set d_roll = 25 set f_roll = 150 set p_yaw = 70 set i_yaw = 45 set d_yaw = 0 set f_yaw = 0 #PID Controller Settings set feedforward_transition = 0 set abs_control_gain = 0 set use_integrated_yaw = OFF set anti_gravity_gain = 5000 #I-term Relax is OFF by Default set iterm_relax_type = Setpoint set iterm_relax_cutoff = 100 #if you turn on i-Term Relax, 3.4 defaults are below (take &quot;#&quot; off front) #set iterm_relax_type = Gyro #set iterm_relax_cutoff = 11 set tpa_mode = PD set tpa_rate = 10 set tpa_breakpoint = 1650 #RC smoothing settings set rc_smoothing_type = INTERPOLATION save   Revert to BF 3.2.x &amp; 3.3.X (they were the same)​ CLI Copy\\Paste #Features to be off by Default feature -AIRMODE feature -DYNAMIC_FILTER feature -ANTI_GRAVITY # Filter Settings set gyro_lowpass_type = PT1 set gyro_lowpass_hz = 90 set gyro_lowpass2_type = PT1 set gyro_lowpass2_hz = 0 set dyn_lpf_gyro_min_hz = 0 set dyn_lpf_dterm_min_hz = 0 set gyro_notch1_hz = 400 set gyro_notch1_cutoff = 300 set gyro_notch2_hz = 200 set gyro_notch2_cutoff = 100 set dyn_notch_range = Low set dyn_notch_width_percent = 0 set dyn_notch_q = 70 set dyn_notch_min_hz = 125 set dterm_lowpass_type = BIQUAD set dterm_lowpass_hz = 100 set dterm_lowpass2_type = PT1 set dterm_lowpass2_hz = 0 set dterm_notch_hz = 260 set dterm_notch_cutoff = 160 set d_min_roll = 0 set d_min_pitch = 0 set d_min_yaw = 0 # Default PIDs set p_pitch = 58 set i_pitch = 50 set d_pitch = 35 set f_pitch = 0 set p_roll = 40 set i_roll = 40 set d_roll = 30 set f_roll = 0 set p_yaw = 70 set i_yaw = 45 set d_yaw = 0 set f_yaw = 0 #PID Controller Settings set feedforward_transition = 0 set iterm_relax = OFF set abs_control_gain = 0 set use_integrated_yaw = OFF set anti_gravity_gain = 1000 set tpa_mode = PD set tpa_rate = 10 set tpa_breakpoint = 1650 #RC smoothing settings set rc_smoothing_type = INTERPOLATION save  "},{"title":"ESC Telemetry","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/ESC-Telemetry","content":"","keywords":""},{"title":"Requirements:​","type":1,"pageTitle":"ESC Telemetry","url":"/betaflight.com/docs/wiki/archive/ESC-Telemetry#requirements","content":"Supported flight controller with Betaflight version 3.1.0 RC1 or later.Betaflight configurator version 1.8.5 or later.Kiss 24A ESCs with Dshot capable firmware.One spare hardware UART on the flight controller.(Optional) Telemetry from flight controller to RC receiver. "},{"title":"Procedure:​","type":1,"pageTitle":"ESC Telemetry","url":"/betaflight.com/docs/wiki/archive/ESC-Telemetry#procedure","content":"Install the ESCs to the quad and run a wire from all four telemetry pads on the ESCs to the RX pin of the spare hardware UART on the flight controller. It may be easier to make a loom to split a single wire from the RX pin of the UART into four wires (one for each ESC). Open the Betaflight configurator (V 1.8.5 or later) and go to the Ports tab. Find the UART that the ESC telemetry is connected to and in the column marked &quot;Sensor Input&quot;, select ESC in the left box and leave AUTO in the right box. Don't forget to hit the &quot;save and reboot&quot; button. Still in Betaflight configurator, switch to the Configuration tab. Make sure you are using the Dshot protocol for ESC communication! Under &quot;Other Features&quot;, make sure that &quot;ESC_SENSOR&quot; is enabled. On the Battery Voltage section enable &quot;VBAT&quot; and select ESC Sensor from the drop down menu below. Configure the cell voltages as required. (Defaults should be fine) On the Current Sensor section enable &quot;CURRENT_METER&quot; and select ESC Sensor from the drop down menu below. Configure the scale and offset as required. (Defaults should be fine) To test, set it all up then plug in the flight controller as well as the battery, open the configurator to the configuration tab and arm via the tx within a few seconds of powering on the flight controller. PROPS OFF ON THE BENCH! Confirm that telemetry is being received by the transmitter. If using a Taranis, don't forget to arm the quad when you &quot;Discover Sensors&quot; or the ESC telemetry won't be discovered. Taranis users may want to change the &quot;FUEL&quot; sensor from % to mAh for an accurate reading. "},{"title":"External OSD - MWOSD - CMS","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/External-OSD-MWOSD-CMS","content":"","keywords":""},{"title":"Typical MWOSD installation and configuration​","type":1,"pageTitle":"External OSD - MWOSD - CMS","url":"/betaflight.com/docs/wiki/archive/External-OSD-MWOSD-CMS#typical-mwosd-installation-and-configuration","content":""},{"title":"About this mode:​","type":1,"pageTitle":"External OSD - MWOSD - CMS","url":"/betaflight.com/docs/wiki/archive/External-OSD-MWOSD-CMS#about-this-mode","content":"MWOSD requests raw data from FC, manipulates into human readable format and displayScreen layouts and displayed items are determined by MWOSD GUI configurator "},{"title":"MWOSD configuration​","type":1,"pageTitle":"External OSD - MWOSD - CMS","url":"/betaflight.com/docs/wiki/archive/External-OSD-MWOSD-CMS#mwosd-configuration","content":"MWOSD install guides etc. are available via MWOSD wiki.Installing the latest firmware from MWOSD GUI configurator is recommended.Versions 1.7 onward have CMS support enabled for Betaflight.If you are building your own MWOSD firmware, ensure CANVAS_SUPPORT is enabled in config. "},{"title":"FC configuration​","type":1,"pageTitle":"External OSD - MWOSD - CMS","url":"/betaflight.com/docs/wiki/archive/External-OSD-MWOSD-CMS#fc-configuration","content":"BetaFlight v3.1.0 onwards for most pre-built targets F3, F4 and F7 have CMS support enabled.Use OSD should be disabled in the FC GUI configurator.MSP must be enabled on the serial port the OSD is attached to.Baud rate must match the OSD. Typically this is 115k If you are building your own Betaflight FC firmware: It must be built with CMS and USE_MSP_DISPLAYPORT or equivalent options.Corresponding features should be turned on in configuration if they are controlled via features. "},{"title":"Menu activation​","type":1,"pageTitle":"External OSD - MWOSD - CMS","url":"/betaflight.com/docs/wiki/archive/External-OSD-MWOSD-CMS#menu-activation","content":"BetaFlight CMS menu activation is Thr MID + Yaw LEFT + Pitch UP.MWOSD menu activation is Thr MID + Yaw RIGHT + Pitch UP.  "},{"title":"Non typical DISPLAYPORT installation and configuration.​","type":1,"pageTitle":"External OSD - MWOSD - CMS","url":"/betaflight.com/docs/wiki/archive/External-OSD-MWOSD-CMS#non-typical-displayport-installation-and-configuration","content":""},{"title":"About this mode:​","type":1,"pageTitle":"External OSD - MWOSD - CMS","url":"/betaflight.com/docs/wiki/archive/External-OSD-MWOSD-CMS#about-this-mode-1","content":"MWOSD acts dumb and displays screen sent from FC.OSD layouts are configured in the Betaflight Configurator OSD tab. Limitations: Screen update speed is slower than a typical installation.If this mode is required, raise a request with MWOSD team. A small amount of development is required to resolve issues with flickering display. To use with DISPLAYPORT: Install latest MWOSD firmware on the OSD.READ CAREFULLY - Install the FC fonts onto the OSD using MWOSD gui configurator. Using MWOSD fonts may display strange characters.Use OSD should be enabled in the FC GUI configurator. If you are building your own Betaflight FC firmware: Build FC firmware with added options. E.g. make OPTIONS=USE_OSD USE_OSD_OVER_MSP_DISPLAYPORT REVOLTThis will enable the OSD tab and full DISPLAYPORT support from the FC. See also: CMS adjustment "},{"title":"Feed Forward 2.0","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Feed-Forward-2.0","content":"","keywords":""},{"title":"What is FeedForward?​","type":1,"pageTitle":"Feed Forward 2.0","url":"/betaflight.com/docs/wiki/archive/Feed-Forward-2.0#what-is-feedforward","content":"FeedForward (FF) is a drive factor that increases stick responsiveness. It is proportional to the instantaneous derivative, or 'rate of change' of stick movement. The faster the sticks are moving, the more FeedForward we get. FeedForward helps P drive the quad into turns. Unlike P, FeedForward cannot cause oscillation, no matter how much FF is added. With FeedForward, we get better stick responsiveness without pushing P so high as to cause wobbles. It also reduces the delay time between input and response. Less delay means less error and less I windup/overshoot. It is great for racing, LOS and radical freestyle flying. It isn't great for cinematic HD. Too much FeedForward can cause: overshoot at the start of a flip, particularly when the sticks hit 100% travelexaggerated responsiveness to RC stepsamplification of shaking when the pilot is cold or nervousspikes in the motor traces and brief shakes with big RC stepsgyro getting ahead of setpoint Since RC data comes into the flight controller in 'packets', we actually get a series of sudden steps coming in. The derivative of an instant step is an infinitely high spike, which is basically useless. Back in 3.4.0 we introduced 'filter' mode RC smoothing, where an 'input' lowpass filter rounded off those steps; the derivative now became a wider spike that we could use. We then applied a 'derivative' lowpass over that spike, which smoothed it out into a kind of 'lump' of FF for each incoming step. AUTO RC filtering adapts the smoothing filters dynamically to the apparent incoming RC step rate; manual setups can be fine-tuned to any desired degree of smoothness, at the cost of input delay. Currently erratic RC steps are a major problem. OpenTx 2.3 improves on this a bit for FrSky users. TBS are introducing a 'locked 150hz mode' that may be better. 4.1 introduces several novel ff_2.0 technologies that improve on these limitations. "},{"title":"ff_boost​","type":1,"pageTitle":"Feed Forward 2.0","url":"/betaflight.com/docs/wiki/archive/Feed-Forward-2.0#ff_boost","content":"This is a fantastic new feature that markedly reduces delay in fast setpoint changes. Most motors take time to spin up / slow down. They need to be pushed harder at the very start of a move than in the middle. FF and P both ramp up slowly at the start of a move because initially our fingers move slowly and most pilots use Expo in their Rates setup. So until now, the motors haven't got that immediate push needed unless really high FF gains were used (250+). But with FF gains of that magnitude, overshoot is hard to control, especially because of SuperRate being applied at the end of the stick travel, really causing FF to boost the move right when we need the quad to start to slow down to not overshoot. 'ff_boost' is a PID parameter that is proportional to the stick acceleration. Technically it is the second derivative of Setpoint. Being the second derivative, ff_boost peaks really early in a move, the instant the sticks start moving. It then eases away to zero when the sticks are at mid-travel, because at constant stick velocity we have lots of FF, but no acceleration. ff_boost finally goes negative as the sticks slow down. The acceleration component does exactly what we need to help overcome motor delay - pushes early, eases off mid-move, and actively slows down the motors at the end. With the right amount of FF and ff_boost, a responsive quad can have nearly completely lag-free tracking of inputs and not get overshoot. Typically set ff_boost = 15, the default, is about right for most quads. Larger values may be used on low-authority quads or quads with motors that are slow to spool up. More than 40 would be unusual. The strength of the boost is directly linked to the amount of FF set in the PIDs. Think of ff_boost as a 'factor' that modulates the timing of how your FF gets applied to the motors. More boost brings the FF on earlier. Advanced users who can log should do a test flight with fast twitchy inputs, quick left/right stabs, and look for the timing and amount of their FF signal. Ideally P should have little work left to do when the boost/FF components are correct. ff_boost can work without any other of the ff_2.0 features being active. "},{"title":"ff_interpolate_sp​","type":1,"pageTitle":"Feed Forward 2.0","url":"/betaflight.com/docs/wiki/archive/Feed-Forward-2.0#ff_interpolate_sp","content":"This is a 'digital' way of calculating FF from each new RC 'step'. It gives a cleaner feedforward trace than with the old 'filter' method, with less delay. set ff_interpolate_sp = ON analyses each new incoming RC data packet, and the calculated change in setpoint is converted to an immediate step up in FF. Each step up is held constant until the next RC data step arrives. The sharp corner of the FF step can be smoothed according to the rc_smoothing_derivative lowpass filter frequency. This is set dynamically by default in AUTO mode, but can be manually overriden if desired. 120hz is a good smoothing value for a clean feed-forward trace. 20hz smoothes out traces with a fair bit of up and down; 10hz may be needed for very long range and cinematic quads where the large steps from 50hz mode and poor quality links can make the quad jerky in turns. Dropped RC packets will normally cause sudden FF drops to zero. set ff_interpolate_sp = AVERAGE is intended to help manage this specific issue. Alternatively, a low rc_smoothing_derivative filtering value can smooth the drops out a bit, at the cost of incoming RC delay. "},{"title":"ff_max_rate_limit​","type":1,"pageTitle":"Feed Forward 2.0","url":"/betaflight.com/docs/wiki/archive/Feed-Forward-2.0#ff_max_rate_limit","content":"ff_max_rate_limit attenuates / prevents FF induced overshoot at the start of a flip. When performing quick flips or rolls, the sticks typically stop suddenly when they hit the physical limit of their travel. With Expo and SuperRate applied to your Rates, the rate of increase in Setpoint is greatest just before the sticks stop. At this point in time, the quad itself is turning really fast and has a ton of rotational momentum. The Expo\\SuperRate effect means FF is absolutely massive too. All this, just before the sticks suddenly come to a grinding halt. Significant overshoot, even with a lot of D, is basically inevitable. In previous versions, you could use D_min to boost your D-gains high enough to compensate, but it was difficult to find the balance. Additionally, the transition would be sudden and the opposing pair of motors have to spin up and go full throttle, which in turn causes wobbles on the other axes and makes the quad climb. Using a ton of D to control this has its own problems, eg noise and dumbing down responsiveness at other times. ff_max_rate_limit predictively identifies situations in which the sticks are likely to hit their limit, and cuts FF in anticipation of that happening. It kind of 'looks ahead' and pre-emptively reduces FF just at the right time, typically totally eliminating the overshoot that would otherwise happen. A major benefit is that it markedly reduces the need for the opposing motors to spin up. Flips become cleaner and more accurate than before, and climb on flipping under LOS conditions is much less. The default value of 100 works well, and attempts to reach FF outputs of 0 as gyro values reach setpoint. Lower values result in feedforward influence tapering to 0 at a percentage of those values (e.g. at a value of 50, in a sustained flip, once gyro reaches half the setpoint value the feedforward term will taper to zero). Higher values allow for feedforward to continue influencing the PID controller. For higher authority craft this will cause overshoot, but for authority-limited craft these higher values can be very beneficial. ff_max_rate_limit is not active as the sticks return to centre. To determine ff_max_rate_limit and ff_boost works best, look at the start of a hard flip in BlackBox Explorer and see if there is any overshoot. If with ff_max_rate_limit = 100 there is still too much overshoot, first evaluate if Feedforward or P-term is driving overshoot at the time of interest. If so, try ff_max_rate_limit = 95. If the overshoot is too well controlled, try 105 to 110. The range of adjustment is quite tight. "},{"title":"ff_interpolate_sp = AVERAGED​","type":1,"pageTitle":"Feed Forward 2.0","url":"/betaflight.com/docs/wiki/archive/Feed-Forward-2.0#ff_interpolate_sp--averaged","content":"Since FF is calculated for each incoming RC step, we have a problem when a new step doesn't arrive as it should. Usually this is caused by 'dropped packets', or when a TBS or R9 Rx switches out of 150hz mode to the slower 50hz mode. Anytime this happens, FF would normally drop suddenly to zero; when the next valid data value comes in, a double-height step up occurs. These zero/double-height pairs in the FF trace are very messy. In AVERAGED mode, the interpolation algorithm averages each two successive feed forward values. In the case of a sudden drop to zero with a large subsequent step up, this is is changed to a smaller drop, a middle value, and a jump up. Overall the steps are smaller. There is a downside to using AVERAGED. If the pilot makes a fast input, then suddenly holds the sticks perfectly still, ff_spread will hold FF at the previous, high, value for the set time, rather than dropping to zero immediately as it should. This can cause an overshoot for the duration set by the extend value. It is most easily seen at the start of a flip when the sticks hit their physical limit, but can happen at other times. AVERAGED is most useful for long-range / cinematic quads with substantial RC smoothing. For racers and general use the quality of the RC link depends mostly on how good your antennas are and how far you plan to fly. Close-in racing with good antennas, especially with Futaba and some Spectrum radios that have very consistent RC steps, can work best without averaging. For technical details and more info,check the original pull request #8623 "},{"title":"Flight Controller Gyro Orientation","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Flight-Controller-Gyro-Orientation","content":"Flight Controller Gyro Orientation There are tons of videos available on the internet how to align a flight controller (FC) to a model aircraft frame, e.g. Flight Controller Orientation Settings in BetaFlight from Cyclone FPV Usually, the gyro orientation on the FC is ink-marked by an arrow pointing forward. In rare cases or due to space limitations, the flight controller needs to be positioned on the frame in awkward alignment, i.e. pivoted around multiple axes, NOT lining up with the main axes of the frame anymore. The FC firmware NEEDS to know how the FC axes are oriented with respect to the frame axes, otherwise the PID controller will misinterpret flight attitude and corrective actions. To keep all controls working as usual, you need to set &quot;Gyro Offset&quot; values in Betaflight Configurator. These offsets will tell the FC how to rotate the frame around multiple axes to fall in line with the alignment of the FC. It is important to note that there is a sequence of so-called Euler angles (axes of rotation in space, perpendicular to each other) for board/gyro alignment: yaw-pitch-roll Assuming that the board alignment is in the usual yaw roll pitch euler angles parametrization (R = RzRyRx) you actually have to think in the inverse transform R' = (RzRyRx)' = Rx'Ry'Rz' to obtain the Gyro Offset angles to enter into Betaflight Configurator. Here we have to think how to rotate the frame so that the frame is oriented like the flight controller in the following order: rotate the frame around z-axis (yaw)rotate the already yawed frame around y-axis (pitch)rotate the already yawed and pitched frame around x-axis (roll) After determining these 3 correction angles needed to rotate the frame into the FC alignment, the values for yaw, pitch and roll can be entered into the respective fields for Gyro Offset in Betaflight Configurator.","keywords":""},{"title":"Flight Controller Orientation","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Flight-Controller-Orientation","content":"Flight Controller Orientation Usually, the gyro orientation on the FC is ink-marked by an arrow pointing forward. In rare cases or due to space limitations, the flight controller needs to be positioned on the frame in awkward alignment, i.e. pivoted around multiple axes, NOT lining up with the main axes of the frame anymore. The FC firmware NEEDS to know how the FC axes are oriented with respect to the frame axes, otherwise the PID controller will misinterpret flight attitude and corrective actions, this will lead to unstable behaviour and flyaways. To keep all controls working as usual, you need to set the matching angle values in the Betaflight Configurator Configuration tab. These angles will tell the FC how to rotate the frame around multiple axes to fall in line with the alignment of the FC. It is important to note that there is a sequence of so-called Euler angles (axes of rotation in space, perpendicular to each other) for board/gyro alignment: yaw-pitch-roll or 3-2-1 Euler angles. The internal rotation convention bf uses to represent the FC orientation is R = Rz(-Yaw) Ry(-Pitch) Rx(-Roll). On one hand the rotation matrix R describes how the FC with respect to the origin of the quad is rotated. On the other hand R describes the transformation of sensor readings of the FC as they were measured with a flight controller aligned with the quads frame (arrow pointing forward / x axis). For the alignment process its easier to think in the inverse transform R^T = Rx^T(-Roll) Ry^T(-Pitch) Rz^T(-Yaw). So we yaw first around the z axis, then pitch the yawed frame around its new y axis and finally roll the yawed and pitched frame around its new x axis. Due to the minus sign positiv angle direction is described by the left hand rule, e.g. to yaw positive you grab the z axis with your left hand and rotate towards the direction of your fingers. You can use the following link to figure out your board alignment angles: https://www.geogebra.org/3d/sj5aeucn For the alignment process think of a frame mounted to your quad and a frame mounted to your FC. The question that then needs to be answered is how to rotate the quads frame (x pointing forward, y left, z upwards) so that the quads frame is aligned to the flight controller frame (x pointing forward on your flight controller (mind the arrow), y to the left, z upwards). Yaw the quad frame around its z axisPitch the already yawed frame around its new y axisRoll the already yawed and pitched frame around its new x axis To test your alignment process before you mount it to your frame use the FC only pointing towards your monitor and the the Setup page of the Betaflight Configurator and simply start with: Yaw the FC, hit Reset Z axis, check the visualisation of the quad, if ok proceedPitch the yawed FC, reset Z axis, check, if ok proceedRoll the yawed and pitched FC, reset Z axis, check, if ok proceedDouble check! After determining these 3 correction angles needed to rotate the quad frame into the FC frame, the values for yaw, pitch and roll can be entered into the respective fields in the Betaflight Configurator.","keywords":""},{"title":"Flying Tips","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Flying-Tips","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"Flying Tips","url":"/betaflight.com/docs/wiki/archive/Flying-Tips#introduction","content":"Here is a central place for the sharing of Betaflight related flying tips or full tutorials, which could be invaluable for newcomers and advanced pilots alike. "},{"title":"Contents​","type":1,"pageTitle":"Flying Tips","url":"/betaflight.com/docs/wiki/archive/Flying-Tips#contents","content":"How To Fly An FPV Multirotor In Acro ModeMaking coordinated turns in Acro modeHow to Fly FPV Quads  "},{"title":"How To Fly An FPV Multirotor In Acro Mode​","type":1,"pageTitle":"Flying Tips","url":"/betaflight.com/docs/wiki/archive/Flying-Tips#how-to-fly-an-fpv-multirotor-in-acro-mode","content":"Joshua Bardwell's excellent series of 27 lessons that use the free FPV Freerider simulator to teach a complete beginner how to fly an FPV multirotor in Acro mode (no autoleveling). A great resource for those wishing to transition from Level/Horizon modes to Acro mode. http://www.youtube.com/playlist?list=PLwoDb7WF6c8kjYXam4m3msvRbkORU41GY "},{"title":"Making coordinated turns in Acro mode​","type":1,"pageTitle":"Flying Tips","url":"/betaflight.com/docs/wiki/archive/Flying-Tips#making-coordinated-turns-in-acro-mode","content":"In autolevel modes (Angle or Horizon), the flight controller attempts to maintain a fixed angle of pitch or roll which is proportional to the stick deflection. In Acro mode this assistance is not present and the pilot needs to compensate manually. This video explains how this is achieved in flight. http://www.youtube.com/watch?v=-qYXVXiHGFA "},{"title":"How to Fly FPV Quads​","type":1,"pageTitle":"Flying Tips","url":"/betaflight.com/docs/wiki/archive/Flying-Tips#how-to-fly-fpv-quads","content":"Jack FPV is new to the hobby, but is learning fast. Follow his series of FPV videos as he teaches us how to fly in the Liftoff simulator and also in real life. http://www.youtube.com/playlist?list=PLXWuhwtHmw1w9G6j3P1Y2ZLRiiLqmFe2B "},{"title":"FAQ","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/FAQ","content":"","keywords":""},{"title":"Contents​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#contents","content":"I'm a Newbie, how do I start ?How do I install Betaflight ?What's the history of Betaflight and it's relationship to Cleanflight ?What is the difference between Min_check Min_command and Min_throttle and stick inputs ?Why wont my FC board arm after upgrading the firmware ?Why is the Gyro light turned off and the 3D Model not moving ?What is Air Mode ?How do I enable Air Mode ?What is Acro Plus ?What is 2khz mode ?How do I activate 2khz mode ?What Flight Controllers are recommended to get the best out of BetaFlight ?What are the differences between LuxFloat and Rewrite PID Controllers ?What PIDs do and how do they do it ?Is there a good resource for learning how to tune using Black Box ?Why does my copter behave erratic after a crash ?How does yaw_jump_prevention_limit work ?How should I configure the FailSafe system ?What is the best practice for configuring the Throttle end points ?How do I configure BLHeli ESCs via BetaFlight ?Why does my copter flip when trying to takeoff ?Will the PIDs change significantly when switching from two-blades to tri-blades ?Why do I have issues flashing my new F3 Flight Controller ?Will Betaflight code be merged back into Cleanflight ?When I update to the latest version of BetaFlight do I need to recalibrate my ESCs ?Why do my motors keep accelerating on the bench when I arm without props ?Why do my motors spin briefly when rebooting the Flight Controller ?If the accelerometer is disabled and FailSafe Activates what happens to the copter ?Why does my Flight Controller blink/beep lots of times when powering up ?My PID D gain value is small after tuning in 2khz mode is that normal ?Why are the accelerometer Black Box traces so bad in 2KHz mode ?How do I get vbat_pid_compensation system working ?With vbat_pid_compensation are there issues moving from 3S to 4S batteries ?How can I run the PID controller faster than 2kHz ?What is OneShot125, OneShot42 and MultiShot and how do these relate to max_throttle and Looptime ?What cycle time can I run on what board ?How do I go about suggesting CF Configurator enhancements ?How do I lower the chance of my copter producing Magic Smoke when powering on ?Why do we have RC Rate and also Yaw Pitch Roll Rates ?Why does it matter to prevent motor jitter ?Why when I change something using CLI board crashes ?Will MW2.3 PID controller work on default PIDS ?How do I keep and then restore my Betaflight Settings each time I upgrade ?What is yaw_jump_prevention_limit and what does it do ?What is yaw_iterm_reset_degrees and what does it do ?How does Super Expo work ?How do rates relate to pitch roll &amp; yaw degrees/s ?Which Flight Controllers currently use SPI ?Which HEX target do I download and flash to my Flight Controller ?How do I setup for reversed prop rotation ?What is a recommended FC and esc setup to run at 8khz, also i see reference to 4/4 or 4/4/32 or 8/8, what are these referring to?Is PID tuning any different at different PIDC rates ?What is the difference in PIDC Iterm in bF versions ?How to setup blackbox record rate with onboard dataflash ?How to setup the rates and SuperExpo ?What is the story on the different Rates and Expos ?How do I solve Yaw twitches or mid throttle oscillations ?Is there a way to download blackbox logs through a terminal client ?Why do LED strips not work ?Recently with the temps dropping, my quad has started to develop a random twitch. Anyone else experience random issues when it's 20'ish degree's F outside ?Why can't I connect to my flight controller using MSP over UART1?Is it possible that we can flash the Frsky receivers thru the flight controller like we now flash the ESC?Is there a way to dismiss the OSD post flight statistics screen? If your question is not listed above then please check the following pages: http://github.com/borisbstyle/betaflight/wiki/Betaflight-specific-CLI-commands http://github.com/borisbstyle/betaflight/wiki/BetaFlight-Deep-Dive  "},{"title":"Im a Newbie how do I start ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#im-a-newbie-how-do-i-start-","content":"Start with the following video that gives a very comprehensive guide on Betaflight and the best practice approach for it's configuration:http://www.youtube.com/watch?v=xSzO6HP6yzs Also take a look at the MultiWii Wiki, then the Naze32 Manual, the CF docs in Github an finally the ßF Github docs and this Wiki. Fast and easy configuration tutorial: https://youtu.be/tlfBlgcpink Videos on Cleanflight throttle parameter configuration (RC input verse outputs to ESCs):http://www.rcgroups.com/forums/showpost.php?p=34144329&amp;postcount=20469 See the next FAQ topic (&quot;How do I install Betaflight&quot;) when you are ready. "},{"title":"How do I install Betaflight ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-do-i-install-betaflight-","content":"Read the Installing BetaFlight Wiki page. "},{"title":"What's the history of Betaflight and it's relationship to Cleanflight ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#whats-the-history-of-betaflight-and-its-relationship-to-cleanflight-","content":"A little history. This all started with OpenSource MultiWii code based on Arduino 8-bit boards. When the 32-bit STM32 processors become available the MutliWii code was ported to the STM32 and was called BaseFlight. Due to politics others forked the BaseFlight code to CleanFlight. More recently Boris decided that he could possibly make improvements on the way the PID control loop works and forked an Experimental version as BetaFlight. Therefore documentation on ßF and CF tends to only show what is new or changed and the documentation of previous Firmware must be read. "},{"title":"What is the difference between Min_Check Min_command and Min_throttle and stick inputs ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-is-the-difference-between-min_check-min_command-and-min_throttle-and-stick-inputs-","content":"From MasterZap min_check has nothing to do with ESC's .... min_command is the value sent when disarmed (or when armed and motor stop is on, i.e. when we want the motors not to spin). min_throttle is the value sent when armed (with motor stop off) min_check is about stick command and only matters towards your actual throttle stick. It has no effect on what is sent to the ESC. The misunderstanding of this comes from the fact that your throttle stick doesn't even begin &quot;working&quot; until you are above min_check. People try explaining this with sentences like &quot;the FC will map min_check to min_throttle&quot;, which while true, makes people believe there is this relation. There is no relation. All that is being said is &quot;the flight controller only cares about the range above min_check up to full throttle, and will remap that range into the 0%-100% input to the flight controller, which then outputs whatever it wants to the motors&quot; From waltr In general (all channels) min_check &amp; max_check are only for Stick commands. then ONLY on throttle channel min_check is used in the code for Arming and PID controller depending on other settings (pid_at_min_throttle, AirMode, etc). mid_rc (Note: this is incorrectly label throttle middle in the CF config GUI) is telling the FC what your Stick Center value is, typically 1500 but may be 1520 on some radios. mid_rc is NOT used on throttle channel. The default max_throttle of 1850 comes from MultiWii and is a SAFE max value for ALL ESCs. Code from MW2.3 config.h file /******************** Motor maxthrottle ***************/ / this is the maximum value for the ESCs at full power, this value can be increased up to 2000 / #define MAXTHROTTLE 1850 DEADBAND is only removing stick center value (all channels except throttle) to eliminate stick center jitter and non-returning to exactly 1500. no more, no less. Do not use this term for anything else. Reading the MutliWii WIKI and even the MultiWii code config.h file will help to understand what these values are. A link is in the ßF Wiki, FAQ: getting started. In CF and ßF the expected stick end point values are set with (I don't know in what versions these came about but were not in the original port of MW to BF code): Code: rxrange rxrange 0 1000 2000 rxrange 1 1000 2000 rxrange 2 1000 2000 rxrange 3 1000 2000 These can be adjusted for radios that can not meet the standard values. These can also be used to Reverse a Stick's direction by swapping the End Point values: Example- rxrange 0 2000 1000 reverses the Roll stick. The FC firmware uses the mid_rc and these to calculate a stick value to hand off to the PIDC code. max_check is NOT used here. If a channel does not get to these end points then the FC will simply not see full movement, either on one side or both. This is one reason I and others and the MW Wiki and CF docs state to adjust the radios stick end points to these defaults. The other is ensuring the stick exceed the min_check, max_check thresholds so stick commands work. Another explanation be joshua bardwell: Max and min channel values are determined by the rxrange command. They default to 1000 and 2000. Max_check and min_check are used to decide if you are entering a stick command. Here is the kicker--how do you disarm the copter if yaw is active? You would have to go full deflection and the copter would yaw like crazy. In order to address this, when the throttle is below min_check, and when stick arming is used (vs. switch arming), the yaw input is disabled. If you are using motor_stop, the motors also stop running when the throttle is below min_check. Sometimes, this behavior is referred to as a deadzone at the bottom of the throttle stick travel. Many people refer to this as Deadband but causes much confusion with stick center DEADBAND CLI settings, therefore DEADZONE is prefered You can see that there is no need for a corresponding disabling of inputs at the top of the throttle range, because you never input any stick commands that require the top of the range when you are flying. The only stick command that is input when you are flying is disarm, and that is low yaw and low throttle. So there is a dead space at the bottom of the throttle range (below min_check) but no dead space at the top of any channel range. Videos by Joshua Bardwell: Cleanflight throttle parameter configuration - Part 1: http://www.youtube.com/watch?v=WFU3VewGbbAPart 2: http://www.youtube.com/watch?v=YNRl0OTKRGA "},{"title":"Why wont my FC board arm after upgrading the firmware ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-wont-my-fc-board-arm-after-upgrading-the-firmware-","content":"Check the following: Perform a full chip erase while flashing the firmware.You can't arm the FC while in the CLI. The status light flashes rapidly.Try calibrating the accelerometer.Check RX basics (see below)Reduce the amount of aux channels to reduce time for task RXIf the status light flashes slowly then the CPU could be over-taxed (see below).Gyro didn't CAL upon FC boot-up due to the copter moving. Copter MUST NOT move to cal gyro. An LED (and beeper if connected) will flash three times when Gyro Cals. If it did not cal then do a Gyro CAL stick command or increase the Moron_threshold or enable cal gyro upon Arming (new is 3.0).Copter Tilted more than the 'small_angle' setting. Increase small_angle. To Arm at any angle set this to 180. There is a new task scheduler present in firmware versions greater than 2.2.0 If upgrading from a version prior to this, then check to see if the FC status light is flashing. If it is then this indicates that there is not enough processing time to complete all the features that have been enabled. On newer versions on the ßF Configurator the CPU loading is displayed in the Status bar and MUST be less then 100%, preferably less than 50%. If at 100% then decrease the LOOP Rates (Gyro and/or PID), click Save and Reboot and recheck CPU loading. In the CLI type the tasks command and check the results: # tasks Task list: 0 - SYSTEM, max = 10 us, avg = 0 us, total = 2 ms 1 - GYRO/PID, max = 934 us, avg = 667 us, total = 26004 ms 2 - ACCEL, max = 153 us, avg = 122 us, total = 974 ms 3 - SERIAL, max = 67 us, avg = 2 us, total = 12 ms 4 - BEEPER, max = 8 us, avg = 0 us, total = 3 ms 5 - BATTERY, max = 40173 us, avg = 1 us, total = 47 ms 6 - RX, max = 180 us, avg = 130 us, total = 483 ms 7 - COMPASS, max = 156 us, avg = 125 us, total = 41 ms 8 - BARO, max = 137 us, avg = 106 us, total = 273 ms 10 - ALTITUDE, max = 264 us, avg = 152 us, total = 165 ms 11 - DISPLAY, max = 130302 us, avg = 26263 us, total = 5115 ms  This shows that the copter has Display, Magnetometer, Barometer &amp; Accelerometer systems enabled. Try disabling each one in turn until the CPU loading is under 100%. The list of CLI commands to achieve this are (this can be done in the newer Configurator): feature -DISPLAY set mag_hardware = NONE set baro_hardware = NONE set acc_hardware = NONE  Disabling the Accelerometer will force the copter into Acro mode (no self-leveling in Level and Horizon modes). Important: Remember to save the CLI settings and exit the CLI (otherwise the board will not arm!) One other method to free-up the CPU is to: Move from PID controller LuxFloat to MWREWRITE (Pre-ßF3.0)as the later requires less CPU power.Move from PID controller BetaFlight to Legacy (ßF3.0)as the later requires less CPU power.Disable soft serial. Do not forget to check the Basics. Use the Receiver Tab and check that each stick moves the correct channel slider and the slider moves in the correct direction. If the wrong channel slider moves, then check the channel MAP (eg AETR instead of TAER). Also check that the stick End Point values are still correct. Min/max stick ends points should be 1000/2000. For more information take a look at the Question called &quot;What is the best practice for configuring the Throttle end points&quot;. Make sure your throttle stick's minimum value is lower than min_check! If in the modes tab you see that the quad should be arming but isn't, use &quot;set min_check&quot; and make sure that that is greater than the lowest throttle value in the receiver tab. Is the Accelerometer Calibrated? Needs to be done once to allow arming. To determine if the ACC or other sensor enabled is causing problems use the &quot;status&quot; command in the CLI. The &quot;System load&quot; must be less than 100%. If greater than 100% then the processor has too many things to do.  # status System Uptime: 40 seconds, Voltage: 0 * 0.1V (3S battery - OK), CPU:8% CPU Clock=72MHz, GYRO=MPU6050, ACC=MPU6050.n, BARO=BMP280 Cycle Time: 491, I2C Errors: 0, config size: 1308  "},{"title":"Why is the Gyro light turned off and the 3D Model not moving ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-is-the-gyro-light-turned-off-and-the-3d-model-not-moving-","content":"This is a side effect of the accelerometer being disabled. When connected to the Flight Controller via USB, the 3D model in Cleanflight Configurator depends on the accelerometer to rotate properly when the multirotor is moved around. The gyro light being off is just a glitch in the Configurator. Neither of these are anything to worry about, it is perfectly normal. When you change your looptime in the Configurator (or via CLI command) to a faster speed than the defaults, Betaflight will automatically disable the accelerometer on some targets to free up processing power and allow the faster looptime. "},{"title":"What is Air Mode ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-is-air-mode-","content":"Some users were mailing Boris about the fact their radios couldn't be configured to have Idle up switch and asking him to implement something similar in the software. Boris initially thought that this could simply just be achieved with activating the &quot;Iterm&quot; from zero throttle together with P and D which were already done with &quot;pid_at_min_throttle&quot; feature. Somehow this wasn't giving the satisfying results. It still felt weak and unresponsive. Boris was trying to wrap his head around why this was the case ! We got our P, I and D on the ground....so why isn't fully stabilizing? After some readings in other open source projects and some of the older discussions, he realized that the key for this was in the mixer logic as someone already had a proof of concept code to improve it, which is pretty much scaling the PID's to our throttle level and stopping the stabilization when one motor reaches min throttle. Now Boris understood why folks always preferred this Idle up switch as it was automatically gaining a little bit more stabilization. But this is just a workaround where you loose some throttle below! The current mixer logic sounds reasonable as the early developers were always considering the low throttle values as a NON flying situation. Guess what? In 2015 we fly a lot with 0 or low throttle and especially in the mini quad scene! This has to be changed! The real answer lies in smarter mixer approach where the calculated PID output would always consider the maximum available motor output range to be able to get the desired correction. With AIR mode the copter will always think it's in the &quot;AIR&quot; and will always try to correct as fast as possible and never become weak. We of course need this stabilization once in AIR! This has it's consequences for our ground situations which you have to be aware of. With Air mode it would mean that the motors could be spooling up after arming, but there is some protection built for that. When you arm and keep throttle stick low (below min check) it will know it is on the ground and the motors will not spool up. Once you move your throttle to higher position for more than 1 second and pitch and roll are not centered anymore it will fully activate the stabilization with 0 throttle! So you have to be aware that if you would land very quickly after first take off that the motors now are able to spool up as the copter thinks its flying and has max ability to correct. Dont worry you can disarm now or you can keep throttle low with roll + pitch stick centered and it will still spool down or at least it will not spool up anymore. "},{"title":"A quicky explanation from ctzsnooze:​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#a-quicky-explanation-from-ctzsnooze","content":"Let's say you have PID_at_min_throttle enabled, pull throttle back to zero, so that all motors are at min_throttle, and pull the roll stick to the right quickly. The left two motors will speed up, but the right two can't go any slower. So only the left two, in speeding up, contribute to getting the roll going. Contrast this to a right roll at hover throttle. The PID requested is the same as for the roll above, and the left two motors speed up to the same extent. But the right two can go slower than hover rpm, and they do. That's why, before airmode, even if idle up was enabled, or PID_at_min_throttle enabled, a roll at hover throttle would always be quicker than a roll at zero throttle. What airmode does is to compensate for the motors that can't slow down. With airmode enabled, as soon as the mixer determines that some motors have to go to min_throttle, the other motors are sped up accordingly, so that the differential required to generate the turn is the same as it would be hat hover throttle. Hence airmode maintains roll rate when any of the contributing motors hit zero (or max) throttle. It ensures consistency of roll rate at extreme throttle values. That's how airmode is different from pId-at-min-throttle. The feature might still be optimized based on experiences of the Beta Testers, but is looking good already. "},{"title":"Visual demonstrations of how to use air mode and enjoy more in air​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#visual-demonstrations-of-how-to-use-air-mode-and-enjoy-more-in-air","content":"http://www.youtube.com/watch?v=mlEJFMNWyvQ http://www.youtube.com/watch?v=b0qVUa4AeDQ "},{"title":"A Joshua Bardwell video on Air mode​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#a-joshua-bardwell-video-on-air-mode","content":"https://www.youtube.com/watch?v=d2nRrVENEYM "},{"title":"Black Box analysis video of Air Mode​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#black-box-analysis-video-of-air-mode","content":"Part 1: http://www.youtube.com/watch?v=PP_De47io18 Part 2: http://www.youtube.com/watch?v=goYT3PcA-dE Part 3: http://www.youtube.com/watch?v=z0ZUsdUD9iw "},{"title":"How do I enable Air Mode ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-do-i-enable-air-mode-","content":"One method is to use a 3 way switch as follows: Pos 1: Disarm (motors do not spin) Pos 2: Arm (motors start spinning at min_throttle value) Pos 3: Arm + Air Mode (motors keep spinning at min_throttle value but use the new Air Mode Mixer) The Motor Stop Feature can be enabled or disabled, and it will behave as it normally does when Air Mode is not active. However, once Air Mode is activated, Motor Stop will be overridden, and the motors will spin at min_throttle or above. Air Mode min_throttle value recommendation: &quot;As low as possible min_throttle where motors do not stop spinning at all times is the most recommended one. I do recommend using as high as possible range for throttle like 1000-2000.&quot; - Boris comment **You do want min_throttle as low as possible, but a good rule of thumb is to find the throttle value (in the motors tab) at which all 4 motors spin reliably and without twitches. Then add 10 to that number and set that as min_throttle. For smaller motors (1306 3100kv motors for example), you may need to add 15 or 20 because they have less torque at very low throttle values. As you do a low throttle flip or drop, you DON'T want the air resistance on your props to overcome the power provided at min throttle and cause the motor to bog down and stop. Note: some ESCs can desync on very low min_throttle values when throttle is raised from zero rapidly. If this occurs then increase the min_throttle value another 20-40sec or until the ESCs do not desync on rapid throttle increase from zero. From a Post by teracis: To get airmode working all you need to do is go to the modes tab in configurator and set it to activate the same way you would with an arming switch. This is something you will need to learn so check out a tutorial rather than one of us spelling it out for you here, it will be quicker. I suggest arming on a switch, if you want to stick arm you do so at your own peril. If you want Airmode on permanently, tick the box and then drag the slider so it covers all the way from 1000 to 2000 and it will be on permanently. Using a 3-position switch, the flight procedure could be: Connect Battery and ensure the copter DOES NO MOVE while the FC boots and does a Gyro Cal. The beeper will beep three times once the Gyro is cal'ed.Arm motors (motors start spinning)Enable AirMode (no 'I' windup on ground)Lift off &amp; fly around (motors will never stop in flight even at lowest throttle)Land and disarm motors There are some people saying or complaining about their minimum throttle in airmode. Your min_check determines your lowest possible throttle value out of your TX! The lower your min_check is configured the lower throttle you can get out of your quad in air mode. If your min_check is set to 1100 and your TX goes down to 1000 that would mean that it is already giving some throttle. I use min_check a bit higher than 1000. I believe something like 1015 or 1020 "},{"title":"What is Acro Plus ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-is-acro-plus-","content":"Any value of AcroPlus above 0 causes any accumulated iTerm to be reset to zero (and kept at zero) whenever your sticks are at more than 70% of full throw. When restored to less than 70% of full stick travel, iTerm is only allowed to return to 'normal' slowly, actually at 0.1% per processor loop. ITerm therefore takes about 0.5s to return to 'normal' after a flip or roll on 2kHz targets. This improves immediate post-roll/flip stability. AcroPlus changes stick responsiveness by modifying the way in which the PIDs affect the motors, more so at the extreme of stick movement. Individual PID values are calculated as usual, so the PID sum value (the sum of pTerm, dTerm and iTerm) is calculated exactly the same. The maximum possible allowed limit for PID sum is unchanged at 1000. The actual PID sum value can be thought of as the actual final value sent to drive the motors. Acro Plus modifies the PID sum value, essentially in linear proportion to acroPlus/100, and in square proportion to the angle of the sticks, up to the the maximum possible total PID value of 1000. If the AcroPlus value is low, i.e. 1, there is almost no change in PID sum, regardless of stick angle. Basically the PIDs work like normal, its just that the iTerm effects described above are now fully active. As usual, stick sensitivity at 100% stick travel (i.e. maximum roll rate) is set by RC and pitch/roll rates, while center sensitivity is set by these and the amount of applied expo. As AcroPlus values are increased, two things happen. First, the PIDsum values that normally control the motors get progressively reduced in linear proportion to stick angle. Second, and in place of the lost PIDsum values, a simple squared multiple of stick angle goes direct to the motors. Lets consider the numeric outcomes of the current code - I hope I've got this right: If AcroPlus is 100, and you are at 100% stick travel, you PID calculations keep happening but are completely ignored. Output to motors is simply set to the maximum allowed value for PID sum, i.e. 1000. So if you held your stick full right like this, the two left motors would basically go full on and the two right would go to min_throttle. PID loop would not constrain or control this at all. Your quad will rotate as fast as it possibly can. i.e. basically direct motor control around full sticks. If AcroPlus is 100, and you are at 50% sticks, it's a curious combination of the two. The normal PID sum calculation is still active, but the amount driving the motors is halved, while 25% of the maximum allowed output to the motors is added. So if your PID sum calculation at some instant was 350, the amount going to the motors would be 350 + 250 = 600, or 60% of maximum possible. The '250' part is fixed by the stick angle but the PID part will vary according to usual PID processes. If AcroPlus is 100, and you are at 10% sticks, it's again a combination of the two, but at lower stick values the normal PID control mechanisms very much dominate. The drive to motors will be 90% from normal PID calculations, and only 1% of the maximum allowed output to the motors will be added to that (i.e. basically normal PID operation around center sticks). The amount of the 'direct' motor control to stick angle is stick angle % squared. Since 0.1 * 0.1 = 0.01, 10% stick angle generates only 1% of the 'direct stick control' proportion available at full stick angle. 20% stick angle generates 4% direct control, 30% -&gt; 9%, 40% -&gt; 16%, 50% -&gt; 25%. Basically exponentially greater proportion of direct vs PID control. When AcroPlus is at a number less than 100, the 'direct control' effects are linearly proportionally reduced, though you always get the full iTerm benefit. For example, if you set AcroPlus to 10, you get 10% of the maximum possible AcroPlus effect. That means, at 100% stick, PID sum will only get a stick angle related contribution of 100, and the rest will be determined as 90% of the normal PID sum value. At 10% stick, the stick angle related contribution to PID sum will be only 1 (1/1000th of the maximum possible) and 99% will come from normal PID processes. Therefore you can see at higher AcroPlus values and higher stick angles, the PIDs themselves become a bit less relevant because the motors are being more directly controlled by the angles of the sticks alone. This makes motor control more direct but also much more extreme. Note that near or very near center sticks, AcroPlus has markedly less effect on normal PID control outputs. Hence, AcroPlus values in the 20's will have relatively little effect on center stick sensitivity, but most likely will significantly increase full stick roll rates over and above your rate settings. Hence Acro Plus can be considered a form of exponential rate multiplier, outside of the normal PID mechanisms, that should, in most quads, increase roll rates at high stick angles quite significantly. The iTerm coding changes prevent iTerm windup problems that would otherwise inevitably cause loss of control or serious bounce-back at the end of such extremely high rate rolls or flips. "},{"title":"Note: Acro Plus was removed in V3.0 and replaced by Srates. Read the 3.0.x Wiki page.​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#note-acro-plus-was-removed-in-v30-and-replaced-by-srates-read-the-30x-wiki-page","content":""},{"title":"What is 2kHz mode ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-is-2khz-mode-","content":"See the &quot;Gyro based loop implementation&quot; description on the Wiki Home page. 2kHz mode is simply a faster Gyro based loop that runs at an update rate of 2000 times a second or every 500usec. Here is a great analogy: You are driving a car. You run on 1khz so you are only allowed to open your eyes once per second. In this time you must not only look at the road ahead but also the wheel, speedo, RPM, radio, and so on. Now close your eyes until the next time. 2khz let's you open your eyes and make decisions twice in the same timeframe as 1khz. So you are heading for a collision at 60kph. 1khz will let you adjust over that distance by a factor of one. 2khz let's you adjust by a factor of two (Yea I know, but I am explaining basics). So to make a one meter horizontal adjustment in 1K would take you 6 meters the equivalent in 2k would take you 3 meters. This is not gospel, just a way to explain the difference. 1KHz mode equals a LoopTime of 1000uSec 2KHz mode equals a LoopTime of 500uSec Have a look at this video form more information: http://www.youtube.com/watch?v=j2YtpeHGafs "},{"title":"How do I activate 2kHz mode ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-do-i-activate-2khz-mode-","content":"For Betaflight 2.4.0 onwards you should NOT use CLI but rather set looptime to 500 in the Configuration tab of the GUI. CAUTION: Appropriate sensors will automatically be disabled on F1 boards. For betaflight version prior to 2.4.0 can use the CLI and make the following commands, dependent on the Flight Controller type: For F3 boards set gyro_lpf = OFF  For F1 boards set acc_hardware = 1 set baro_hardware = 1 set mag_hardware = 1 set gyro_lpf = OFF  "},{"title":"NOTE: 2k mode was removed in V3.0 and up.​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#note-2k-mode-was-removed-in-v30-and-up","content":""},{"title":"Limitations of 2kHz mode​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#limitations-of-2khz-mode","content":"Note that there is a restriction on the number of available AUX channels in 2kHz mode (actually on any loop frequency greater than 1kHz). For F3 boards 6 AUX channels are available For F1 boards 4 AUX channels are available For Betaflight 2.4.1 onwards the number of Aux channels is selectable with the set max_aux_channels (see the CLI commands section of wiki). Note:Some ESCs will not calibrate at 2kHz and faster Loop Rates, KISS ESCs have been reported to have this issue. The fix is to simply set Loop rate to 1kHz (1000usec looptime) then calibrate the ESCs and change back to the desired looptime. "},{"title":"What Flight Controllers are recommended to get the best out of BetaFlight ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-flight-controllers-are-recommended-to-get-the-best-out-of-betaflight-","content":""},{"title":"NOTE: This list is old since there are just too many new FC's now on the market. Check the Boards in the Wiki menu on the Right and the Released hex files.​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#note-this-list-is-old-since-there-are-just-too-many-new-fcs-now-on-the-market-check-the-boards-in-the-wiki-menu-on-the-right-and-the-released-hex-files","content":"Here is a list of FCs compiled around the end of January 2016. The opinions regarding Pros and Cons are also shown. Flight Controller\tProcessor/Sensor\t2KHz mode\tPorts\tOpinionNaze32 rev. 5\tF1 MPU6050-I2C\tY (disable Accelerometer, Barometer, Magnetometer)\tUARTs 1 and 2. UART 1 shared with USB\tComes in acro and full. Full version has a barometer, magnetometer and dataflash for Blackbox. Uses relatively inconvenient pads for the receiver. A tried and tested board but now superseded by the rev. 6. Naze32 rev. 6\tF1 MPU6500-SPI\tY (disable Accelerometer, Barometer, Magnetometer)\tUARTs 1 and 2. UART 1 shared with USB\tNow even the acro version has a barometer and datafash. Uses through-hole instead of pads. USB connector moved to the right. Also has an SBus inverter. 6a fixes the issue with ESC calibration and 6b fixes the Spektrum sat issue. The F1 processor is starting to reach its limits and an F3 board is advised. Several users are reporting erratic behaviour and strange issues with this board that could be due to the use of the MPU6500 gyro that has a worse noise spec than the 6050. There is also a compelling theory that the MPU6500 does not like high vibration environments. SPRacing F3\tF3\tY Hardware issues resulting in seemingly-high failure rate. Micro-connectors suck. Flip32/Flip32+ DragonFly32/DF32+\tF1 MPU6050-I2C\tY (disable Accelerometer, Barometer, Magnetometer)\tUARTs 1 and 2. UART 1 shared with USB\tComes in acro and plus. Plusversion has a barometer, magnetometer. This is a Clone of the Nase32 but with Through Hole connector pads. TBS PowerCube\tF3\tY Super expensive, like all TBS gear. The ESC is listed as able to run SimonK, which means it's Atmel, which means it's probably got mediocre performance. Dodo\tF3 MPU6050-I2C\tY\tCP21xx on UART1\tNo complaints personally. Now that they fixed the ESC back-feeding issue, that is on V3. Also has 2MB SPI Flash on board for BB logging. So this seems to be a great option at the moment. MotoLab Tornado\tF3\tY\tVCP USB, UARTs 1,2,3\t5v buffers on motor outputs mean no BLHeli passthrough. Uses the STM's Virtual Com Port which requires special procedures. Other than that, awesome FC at a good price. Detailed instructions MotoLab Cyclone\tF3 MPU6000-SPI\tY\tVCP USB, UARTs 1,2,3\tBuilt in 5V switching regulator. Bi-directional ESC pins for HLBeli pass-through. Uses a VCP which means an external USB to Serial device must be connected to use BLHeli passthrough until passthrough over VCP is added. Does not have on board dataflash XRacer F3\tF3 MPU6050-I2C\tY One of the cheapest F3 boards available. Nice design and board layout though it lacks pins for VBat and RSSI. VBat can be added by soldering a voltage divider directly to the processor. Has more dataflash than any other board. See here. v2 of the board has VBat and RSSI solder pads. LUX\tF3 MPU6500-SPI\tY\tVCP USB, UARTs 1,2,3\tLooks good. Doesn't have a dataflash chip. Uses the STM's Virtual Com Port which requires special procedures. Uses MPU6500 which is not ideal. KISS\tF3 MPU6050-I2C\tY\tVCP USB\tDoesn't run Betaflight (yet) LOL. SPRacingF3Mini board\tF3\tY\tVCP USB\tNow supported in 2.4.0-RC6. With SD Card Socket, Race Transponder and 5V BEC. Looks good for Racing copters. MotoLab Tempest\tF3 MPU600-SPI\tY\tVCP USB, UARTs 1,2,3\tBuilt in 5V switching regulator. Bi-directional ESC pins for HLBeli pass-through. Plus a PDB "},{"title":"Additional Information:​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#additional-information","content":"Roundup of F1 based boards: http://www.youtube.com/watch?v=7u1PcvDosBM Roundup of F3 based boards: http://www.youtube.com/watch?v=StnC9Q_O1Fw Recommended CleanFlight/BetaFlight boards: http://www.youtube.com/watch?v=SJa_LgbwwMk "},{"title":"What are the differences between LuxFloat and Rewrite PID Controllers ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-are-the-differences-between-luxfloat-and-rewrite-pid-controllers-","content":""},{"title":"NOTE: Both of these PIDCs have been removed in V3.0 and up.​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#note-both-of-these-pidcs-have-been-removed-in-v30-and-up","content":"According to Boris, there is literally no difference between Lux and Rewrite any more (from a flight characteristics point of view), except that they scale the numbers differently. So the actual PID gains and rates will vary between them, but the processing of gyro data is identical. The main problem with Luxfloat is that the CleanFlight Configurator GUI by default only gives you 0.1 precision, which is too big of a step for Luxfloat. It would be like trying to tune Rewrite, and only being able to use whole integers like 4.0, 5.0, 6.0. LuxFloat uses Floating Point maths whereas Rewrite uses Integer maths. What does this mean ? Floating Point maths needs more processing power from the Flight Controller, and so F3 (and above) CPU based FCs will have a much easier time calculating the values in the PID loop since it has a dedicated Floating Point Unit (FPU) for these calculations. Why should this matter ? The longer the PID controller takes to process the Gyro/Accelerometer data the slower the &quot;loop time&quot;. Faster loop times are desirable as it makes the copter more responsive to pilot commands, and also (more importantly) the ability to correct to external disturbances to the copter (like wind and propwash). From a development point of view, LuxFloat is easier to understand since ReWrite has to emulate mathematical functions using complicated routines rather than simple commands that a dedicated FPU can handle. People like Rewrite nowadays simply because it is easier to tune because it offers more functional precision in the gains. The days when Luxfloat and Rewrite flew differently (like before Luxfloat had error-seeking D term, or whatever) are gone. Level mode angle control and stick sensitivity is different in Luxfloat from Rewrite in BetaFlight In Luxfloat level/horizon modes, full max angle is reached at full stick. This means very low stick sensitivity in level/horizon modes at rates that are quite snappy in acro, especially if max_angle is set to a low value, like 45 degrees. The stick sensitivity does not change with changing rates. I personally can't fly level/horizon like this. In rewrite, stick sensitivity is managed differently; sensitivity depends on rates and is closer to acro sensitivity. This may result in reaching max angle before the sticks reach their full travel. I personally prefer this (it was my coding hack, I think, that made it like this). It's good both for teaching and for experienced pilots. Boris posted this in the thread about Tuning Rewrite to feel the same as Luxfloat: I was saying that if you would take some time and work out the math that you could produce same numbers with both Just an example to show you. You don't have to understand the code to understand this part. Luxfloat P Code:  // -----calculate P component PTerm = RateError * P * TPA;  rewrite P Code:  // -----calculate P component PTerm = (RateError * P * TPA) / 128;  The difference above is that P gain number on rewrite is higher, but is being divided by 128 in the PTerm calculation, while luxfloat uses directly the number you entered from cli. Note that RateError number is using degrees/sec in luxfloat and in rewrite its abstraction from the original gyro output, but both can produce same PTerm when right P is selected. So if you can find P component what can produce the same PTerm result you will get same behaviour. Practical translation: 1.0 in luxfloat means exactly 4.0 in rewrite just for Pterm. This same translation formula can be done on all numbers like rates, Dterm and Iterm. New in V2.5.4 The 'P' and 'D' Terms in Luxfloat are now shown as 4 times higher to allow better resolution when tuning. The actual PID scaling stays the same and can be seen in the CLI. Additional comment from Boris on MW-rewrite verse Luxfloat: There should not be any difference between both in terms of PID's and rates. Well there is one slight difference actually, which I forgot to mention and even I forgot about it. rewrite still has a bit higher D range. To be exact rewrite has 2x higher delta for Dterm due to averaging summing instead of average dividing the sum. I would rather like to remove this, but dont want to cause people having to retune their rewrite. But even though with this Dterm rewrite should in theory handle bounces better....right? But that isnt the case. I know why. Rewrite has a Dterm deadband integrated in the integer logic, which helps keeping some noise away. But the lower numbers can cause some aliasing in dterm and some lower frequencies which aren't there may be thrown into pid controller. There will be some more data about this soon to confirm, but luxfloat may now become a winner certainly now where it became better tunable. New in ßF 2.8 and above: the PIDC names LUXFLOAT &amp; MWREWRITE are no longer used since Boris has rewritten the code and they not longer use the same algorithm as before. The new names are FLOAT &amp; INTEGER. "},{"title":"What PIDs do and how do they do it ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-pids-do-and-how-do-they-do-it-","content":"Here a good basic PID explaination by Bruce for those who want to learn about it.https://www.youtube.com/watch?v=0vqWyramGy8 "},{"title":"Is there a good resource for learning how to tune using Black Box ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#is-there-a-good-resource-for-learning-how-to-tune-using-black-box-","content":"a. &quot;I would check out Joshua Bardwells youtube channel. I haven't watched all these videos... I just picked them from his channel. Quote:http://www.youtube.com/watch?v=FH_m5rI6MKY http://www.youtube.com/watch?v=hzm6H9WnCgQ http://www.youtube.com/watch?v=Neqzeh9f-uk http://www.youtube.com/watch?v=7UNg8fkV6zQ Also he has at least 100 blackbox log analysis videos where he was gracious enough to help other people out. Check out those and you can learn a lot just from him reviewing peoples footage and pointing things out. There is kind of an 'art' to it so to speak ... (and goes on to mention he doesn't really use Black Box to tune) &quot; - from powdermnky007 reply b. More info: Joshua Bardwells's Blackbox Log Video Responses link: http://www.rcgroups.com/forums/showthread.php?t=2484202 c. But: &quot;I think that even without blackbox you can get a great tune. People don't realize that there are 2 separate things. There are rates and there are pids. The rates is something we feel even more than PIDs. There is no auto-tuning what can know what rates your brains like. The rates are actually directly being interpreted in our brains to certain stick feel. Good tuning just makes that feel tighter and helps removing unnecessary oscillations. But even with oscillations it doesn't mean that it will feel bad.&quot; - Boris comment &quot;This is the same as my experience. PIDs Parameters are one thing, and Rate Parameters are another. Take a car as an analogy. &quot;PID&quot; would be like tuning the engine, so that fuel, air, timing are correct (things in the Flight Controller). &quot;Rates&quot; are like tuning the steering wheel, pedals, gear (stuff you directly touch like the Transmitter Sticks) so that the 'feel' is correct. And adjustment of the Rates itself made a huge difference on how 'sensitive' the aircraft feels, especially to a noob like me&quot;- Kuson comment d. Battery Factor: &quot;A while ago someone took over my pids to his quad with same setup and he said it didn't feel good. So I flew his setup and it indeed felt like PIDs were twice as low as they should be! It appeared he was using almost 2 years old (Turnigy) Nanotechs completely lost their power. Even I feel huge difference between different batteries I have.&quot; - Boris comment Also Read the PID Tuning Guide the Black Box logging and usage Wiki pages. "},{"title":"Why does my copter behave erratic after a crash ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-does-my-copter-behave-erratic-after-a-crash-","content":"Some people have experienced erratic behavior (jitters etc) after a crash, as if P went up significantly. &quot;When you crash your gyro can get upset. It has always been like that even from Baseflight days. Some gyros are more sensitive than others. To Recalibrate Gyros: &quot; Disarm. Perform gyro calibration (left stick down left....right stick down) and it will be fine. You will see leds blinking and it will beep. Also when plugging your lipo in your quad, your quad should not be moved.&quot; - Boris comment If you fly in Auto-level modes (Angle or Horizon) then the Accelerometer can easily get upset and gives False readings. The Accelerometer can also get upset if there are excessive vibrations or during fast Aerobatic moves. Not much you can do except wait for the accelerometer readings to settle down. This is easily seen if you raun a minimOSD with the Artificial Horizon displayed. "},{"title":"How does yaw_jump_prevention_limit work ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-does-yaw_jump_prevention_limit-work-","content":"&quot;First you need to know the basics of a mixer function on multirotors. Mixer gets PIDsum of all 3 axis and translates that into motor output. There is obviously a certain power available there, which is a range of max_throttle - min_throttle for each motor. Lets say it is typically a range of 1000 (2000-1000). So we have 4 motors determining the behavior of quadcopter with power range of 1000 for all 3 axis mixed up scaled to the throttle. The yaw axis is the one what requires quite a lot of power on quadcopters but also depends of setup used. The ratio of power used for yaw to get the same rotational rate is more than one for pitch and roll. This means that hard yaw corrections could use too much of the entire available throttle range in each motor so the roll and pitch would not have enough of it. But also the way of how yaw works can create a lot of thrust where the quad would gain height to get a desired yaw correction during yaw stops what generate the most power. Therefore the yaw_jump_prevention_limit was introduced to give a maximum of yaw PIDsum with centered sticks. That means that during yaw correction, the yaw is not able to use too much of available motor power so the roll and pitch would not be affected as much and that also the hard yaw stops would not create a lot of jump. Lowering yaw_jump_prevention_limit will result in less motor power spilled for yaw during gate clipping for example as well. You still have the full yaw control when using stick input. But anyway I am still surprised that your gear suffers from jump. I would say that small...and powerfull x quads would typically not suffer from jumps.&quot; - Boris B "},{"title":"How should I configure the FailSafe system ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-should-i-configure-the-failsafe-system-","content":"FailSafe is something that needs to be configured in the radio receiver and the Flight Controller. Take a look at this overview as it describes how this should be done: http://www.youtube.com/watch?v=dikr9oDzQqc Some additional information can be found from 6:20 onwards in this video: http://www.youtube.com/watch?v=htkw7d97bOo NOTE: Failsafe configuration has changed in Betaflight 2.4.0 onwards and CF Configurator 1.2.0. The relevant documentation can be found here. A good method for RX's that do NOT have a FailSafe output (no Pulses):Setting Up Failsafe on FrSky BeeBrain "},{"title":"What is the best practice for configuring the Throttle end points ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-is-the-best-practice-for-configuring-the-throttle-end-points-","content":"For KISS ESCs: Just cal with max_throttle at 2000 and min_command at 1000 from the CF config Motor tabs. Joshua's method for BLHeli 14.4 and lower. This can be a difficult and confusing concept to grasp at first. The best way to describe the correct method is by way of the following tutorial video. Part 1: http://www.youtube.com/watch?v=WFU3VewGbbA Part 2: http://www.youtube.com/watch?v=YNRl0OTKRGA New information concerning BLHeli Max_throttle calibration. Watch these Videos from Joshua Bardwell Cleanflight BLHeli Top-End Throttle Calibration : https://www.youtube.com/watch?v=spegUYF8DxkThe Effect of Top-End CleanFlight BLHeli Throttle Calibration : https://www.youtube.com/watch?v=RW2XalNPpQk The new BLHeli Firmware v14.5 has some differences in calibration from 14.4. Joshua B recommends: Calibration procedure I currently recommend for BLHeli 14.5 is min_command=1000, max_throttle=1980, run calibration. Done. Top-end calibration may not be needed since BLHeli 14.5 seems to have much less or almost no dead band at the top. Using max_throttle=1980 is because everybody seems to be getting 2020 as the calibrated value if they use max_throttle=2000. So the goal of using 1980 is to ensure that you calibrate below the top of the scale. Another approach I have seen suggested is to set min_command=1000, max_throttle=2000, and then manually use the Motors tab to determine the spin-up point and max rpm point for each motor, then manually set those values into the ESCs. This is a fine approach too, but a little more intensive. Then compudaze posted: I've had some ESCs still hit 2020 using 1980. Been using 1970 as it doesn't hit the max. Tested with LB20, RG20, UBAD30, XM20. New Video from Joshua Bardwell titled &quot;BLHeli - 100% Explained&quot;.https://www.youtube.com/watch?v=0Bi1XcdpnQI "},{"title":"How do I configure BLHeli ESCs via BetaFlight ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-do-i-configure-blheli-escs-via-betaflight-","content":"If running at 1kHz and faster BLHeli 14.2 or later is required and disable PWM in the BLHeli configuration. This is to ensure the BLHeli Firmware recognizes the OneShot125 pulses properly. If you are running BetaFlight, you can program and flash your BLHeli ESCs (that have BLHeli bootloader only!) directly through the flight controller, without disconnecting the signal wires or disassembling the copter at all. As a rough guide to determine if your ESCs can be flashed via BetaFlight: ESC MCU manufacturer\tESC Firmware\tBootloader Type\tFlash via BetaFlightATMEL\tSimonK\tSimonK\tN ATMEL\tBLHeli\tSimonK\tN ATMEL\tBLHeli\tBLHeli\tY Silabs\tSimonK\tSimonK\tN Silabs\tBLHeli\tSimonK\tN Silabs\tBLHeli\tBLHeli\tY In general, it's all down to the ESC having BLHeli Bootloader so that ESC flashing can be done via Betaflight. Follow this guide to learn more: http://www.youtube.com/watch?v=YWLk4qcQcvw PLEASE NOTE: This does not work on the following boards: Flight Controller\tFailure ReasonMoto Tornado\tSince the 5v buffers on the motor outputs are uni-directional and do not support bi-directional communication. These buffers make the motor outputs more stable, but prevent passthrough. There is no software fix for this. The only fix would be a re-design of the board to remove the buffers or change them to bi-directional buffers. Naze32 Rev6\tThe Naze back-fed the ESCs from the USB port. So the ESCs would power up, see the throttle signal, initialize, and then they wouldn't go into programming mode after that. The Rev6a has fixed this issue since it was released in November 2015 "},{"title":"Why does my copter flip when trying to takeoff ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-does-my-copter-flip-when-trying-to-takeoff-","content":"Here are the most common causes: Motors plugged in to the wrong FC headers.Custom mix is incorrect.Motor spinning the wrong direction.Props on the wrong motor.Flight control board mounted facing the wrong direction (e.g. yaw 90 degrees left but the board_align has not been configured to reflect this). "},{"title":"Will the PIDs change significantly when switching from two-blades to tri-blades ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#will-the-pids-change-significantly-when-switching-from-two-blades-to-tri-blades-","content":"Some have found they need a small reduction in P gains when going from two-blade to tris. The copter was still flyable with no changes, but some have experiences increased prop-wash oscillation. "},{"title":"Why do I have issues flashing my new F3 Flight Controller ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-do-i-have-issues-flashing-my-new-f3-flight-controller-","content":"Some of the new F3 boards come with a Virtual COM Port (VCP) that is used to communicate with a PC or MAC over the USB interface. Take a look at this video that talks about flashing the Lumenier LUX board that has a VCP port:http://www.youtube.com/watch?v=b8fMsazyxDw Within this FAQ, check the answer to &quot;What Flight Controllers are recommended to get the best out of BetaFlight&quot; for more details on which FC has VCP ports. The Installing Betaflight has more details on USB Drivers, etc. "},{"title":"Will Betaflight code be merged back into Cleanflight ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#will-betaflight-code-be-merged-back-into-cleanflight-","content":"Yes, it is the intention that this will happen gradually over time. Sometimes features from CleanFlight also get merged into BetaFlight too. This code merge (in both directions) has already started happening from BetaFlight V2.4.0 and CleanFlight V1.12 onwards. Question posted and Boris' answer after the 3.0.0 Released:​ Q by Ede2016- Does this mean from now on BetaFlight and CleanFlight are independent from each other? I thought the idea was that BetaFlight is for all the Beta testers (a lot by now) and CleanFlight should be for &quot;normal&quot; pilots who can wait a few months for updates - after they are beta tested and stable. A from Boris- That was the initial scope of this project, but you can understand that this all is done in free time. And maintaining multiple versions is really time consuming and not efficient....well actually impossible. Due to a lot of changes in betaflight it is not that easy to just merge things back easily. Betaflight is completaly open source and all code is available for other open source projects like cleanflight. There are actually some developers who are continously working on merging things back and forth, but even those are struggling as divergion is getting bigger and bigger. Also the scope of cleanflight is very wide and betaflight primary only focuses on acro and level performance. Three main open source branches and their focus: Cleanflight (wide focus area)iNav (Autonomous modes like GPS etc)Betaflight (Mainly Acro and level performance) But they all work together and share things. But you can imagine also other aspects of merging things back is that you cant simply tell the users after upgrade &quot;your multirotor will fly completaly different and you have to fully change your rates / pids&quot; "},{"title":"When I update to the latest version of BetaFlight do I need to recalibrate my ESCs ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#when-i-update-to-the-latest-version-of-betaflight-do-i-need-to-recalibrate-my-escs-","content":"ESCs shouldn't need recalibration unless you changed the min/max throttle values in BetaFlight. For more information about ESC Calibration see this video: http://www.youtube.com/watch?v=o3Mg-9M0l24 "},{"title":"Why do my motors keep accelerating on the bench when I arm without props ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-do-my-motors-keep-accelerating-on-the-bench-when-i-arm-without-props-","content":"With props off on the bench, I arm the quad and the motors start. After increasing throttle a small amount then back to minimum I notice the motors keep increasing in speed. They don't go to max or anything, but they climb noticeably. Now if I was in Angle/Horizon with the accelerometer enabled I could understand that the quad was tying to level itself. But in Acro mode why should the throttle change on its own ? I'm guessing this is an Airmode effect. But just wanted to understand a little more about why. Answer: That is the flight controller trying to correct for changes in aspect, mainly due to fact your quad shakes slightly when the motors spin, the sensors pick it up and then the flight controller tries to correct, it can't because you don't have props on. All perfectly normal. Additional explanation: Originally Posted by MasterZap View Post Sorry, but this sounds like a fundamental misunderstanding of how the I term works. Or conversely, the behavior you see on the bench is exactly expected of the I term. Why? Because the copter isn't moving. If there is no movement, you have no gyro input. With no gyro input, there will be no positive (or negative) error signal to add to the I term. The I term is additive. As error is measured, that error is added to I. If error persists, I grows. If error STOPS, I STAYS. Only at NEGATIVE error does I shrink back down again. Since your copter isn't flying, you are only giving it half of the error (your stick input tells the copter to rotate x degrees a second, the copter is rotating no degrees per second at all, hence you have an x degrees per second &quot;error&quot; measurement) and I will grow. In the air, the copter would start rotating, error would shrink, and eventually become negative and decrease the I term back. So perfectly normal. You simply cannot make judgments on an I terms behavior without letting that I term act the way it wants. With props off, on the bench, you just get meaninglessness. /Z A quick way to test that there isn't some other issue causing it is use the motor test page to remove the PIDs from the equation. "},{"title":"Why do my motors spin briefly when rebooting the Flight Controller ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-do-my-motors-spin-briefly-when-rebooting-the-flight-controller-","content":"Since flashing 2.4.0 and rebooting from Configurator with a battery plugged in spins up the motors briefly. I'm fairly sure that didn't happen in 2.1.6, not sure about 2.3.5. Answer: This can happen in any firmware with battery plugged in. It can happen in 1 out of 100 times or every time. Thats not a bug....that's how OneShot works. The ESC would interpret a small pulse during power up and down as a signal and spin motors. It is really a short pulse what couldn't really harm anything but still can scare the s**t out of you ! It is also highly recommended to always use a Current Limiter when the LiPo is connected and the Config Gui is opened. This can prevent burning ESCs and motors. See: http://www.rcgroups.com/forums/showthread.php?t=2327875 "},{"title":"If the accelerometer is disabled and FailSafe Activates what happens to the copter ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#if-the-accelerometer-is-disabled-and-failsafe-activates-what-happens-to-the-copter-","content":"It cannot do self-leveling without the accelerometer sensor activated, so it won't Self-Level it will just tumble to the ground. It is recommended to setup Fail Safe to disarm (shut off motors) immediately upon entering Stage 2 and allow copter to Drop if the Accelerometer is disabled. "},{"title":"Why does my Flight Controller blink/beep lots of times when powering up ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-does-my-flight-controller-blinkbeep-lots-of-times-when-powering-up-","content":"During Firmware Boot-up the Gyro is Calibrated and should give three Beeps/Blinks. This indicates the Firmware is ready. Upon Arming there is one Beep which is from Syncing Video to a BB log. If gives repeated 2 Beeps this means NO Valid RX - This could be a bad wire to RX, or RX not binding to TX, or TX not yet sending data. 5 short blink/beeps followed by any number of long blinks/beeps indicates an error code. Number of long blinks indicates the following error: FAILURE_DEVELOPER: External interrupt of sensor failed to initialize.FAILURE_MISSING_ACC: Accelerometer/gyro sensor is missingFAILURE_ACC_INIT: Accelerometer/gyro sensor failed to initializeFAILURE_ACC_INCOMPATIBLE: The found accelerometer/gyro sensor is not compatible/not the expected oneFAILURE_INVALID_EEPROM_CONTENTS: EEPROM/FLASH configuration content is invalidFAILURE_FLASH_WRITE_FAILED: Write of configuration to EEPROM/FLASH failedFAILURE_GYRO_INIT_FAILED: Gyro initialization of SPI MPU6000 accelerometer/gyro failed The most common one seem to be error 2 where the accelerometer/gyro sensor can't be found, this is caused by a bad sensor or bad connections to the sensor, could happen because of a bad crash. On most boards gyro and accelerometer is the same chip so acro flying isn't possible when the accelerometer isn't found, it's not just the accelerometer that's bad but the whole chip. Error 3, 4 and 7 could also be caused by a bad accelerometer/gyro sensor. Error 5 and 6 indicates memory read/write problem of the MCU (main processor). In most cases a new flight controller board will be needed if the user isn't for example able to re-solder the sensor. Above are Hard Faults the Processor detects upon boot-up and initialization. Additional reasons for flashing LED and/or beeping are: No signal from RX. This could be simply the TX is off or the wrong Model/binding selected or a hard fault of the RX like no power or bad cable. Accelerometer Not calibrated if the ACC is enabled (check the CLI). If acc is enabled then it must be cal'ed once and typically done in the config GUI. Copter titled too far if the Acc is enabled. "},{"title":"My PID D gain value is small after tuning in 2khz mode is that normal ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#my-pid-d-gain-value-is-small-after-tuning-in-2khz-mode-is-that-normal-","content":"The latest 2KHz versions of Betaflight seem to be enhancing the influence of P, to the point where you can fly with good P gains and very little D. It's also good practice to keep the D gains low so that the motors don't get too hot with all the rapid speed changes. "},{"title":"Why are the accelerometer Black Box traces so bad in 2KHz mode ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-are-the-accelerometer-black-box-traces-so-bad-in-2khz-mode-","content":"With my quad on the ground, 1Khz, no props, motor-stop, the accelerometer traces are smooth x=0 y=0 z=1. There is just the tiny amount of noise you would expect from the chip itself. On 2Khz, the data in BlackBox is nonsense, eratic X=7G, 3G, 5G all over the place. The quad is stationary on the ground, the motors aren't spinning, is this aliasing ? Answer: Yes, this is really effects of aliasing what you are seeing there. Acc has nothing to do with 2khz....it is same with any gyro rate. We are just undersampling it on 2khz. If you use Level/Horizon modes then just stick with 1khz or get some very fast F3 target....one that will do full sampled acc even on faster rates. "},{"title":"How do I get vbat_pid_compensation system working ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-do-i-get-vbat_pid_compensation-system-working-","content":"set vbat_pid_compensation = ON  Tune your quad with a full lipo....your PIDs will then be scaled to that reference voltage. Voltage scaling from full lipo to empty is limited to 25%. Should be enough as we fly to 3.3v usually. Also good when you have old and new lipos. The old ones with more voltage droop will automatically get more PID adjustments. It also disables itself when voltage completely drops below 2 cells Forum Question from eL_Verde: I tried your PID voltage compensation. It felt good, but I think for me, and my setup, that 25% plus over gain when the voltage is low is a little high.. Can I mod this value for 20% or 15%?? Boris' Answer: voltage gain is adjustable max voltage = 1min voltage (default 3,3) = min adjustment. It is even more than 25%!When you raise min voltage up you will get less compensation I also think that vbat compensations helps against prop wash as the motor gives more constant power during power dips. Those are the main reason of prop wash weird oscillations besides air effect Note: This requires VBAT connection on the FC (LiPo pack voltage) and VBAT Feature Enabled. "},{"title":"With vbat_pid_compensation are there issues moving from 3S to 4S batteries ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#with-vbat_pid_compensation-are-there-issues-moving-from-3s-to-4s-batteries-","content":"There won't be a problem, the cell count is calculated and the PID adjustments are based on the Cell voltage. "},{"title":"How can I run the PID controller faster than 2kHz ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-can-i-run-the-pid-controller-faster-than-2khz-","content":""},{"title":"Instructions for ßF V2.5.0 RC6 and later but before V3.0​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#instructions-for-ßf-v250-rc6-and-later-but-before-v30","content":"Set looptime (microSeconds) in config GUI. OneShot42 and MultiShot now supported 2 examples of auto config looptime 125 always 8khz gyro sampling (gyro_sync_denom = 1)when just oneshot125:pid_process_denom =3when use_oneshot42 or use_multishotpid_process_denom = 2 looptime 250 always 4k gyro sampling (gyro_sync_denom = 2)pid_process_denom = 2on f1 boards with luxfloatpid_process_denom = 3 etc.... motor update speed = pid speed calculation of motor speed: motor update interval us= 125 gyro_sync_denom pid_process_denom PID is always synced to motors! PID speed is immediately your motor update speed. Gyro can run faster than PID. The benefit of that is the higher sampling reduces filtering delays and helps catching up all higher frequencies that may fold down into lower frequencies when undersampled. Even when GYRO runs faster than PID it is still in sync, but every (pid_process_denom)th sample. "},{"title":"Instructions for ßF versions up to 2.4.1​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#instructions-for-ßf-versions-up-to-241","content":"TODO FC Settings? to change the refresh rate, one way is go into the CLI and change the Gyro denominator setting. For 2khz (500usec), set it = 4 for 2.6khz (375usec), set it = 3 for 4 khz (250usec), set it = 2 (iffy depending on ESCs) for 8 khz (125usec) set it = 1 (not recommended) Or just set the Looptime in the Config GUI. Note that only 5 looptimes are supported, 1000, 500, 375, 250 &amp; 125usec. Which FCs does this work on and how fast can they run the PID controller/Gyro readings? Which ESCs and on which Motors? Not all ESCs can accept a faster refresh rate. This can also depend on the motor kv rating. Since not many have run looptimes this fast it is best to read threads in RCG on the ESCs you are using to see what refresh rates and motor kv may work. Running Looptime at 250usec (4kHz loop rate) and OneShot125. How to prevent 'no pulses' at max throttle. Since OneShot125 has a maximum pulse width or 250usec this will not work if the looptime is also 250usec. The FC will never set a logic low to have a gap between pulses if max_throttle = 2000usec (OneShot pulse width = throttle output/8). One way to get around this is set the max_throttle to a lower value and Cal the ESCs to this value. Max_throttle = 1850usec should work (one person used this and it works). This allows 150/8 = 18.75usec gap between pulse at max_throttle. This is being called the &quot;Short Cal&quot; of ESCs in the forum threads. So far OneShot42 is not supported in ßF YET but would allow 4kHz refresh rates. Check MultiShot, RaceFlight &amp; BLHeli_S firmware. Important Note: With fast Loop rates there have been reports of the Gyro Caling during Bootup much sooner and the copter could be moving due to connecting the battery. If the copter is moving during Gyro Cal then the bad things can happen. Do observe the LEDs for very fast blinking or the three beeps. If you think the copter was moving during the Gyro Cal then just do a manual gyro cal with the Stick command, Hold minimum throttle and YAW then cent Roll and minimum Pitch. "},{"title":"What is OneShot125 OneShot42 and MultiShot and how do these relate to max_throttle and Looptime ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-is-oneshot125-oneshot42-and-multishot-and-how-do-these-relate-to-max_throttle-and-looptime-","content":"TODO With the Standard ESC calibration to min_command = 1000 and max_throttle = 2000. OneShot125 will send pulses to the ESCs that are 1/8th the Standard values of 1000 to 2000 or 125 to 250usec. Originally Posted by HIGHOCTANE32 Once you wrap your head around and think about looptimes and ESC pulses(whether the be 1000-2000us pwm, or 125-250uS oneshot or whatever as time(which they are) it all makes a lot more sense. Trying to sync a gyro rate that updates every 125us (8khz) or even 250uS with a ESC signal pulse that can be 250uS long..you can see the problem. Oneshot 42 and multi shot further shorten the ESC signal pulses, like oneshot 125 did, but even shorter, so the signal pulse can be completed faster than the gyro/PID update. Not a scientific explanation but hopefully that makes sense. But I agree if josh doesn't already have a video on it he needs one Some info here on Oscar Liang's excellent Blog site regarding MultiShot technique:http://blog.oscarliang.net/raceflight-multishot/ "},{"title":"What cycle time can I run on what board ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-cycle-time-can-i-run-on-what-board-","content":""},{"title":"F3 i2c targets:​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#f3-i2c-targets","content":"250 cycletime without acc, you can enable acc mode, but watch out for CPU usage when many features enabled. Anyway I recommend going to 2.6k when using accelerometer. Also boards with baro or mag on it even when disabled may decrease performance a bit. "},{"title":"F3 spi targets:​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#f3-spi-targets","content":"Not much worrying here. 125us looptimes and accelerometer and everything can be on. But always check CPU to be sure. "},{"title":"F1​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#f1","content":"With rewrite or mw23 250us cycle should be possible without problems on NAZE32 and all clones of it like flip32 etc when accelerometer disabled. Especially the boards without fancy sensors like baro or mag should run super smooth. The boards with baro even when disabled may have a bit higher cpu times. For level modes I recommend 1k mode. Those users don't necessary have to run 188hz gyro lpf....they still can set gyro_sync_denom to 8 to minimize latency by 1 millisecond. CC3D users should stay with 375 or 500 cycletimes. And all F1 users on luxfloat should not go lower than 500 or 375....probably even 375 is too much. With acc enabled stick to 1khz. (From BorisB) "},{"title":"How do I go about suggesting CF Configurator enhancements ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-do-i-go-about-suggesting-cf-configurator-enhancements-","content":"On GitHub, look up the Cleanflight Git. There's a link to the Configurator.Click on &quot;Issues&quot;.Start a new issue and preface it with &quot;Suggestion: short summary&quot;.Explain the new enhancement suggestion. "},{"title":"How do I lower the chance of my copter producing Magic Smoke when powering on ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-do-i-lower-the-chance-of-my-copter-producing-magic-smoke-when-powering-on-","content":"Start by doing a continuity check with a multimeter if you have one. A quick test for a short between the negative and positive pads on your power distribution board can save a lot of headaches. But ALWAYS use a Current Limiter when having the LiPo connected on the bench and Testing new setups. This has saved a few ESCs and Motors for many people. Build and use this Limiter with a Switch in-line for easy powering On/OFF.http://www.rcgroups.com/forums/showthread.php?t=2327875 "},{"title":"Why do we have RC Rate and also Yaw Pitch Roll Rates ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-do-we-have-rc-rate-and-also-yaw-pitch-roll-rates-","content":"Deeper Question: There is still some confusion about RC rate, Pitch, Roll, Yaw rate, and Expo. I understand that P/R/Y rates are how fast the quadcopter will rotate, and i know about expos too, but what is really RC rate? I can't really gain a full understanding of it. Some say it does the same as P/R/Y, some say it's different from it, some say it's stick sensitivity. But what is stick sensitivity really? Is it like expo? Answer: Think of it as fine tuning for RC Rate. It does the same thing just smaller increments and splits the axis up. Some people leave the RC Rate set to 1.0 and adjust the P/R/Y rates until the quad handles how they like (speed of flips/rolls etc). Once this has been set, the Expo values should be increased to allow for less sensitivity of the sticks nearer their center positions. This will make for smoother flight experience, and have the ability to perform fast rolls etc when the sticks move further away from the center. This is the best way to do it at the moment. "},{"title":"Why does it matter to prevent motor jitter ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-does-it-matter-to-prevent-motor-jitter-","content":"Two reasons: The motor is stop starting, this will generate heat and potentially damage/wear out components.As above your motor is stop starting, it isn't providing the thrust it is supposed to, your quad will shake/oscillate/crash and generally be unflyable. See the Deep Dive page for a more in-depth explanation. "},{"title":"Why when I change something using CLI board crashes ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-when-i-change-something-using-cli-board-crashes-","content":"If the FC uses the STM32's VCP then when leaving the CLI the config GUI does a &quot;save&quot; which re-boots the FC. Then Windows does not reestablish the USB. Check in the Device Manager to see if the Port has returned. If not then a work around is to disconnect and reconnect the USB. On some PCs/FCs this doesn't work so plug the USB into a different USB port on the PC. I keep two USB cables plugged into a Powered USB hub and just swap the USB cable to the FC and the Port comes back in the Device Manger and the Config GUI now sees to port. This is NOT and FC or Firmware issue but a Windows USB issues. "},{"title":"Will MW23 PID controller work on default PIDS ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#will-mw23-pid-controller-work-on-default-pids-","content":"No! Even though Boris believes this is now the best flying PID controller, it will not fly correctly on default PIDs much like rewrite and Lux will. You need to manually tune this like the good old days. In BorisB's words from Regroups &quot;Guys I read a lot of comments about bad defaults for MW23 pid controller. I will say it once more......there are NO defaults for MW23. The defaults are made for rewrite actually. It is not possible to have defaults for both....rewrite and MW23. You really have to tune that one by yourself.&quot; Reports show that default PIDS are too high. Be careful when first arming as it might have serious oscillations. The key takeaway is: P gains need to be less than on MWREWRITEYAW Rate needs to be lower than on MWREWRITERoll &amp; Pitch Rates needs to be higher than on MWREWRITE Originally Posted by Boris B D is quite tolerant it appears. I scaled it to the looptime which wasn't there in the first place. The first time I started testing the lower looptime was getting the lower I and D was needed. Now it is normalized to looptime ~2000 to give values close to original multiwii.. Iterm is more aggressive though. It can even cause oscillations, which finally makes Iterm tuning easier. These are my PIDs. Not fully tuned though as I focused more on firmware testing: Roll 3.0 0.025 22 Pitch 3.5 0.035 35 Yaw 5.8 0.045 0 RC Rate 1.0 Rates 0.7 0.8 0.8 RC Expo 0.2 Rc Yaw expo 0.3 Level (I don't really fly level but had to test it as level also has I and D): Level P 9.0 I 0.005 D 0 Additionally: Rates about .7 as a start yaw rate 0.8 RC Rate 1 rc yaw expo 0.3 rc expo 0.3 Angle and Horizon modes still need some work Don't forget to follow this good approach to tuning your multi-rotor:http://github.com/borisbstyle/betaflight/wiki/PID-Tuning-Guide "},{"title":"How do I keep and then restore my Betaflight Settings each time I upgrade ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-do-i-keep-and-then-restore-my-betaflight-settings-each-time-i-upgrade-","content":"First of all it is important to note that uploading a full settings Dump from a previous Betaflight version will likely result in your copter not flying properly, not flying at all or even damage to the components. It's also worth noting that the method of flashing Betaflight can be dependent of the FC board. So best to refer to the thread on the FC board you are using. The list of Boards in the FAQ have links to these threads. Any issues/differences in updating are typically listed in the Release Notes which are a MUST READ. Having said all this, one approach worth considering for ensuring your settings are migrated from one Betaflight version to another is described in these videos: http://www.youtube.com/watch?v=HsxTqp76Brshttp://www.youtube.com/watch?v=F1sjC5l0ywM In summary, the key takeaways from this video are: Keep a separate custom config file that just has the settings that you have invested time in getting correct for the flying experience you want (PIDs, rates, AUX switch settings etc).Upgrade the FC to the desired Betaflight version then uploaded your custom config file.Ensure the custom config file is up-to-date with PID &amp; Rate values during and after tuning. This way you can compare tuning and/or restore a tune if you changed firmware versions and need to go back. Here are a few tools that are useful for making comparisons between config files: Notepad++ with the Compare PlugInhttps://www.diffchecker.com/ "},{"title":"What is yaw_jump_prevention_limit and what does it do ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-is-yaw_jump_prevention_limit-and-what-does-it-do-","content":"From Joshua Bardwell Yaw jump prevention limit puts an upper cap on the yaw P term when the yaw stick is centered. There is a problem when you do a big yaw move and then suddenly snap to a stop where the copter has low yaw authority, so the copter cannot respond as quick as it wants to, so error grows large and the P term grows large and the motors surge like crazy at the end of the sharp yaw move. Lowering yaw_jump_prevention_limit will soften the end of sharp yaw moves, but will prevent the motors from surging and the copter from jumping. Raising yaw_jump_prevention_limit will sharpen the end of yaw moves, but will result in the motors surging if you don't have enough yaw authority. If you have a high-performance copter with great yaw authority, and if you want snappier endings to your yaw moves, raise this value as high as 500 (disabled). Remember that this only affects the end of yaw moves, because it only applies when the stick is centered. Addition from Adam Pyschny A to low yaw_jump_prevention_limit can prevent yaw P from getting enough authority to prevent the quad from breaking out in tight, high speed, roll-only turns. "},{"title":"What is yaw_iterm_reset_degrees and what does it do ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-is-yaw_iterm_reset_degrees-and-what-does-it-do-","content":"From Joshua Bardwell yaw_iterm_reset_degrees determines the number of degrees above which the Iterm will reset to zero and stay there. the units are degrees per second rotation and they go from 25 to 1000. The issue here is that, on extreme acro moves like flips and rolls, the I term can accrue error, and then at the end of the move, the I term trying to unwind that error can result in rebound or overshoot, instead of sharply stopping the move. This parameter causes the I term to zero out when the rotational rate goes over a certain value. The idea is that, in a flip or roll, you don't care about correcting for persistent bias on that axis. You just want to flip or roll close to the targetted angular rate. "},{"title":"How does Super Expo work ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-does-super-expo-work-","content":"From BorisB Super expo is similar to acro plus, but acro plus was adding more rotation rate outside the pid controller and the pid controller would fight against that. That didnt really feel natural somehow. Super expo manipulates the pid controller so it does expo for you. It actually works as an acceleration to P based on higher stick input and deacceleration with lower stick input. That also provides more clean acro and less need for D in general. If you have your quad tuned for mid stick you have now....that pretty much stays the same and maybe even a bit softer, but it accelerates towards the full stick. Its like multiwii implementation but with your current rates so you still can have snappy mid stick that what multiwii is lacking a bit. Besides that, betaflight 2.6 allows much higher D without noise so you can get it smooth easier anyway. Another explanation from Joshua Bardwell super_expo_factor works like this. Normally, the way the PID controller works is that the stick position commands a certain angular rate, and then the difference between the actual angular rate and the target angular rate is used to calculate an error value. The P term is proportional to the error value. The larger the P term, the stronger the motors' output to achieve the commanded change in angular rate. Got all that? But with super expo, the way it works is that, the more deflected your stick is, the more the P term is directly proportional to the stick position, instead of the error value. So as you deflect the stick, the PID controller says, &quot;I don't care what the current angular rate is, or what the error is, just push so hard.&quot; Here is an analogy. Normally when you drive a car, you are looking at your target speed. Say it is 55 mph. And if you are going faster than that, you back off the gas pedal, and if you are going slower than that, you push on the gas pedal. That's the way the PID controller works. But super expo is like saying, &quot;I don't care how fast I'm going. Push the throttle to 75% and just keep it there.&quot; As with the I term reset, the idea here is that, when you're commanding extreme maneuvers, you don't care about hitting an EXACT angular rate, like 1234 degrees per second. As long as the copter's behavior is reasonably predictable, you would rather let it &quot;loosen up&quot; a bit and just spin. If you look at Blackbox during a flip or roll, the P term is often switching signs several times. So it is trying to slow down the roll and then speed it up and then slow it down, and that's a bit silly to all be happening in the course of 0.2 seconds while you're flipping around. A Boris comment: Just one additional thing about iterm reset. In super expo mode the iterm is also being reset on roll and pitch above certain deg/sec (default 200) That is really necessary as super expo gives some P acceleration and Iterm would start to windup even more as it would think that Pterm is doing a bad job. The iterm again becomes active below the threshold rate and gets to normal levels in time without you notice anything. Removal of iterm during faster acro manouvres provides more connected feel as all stickyness from Iterm is removed. Video explanation:https://www.youtube.com/watch?v=HGAa8J1Ihac "},{"title":"How do rates relate to pitch roll & yaw degrees/s ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-do-rates-relate-to-pitch-roll--yaw-degreess-","content":"MadmanK has written a spreadsheet to show you pitch roll and yaw rate in Rewrite and Luxfloat to show how it relates to your rates in degrees per second. Only change the values in the grey boxes, and it will adjust the graphs and tables. Rewrite/Lux rates "},{"title":"Which Flight Controllers currently use SPI ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#which-flight-controllers-currently-use-spi-","content":"As of 11th Oct 2016 Colibri Race Lux Race Motolab Cyclone &amp; Tempest SPRACINGF3EVO DOGE CC3D (this is F1 board though......performs slightly better than i2c F3 board on rewrite) Alienflight F3 V2, F4 XRacer F303 (v3.1 only, prior versions use I2C) Note: there are many more new FC's on the market. Check the Seller's specs. "},{"title":"Which HEX target do I download and flash to my Flight Controller ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#which-hex-target-do-i-download-and-flash-to-my-flight-controller-","content":"Sometimes it's pretty obvious which Betaflight HEX file to download and flash to your Flight Controller (like NAZE) but other times it's not (like RMDO). It's also worth noting that some of the HEX files are used with multiple FCs (like clones for instance). We typically just say HEX file but many targets also have a BIN file. These are just for different Flashing software tools. Use the HEX file in the CF config GUI and when un-bricking with the ATM Flash Loaded tool. The BIN files are used with other tools like the Linix DFU flash utility. See the threads/instructions for individual FC boards to find out if and how a BIN file is required. Having all the Flight Controllers listed here (and their associated HEX/BIN) should help avoid some confusion. Flight Controller\tHEX/BIN FileAfroMini Naze 32\tAFROMINI Alien Flight F1\tALIENFLIGHTF1 Alien Flight F3\tALIENFLIGHTF3 Flip32/Flip32 Pro\tNAZE DTFc Flight Controller\tDOGE DragonFly32/mini/compact\tNAZE FuryF3\tFURYF3 ImmersionRC Fusion\tIRCFUSIONF3 Lumenier LUX\tLUX_RACE Motolab Tornado\tMOTOLAB Motolab Cyclone\tMOTOLAB Motolab Tempest\tMOTOLAB Naze32 Acro\tNAZE Naze32 Full\tNAZE OpenPilot CC3D\tCC3D_OPBL RMRC Seriously Dodo\tRMDO or SPRACINGF3 Singularity\tSINGULARITY Sparky\tSPARKY Seriously Pro Racing F3\tSPRACINGF3 Seriously Pro Racing F3 EVO\tSPRACINGF3EVO Seriously Pro Racing F3 Mini\tSPRACINGF3MINI TBS Colibri Race\tCOLIBRI_RACE X-Racer F303 V1 -&gt; 2.1\tSPRACINGF3 "},{"title":"How do I setup for reversed prop rotation ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-do-i-setup-for-reversed-prop-rotation-","content":"Just change props and motor rotation in BlHeli. Then change set yaw_motor_direction = -1 Remember to cycle power to FC so new setting become properly used. "},{"title":"What is a recommended FC and esc setup to run at 8khz also i see reference to 4/4 or 4/4/32 or 8/8, what are these referring to ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-is-a-recommended-fc-and-esc-setup-to-run-at-8khz-also-i-see-reference-to-44-or-4432-or-88-what-are-these-referring-to-","content":"First number is gyro freq (set by looptime, 1000=1K, 500=2K, 250=4K, 125=8K), Second number is PID calc freq, this is set with regards to looptime, pid denom 1=same freq as gyro, pid denom 2=half speed of gyro, and so on. Third number, its esc update rate, if no number, its the same as pid calc freq (in sync). In BF v2.7.0, you need to: set unsynced_fast_pwm=ON set fast_pwm_protocol = MULTISHOT Set motor_pwm_rate = 32000 With the New BF Configurator 1.6.4, you can make the above changes in the &quot;Configuration Tab&quot; and in the &quot;ESC/Motor Features&quot; section. You can still use the CLI commands as well. Oneshot125 up to 4K (125-250μs) Oneshot42 up to 12K (42-84μs) Multishot up to 32K (5-25μs) Generally, depending on pidc, serial ports used, number of Rx aux channels, etc. The acc is disabled in most scenarios below. F1's mostly run between 2.6K - 2K, if you get a $9 cc3d they run 4K/4K, ccd3d-F3 run 8K/8K. F3's mostly run 4K/2K but can run lux pidc and has more serial ports. F3's with spi gyro (LUX, etc) can run 8K/8K. F4's (revo/etc) on raceflight can run 8K/8K, if using the 6500 or 9250 gyro(sparky2/etc), they are just now starting to run 32K/32K/32K. All these FC can run esc up to 32K esc update rate at no extra penalty. Always check cpu usage via cli command &quot;status&quot;, I prefer to stay under 30% cpu on BF, some get away with more. "},{"title":"Is PID tuning any different at different PIDC rates ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#is-pid-tuning-any-different-at-different-pidc-rates-","content":"From Boris (31 July 2016)​ But here is the thing. There was a discussion before about whether P needs to be readjusted on higher looptimes. Some claimed to feel the difference 1k vs 8k for example and claimed retuning was needed. Were those feeling a placebo? The answer is not conclusive yet, but from my tests there seems to be a difference what can be explained. We already saw improved response between 1k and 8k for example. Exactly the difference you would expect around 800-1000us. Of course PID loop faster means seeing change in rotation faster. How does this translate to different feel or even tune? I was surprised to see that 8k tests showed slightly slower setpoint times vs 1k tests, while the acceleration times were pretty much same. I literally felt more loose quad on 8k. This can be explained by following. Due to faster PID loop the PID controller can see faster that setpoint is being reached and it will start &quot;slowing down&quot; slightly earlier. That's exactly why the setpoint time was faster on 1k. Is this good or bad? Well yes it is an advantage that 8k can start slowing down earlier and therefore you would possibly be able to increase P more with less overshoot like on 1k. Just wanted to point out that some who experienced slightly higher P were not crazy after all . But still these differences were extremely marginal and still nothing compared to different props or motors on same PID loop speed. Next tests would be synced vs unsynced and also 32k as some wanted to know that and also blheli tests. I think from what I have seen i can expect synced winning, but lets wait the results. "},{"title":"What is the difference in PIDC Iterm in bF versions ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-is-the-difference-in-pidc-iterm-in-bf-versions-","content":"By ctzsnooze: Any slow pitch back type thing is iTerm related. Pitching back means that P alone was unable to retain the intended angle in FFF, and iTerm accumulated in an attempt to get there. When dropping throttle, the need for that amount of iTerm changes, and it takes a short time for the iTerm to drop back. In that sense this is a symptom of P not being quite enough, or I being too much. However in some situations ITerm accumulation is inevitable and the challenge is how best to deal with it. In 2.6 code was introduced that set iTerm to zero once gyros indicated a certain level of rotation. ITerm didn't start accumulating again until gyro rate fell back below the threshold. This controlled excessive iTerm gain but caused a small but unwanted step change in pitch at the time of returning back past the threshold. In 2.7 this was changed to not reset to zero but to hold the value iTerm was at when the threshold was crossed. That also caused similar issues on return to normal as it abruptly changed whatever the newly required iTerm value would be. Boris: No in 2.6 and 2.7 there was still iterm reset like in 2.6 actually, but only in super expo mode or when forced in cli. It wasn't in the normal scenario! 2.8 has code that reduces iTerm accumulation the higher the roll rate, but never arbitrarily cuts it to zero. If the threshold is lowered, high roll rate events have less impact on iTerm, but iTerm keeps working normally at low roll rate periods eg in FFF. Could I suggest that people with this issue first try a bit more P, if that's possible, but if more P isn't ideal, maybe try reducing the iTerm ignore threshold to say 50 or maybe even 25. This has the effect of reducing iTerm during high roll events and may improve the situation without reducing iTerm's ability to otherwise keep the quad stable. If dropping the threshold means an overall inadequate I level, try increasing I at the same time. These parameters can be varied quite a lot in attempting to find the best value. But the best solution is to have a quad where P is enough to get the angle you want mostly by itself. "},{"title":"How to setup blackbox record rate with onboard dataflash ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-to-setup-blackbox-record-rate-with-onboard-dataflash-","content":"Be carefull when setting up blackbox record rate with onboard dataflash. When running at the edge of the board (like 4khz/4khz/4khz on sp3 board), there is a risk of overunning the cpu with too high rate like 1/1, even 1/2. You need to test on the ground without props and check cpu usage, so just arm, activate blackbox, and check status on the cli command. Keep a safe value and leave some room for cpu usage. 1/4 should be a correct value for sp3 board at 4khz/4khz/4khz. "},{"title":"How to setup the rates and SuperExpo ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-to-setup-the-rates-and-superexpo-","content":"First see the Rate calculator in the 2.8.1 Release notes and Watch Joshia's video on ßF 2.8 Originally Posted by Boris B View Post I have explained it many times in this thread. RC Rate / RC yaw rate = Mid stick feel Rates = Far stick feel Rc expo / yaw expo is actually not necessary at all. Just adjust till it feels good. Boris:​ Didn't I explain already 3 times that he just needs to enter one command to disable the feature and have old fashioned linear rate between 0 to 2000deg/sec The choice is there for everybody and different styles. There are no assumptions. Note: Super Expo uses floating point math and when enabled uses much more CPU cycles. This mean on F1 and F3 with IIC gyros targets the looptime might need to be reduced. Boris states: There is more than just super expo. Just lower the looptime on F1 boards. 4k doesn't make it fly better. compudaze's method:​ what I did for 2.8 was adjust rates until my deg/sec at 2000us matched what it was for 2.7 with super expo. Then I adjusted rc rate until my deg/sec at 1750us matched what it was for 2.7 with super expo. It's not that simple though as you'll need to keep playing with the number to get it exact. just keep in mind rates more effects end stick while rc rare more effects center stick. More from Boris:​ Those steps really depend on chosen rc rate. Smaller rc rate = smaller rate steps. Besides that do you really feel difference of 20-50deg/sec that much? Actually everything you ask is in there. Rc rate + rc expo added keeps the top rates, but only changes curve On top of that there are rates what act as super rates where you tune mid stick and than the top rates. I prefer the last one. It is the mid stick what is most important. That is what you tune / configure and use mostly. The top rates are not a &quot;regular&quot; flying scenario. The configurator is the limit at the moment as it is not all clear. Eventually in betaflight configuratoe or next cleanflight configurator each axis will have 3 parameters. Rc rate, super rate and rc expo. That will make all scenarios possible for anyone. Quick summary: Rc rate: linear increase of rates rc expo: add expo curve to existing rate (sexpo) rate: Keep same liniearity on mid stick as it is now, but curve the extremes. Old rates: rc rate and rates = equal....bot liniear. How confusing was that? Another explanation from RC Slater:​ Everyone should set everything that has the word Expo in it to 0. I know by default it is set to .10, but Boris himself has said it's unnecessary, and you should remove it. ONE caveat: if you disable superexpo_rates to get the old linear control back, then you may still want to use some expo parameters to change the curve. Other than that, leave all expos at 0 when using super expo rates. (super expo is active by default) With superexpo_rates, the rotation rate at extreme or full stick deflection is controlled by Pitch rate, roll rate, yaw rate. If you want your max flip/roll rate faster, then adjust those accordingly. If you want to adjust how sensitive your copter feels on small corrections (around mid stick) then just adjust RC Rate. NOTE that Yaw has it's own RC rate because we sometimes want to adjust that mid stick feel on yaw separately from pitch and roll. Example: Stock Rates are : Pitch Roll and Yaw Rates = .7 RC Rate = 1.0 RC Rate Yaw = 1.0 I decide I want to roughly keep maximum rotation rate the same but make mid stick more sensitive on ALL axes (including yaw) Pitch Roll and Yaw Rates = .7 RC Rate = 1.10 RC Yaw Rate = 1.10 Now I like my mid-stick sensitivity on pitch and roll, but want more on yaw. So... Pitch Roll and Yaw Rates = .7 RC Rate = 1.10 RC Rate Yaw = 1.20 Now I just want to increase the maximum pitch and roll rate, but leave Yaw and all my mid-stick feel the same: Pitch Rate = .8 Roll Rate = .8 Yaw Rate = .7 RC Rate = 1.10 RC Rate Yaw = 1.20 RC Slater is online now Send a private message to RC Slater Find More Posts by RC Slater Video from Joshua Bardwell:https://www.youtube.com/watch?v=cttFDHkec0c "},{"title":"What is the story on the different Rates and Expos ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#what-is-the-story-on-the-different-rates-and-expos-","content":"Thanks to joshuabardwell for this write up. Let's have a little history lesson. There used to be MultiWii. MultiWii had RC rate and Expo. That was it. RC rate set the speed of rotation for stick travel. Expo adjusted the center-stick softeness vs. full-stick speed. MultiWii didn't spin fast enough at full stick deflection for the new breed of crazy LOS Aerobatic pilots (Warthox), so the Pitch/Roll rate was added. In MW2.3 PID controller, the P/R rate relaxed the PIDs as stick deflection increased, allowing the copter to spin much faster. So P/R rates were kind of like a &quot;super expo&quot; on top of the normal RC and Expo functions. The effect of P/R rates was to increase the maximum rotation rate at extreme stick deflection. Fast forward to CleanFlight. Cleanflight had several PID controllers. It had the MW2.3 PID controller, so Cleanflight also had the RC Rate, P/R rate, and Expo functions. But Cleanflight also had Luxfloat and Rewrite, and those PID controllers didn't have the &quot;super expo&quot; like function. They simply used a linear rate curve with expo function, like the original MW PID controller. So what are they supposed to do with the P/R rate parameter in the GUI? Well... they just added it to RC rate, basically. The actual effect was not quite linear, because the scaling factor for P/R rate was not the same as RC rate. So adding, say, 0.5 of P/R rate did not result in the same degrees per second as adding 0.5 of RC rate. But the key thing to know is that, in Luxfloat and Rewrite, the P/R rate parameters had no special &quot;super expo&quot; like effect. They simply linearly increased the rate &quot;curve&quot;, which was actually a line. And then the expo curve was applied on top of that. Now we move to Betaflight. Betaflight continued to play with the PID controllers, as Boris' attention shifted around. For a while, Luxfloat was Boris' favorite, and then Rewrite. Eventually, Boris realized that the &quot;super expo&quot; effect of MW2.3 was actually pretty cool in some circumstances. Possibly this realization was the result of Boris playing with KISS--the timing would be correct for that. That's when Boris implemented &quot;super expo&quot; in Betaflight. At this time, there was some inconsistency in the GUI parameters. If you were using feature super-expo, then the P/R rate parameters worked like in MW2.3, with a big increase in full-stick rate. If you were NOT using feature super-expo, then the P/R parameters worked like in Luxfloat and Rewrite, with a linear increase in rates. And all of this was still interacting with the original Expo function of course. You can see that this arrangement is both confusing and unnecessary. If you want a linear rate function, there is no need to have two parameters (RC and P/R). You can just use RC and Expo and be done. The only reason why both RC and P/R ever affected the linear rate function is because Cleanflight had several PID controllers, and some of them (Luxfloat and Rewrite) had a linear rate function and others (MW2.3) had a super-expo rate function. But in Betaflight 3.0, MW2.3 PID controller is now gone, so there is no need for a duplicate, conflicting definition of the P/R rate function. So the Betaflight 3.0 RC12 rates really represents the ultimate resolution of all this nonsense. There is no more &quot;super expo&quot; function. There is just three parameters. RC rate affects the linear rate multiplier. The rate &quot;curve&quot; is a straight line, and the slope of the line is determined by RC rate. RC rate makes the base line steeper. Expo applies a bicubic (standard expo curve) function to the rate curve. Expo changes the line by making the center-stick less responsive, but leaves the end-points alone. P/R rate (now known as S.Rate) performs the &quot;super expo&quot; function similar to how MW2.3 did it, although a lot has changed under the hood in the way the rates are actually implemented. S.Rates changes the line by leaving the center-stick alone, and makes the end-points steeper. You can achieve more or less the same curve with both expo and s.rates, it just depends whether you would prefer to think about tuning the center-stick first, and then pushing out the full-deflection rates from there, or whether you would prefer to think about tuning the full-deflection rates, and then softening the center-stick from there. "},{"title":"How do I solve Yaw twitches or mid throttle oscillations ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#how-do-i-solve-yaw-twitches-or-mid-throttle-oscillations-","content":"A Very Short Overview of the issue and cures:​ Gyro issues can happen on any of the Gyro chips used. If you see either Yaw Twitches or excessive noise on any axis (A BlackBox Log is a definitive method to see these) then first try proper Soft Mounting of the FC. Soft mounting the FC must be done properly to ensure No vibrations get to the FC board (Gyro) through the mounting. Modern ESCs (active Braking) and modern high power motors can put a lot of noise into the electrical system. Adding a high value (1000uF seems common), low ESR capacitor helps to prevent this noise from getting into the Gyro chip on the FC (also helps with cleaner video and preventing damaging other electronics from high Voltage spikes). There is NO one cure for any copter. Each copter build is different and requires trying the various solutions. Some only need a large cap added, other only soft mounting the FC while some require both. There is a NEW Soft Mounting and Noise Reduction Wiki page. Details on Soft Mounting will be moved to this new page so check back. The following are extracted from posts about this issues with Observations, Theories, Discussions and suggested solutions. Read through all the discussion and follow the links to learn almost all there is about the issue and solutions. First reports of issue:​ Many people have yaw twitches or oscillations at mid-throttle and many do not. All that have this issue seem to be running FCs that use the MPU6500 gyro chip (Naze32 rev6, LUX, others) and newer motors. Boris B was one that did not have this issue with the 6500 gyro until he upgraded to newer, stronger motors. Many have cured this by soft mounting the FC board but this has not worked in all cases. Link to a thread with data on the MPU9250 gyro:http://www.rcgroups.com/forums/showthread.php?t=2718308#post35460394 Much discussion and experimenting is showing that this is an issue with both mechanical and electrical noise getting into the gyro and effecting the Yaw. Following is some of the discussion. Post from Boris​ Anyway something I want to share with you. As you all know I have been flying MPU6500 on several quads without any significant issues for a while. I knew those were a bit more sensitive, but didnt really bother me. I never had any twitches and problems like some had....until this week! So what happened. I was flying with my trusty CM2204 2300kv cobras on pretty much all my setups till recently. Since I swapped to 5S I experienced that those motors were not ideal for that power so I went searching for new alternative motors. That's exactly where the issues started. Once I replaced the motors my 2 MPU6500 quads and even my DOGE fc went completaly nuts. Totally untunable and twitchy as hell. Exact the issues that have been reported in the past. I had to detune my quads to mask the vibrations and twitches. Than I swapped them by cyclone (mpu6000) board and boom.....double as high pids and smooth and locked in as butter. No news. But really funny to experience these issues by myself for once the first time. Originally Posted by Cheredanine​ Interesting it happened on all three FC, Assume you didn't try soft mounting, what motors were you using? Originally Posted by Boris​ 2 of them were soft mounted my DOGE was not. The new cobra motors I was trying out were absolutely smooth on the bench. But somehow at certain RPM the gyro would go nuts. Would love to understand that better. Just random yaw twitches etc like we have seen many times reported on those gyros. After putting cyclone on the exact same quads above with everything else just same absolutely smooth like on the bench. O yeah and cyclone was hardmounted! I actually even tried 2 different motors. Cobra Champion serie 2205 2300kv and Brotherhobby 2205 2300 kv. There is certainly nothing wrong with the motors. There is just some kind of resonant frequency what upsets the MPU6500. And yes I switched back and fourth between my old CM2204's and CM2206 motors, which were smooth at all times. Originally Posted by prokreat​ My money is on the stronger magnets messing with the 6500. Originally Posted by Boris​ It really seems like that! The better the motor quality it seems to affect it more. I really wonder if this is all related to electric noise rather than vibration noise. Perhaps due to smaller factor of mpu6500 it is missing some crucial power filtering circuit. I know invenesense was under pressure few years ago to produce gyros with smaller form factor due to the constant huge demand from mobile phone manufacturers Originally Posted by waltr​ There was a very short discussion about this twitch issue and adding low ESR caps and while ago in this thread. Theory here is that it is the Noise Spikes from the motors/ESCs disturbing the Gyro readings. We know soft mounting can help a lot but what about added caps to the ESC power. Maybe this would be good for you to try Boris now that you have a setup that causes this issue Another may be adding good caps right on the MPU6500 power/ground pins. From what I have seen on the schematics and PCB layout these de-coupling caps do not seem to be properly designed on many FC boards. They don't seem important but actually are very important for modern electronic devices to operate. It could be not a direct issue with the MPU6500 chip but with schematic and PCB layout design not done properly. Originally Posted by joshuabardwell​ I hate to say this because I know vendors with good products who have a 6500 or a 9250, but I personally would not recommend that anyone buy an FC with a 6500 or 9250, because it is just a crap-shoot whether you are going to run into these problems. Many people fly with no problem at all. Many people who have problems are able to soft mount and fix them. But some people have problems and simply cannot fix them, and that just seems like a chance that nobody should have to take, in a world where there are very good FC's using the 6000 or 6050. If there is a &quot;glitchy&quot; FC that you absolutely love, such as the DTFc because of its built in PDB, or the SP3 Evo because of its transponder and built in SD card reader, then buy it with the knowledge that you might be unlucky and have glitching that you can't fix. But if you are just searching around for an FC, and you have no particular love for any board, then absolutely buy one with a 6000 or 6050 chip only. Post from QuadMcFly​ To chime in on the 6500/9250 issue, there appears to be a couple things going on here. As Boris mentioned, there seems to be an electrical noise issue here that compounds things. The MPU 6500 is extremely sensitive to voltage fluctuations on the 3.3v supply line, which raises the noise floor of the IMU. Extra power filtering will definitely help with the problem. "},{"title":"A Case:​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#a-case","content":"Originally Posted by gunadeau​ Maybe my story can help some people. I had very bad twitch issue on the yaw axis. It was untunable. I tried to softmount the FC, it helped but was not perfect. What really cured my issue was putting a 1000uf capacitor 35v 105 deg on the PDB at the battery connector. My gyro is now super clean and it fly incredibly well. Setup: Zmx v2 2300kv Aikon blheli_s Xracer v2.2 multishot sync 4/4 RCG thread on Capacitors​ http://www.rcgroups.com/forums/showthread.php?t=2657808 Post by Cheredanine​ General recommendation is a low esr 1000uf with a voltage rating of 35v if you are using on the battery connection, if you put a cap on each esc then a lower spec can be used Soft mounting can be done in a number of ways, traditionally hard mounting means nylon standoffs To soft mount one can use rubber or silicon o rings on the standoffs Or one can use rubber vibration isolation standoffs Or double sided sticky foam Post by ctzsnooze (30 july 2016)​ Here's my thoughts about gyro issues. The characteristic of a primary gyro problem is an anomaly in the gyro data exclusively on one axis that cannot be explained by other means. The original descriptions were of abrupt onset jerks, twitches and spikes on yaw only on 6500 gyros. They were so fast in rise and fall that they could not be generated by the motors. Motors and PIDs respond to these spikes symmetrically and normally, clarifying that they were not the cause. Typically the spikes happened only in a very tight throttle range, like within 100 throttle points. There is no doubt this comes from the gyro. While these twitches are much more common on the yaw axis, I have seen logs with solitary gyro twitches purely in the pitch axis, and on one occasion the user changed motors, the pitch axis spiking stopped, but then they went to the roll axis! There is a separate issue with 6000 / 6050 gyros where they get episodes of large amplitude single axis resonant oscillation - pure yaw oscillation, nothing at all on the other axes - at certain throttle points. I had this happen to me with a quad which was flying perfectly for a long time then suddenly it became unflyable due to out of control yaw oscillation. What made me suspect the gyro was that the oscillation was exclusively in the yaw axis, was absolutely huge, at a frequency very different from the underlying noise of the quad, could not have been yaw P feedback since it remained present even if yaw P was set to zero, did not get better despite changing ESCs and motors, was not present on testing in the motors tab, and was fixed by replacing the gyro chip on the board. Until then I would never had believed that a gyro chip could cause oscillation like problems, but now I know for sure that they can, and this has been reported by several people as well as me. Whether something like this can happen on all axes, not just yaw, at certain throttle points, I don't know. So far I guess I've always considered that some noise at mid-throttle on all axes is just the gyro's picking up frame vibrations with associated PID response overlay making them worse than they might otherwise be. I never considered the possibility that intrinsic gyro problems may be exaggerating that mid-throttle shake. I do a lot of hand held testing in the motors tab, and most frames do shake around mid throttle. Mid-throttle frame shake will be picked up in a normal gyro and the PID system will try to fix it. But how do we know if mid-throttle oscillation in black box is just the actual frame shake being detected by the gyro and modulated by the PID loop, or if the gyro itself has some tendency to resonate and oscillate and thereby amplify or exaggerate that stuff? A possible approach is to first find out how much shaking there is inherently in the frame. Using the motors tab and hand holding (with care) you can feel what the props and motors do to the frame at certain throttle points. You then know what you get when the gyro and PID are NOT active. You can then throttle up with the Tx, with gyro and PID active. If it feels the same, your shaking is not made much worse by the gyro or the PIDs. If it seems worse, repeating the test with P and D set to 1 on all axes will remove the PID loop and any gyro input from what the motors will do - sort of like running the motors tab via the radio. One could blackbox the quad with all PIDs set to 1 like that and blackbox will record the gyro output. This will show what the gyro determines the shaking to be PLUS any false data generated by the gyro. The problem is that we have no 'reference' gyro to know actually what is really happening. How do we know if our gyro is being faithful in how it reports the quad to the FC, or if it is exaggerating certain things? We'd need to mount a second 'known good' FC above the 'problem' gyro, and log both at the same time.... So... unless the log is very characteristic of a gyro problem (e.g. twitches or extreme single axis oscillation) it would be exceptionally difficult to be certain what is going on without comparing gyro to a known good one. If replacing the FC or gyro chip fixes it, then that kind of points the finger at the gyro. We are flying these things on the basis that the gyro data presented to the FC is a clean and accurate representation of the true movement of the frame. The possibility that gyros have some tendency to falsely resonate and make false oscillation data at certain throttle points is not a nice thing to contemplate. A report of fixing this Yaw twitch/oscillation issue:​ http://www.rcgroups.com/forums/showpost.php?p=35385057&amp;postcount=34964 Example of Cap:​ http://www.rcgroups.com/forums/showthread.php?t=2464844&amp;page=2332 Post by Swing3r​ I had issues with yaw oscillation at mid throttle with Aikons + Lumenier 2206-2350KV-motors. Soft mounting helped but not fully so I also added a low ESR 1000uF 63V capacitor to my PDB (cycolone FC is powered by lipo directly) and viola, all traces of the yaw-oscillation is gone. Logs for hardmount, softmount and softmount + 1000uF cap.https://www.dropbox.com/sh/a4kvsilpi...h56ocCO1a?dl=0 Post by AliB​ I'm starting to believe the mid throttle oscillations is on more than the 6500 gyros. Both me and a friend have both had mid throttle oscillations using an Xracer f303 v3. He is using aikon esc, and his was completely unflyable until he soft mounted flight controller. I'm using KISS esc and mine is flyable, but there is noticeable mid level oscillations. full throttle is fine. its just around 1300-1400 get it still even with P's down around 2. both of us are running GTINpower 2205. nice motors but powerrrr hungry Post by Tony Leyland​ On my Alien build I also experience mid-throttle &quot;vibrations&quot; and have tried extensive tuning on BF 2.9.0 and also soft mounting the FC with no luck. I run the following: EMAX 2205 2300KV HQ 5&quot; Tri-blades KISS 24A ESCs V1.1 Dodo V3a FC RC filter to the FC &amp; RX Turnigy Graphene 1300 I see it in the Black Box traces in particular on the Yaw axis. At first I wondered if it was the KISS ESC firmware, but have not flashed them yet - awaiting V1.3 to come out. People are saying this occurs at mid throttle but in my case I believe it to be when the copter's power system is stressed the most. That is when the copter undergoes rapid acceleration and current consumption is at it's highest amount. I can hover at high altitude at mid throttle but don't see the vibrations in the FPV feed or HD footage. I'm going to try the capacitor near the batter lead next and update you guys. Post by fftunes​ Just another small report of electrical noise: Friend built another all new quad with naze r6 which produced a weird high frequency hum, no matter what filters/PID etc were set to. A single cap (35v 470uf) to the pdb fixed it. Post by jubifly​ Had similar problems on my build. I tried both, limiting possible electrical noise with capacitors and mechanical vibrations by softmounting the FC with some rubber o-rings. Both with no luck. I then tried to remove the FC completely from fixed parts at the frame and left it hanging in the air (just the motor and rx wires) and the yaw twitches disappeared. My thoughts on that were that the rubber rings were not applicable (maybe too hard?!) for softmounting... Maybe try leave the FC dangling in the air and see if it still happens - just to definitely eliminate the possibility of mechaninacal noise being the issue. Here is a post from ctzsnooze on a better soft-mounting method.​ http://www.rcgroups.com/forums/showpost.php?p=35486733&amp;postcount=36111 A nice conclusion on this issue from ctzsnooze​ Lots of us have seen exactly this behaviour. I am surprised that you seem so astonished now that you find it happens to you. It happens randomly. It could happen to anyone. It just happened to happen to you. :-) It goes away with replacing the gyro chip, replacing the FC, or soft mounting the FC; these fixes work whether or not capacitors are added. Sometimes it goes away by just adding capacitors. Since soft mounting is a reliable fix, external vibration seems the likely culprit, difficult otherwise to explain how soft mounting often causes it to just disappear. Blheli-s ESCs are more commonly implicated than non-BLHeli-s ESC's and in some cases capacitors help so there may be an electrical contribution. It is far more common on yaw than the other axes. The yaw sensor within the chip must be physically different from pitch/roll since the axes relative to the layer of silicon for yaw vs pitch/roll are quite different. That's all we know for sure. How these factors actually cause the oscillation, and why it is yaw exclusive, is completely speculative. When soft mounting doesn't work it's usually because it isn't done in such a way as to effectively isolate the FC. I've seen such extreme examples as to render the quad un-flyable, and also much milder examples, so it is not an all or none thing. Although the magnitude is increased by higher yaw P it is not simple feedback oscillation, there is no threshold value of P below which it disappears. The actual oscillation frequencies are so low as to not be attenuated by the o-rings. Exactly what the o-rings block is not clear. It cannot be eliminated by filtering the gyro data - as has been pointed out before, out the primary oscillation frequency is within the range we need for to fly the quad normally. It is not a software issue in blheli or betaflight, we can be sure of that. Replacing the gyro chip doesn't change that software yet it does fix the problem. My gut feeling is that this is an inherent issue in these gyro chip themselves, and that some individual examples of these chips get it much worse than others. That's why I recommend replacing the gyro chip or the whole FC if simple soft mounting fails to solve the problem. another post by ctzsnooze (22 Sept 2016)​ When you guys say you are soft mounting, be aware you need to over drill the holes to 4mm and ideally bevel the top and bottom of the hole so that the FC 'floats' in all axes. You need to check for free movement. If you don't drill out the holes the bolt holes will stick on yaw on the bolts and transmit vibrations directly. Also you can't have anything stiff pushing on the FC, ideally all wires to/from it need to be very fine silicone. You should revisit that mounting and check it does work like you can freely wiggle the board in all three movements. Do that before doing anything else. That is the most likely thing to fix it. I have seen this problem twice (two separate quads, both 6000's, out of maybe 15 machines) and exhaustively tested solutions on those two with the problem. It is pointless trying to filter it out. It is a hardware gyro issue where it is sensitive to noise generated by motors powered by BLHeli-s ESCs. It will be affected by changing yaw P but typically not eliminated. In both cases, proper soft mounting fixed it. Without the soft mounting I also could eliminate it on one by desoldering the gyro chip and replacing it with a brand new one. I didn't try that on the other. My conceptual model is that the hardware PWM system in BLHeli-S ESCs causes some kind of very specific noise at certain throttle points that deeply affects the yaw sensor part of some gyro chips. It is also possible that there is an issue in BLHeli-S code that causes the problem. By that I mean there may be a throttle point where output is not linear. I have noticed that by spooling motors in motors tab very slowly and listening carefully there are some throttle points where the motors lose their smoothness. This non smoothness at certain points is also the case on non BLHeli-s ESCs. It could be that all four motors together at these points somehow encourage positive feedback. To rule this out someone needs to thrust test in such a way to validate linear proportional motor output in the affected range. But to date no-one has done that test or identified any specific ESC firmware issue. FWIW, I disable all dithering in BLHeli-S. Maybe give that a try. But the most important thing is a truly functional soft mounting. Not some half-hearted bunch of o rings​ MotoLab Cyclone boards have plenty of space around the holes, intentionally, no problem there. It's a totally different situation with a Dodo, which has components very close to the holes. Especially tough if the FC bolts need to keep going up for structural reasons like on many small frames, in which case you have no option but to enlarge the holes. I can't stress enough that just over drilling isn't enough. The board can and will slide on the o ring until one hole stops with the edge of that hole wedged on a bolt. Beveling the top and bottom of the hole allows re-centering and is essential with a yaw issue of his kind. I use a cheap conical grinding stone to make the bevel. A solution by airmaxx23​ http://www.rcgroups.com/forums/showpost.php?p=35785741&amp;postcount=38781So, great news, this completely took care of my yaw shake. I didn't change anything else prior to trying it either. Just in case someone wants to print up some of these standoffs I can put them on Thingiverse or if you want to draw them up they're 6mm outer diameter and 2.9mm inner. Here you go, 8mm, 10mm and 12mm. I can print them in orange, red, black, blue or clear if anyone needs them.http://www.thingiverse.com/thing:1785455 Another possible solution:http://www.rcgroups.com/forums/showpost.php?p=35786828&amp;postcount=38790 Post by scripto23:​ I've got another data point to add to the gyro noise/twitching debate. I have the Spracingf3 evo with the 9250 gyro. On a brand new build it was literally unflyable, I don't mean it flew like crap, I mean I couldn't get it off the ground because it was twitching like a stuck pig. Read through the relevant part in the amazing wiki (thanks waltr) tried soft mounting (already had a capacitor on the pdb) and managed to get it in the air, but still had very bad micro oscillations at anything above 1/3 throttle on ALL axis; visible on FPV and blackbox logs. I tried every combination of PIDs, nothing helped. I finally changed the FC to the spracingf3 with the 6050 gyro and all traces of micro oscillations were completely gone. It seems some people have no problems, some people have mild problems, and some like me are left with severe issues. The boards with these gyros are completely hit or miss. I sincerely doubt the quality control (or lack thereof) for this part. More from Boris's thread (7 Oct 2016):​ Posted by mikenxzz: I have a problem with strong magnet motors (Tornado T2 2206), where straight after arming, at idle, the motors vibrate a lot. Reply by ctzsnooze: Yeah I have a build that does this exact same thing with Tornado T2 2206 2600 motors, but not with SunnySky 2204 2300's on the same frame. It only happens briefly while waiting for me to take off, then I never see it in flight. Odd, never seen it before. Haven't blackboxed it yet doesn't trouble me enough. Suspect some BLHeli setting like startup power needs to be changed a fraction. Boris's reply: It happens I have been analyzing several different motor /prop combos and their vibration to determine some better general default filters. I do see a lot of variance in there especially on light and torquee setups. The differences are vibrations over different throttle ranges. For tornado motor default 3.0 causes some low throttle vibrations between 100hz and 230hz. But the most vibration comes around 400hz on upper throttle section. The lowpass filters are not strong enough to completely remove that noise even when cascaded. The only thing what helps is the notch filter on gyro as that one can cut really deep on that specific range. I use double gyro notch with really great results with practically almost no delay penalty. Just some information loss. Notch 1 180hz and cutoff 80hz Notch 2 400hz and cutoff 300hz Dterm notch is default values. That's why I will add second notch option in 3.0.1 patch. But I also have great success with several different de-noising filters i have been experimenting with. Savitzky golay does an excellent job, but its too expensive in terms of cpu. Its the nowadays motors what really cause more microvibrations than the older ones Certain escs will pronounce this noise more. Not sure why blheli_s seems most sensitive of all at the moment. Another solution by Race Miata (posted in the BLHeli_S thread):​ Regarding mid-throttle twitch, I tried all sorts of tuning, filters, FC mounting methods without much luck because of those super torquey 2306 motors. So far what works best for me is to meticulously spin-balance each entire rotor assembly (motor plus prop). I'm talking about less than 0.002g of imbalance with the entire rotor assembly, hard-mount FC (not surprised because just like for onboard vids soft-mounting the cam never works for me to reduce jello but instead hard-mounting the cam works the best once I balance the props, AND sandwich electrical tape between motors and frame to absorb high frequency vibes from the motors after rotor assemblies have been meticulously balanced. The reason for the meticulous balancing is that if motor is not super-hard mounted to the frame then vibes may be amplified. Hard-mount-FC with shock-isolating motors work much more effectively to isolate high frequency vibes from the motors to the FC than soft-mounting FC because high frequency vibes travel thru' hard body (hint: entire frame) very well. By the time it gets to the FC, no amount of soft-mounting the FC can work effectively. There's just not enough mass with the FC for soft-mounting it to work effectively. OTOH, when the vibe-isolating means is further upstream towards the source the whole frame adds to the mass downstream of the vibe-isolating means to effectively absorb the vibes. If you're a race car tuning geek like I do, think sprung weight vs unsprung weight. It's always desirable to have the most of the car's weight as sprung weight as opposed to unsprung weight for the suspension to work best. At this point there's still some mid-throttle twitch as shown in the following vid but with it toned down I don't have to dumb down my PID/filter tuning to compromise responsiveness and prop-wash handling. At least it's much more pleasant to cruise around near mid-throttle now. Before (see my earlier Multistar 250 vids), I hated to use mid-throttle so much I just tried my best to do 0-1 throttle just to avoid using part-throttle. My Multistar250 with Spin-Balancing and Vibration-Absorption Motor Mounts (2 min 40 sec)https://www.youtube.com/watch?v=rXB9Rl7vLDI Comments on this by AILERON8:​ Isolating vibration at its source before it's amplified is standard practice in just about every mechanical and aeronautical engineering handbook that's ever been written. Yet for some reason most folks in this hobby are so laser focused on a software-based filter or FC enhancement of some sort they're blinded to what should be an obvious solution. Dampening the motor vibration, stiffening the frame, or even placing a sensor near or on the motors (utilizing the active feedback signal within the FC software for an automated/enhanced filter) are going to have a much more pronounced effect on noise reduction than all the software filtering in the world. I'd also just like to mention that I am in no way trying to imply that software-based filters in the flight controller are ineffective. Only that reducing motor vibration has great and untapped potential in my opinion Continued Discussion (13 Feb 2017):​ AILERON8:​ The same goes for motor soft mounting, the bolts must be isolated for the method to reach its full potential. I have yet to see a quad with fully soft-mounted motors, but I suspect it would make for the smoothest, most oscillation-free quad ever. So oscillation-free these 32khz gyro's should be all set for takeoff. Floating motors should eliminate the opportunity for resonance to develop and propagate towards the sensitive gyros. Unlike soft-mounting the FC, for motor dampening to be effective it doesn't need to eliminate frame oscillation. The goal for motor dampening is to decouple the frames' natural resonant frequency from the motor as its oscillations vary in frequency and amplitude. All motors oscillate, regardless of balancing. The frame won't oscillate if it's detached from the motors. The motor must completely float in order to achieve this effect however. Which is why I think folks will be in for a surprise when they see how well motor soft mounting can be if fully implemented. I honestly think FC soft mounting will be a thing of the past when the results start pouring-in... Tesseract1984:​ Agreed. Having tried it all (soft mount FC, caps on mains, caps on ESCs, soft mounting motors), this seems to be the ticket. I've had varying levels of success with each option. The most useless of them all being a cap on the mains. Soft-mounting motors makes the most sense. In my opinion doing it to the FC is a band-aid while doing the motors attacks the source and doesn't introduce any delay. A little anecdotal story; i once went overboard with soft mounting a LUX v1 and it actually caused problems. I not only had those rubber bobbins, but also O-rings and the lower standoffs resting on a tpu printed plate with screw holes. What this caused was a very slow wobbling oscillation akin to when I-term is too high (at least in older BetaFlight versions). While multi-rotor flight is still in it's infancy and we are trying new things, yes there are a lot of hype trains. As you can see I've been on them all, but truly, this is the first one that has conclusively solved a plethora of issues including: FPV video interferenceHD cam jelloSporadic yaw twitchUn-tuneable D-termetc etc Would love to see frames come out that have motor soft mounting built into the frame. IMO this should become an industry standard. Also had an idea a few months ago for FC screw holes to have silicon material with a hole big enough for screws. Anyway, just my 2 cents. Just converted my whole fleet using tpu soft mounts and it has literally changed my quadcopter experience. My HD footage actually starting to look like I might know what I'm doing. All aboard, the hype train is leaving the station! AILERON8:​ I agree, too much dampening can make for a sloppy ride. I've over-dampened my FC before using an SPracingF3 board strapped to a giant piece of foam. Sure, no oscillations, but no matter how high I cranked the PIDs it felt loose and sloppy. We want the motors to float, but still let-in those low frequencies untouched. It's definitely a fine balance. One thing I don't believe motor soft mounting will solve though is electrical noise. Most of that is coming from the ESCs via damped light. Although recently Aargh80 came-up with a novel approach to minimize the latter noise using a small 270uF cap in parallel with a tiny MLCC board that can be remotely tucked anywhere in your stack or fuselage. I'd like to see a production version, even though it's not that hard to make it would be nice to have one all set to go for expediency's sake. QuadMcFly:​ Obviously removing the vibrations at the source is much more effective than trying to remove them once they've picked up all kinds of harmonics from the frame I have put together the idea of how to do this, but small volume is too expensive to make it worth it. It involves shoulder bolts 1mm-1.5mm taller than the frame, holes for the screws 1mm-1.5mm wider than the shoulder bolts, and ninja-flex printed grommets to fit the holes. The shoulder bolts tighten against the base of the motor to prevent backing out, but still &quot;float&quot; on the ninja-flex grommets in the arms. there's enough tightness to prevent misalignment of the motors, but enough isolation to be very effective against high frequency vibrations. To make it even cheaper one could simply use the correct diameter heat shrink over the shoulder part of the shoulder bolts and then isolate the motors the old fashioned way. Unfortunately shoulder bolts are super expensive in small quantities. Another post of fixing mid-throttle oscillations by ghall05​ I've had this qav210 for a while now that's had mid throttle oscillations. Changed escs and fc and also tried some different soft mounting methods with no luck. However adding a 25v 1000uf low ESR cap on the main battery connection has solved it! And this is with a hard mounted FC too. Just another data point! I'm putting caps on all my builds from now on. Edit: I should add that I was using a kiss fc first and then a cyclone (which I'm still using now). So mid throttle oscillations can definitely happen on setups without the 6500 gyro. Good before and after BB example of soft mounting:​ https://www.rcgroups.com/forums/showpost.php?p=36091829&amp;postcount=2453 Another Discussion on Oscillation issues:​ vini3019: Just want to share with you guys some of my thinks... Recently I was fighting very hard against mid throttle &quot;side effects&quot; like mid throttle oscillations and yaw twitches (not talking about cases where the issue remains with zero PIDs). I realized that all those issues started when I switched to &quot;over powered &quot; builds where the motors were stronger, props lighter, frames lighter and smaller (with less inertia). I remember that when I was runnig Sunnysky 2204 for example, it was very easy to tune. I was able to push P and D very high without any problems. Yes, those motors are relatively weak with lower torque and slow acceleration. Then I switched to Cobra 2204/2206 and here it started (mid throttle oscillations) but it still was tunable. Today I am running Cobra Champion 2205 2300 and it becomes realy hard to deal with those side effects with just try to tune them out. Trying several ways to solve this issue I realised that there are two most effective ways: Slightly heavier props but still efficient like HQ5x4x4 instead of HQ5x4x3Mechanical damping for FC (soft mounting). And I found it useful not only for sensitive gyros. Assuming usage of low ESR capacitors as a good practics any way. So if I try to analyze all this inputs, I can see that increased mid range torque and higher acceleration speed of the motors combined with the light props, more precise, air mode mid throttle authority and power full ESCs and high discharge batteries can provide destabilization in existing PID controller not only at high throttle but also in mid throttle and fast throttle transitions. Now how heavier props and soft mounting helps to prevent those issues? From my point of view they act as a mechanical damper in close loop system like PID controller. So if our build has good matching between motors benefits and frame inertia/weight, there will be good chance that we will not get side effects. But what happens when we have over powered build where there is not enough &quot;built in&quot; mechanical damping factor? As I can see the existing PID controller not always can deals with it adequately. I think it is possible to add an optional dynamic software damper to the PID controller. We already have one called TPA , but this one acts only at high throttle and it very simple and linear. My suggestion is to think about some configurable, non linear P attenuator for desirable throttle range. The user can be able to define the start and stop throttle points to apply P attenuator and also the attenuation factor. Some similar to how the notch filter works. By this way we will be able to control mid throttle side effects without detuning our quads and possibly deal better with prop wash. That do you think? Boris' Answer: I am not sure what you already tried, but if you use low noise gyro like MPU6000/MPU6050 the noise is really easy to solve. There is really no need of lowering your P's as you suggest just for that. You technically dont even need TPA in that case. The notch default filters in 3.0.1 should deal with low and mid throttle vibrations in most cases. On few of my quads I also have the Cobra champion serie motors like you and had terrible time tuning those without notch filters before. Another Post on curing oscillations from linklemming:​ https://www.rcgroups.com/forums/showpost.php?p=36220137&amp;postcount=41113Later comment: I just stuck three squarish (~15mm) pieces of electrical tape on the frame underneath the motors, used an exacto knife to cut holes in the tape for the screws and remounted the motors making sure not to tighten them down too much. I really doubted it would be as effective as it was since vibes can still come thru the mounting screws but it fixed the issue. Motor Vibration Isolators. Printed in extra flexible NinjaFlex (softer than TPU)​ https://www.rcgroups.com/forums/showpost.php?p=36698872&amp;postcount=2693 A short thread on the Frustrations of Curing Mid-throttle Oscillations.​ https://www.rcgroups.com/forums/showthread.php?2787839-AHHAHAHA-Trouble-shooting-over-a-month-Mid-Throttle-oscillations-Finaly-SolvedMoral: It may not be what you think. In this case is was very probably a loose FPV camera. This is a good reason to confirm the oscillation with a BB log. Successful curing of Oscillation:​ The problem: https://www.rcgroups.com/forums/showpost.php?p=36310032&amp;postcount=249Fixed: https://www.rcgroups.com/forums/showpost.php?p=36326501&amp;postcount=253Broken: https://www.rcgroups.com/forums/showpost.php?p=36330372&amp;postcount=255 https://www.rcgroups.com/forums/showpost.php?p=36857612&amp;postcount=2746 Successful curing of yaw twitches:​ https://www.rcgroups.com/forums/showpost.php?p=36692751&amp;postcount=916 Testing of the new ICM20602 Gyros:​ Boris: Oh.....for the record its not just ICM20602, but MPU6500, MPU9250 and all other ICM2xxxx devices that show exactly the same behaviour. Pretty much every 32khz supported gyro out there.https://www.rcgroups.com/forums/showpost.php?p=36622960&amp;postcount=43273More discussion: https://www.rcgroups.com/forums/showpost.php?p=36623357&amp;postcount=43282https://www.rcgroups.com/forums/showpost.php?p=36623562&amp;postcount=43287https://www.rcgroups.com/forums/showpost.php?p=36630278&amp;postcount=43337https://www.rcgroups.com/forums/showpost.php?p=36630822&amp;postcount=43348 Posted by KagedMayhem:​ I see the comments about notch filters helping with the noise issues, and the comparisons between the mpu6000 and the new icm20602 but not seeing anything about if the current iterations of Betaflight helped solve the noise problems. Is that what the notch filters are for? Boris: You can of course make the filtering more agressive, but readings from ICM20xxx gyros can be too messy on hardmounted solutions so softmounting to make them less sensitive seems like the only solution on those, where on mpu60x0 you would mostly get away on standard mounting. Post on testing Dshot before and after adding Large, low ESR caps to power system:​ https://www.rcgroups.com/forums/showpost.php?p=36713066&amp;postcount=3133https://www.rcgroups.com/forums/showpost.php?p=36718584&amp;postcount=3144https://www.rcgroups.com/forums/showpost.php?p=36720323&amp;postcount=3157 Post on Proper Soft Mounting by arcaine25:​ I had an issue with a 9250 gyro and enabling 32khz mode, setting 16 / 16, but discovered that the issue was the way I was &quot;soft mounting&quot;. I tend to be a little OVER OCD, and I tightened it too much, as well as a couple other mounting mistakes made in haste. When correcting those, and mounting a little &quot;looser&quot; the yaw twitch went away. I am going to dedicate a 32khz mode quad today and test it all over the place... haha Thread about Caps for Noise reduction:​ https://www.rcgroups.com/forums/showthread.php?2830948-Capacitors-for-noise-reduction Links to Soft Mounting hardware:​ OZ -- I am using these, $4.30 for 8 shipped. They are rubber 8mm x 8mm with standard M3 male/female mounting.http://www.ebay.com/itm/151873404692?_trksid=p2057872.m2749.l2649&amp;ssPageName=STRK%3AMEBIDX%3AIT&amp;rmvSB=trueThese are the only ones I have tried and all yaw twitches are gone, they are stiffer than I would think would work, but working well on my revolts (SSG) and sparky2's (9250) flight controllers @ 32/16, motors are hard mounted. These were just posted and look to be red silicon (softer?)http://rotorgeeks.com/index.php?route=product/product&amp;product_id=599&amp;search=damp Gozz -- These are the ones I recently started using too, they work very well for the size.https://www.readymaderc.com/store/index.php?main_page=product_info&amp;cPath=53_777&amp;products_id=6306 What is considered the proper way to soft motors? Answer from AILERON8: There are many different ways of doing it, but what I do is make sure I'm using truly &quot;soft&quot; mounts, either rubber or low-infill TPU, and place one under each motor and under the arms so the motor screws are floating as well. You want the motors to decouple from the frame without becoming loose in the process. It's a fine balance that results in the best tune ever if executed properly.http://pirofliprc.com/1mm-Medium-density-motor-soft-mounting-pad-10-pcs_p_3852.html List of Soft mounting parts from SadLeprechaun- I use this stuff for soft mounting/vibrations:Motorsstand offso-rings (on top of standoffs)HD cam / escs:Cap for battery lead:Caps for ESCs: It took all that and removing gyro notch filters / PT1 fix to get the F60 Pro quad to run without mid-throttle jitters. Each thing reduced them more and more. "},{"title":"Can Filter tuning help?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#can-filter-tuning-help","content":"The newer filters in 3.0 &amp; 3.1 have pretty aggressive defaults. A number of fliers have reduced oscillation issue be reducing the use of the filters. See the Gyro &amp; Filters Wiki page for details and discussions. "},{"title":"Is there a way to download blackbox logs through a terminal client ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#is-there-a-way-to-download-blackbox-logs-through-a-terminal-client-","content":"Thanks to dropax for asking this and working out the answer. Some code digging reveals a CLI command &quot;flash_read&quot; which is only enabled for sparky2: added &quot;#define USE_FLASH_TOOLS&quot; in spracingF3/target.h, compiled and flashed board. Set PuTTY to log all session output to file, connect, type &quot;#&quot; to enter CLI, &quot;flash_info&quot; to get usedSize, &quot;flash_read 0 'usedSize'&quot; and the show begins. 11 minutes later close PuTTY and find a nice 8MB log on the harddrive. Blackbox viewer is robust enough to not care about the initial &quot;talk&quot; in the logfile. One thing that caught me at first was the flow control setting in PuTTY, has to be &quot;none&quot;, got trucated logs with the default. Not as convinient like hitting some buttons in configurator but it will save me sooo much time, big thanks to whoever added this handy piece of code. I think this is the initial commit to cleanflight and this to betaflight, date is 01/28/2015 for both. So my thanks go to thenickdude, the flash and blackbox guru. Since it's only enabled for the &quot;brand new&quot; sparky2 target (08/06/2016) I think it is only meant for debugging purpose. After the download the serial port seems to hang up and I have to reboot the FC but the time savings are totally worth the hassle. "},{"title":"Why do LED strips not work ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-do-led-strips-not-work-","content":"One possible reason: Many LED strips do NOT work when power at over 5V since the FC's serial output is only 3.3V logic and the LED chips never see a valid logic high. Lowering the LED Voltage by at least a diode drop makes them work. Two working solutions are: Add a silicon diode, 1N4002, in series with the 5V to the LED strip. Power the LED strip from a regulator adjusted to about 4.7V. May need to adjust a little lower if still not working. "},{"title":"Recently with the temps dropping, my quad has started to develop a random twitch. Anyone else experience random issues when it's 20'ish degree's F outside ?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#recently-with-the-temps-dropping-my-quad-has-started-to-develop-a-random-twitch-anyone-else-experience-random-issues-when-its-20ish-degrees-f-outside-","content":"Excellent answer by AILERON8: Not twitches, but glitches in general, you bet! I used to run a mobile DJ business for 15 years, and I've performed hundreds of gigs in cold climates living and working primarily in coastal Maine. Today it's a balmy 5 deg F for example, but from all those years of experience I can tell you there are three major things that happen to electronics and hardware due to the cold, and they're not good I'm afraid to say. Shrinking &amp; Expanding: Microelectronics are designed to withstand a wide variety of ambient temperatures, particularly the types we're using in our hobby such as FET's, low ESR caps, and large integrated circuit boards. These devices are specifically engineered to dissipate heat, mostly by utilizing the plentiful airflow quadcopters can deliver as a byproduct of their basic functional design. Unlucky for us though, is that the same ability for the circuits to effectively dissipate heat works against us and can overcool certain components on the board. The overcooling will cause the many different types of raw materials the components are fabricated from to shrink at various rates. Although some of this &quot;play&quot; is often accounted for in their construction, when temperatures are severely low the shrinking can be equally severe and cause components to electrically short, crack, become brittle, and break. Damage can vary from temporary to permanent depending on what occurred. Condensation: While in the cold your components will not condensate water, but your goggles will certainly fog-up. If you're running Fatsharks with the little fans then you're pretty much all set, but for those who have no way to get rid of the fog without using your hands, I don't know what to tell you. When you bring your rig back into a warm house quickly after being in sub-freezing temps for an extended period of time, the condensation can be severe enough to permanently destroy things that shouldn't get wet. It doesn't matter how much Corrosion-X your squirt on your ESC's, FC, or PDB, they are going to get sopping wet if you don't gradually raise their temps to room temperature. Trust me on this folks… If you aren't slowly raising your temps then all it takes are a few flights before your quads start shorting, buzzing, and catching fire… Slow Decay due to the Cold: Okay, here comes the main point. If you are flying your quads in the freezing cold on a semi-regular basis you will be shortening the life of every single component considerably. I'm not complaining to you, I'm just delivering the facts. Even if you are gradually raising the temps on your equipment when moving them from the cold, every single component and circuit is being stressed to the max from all the contraction and expansion, and you can't completely stop condensation from building. Here's the nail in the coffin! Sadly, your LiPo is already being strained due to the cold for reasons I won't go into for brevities sake. Your pack really doesn't want to give the extra juice even though it's being forced to do so… It's a bad recipe for sure, and ironically, what happens is you will land with MUCH hotter ESC's, motors, and worst of all, LiPo's. Really watch-out, because your packs can get so hot they catch fire. Magnets… Magnets do like the moderate cold fortunately and actually increase increases in strength by a small amount down to around -125°C.  "},{"title":"Why can't I connect to my flight controller using MSP over UART1?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#why-cant-i-connect-to-my-flight-controller-using-msp-over-uart1","content":"Since Betaflight 3.1, MSP on UART is no longer enabled by default. To enable it, you need to build a custom version of Betaflight and flash it to your flight controller. (Related issue) Follow the instructions under &quot;development&quot; on this wiki, but add OPTIONS=USE_MSP_UART to your make command. For example: make CC3D OPTIONS=USE_MSP_UART. Instead of CC3D, you can use any target that Betaflight supports. "},{"title":"Is it possible that we can flash the Frsky receivers thru the flight controller like we now flash the ESC?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#is-it-possible-that-we-can-flash-the-frsky-receivers-thru-the-flight-controller-like-we-now-flash-the-esc","content":"That's done by Fishpepper;OpenSky / tinyFISH "},{"title":"Is there a way to dismiss the OSD post flight statistics screen?​","type":1,"pageTitle":"FAQ","url":"/betaflight.com/docs/wiki/archive/FAQ#is-there-a-way-to-dismiss-the-osd-post-flight-statistics-screen","content":"Yes, move either the throttle or pitch stick high to dismiss the statistics screen and return to the &quot;main&quot; OSD screen. "},{"title":"Freestyle Tuning Principles","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles","content":"","keywords":""},{"title":"This is a work in progress and not a final document.​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#this-is-a-work-in-progress-and-not-a-final-document","content":"Authors: Elia Palme, Daniel Appel, Hugo Chiang(DusKing1), Mark Spatz and co. "},{"title":"Motivation​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#motivation","content":"Provide easy and simple guidelines to set-up Betaflight for freestyle. While Betaflight benefits from a large and vivid developers community with frequent updates and new features releases, it has often been criticized by freestyle pilots for being too complicated to use and hard to keep up with. This guide aims to provide simple guiding principles and tune suggestions to make the best out of Betaflight for freestyle purposes. Note: before editing this guide consider discussing changes on the original document. "},{"title":"Principles and Attributes​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#principles-and-attributes","content":"Freestyle is mainly about the footage of a smooth and precise acrobatic flight. To achieve such goals a freestyle quad should be tuned with the following principles in mind: Optimized for smoothness over low latency and sharp control. Freestyle pilots tend to prefer a smoother and &quot;looser&quot; quad over an extremely reactive (brain reading feeling) one. Mainly because it helps to smooth out micro correction and makes the footage look more organic and fluid. Optimized to behave predictively and with consistency. Consistency helps pilots to build muscle memory and get a feel of the quad, hence gain confidence and precision. One among the best pilots, Mr. Steel is known for running the same setup for several years and he very rarely makes changes to it. With the above principles in mind we can distill three attributes we should optimize for: \tConsistency\tConsistency is the ability of the craft to behave based in a consistent and predictable manner given the provided stick inputs. The more predictable is the quad behaving the more precision and confidence the pilot will gain. Attitude Hold\tAttitude hold is the ability of the craft to keep it’s trajectory and behave as expected. A quadcopter with good attitude resists changes in orientation from outside forces, and responds only to user stick inputs. These outside forces can include wind, propwash, vibrations, and other forces. Attitude provides smoothness. Responsiveness\tResponsiveness is the ability of the craft to track setpoint (stick inputs) as close as possible. A responsive quad has very low latency and feels connected. In theory all three attributes are equally important in practice an increase of responsiveness might affect the pilot ability to fly smoothly and consistently. Therefore it is advised to compromise on responsiveness to keep the quad behaving in a predictive and consistent manner "},{"title":"Betaflight Tune​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#betaflight-tune","content":"Important note: the suggested tuning values are intended for a typical 5&quot; setup either 6S with [1600 to 1800] KV motors or 4S with [2400-2600] KV motors. "},{"title":"VBat Sag Compensation​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#vbat-sag-compensation","content":"This feature aims to provide motor response consistency across the entire flight (BF doc ref). By enabling VBat Sag Compensation the craft will fly more consistently and predictively. If you plan to use this feature it's crucial to enable it before performing the PID tuning. Suggested setting: values for a 5&quot;​ \tValueVBat Sag Period (vbat_sag_lpf_period)\t200 (20 second) VBat compensation\t40-70 💡 Advanced Considerations​ Click to expand! VBatSagCompensation works by adjusting the overall motor outputs depending on battery voltage. Using higher values of VBatSagCompensation, such as 100, will attempt to completely eliminate reduction in power from battery response down to the 3.3V/cell threshold. This will reduce opportunities for a pilot to perceive battery sag .While a very consistent response for the same throttle inputs from the start of a flight towards the end of the flight is great, the inherent risk with this approach is that flight performance will go from nominal to battery dropping below 3.0V/cell very quickly if all the battery capacity is used. For this reason, many pilots would prefer to run lower values if they are accustomed to using the battery sag response to gauge when it is prudent to land. Due to the chemistry of Lithium Polymer batteries, operating them below 3.0V/cell results in plating lithium onto the anode, which permanently reduces both the capacity and to to a peak discharge capability of the battery. This is to be avoided if at all possible. "},{"title":"PID​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#pid","content":"PID are at the core of a quad tuning, with PID tuning we can achieve a good quadcopter attitude. D is the most important PID term to achieve smooth flying, D helps to minimize propwash as well as dampening any quads movement. Freestyle quads tend to use higher D gains. To counterbalance a higher than usual D gain P needs to be increased as well. A simple approach to tune P and D is to set a desired D gain (e.g. 45) and slowly increase P as high as possible without producing any bounce back on flips and rolls (see UAV Tech video). The I term is generally good enough on default, however if the quad feels sloppy increasing the gain could improve the overall attitude. "},{"title":"Suggested settings: values for a 5\"​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#suggested-settings-values-for-a-5","content":"\tP\tI\tDRoll\t60-70\t90-100\t40-50 Pitch\t60-70\t90-100\t40-50 Yaw\t30-40\t90-100\t0 "},{"title":"💡 Advanced Considerations​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#-advanced-considerations-1","content":"Click to expand! Equal setpoint tracking latency across axes To further improve consistency it's important to properly tune all axes (Roll, Pitch and Yaw) this will ensure that the setpoint tracking latency is equal for each axe. Yaw can tolerate some additional tracking latency, just because of how differently it produces torque about the yaw axis. This is likely a very minor note, but why increasing Yaw P values can very frequently improve performance, particularly with larger frames or other designs that have more frame mass farther from the CG. Motor max out Another big factor for consistency is that when the craft is commanded to make a move, the motors should not max out. If that happens you'll get completely different responsiveness, and somewhat unpredictably. This is again a key factor in consistency: having enough power and authority on all axes. "},{"title":"Feed Forward​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#feed-forward","content":"Feed Forward is used to help the quad copter tracking the setpoint (stick inputs) closer. In other words it reduces the latency between stick movement and quadcopter movement. Feed Forward is intended to increase responsiveness by more directly applying stick inputs into the mixer ahead of other PID inputs, reducing the need for the PID controller to respond to setpoint error in order to respond to inputs Feed Forward is great to increase responsiveness by anticipating a soon expected PID error based on stick movement. "},{"title":"Suggested setting: values for a 5\"​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#suggested-setting-values-for-a-5-1","content":"\tFeed Forward Transition\t0.9-1 \tFeed ForwardRoll\t90-100 Pitch\t90-100 Yaw\t90-100 "},{"title":"D Min​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#d-min","content":"D Min allows to run higher D gain on not so clean builds by dynamically increasing D on sharp moves.It has been introduced to run cooler motors, and have faster stick responsiveness. D Min can negatively affect consistency as D is no longer constant but varies depending on how quick the move is. Also, running a lower D during shallow flight will reduce smoothness. "},{"title":"Suggested setting: off​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#suggested-setting-off","content":"If your quad allows it (clean build with low noise) disabling D Min increases the quad flight consistency by keeping D constant and at a generally higher value. "},{"title":"TPA​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#tpa","content":"TPA lowers the D and P gain after a certain throttle threshold. It has been introduced to address fast oscillations induced by high throttle motor noises on quads running high PID gains. Similar to D Min this settings could negatively affect consistency leading to an increase of rotation rate when more throttle appliedBF doc ref Increasing the default breakpoint value allows to keep D constant also around mid throttle . "},{"title":"Suggested setting: values for a 5\"​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#suggested-setting-values-for-a-5-2","content":"\tRate\tBreakpointTPA\t0.40-0.50\t1600- 1750 Lower rate and higher breakpoint will increase consistency but eventually introduce oscillations, carefully tune the settings to minimize the impact of TPA while avoiding oscillations. "},{"title":"Thrust Linear​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#thrust-linear","content":"If a unusually large TPA is required to avoid high-throttle oscillations whilst good performance is observed at low and mid throttle then consider reducing TPA and employing thrust_linear. Thrust linearization is designed to account for situations where a linear throttle input produces an exponential throttle output. This can happen on builds which fall outside of the normal power/weight ratio. In these cases thrust_linear can be used to PID boost response at low throttle and reduce PID response at high throttle. thrust_linear defaults to 0. If you experience oscillations which TPA cannot sufficiently correct then thrust_linear is a good next step. Because thrust_linear will boost PID response at low throttle the master PID values should be reduced one or two notches on the slider before introducing thrust_linear. Set thrust_linear initially at a value around 25 and then increase in increments of 5 whilst observing the effect on high-throttle oscillations. "},{"title":"I term relax and iterm_windup​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#i-term-relax-and-iterm_windup","content":"I term relax aims to inhibit I during fast manoeuvres by preventing it from further accumulating avoiding I term induced bounce back on flips and rolls (BF doc ref). "},{"title":"Suggested setting: values for a 5\"​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#suggested-setting-values-for-a-5-3","content":"\tAxes\tType\tCutoffIterm Relax\tRP (Increment only)\tSetpoint\t7-12 "},{"title":"Anti gravity​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#anti-gravity","content":"Anti Gravity boosts the I term when fast throttle changes are detected. It has been introduced to mitigate the craft nose tilt on throttle changes (BF doc ref). Anti gravity helps to increase smoothness and hold the attitude on maneuvers with fast throttle changes like boosts, powerloops, etc. "},{"title":"Suggested setting: values for a 5\"​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#suggested-setting-values-for-a-5-4","content":"\tGainAnti gravity\t3.5 - 5 "},{"title":"Motor Idle Throttle Value, Dynamic Idle Value & Thrust Linear​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#motor-idle-throttle-value-dynamic-idle-value--thrust-linear","content":"Lower than default Motor Idle Throttle Value allows for greater hang time and cleaner dives. However it comes at the cost of a weaker attitude hold at zero throttle and increased risk of de-sync. Dynamic Idle Value and Thrust Linear will help to mitigate those collateral effects. Dynamic Idle Value allows to define minimum motor RPM, if set at a reasonable amount it avoids de-sync due to too low motor RPM. Thrust Linear helps to boost the PID gains low throttle helping to offset reduced motor responsiveness in low RPM operation compared to higher RPM responsiveness of motors. This can have some interactions with D gains at higher throttle values, which may require use of higher TPA_rate to offset. "},{"title":"Suggested setting: values for a 5\"​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#suggested-setting-values-for-a-5-5","content":"\tValueMotor Idle Throttle Value\t3% - 4% Dynamic Idle\tNeeds to be computed according to doc. Thrust Linear\t20-25 "},{"title":"RC smoothing​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#rc-smoothing","content":"Higher than default RC smoothing helps reducing stick input gliches caused by noise in the RC link. "},{"title":"Suggested setting:​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#suggested-setting","content":"\tValueRC smoothing\t20 Betaflight Filtering Generally speaking the less the better as filtering introduces latency, for freestyling a more conservative approach with enough amount of filtering is advised. Not enough filtering can negatively affect smoothness and in some cases even burn motors. Via incremental tuning effort try minimizing Gyro LPF filtering (biggest drain on phase delay that makes propwash response poor) followed by minimizing how much delay is coming from dynamic notch filtering (ideally single notch with smaller DFT bins - W=0, Q=250, MinHz 105, MaxHz 465). Lastly, try reducing the D-term filtering, slider values up to 1.4 range, still attenuates most D_term noise very well but reduces phase latency. ESC Settings "},{"title":"PWM Frequency​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#pwm-frequency","content":"Increasing PWM frequency helps to run smoother motors, and provide greater control at the cost of losing some thrust. Warning: Increasing PWM frequency can introduce wobbles at zero or low throttle. Such undesired effect can be mitigated by increasing Thrust Linear or Dynamic Idle values. "},{"title":"Suggested setting: values for a 5\"​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#suggested-setting-values-for-a-5-6","content":"\tValuePWM Frequency\t48kHz - 96kHz or use Variable PWM Frequency "},{"title":"💡 Advanced Considerations​","type":1,"pageTitle":"Freestyle Tuning Principles","url":"/betaflight.com/docs/wiki/archive/Freestyle-Tuning-Principles#-advanced-considerations-2","content":"Click to expand! Increasing PWM frequency tends to result in smoother running motors and may mitigate issues with aliasing that results in some mid-throttle oscillations, however higher PWM frequencies have downside. As the PWM frequency increases, the PWM resolution is bound to decrease, and depending on ESC deadtime required in switching, lower throttle responsiveness may also be reduced. "},{"title":"FrSky FPORT Protocol","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/FrSky-FPort-Protocol","content":"","keywords":""},{"title":"Motivation​","type":1,"pageTitle":"FrSky FPORT Protocol","url":"/betaflight.com/docs/wiki/archive/FrSky-FPort-Protocol#motivation","content":"FPort is a new RC protocol that was developed by FrSky in collaboration with Betaflight. It has a number of improvements over existing protocols used by FrSky hardware: only one serial connection is required, RC control information, telemetry (including MSP tunneling), and RSSI are all sent over this connection;the serial connection uses 115200, N81, making it easier to implement on hardware that has limited support for 'exotic' modes;it is inverted (not possible with the test firmware for existing RX). A driver for FPort has been added to Betaflight. It is available since Betaflight 3.3. The detailed specification for FPort is available here: F.Port.protocol.betaFlight.V2.1.2017.11.21.pdf Frsky announcement: here Compatibility Receiver\tCompatible ?\tFirmware download pageFrSky R-XSR\tYes\there FrSky X4R\tYes\there FrSky X4R-SB\tYes\there FrSky XSR\tYes\there FrSky XSR-M\tYes\there FrSky R9M Slim\tYes\there FrSky R9M Slim+\tYes\there Using FPort "},{"title":"Requirements:​","type":1,"pageTitle":"FrSky FPORT Protocol","url":"/betaflight.com/docs/wiki/archive/FrSky-FPort-Protocol#requirements","content":"a FrSky XSR or X4R(SB) or XSR-m or r-XSR receiver (see the list above);a free hardware port on the flight controller (F3 or better) that is capable of running SmartPort with your receiver (i.e. must be able to run inverted bidirectional, or your receiver needs to have the 'uninverted SmartPort' hack applied). "},{"title":"Installation​","type":1,"pageTitle":"FrSky FPORT Protocol","url":"/betaflight.com/docs/wiki/archive/FrSky-FPort-Protocol#installation","content":"Download and install the receiver firmware (see the list above); Instructions for the firmware installation can be found here and here.Install latest Betaflight version onto your flight controller.Connect the SmartPort port on your receiver to the inverted bidirectional port on your flight controller. On F3 / F4 with a 'uninverted SmartPort' hacked receiver / F7, the receiver is connected to the TX pin of the serial port, on F4 with a non-hacked receiver the connection will be dependent on how the bidirectional inverter is designed - consult your flight controller manual; (Effectively, this connection uses the same pins on both sides that would be used to connect SmartPort if a non-FPort firmware was used.)Configure your flight controller. Enable 'serial RX' for the port the receiver is connected to, choose 'Serial Rx' as receiver type, and 'FPort' as protocol. For F3 / F4 with a 'uninverted SmartPort' hacked receiver / F7, set serialrx_halfduplex = on in CLI. If not using a receiver with 'uninverted SmartPort' hack, set serialrx_inverted = on. After all is done, the relevant bits of a dump should look like this (assuming we're using UART3): F3 / F7: serial 2 64 115200 57600 0 115200 set serialrx_provider = FPORT set serialrx_halfduplex = ON set serialrx_inverted = ON  F4 with non-hacked receiver (needs bi-directional inverter on the flight controller): serial 2 64 115200 57600 0 115200 set serialrx_provider = FPORT set serialrx_halfduplex = OFF set serialrx_inverted = ON  F4 with 'uninverted SmartPort' hacked receiver: serial 2 64 115200 57600 0 115200 set serialrx_provider = FPORT set serialrx_halfduplex = ON set serialrx_inverted = OFF  Bind your receiver to your transmitter;Test RC control: With the transmitter on and the flight controller connected to the configurator, make sure the bars in the 'Receiver' tab move when you move the sticks on the transmitter;Test telemetry: (In OpenTx, a rescan of the sensors is required, since the sensor ids are different between SmartPort and FPort.) Check that the telemetry screen shows the values from your flight controller. (caveat: With FPort it is possible that RC commands work, but telemetry doesn't. If this happens, it means that the serial connection that you are using is not bidirectional, and the receiver =&gt; flight controller data flow works, but flight controller =&gt; receiver doesn't. Id this happens, check your port settings, and (for F4) make sure that the port you are using can support inverted bidirectional.)If you want to use the Betaflight lua telemetry scripts on Taranis / Horus, download and install the latest release (1.0 or newer) from here.Happy flying. ;-) (As always, any sort of feedback and bug reports are appreciated, please drop them here.) "},{"title":"GPS Rescue before V4.1","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode","content":"","keywords":""},{"title":"Go to the Betaflight Modes tab and add a switch for GPS Rescue Mode. Verify that the mode actually gets activated (of course no props).​","type":1,"pageTitle":"GPS Rescue before V4.1","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode#go-to-the-betaflight-modes-tab-and-add-a-switch-for-gps-rescue-mode-verify-that-the-mode-actually-gets-activated-of-course-no-props","content":"Then configure the following parameters in the cli: set gps_rescue_initial_alt=[number] (default is 50) This is the most important parameter. When Rescue Mode is activated, your quad will point home and try to climb to a safe altitude relative to your takeoff point. This altitude will either be this parameter, or the maximum altitude recorded during flight +15m, whichever is highest. I personally like to make it 70 or 80 meters. set gps_rescue_ground_speed=[number] (default is 2000) This is the speed at which your quad will try to come back, in centimeters per second. I like 1500 (about 35 mph), but this setting depends on how and where you fly. set gps_rescue_angle=[number] (default is 32) This is the maximum allowed tilt angle for your quad when coming home. This setting may prevent it to reaching full speed, so you may have to experiment with it if you change the defaults. Note that the higher the angle, the harder it will be for the altitude controller to keep a stable altitude. When there is a chance of returning into head winds I like to set this parameter to 45 degrees. set gps_rescue_descent_dist =[number] (default is 200) This is the distance, in meters, at which your quad will start descending towards home. set gps_rescue_ascend_rate = [number] (default is 500) (added in betaflight 4.1) This is the vertical speed at which your quad will climb, espressed in centimeters for second set gps_rescue_descend_rate = [number] (default is 150) (added in betaflight 4.1) This is the vertical speed at which your quad will descend, espressed in centimeters for second gps_rescue_throttle_min and gps_rescue_throttle_max in betaflight 4.1 only limit the escursion of the the new pid controller(https://github.com/betaflight/betaflight/pull/8015) gps_rescue_alt_mode = [MAX_ALT, FIXED_ALT, CURRENT_ALT] (added in betaflight 4.1) now we can set the altitude of gps rescue MAX_ALT is the old setting, the altitude will be gps_rescue_initial_alt, or the maximum altitude recorded during flight +15m FIXED_ALT, the quad will always try to return to the height set (gps_rescue_initial_alt) CURRENT_ALT, the quad will return maintaining the readed altitude during the rescue activation (not suggested) "},{"title":"At this point you are ready to test Rescue Mode.​","type":1,"pageTitle":"GPS Rescue before V4.1","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode#at-this-point-you-are-ready-to-test-rescue-mode","content":"Wait for your gps to get a good fix. By default your quad will not arm if you have less than gps_rescue_min_sats (default is 8) satellites. "},{"title":"We suggest the following procedure:​","type":1,"pageTitle":"GPS Rescue before V4.1","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode#we-suggest-the-following-procedure","content":"Fly in a straight line for at least 100 meters past your descent distance. For example, if your descent distance setting is 150 meters, fly to 250 meters. As you keep flying in a straight line, the home arrow should adjust to point towards home. "},{"title":"VERY IMPORTANT: if your arrow does not point towards home, DO NOT activate GPS Rescue. Your quad will try to fly in the direction of the arrow if you do.​","type":1,"pageTitle":"GPS Rescue before V4.1","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode#very-important-if-your-arrow-does-not-point-towards-home-do-not-activate-gps-rescue-your-quad-will-try-to-fly-in-the-direction-of-the-arrow-if-you-do","content":"Activate GPS Rescue. "},{"title":"IMPORTANT: be ready to deactivate the mode and take back control if your quad does not point towards you and starts making its way home.​","type":1,"pageTitle":"GPS Rescue before V4.1","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode#important-be-ready-to-deactivate-the-mode-and-take-back-control-if-your-quad-does-not-point-towards-you-and-starts-making-its-way-home","content":"If everything goes well, your quad will come back towards you and start descending. Do not let it get too close to the ground or to yourself because the landing functionality is not included in current builds. Your quad may just crash near you or overshoot you. You may have noticed that the quad had a hard time keeping a stable altitude. Sometimes this happens when the GPS altitude reading is unstable, so the controller is aiming for a moving target. If you had a very stable altitude reading and the quad still could not stabilize within ten meters of your desired target altitude, you may have to adjust the altitude throttle PID gains. These are the parameters: gps_rescue_throttle_Pgps_rescue_throttle_I gps_rescue_throttle_D We do not expect that most people will have to fine tune the navigation speed gains, but just in case the PID gains are: gps_rescue_velocity_P = 80gps_rescue_velocity_I = 10gps_rescue_velocity_D = 20 After your quad reliably returns home once, you may want to test it at progressively larger distances and directions. When you have a reasonable level of trust in the feature, you may want to set your failsafe to GPS_RESCUE: set failsafe_procedure = GPS-RESCUE With this setting, GPS Rescue will activate in the event of a failsafe. v4.0.x notes - However, it will return control to the user as soon as the radio link comes back. During this time the user should either activate Rescue Mode manually on the radio, just so that there cannot be an unexpected transition to manual control, or be ready to take over control at any moment. Our recommended approach is the first one, which requires having Rescue Mode on a switch if you want to use it for failsafe as well. v4.1 and beyond - After the RC link is restored, Betaflight now requires that any combination of roll/pitch/yaw inputs be moved beyond the failsafe_stick_threshold percentage value before failsafe will be exited and control returned to the pilot. The default for this setting is 30 which means you need to move roll, pitch, or yaw at least 30% off center before it will cancel Failsafe and return control. You may choose to reduce that setting value if you need a less abrupt transition from failsafe to full control. Additionally the failsafe procedure can be activated in the Failsafe tab of the configurator, or by using the OSD menus (FEATURES &gt; FAILSAFE). The OSD menus setting is also convenient to disable GPS Rescue on failsafe in the field if you are flying in restricted or limited airspace (like indoors or among trees). Be sure to reenable when appropriate. "},{"title":"DEALING WITH FAILURES / SANITY CHECKS (VERY IMPORTANT):​","type":1,"pageTitle":"GPS Rescue before V4.1","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode#dealing-with-failures--sanity-checks-very-important","content":"If you're using rescue mode in a supervised fashion (as a switch only with video), or in a place with no danger to surroundings (over water, etc), sanity checks are entirely optional. If you plan on setting this as a failsafe (and most of the time even if you do not) you should highly consider enabling these. set gps_rescue_sanity_checks = RESCUE_SANITY_ON You can also set this to RESCUE_SANITY_FS_ONLY if you want it to only matter in a failsafe (unsupervised) condition. Sanity checks will ensure that: GPS receiver is still connected to the FCGPS receiver is sending a valid GPS FixQuad has not experienced a big shake (probably due to a crash)Number of Sats is equal or above gps_min_satsQuad gets closer to the home point after reaching initial altitude If any of the conditions is not met, the Rescue operation will be aborted, meaning the quad will be dropped. However, the last two conditions have a few seconds of tolerance before getting triggered. Also, if the quad is not getting closer and a magnetometer is being used, Rescue will attempt to use GPS orientation as a second chance, but if a flyaway is still detected, the operation will be definitely aborted. "},{"title":"Arm without a GPS Fix​","type":1,"pageTitle":"GPS Rescue before V4.1","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode#arm-without-a-gps-fix","content":"By default, Betaflight will not let arm without a GPS Fix if you have GPS Rescue configured in a switch or as a failsafe procedure. Sometimes you might want to fly without a GPS Fix (maybe you're in a zone with poor coverage, or want to do a quick reconnaissance flight meanwhile sats are acquired) at the expense of GPS Rescue being deactivated. You can achieve this by setting: set gps_rescue_allow_arming_without_fix = ON With this value, you can take off without a GPS Fix, but the GPS Rescue will not be available during the flight. A warning (RESCUE OFF) will appear in the OSD to make you aware of that. If a proper number of satellites are acquired while flying, to enable GPS Rescue you must land, disarm and arm again. "},{"title":"Rescue not available​","type":1,"pageTitle":"GPS Rescue before V4.1","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode#rescue-not-available","content":"If GPS Rescue is mapped to a switch and/or set as a failsafe procedure, a minimum set of conditions will be continuously checked (GPS receiver connected, valid GPS fix, min sats). In the event of any condition not being met, a warning (RESCUE N/A) will be shown on the OSD. This is only a warning, if Rescue is activated while the warning is on screen, a grace period will still be taken into account for the sanity checks. This warning is shown regardless of the sanity checks being enabled. "},{"title":"Common pitfalls​","type":1,"pageTitle":"GPS Rescue before V4.1","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode#common-pitfalls","content":"Ensure that you are flying further than the minimum distance to home (100m by default) before testing GPS Rescue. The minimum distance can be set in the CLI using set gps_rescue_min_dth = &lt;meters&gt;. At distances less than this, GPS rescue will cause the quad to drop.In some particular setups, the accelerometer can drift over time and this can avoid GPS Rescue to work properly. This can be checked by flying for a long time and then activating angle mode, if the quad does not get to a nearly perfect stable orientation please do not use GPS Rescue on this quad.some GPS units need configuration with U-Center to work. Use this video by Painless360 for setup.GPS Rescue is still actively maintained/developed, so if you're not using the last stable Betaflight release, chances are you could hit a known issue. Please be sure to use the last stable release (currently 4.0).GPS Rescue is not and will never be completely reliable, so it should never be used as the only recovery measure. Showing lat/lon GPS Coordinates on the OSD (and recording the flight with a DVR), logging the telemetry (including GPS coordinates) in the Radio TX or using an autonomous beeper are some measures that should be in place even before testing GPS Rescue. "},{"title":"Common pitfalls for old versions​","type":1,"pageTitle":"GPS Rescue before V4.1","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode#common-pitfalls-for-old-versions","content":"For Betaflight versions prior to 4.0, it's highly encouraged to enable Air Mode, and optionally to finetune failsafe Stage1 settings, as a workaround for the crash detection issue immediately after activating Rescue Mode. Basically, ensure your settings will avoid the quad to be free-falling when entering into Stage2.When changing failsafe parameters with Betaflight Configurator 10.4 or lower, the failsafe procedure will be silently reset. Ensure that you set the failsafe procedure manually on CLI after saving modifications on the failsafe tab.Every time the quad is armed, the home point is updated. Prior to BF 4.0, home point was updated on disarm but could be missed if switching rapidly. Best practice for launching in all versions is to arm, wait a few seconds until home point shows up in osd with 0 distance, and then start flying. Otherwise, disarm, wait a few seconds and repeat. Since Betaflight 4.0 you can use this cli command set gps_set_home_point_once = ON in this way only the first arm after the battery is connected will be used as home point.If you're using Crossfire, make sure to configure the Failsafe parameter as &quot;Cut&quot; on your &quot;CROSSFIRE RX&quot; menu. "},{"title":"Version History​","type":1,"pageTitle":"GPS Rescue before V4.1","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode#version-history","content":"Betaflight 4.1 When GPS Rescue is engaged after a Failsafe, use sticks to recover control (https://github.com/betaflight/betaflight/pull/7936) Betaflight 4.0 Prevent crash detection immediately after entering GPS Rescue mode (https://github.com/betaflight/betaflight/pull/7034)Allow minimum distance to home to be configurable (https://github.com/betaflight/betaflight/pull/6404)Fixed a problem with Sanity Check misreporting STALLED/FLYAWAY during the initial phase (https://github.com/betaflight/betaflight/pull/7254)Added warning indication for GPS Rescue unreliable (https://github.com/betaflight/betaflight/pull/7256)Added explicit parameter for arming without fix or low sats: gps_rescue_allow_arming_without_fix (https://github.com/betaflight/betaflight/pull/7320) Betaflight 3.5.5 Fixed a problem with Sanity Check misreporting STALLED during the initial phase (https://github.com/betaflight/betaflight/pull/7254) Betaflight 3.5.3 Fixed problem with MOTOR_STOP and auto-disarm activating when GPS Rescue is active (https://github.com/betaflight/betaflight/pull/6979); Betaflight 3.5 GPS Rescue activated on failsafe will check the quad to be at least 100m away from home, regardless of the Sanity check setting. If it's closer, it will drop. Non-failsafe activated GPS Rescue works as in 3.4. Betaflight 3.4 The Sanity check includes a test for the quad to be farther away than 100m from target home for the Rescue mode to be activated. When Sanity check is enabled, if GPS Rescue is activated (either manually or by failsafe) when the quad is closer than 100m from home, it will drop. "},{"title":"GPS Rescue 4.1 to 4.3","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3","content":"","keywords":""},{"title":"WHAT THIS IS:​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#what-this-is","content":"GPS Rescue Mode is intended to bring your quad back autonomously in case of an emergency such as loss of video or radio link. The only purpose is to bring the quad back into range so you can retake control as soon as possible. It is not meant to be a reliable Return to Home mode. Keep this in mind, and (other than for initial testing) only activate it to avoid losing your quad. In order to increase the probability of GPS Rescue's successful operation, please read this document and configure your system as best as possible for your particular environment and flying style. "},{"title":"WHAT THIS IS NOT:​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#what-this-is-not","content":"GPS Rescue is not a full &quot;Return To Home&quot; (RTH) function. It is not meant to be a tool to autonomously fly your quad home and you should not try and use it this way. It has no ability to auto-land and will intentionally &quot;soft-crash&quot; when it approaches the home point. Its entire purpose is to return the quad closer to home so the pilot can resume control in the event of signal loss. The pilot should resume control as soon as possible and not rely on GPS Rescue to fly home. "},{"title":"REQUIREMENTS​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#requirements","content":"GPS is required. The recommended models are Ublox m8n variants. This has been tested with 18x18mm m8n units, the Beitian BN 880 and other similar models.Accelerometer must be enabled and properly calibrated, Rescue Mode needs it to keep the quad leveled.Barometer is optional but recommended. We have tested with both on-board and external (i2c) units.This mode does not require a compass but will use one if available.3D mode is not supported. If you have the 3D feature enabled GPS Rescue will be disabled. "},{"title":"DISCLAIMER:​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#disclaimer","content":"This is an experimental feature.Use with extreme caution.This documentation WILL change so check this page often.Unless stated otherwise, this documentation refers to the last stable release (currently BF4.0)If you plan on using this as a failsafe method you should ABSOLUTELY enable sanity checks! "},{"title":"PREREQUISITE:​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#prerequisite","content":"Before configuring or testing GPS Rescue, you must calibrate the accelerometer and ensure that angle mode works properly. Set up the &quot;ANGLE&quot; flight mode and test in flight to ensure that the craft self-levels and behaves normally. If the craft does not properly level then recalibrate the accelerometer and test again. GPS Rescue uses angle mode so if this is not working properly GPS Rescue will be unable to recover the craft and may cause it to fly in the wrong direction. "},{"title":"Setting up GPS Rescue​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#setting-up-gps-rescue","content":"In order to set up GPS Rescue on your quad, it is highly recommended that you follow the complete setup procedure from scratch. This procedure is meant for practicing in a controlled environment and fully understanding the behaviour and limitations of GPS Rescue. Using GPS Rescue out of the box (copying someone else's configuration) will diminish the chances of success. "},{"title":"Go to the Betaflight Modes tab and add a switch for GPS Rescue Mode. Verify that the mode actually gets activated (of course no props).​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#go-to-the-betaflight-modes-tab-and-add-a-switch-for-gps-rescue-mode-verify-that-the-mode-actually-gets-activated-of-course-no-props","content":"Then configure the following parameters in the cli: set gps_rescue_initial_alt=[number] (default is 50) This is the most important parameter. When Rescue Mode is activated, your quad will point home and try to climb to a safe altitude relative to your takeoff point. This altitude will either be this parameter, or the maximum altitude recorded during flight +15m, whichever is highest. I personally like to make it 70 or 80 meters. set gps_rescue_ground_speed=[number] (default is 2000) This is the speed at which your quad will try to come back, in centimeters per second. I like 1500 (about 35 mph), but this setting depends on how and where you fly. set gps_rescue_angle=[number] (default is 32) This is the maximum allowed tilt angle for your quad when coming home. This setting may prevent it to reaching full speed, so you may have to experiment with it if you change the defaults. Note that the higher the angle, the harder it will be for the altitude controller to keep a stable altitude. When there is a chance of returning into head winds I like to set this parameter to 45 degrees. set gps_rescue_descent_dist =[number] (default is 200) This is the distance, in meters, at which your quad will start descending towards home. set gps_rescue_ascend_rate = [number] (default is 500) (added in betaflight 4.1) This is the vertical speed at which your quad will climb, espressed in centimeters for second set gps_rescue_descend_rate = [number] (default is 150) (added in betaflight 4.1) This is the vertical speed at which your quad will descend, espressed in centimeters for second gps_rescue_throttle_min and gps_rescue_throttle_max in betaflight 4.1 only limit the escursion of the the new pid controller(https://github.com/betaflight/betaflight/pull/8015) gps_rescue_alt_mode = [MAX_ALT, FIXED_ALT, CURRENT_ALT] (added in betaflight 4.1) now we can set the altitude of gps rescue MAX_ALT is the old setting, the altitude will be gps_rescue_initial_alt, or the maximum altitude recorded during flight +15m FIXED_ALT, the quad will always try to return to the height set (gps_rescue_initial_alt) CURRENT_ALT, the quad will return maintaining the readed altitude during the rescue activation (not suggested) "},{"title":"At this point you are ready to test Rescue Mode.​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#at-this-point-you-are-ready-to-test-rescue-mode","content":"Wait for your gps to get a good fix. By default your quad will not arm if you have less than gps_rescue_min_sats (default is 8) satellites. "},{"title":"We suggest the following procedure:​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#we-suggest-the-following-procedure","content":"Fly in a straight line for at least 100 meters past your descent distance. For example, if your descent distance setting is 150 meters, fly to 250 meters. As you keep flying in a straight line, the home arrow should adjust to point towards home. "},{"title":"VERY IMPORTANT: if your arrow does not point towards home, DO NOT activate GPS Rescue. Your quad will try to fly in the direction of the arrow if you do.​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#very-important-if-your-arrow-does-not-point-towards-home-do-not-activate-gps-rescue-your-quad-will-try-to-fly-in-the-direction-of-the-arrow-if-you-do","content":"Activate GPS Rescue. "},{"title":"IMPORTANT: be ready to deactivate the mode and take back control if your quad does not point towards you and starts making its way home.​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#important-be-ready-to-deactivate-the-mode-and-take-back-control-if-your-quad-does-not-point-towards-you-and-starts-making-its-way-home","content":"If everything goes well, your quad will come back towards you and start descending. Do not let it get too close to the ground or to yourself because the landing functionality is not included in current builds. Your quad may just crash near you or overshoot you. You may have noticed that the quad had a hard time keeping a stable altitude. Sometimes this happens when the GPS altitude reading is unstable, so the controller is aiming for a moving target. If you had a very stable altitude reading and the quad still could not stabilize within ten meters of your desired target altitude, you may have to adjust the altitude throttle PID gains. These are the parameters: gps_rescue_throttle_Pgps_rescue_throttle_I gps_rescue_throttle_D We do not expect that most people will have to fine tune the navigation speed gains, but just in case the PID gains are: gps_rescue_velocity_P = 80gps_rescue_velocity_I = 10gps_rescue_velocity_D = 20 After your quad reliably returns home once, you may want to test it at progressively larger distances and directions. When you have a reasonable level of trust in the feature, you may want to set your failsafe to GPS_RESCUE: set failsafe_procedure = GPS-RESCUE With this setting, GPS Rescue will activate in the event of a failsafe. v4.0.x notes - However, it will return control to the user as soon as the radio link comes back. During this time the user should either activate Rescue Mode manually on the radio, just so that there cannot be an unexpected transition to manual control, or be ready to take over control at any moment. Our recommended approach is the first one, which requires having Rescue Mode on a switch if you want to use it for failsafe as well. v4.1 and beyond - After the RC link is restored, Betaflight now requires that any combination of roll/pitch/yaw inputs be moved beyond the failsafe_stick_threshold percentage value before failsafe will be exited and control returned to the pilot. The default for this setting is 30 which means you need to move roll, pitch, or yaw at least 30% off center before it will cancel Failsafe and return control. You may choose to reduce that setting value if you need a less abrupt transition from failsafe to full control. Additionally the failsafe procedure can be activated in the Failsafe tab of the configurator, or by using the OSD menus (FEATURES &gt; FAILSAFE). The OSD menus setting is also convenient to disable GPS Rescue on failsafe in the field if you are flying in restricted or limited airspace (like indoors or among trees). Be sure to reenable when appropriate. "},{"title":"DEALING WITH FAILURES / SANITY CHECKS (VERY IMPORTANT):​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#dealing-with-failures--sanity-checks-very-important","content":"If you're using rescue mode in a supervised fashion (as a switch only with video), or in a place with no danger to surroundings (over water, etc), sanity checks are entirely optional. If you plan on setting this as a failsafe (and most of the time even if you do not) you should highly consider enabling these. set gps_rescue_sanity_checks = RESCUE_SANITY_ON You can also set this to RESCUE_SANITY_FS_ONLY if you want it to only matter in a failsafe (unsupervised) condition. Sanity checks will ensure that: GPS receiver is still connected to the FCGPS receiver is sending a valid GPS FixQuad has not experienced a big shake (probably due to a crash)Number of Sats is equal or above gps_min_satsQuad gets closer to the home point after reaching initial altitude If any of the conditions is not met, the Rescue operation will be aborted, meaning the quad will be dropped. However, the last two conditions have a few seconds of tolerance before getting triggered. Also, if the quad is not getting closer and a magnetometer is being used, Rescue will attempt to use GPS orientation as a second chance, but if a flyaway is still detected, the operation will be definitely aborted. "},{"title":"Arm without a GPS Fix​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#arm-without-a-gps-fix","content":"By default, Betaflight will not let arm without a GPS Fix if you have GPS Rescue configured in a switch or as a failsafe procedure. Sometimes you might want to fly without a GPS Fix (maybe you're in a zone with poor coverage, or want to do a quick reconnaissance flight meanwhile sats are acquired) at the expense of GPS Rescue being deactivated. You can achieve this by setting: set gps_rescue_allow_arming_without_fix = ON With this value, you can take off without a GPS Fix, but the GPS Rescue will not be available during the flight. A warning (RESCUE OFF) will appear in the OSD to make you aware of that. If a proper number of satellites are acquired while flying, to enable GPS Rescue you must land, disarm and arm again. "},{"title":"Rescue not available​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#rescue-not-available","content":"If GPS Rescue is mapped to a switch and/or set as a failsafe procedure, a minimum set of conditions will be continuously checked (GPS receiver connected, valid GPS fix, min sats). In the event of any condition not being met, a warning (RESCUE N/A) will be shown on the OSD. This is only a warning, if Rescue is activated while the warning is on screen, a grace period will still be taken into account for the sanity checks. This warning is shown regardless of the sanity checks being enabled. "},{"title":"Common pitfalls​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#common-pitfalls","content":"Ensure that you are flying further than the minimum distance to home (100m by default) before testing GPS Rescue. The minimum distance can be set in the CLI using set gps_rescue_min_dth = &lt;meters&gt;. At distances less than this, GPS rescue will cause the quad to drop.In some particular setups, the accelerometer can drift over time and this can avoid GPS Rescue to work properly. This can be checked by flying for a long time and then activating angle mode, if the quad does not get to a nearly perfect stable orientation please do not use GPS Rescue on this quad.some GPS units need configuration with U-Center to work. Use this video by Painless360 for setup.GPS Rescue is still actively maintained/developed, so if you're not using the last stable Betaflight release, chances are you could hit a known issue. Please be sure to use the last stable release (currently 4.0).GPS Rescue is not and will never be completely reliable, so it should never be used as the only recovery measure. Showing lat/lon GPS Coordinates on the OSD (and recording the flight with a DVR), logging the telemetry (including GPS coordinates) in the Radio TX or using an autonomous beeper are some measures that should be in place even before testing GPS Rescue. "},{"title":"Common pitfalls for old versions​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#common-pitfalls-for-old-versions","content":"For Betaflight versions prior to 4.0, it's highly encouraged to enable Air Mode, and optionally to finetune failsafe Stage1 settings, as a workaround for the crash detection issue immediately after activating Rescue Mode. Basically, ensure your settings will avoid the quad to be free-falling when entering into Stage2.When changing failsafe parameters with Betaflight Configurator 10.4 or lower, the failsafe procedure will be silently reset. Ensure that you set the failsafe procedure manually on CLI after saving modifications on the failsafe tab.Every time the quad is armed, the home point is updated. Prior to BF 4.0, home point was updated on disarm but could be missed if switching rapidly. Best practice for launching in all versions is to arm, wait a few seconds until home point shows up in osd with 0 distance, and then start flying. Otherwise, disarm, wait a few seconds and repeat. Since Betaflight 4.0 you can use this cli command set gps_set_home_point_once = ON in this way only the first arm after the battery is connected will be used as home point.If you're using Crossfire, make sure to configure the Failsafe parameter as &quot;Cut&quot; on your &quot;CROSSFIRE RX&quot; menu. "},{"title":"Version History​","type":1,"pageTitle":"GPS Rescue 4.1 to 4.3","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-Mode-v4-1-to-v4-3#version-history","content":"Betaflight 4.1 When GPS Rescue is engaged after a Failsafe, use sticks to recover control (https://github.com/betaflight/betaflight/pull/7936) Betaflight 4.0 Prevent crash detection immediately after entering GPS Rescue mode (https://github.com/betaflight/betaflight/pull/7034)Allow minimum distance to home to be configurable (https://github.com/betaflight/betaflight/pull/6404)Fixed a problem with Sanity Check misreporting STALLED/FLYAWAY during the initial phase (https://github.com/betaflight/betaflight/pull/7254)Added warning indication for GPS Rescue unreliable (https://github.com/betaflight/betaflight/pull/7256)Added explicit parameter for arming without fix or low sats: gps_rescue_allow_arming_without_fix (https://github.com/betaflight/betaflight/pull/7320) Betaflight 3.5.5 Fixed a problem with Sanity Check misreporting STALLED during the initial phase (https://github.com/betaflight/betaflight/pull/7254) Betaflight 3.5.3 Fixed problem with MOTOR_STOP and auto-disarm activating when GPS Rescue is active (https://github.com/betaflight/betaflight/pull/6979); Betaflight 3.5 GPS Rescue activated on failsafe will check the quad to be at least 100m away from home, regardless of the Sanity check setting. If it's closer, it will drop. Non-failsafe activated GPS Rescue works as in 3.4. Betaflight 3.4 The Sanity check includes a test for the quad to be farther away than 100m from target home for the Rescue mode to be activated. When Sanity check is enabled, if GPS Rescue is activated (either manually or by failsafe) when the quad is closer than 100m from home, it will drop. "},{"title":"GPS Rescue 4.4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4","content":"","keywords":""},{"title":"About GPS Rescue​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#about-gps-rescue","content":"GPS Rescue is an advanced safety feature that can autonomously fly the craft home, after loss of the RC or video link, until it is close enough to re-gain control. It can also land and disarm with reasonable precision. When activated, the craft should, sequentially: enable level mode and climb to a user-configured altitude, at a configurable rate,rotate at 180 deg/s until pointing towards home,pitch forward and fly towards home at a user-configurable speed (note: the nose of the quad will jump up and down in pitch during the rescue in order to keep the forward speed accurately controlled),correct the attitude of the quad to keep it pointing to home if it drifts off-course due to wind, and will mix in some roll to minimise lateral driftwhen at a user-defined distance from home, start to descend at a configurable rate,reduce forward velocity as it approaches home, and reduce descent rate as it approaches groundenable impact detection when below the set landing altitudeautomatically disarm on touching down Typical applications include flying back until a lost radio link is restored (requires failsafe stage 2 to be set to GPS Rescue for automatic activation)climbing and flying back until a lost FPV video link is restored (requires manual switch activation by the pilot)a 'panic' switch for LOS pilots who lose orientation (requires manual switch activation by the pilot) "},{"title":"Important:​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#important","content":"danger Only use the CLI to make changes! The 4.3 Configurator is not aware of the changes to the GPS Rescue control parameters! You must test GPS Rescue, very carefully before relying on it. Initial testing should be done at close range, with defaults, over soft grass. If a switch-induced Rescue test has a problem, or seems to do nothing, DO NOT DISARM IN PANIC! Undo the Rescue switch promptly and you'll get full control back. Even if you do everything right, GPS Rescue may not bring the craft home. Level mode must be calibrated to provide a stable hover, and the throttle value required for a stable hover should be set as the GPS Rescue Hover throttle value. 3D mode is not supported, there will be no rescue if the quad is in 3D mode at the time of the failsafe. Remember: During a real failsafe, the sticks MUST be wobbled by more than 30%, after the link is restored (and after FPV video is restored), to regain control over the quad. Otherwise it will fly all the way home and land. Stick wobbling is not required during a switch induced rescue; control is immediately returned once the switch is reset. "},{"title":"Known issues​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#known-issues","content":"Heading may be wrong, right at the start. Check the arrow in the OSD! Sometimes it takes several seconds to point directly to home. Do not immediately yaw heavily or rotate the quad a great deal on arming or immediately after takeoff. Be 100% sure you have a valid Home Point before takeoff. Do a clean, straight, medium speed forward flight directly away from home, soon after takeoff. This helps the IMU correctly determine the heading of the quad from the GPS data, and lets you that the Home Arrow is pointing the right way.Do not enable the Compass unless it has been properly calibrated and the data confirmed, by logging, to be useful and accurate.Use UBlox. GPS units configured to use NMEA often update only once per second, or even slower. This makes GPS Rescue very jerky, and almost unusuable. It's better to use UBlox, which by default return data regularly at 5 times a second.SBAS mode may cause problems with reliable GPS data, and may not function in some regions; if so, try setting SBAS mode off.Steps in flight are normal, and due to the large time intervals between GPS data points. "},{"title":"Hardware requirements​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#hardware-requirements","content":"A properly trimmed accelerometer and known hover throttle values A working GPS module. Modern UBlox units work well. Check that they support Ublox, 10hz updates, and that they have a backup battery, so that it will regain satellites during repeated power cycles much more quickly. set GPS_PROVIDER = GPS_UBLOX enables UBLOX mode. This is recommended and is now the default. if the GPS doesn't support UBLOX, try NMEA. Some, but not all, NMEA-only units will provide 10Hz data updates, and can work really well. NMEA at 1Hz makes it very difficult for the quad to fly home; it will jerk and jump every second, with very erratic rescue flight behaviour. test the accuracy of your GPS by watching it in Configurator while stable on a desk outdoors. Zoom in on the map and see how the position moves around, especially if the quad is put on an angle and some satellites are lost. Note that altitude estimation is quite unstable. It can take a long time for the GPS to really settle down. If a Baro is present, enabling it will improve IMU altitude estimations significantly. We recommend enabling Baro by default, especially for short flights (eg up to 10-15min). Usually this results in better altitude control and more reliable landings. Whether or not Baro is helpful is readily seen by doing some LOS rescues at low altitude over flat ground. For longer flights, and some Baro installations, Baro drift can be more of a problem than GPS drift. Hence do some testing with it on or off and then set your Baro trust value appropriately for the kind of flying you intend to do. If a Compass (mag, or magnetometer) is available, and if it has been properly calibrated, and the data is noise free, it may improve heading estimation. Compasses must be positioned well away from magnetic fields, including those from current flowing through wires. This is very difficult even on a 7&quot; setup. Using an incorrectly calibrated or noisy compass will adversely affect the rescue. Be sure to log your compass data and check that it is accurate and clean before enabling it. In most 5&quot; or smaller drones, Mag is too noisy to be useful. "},{"title":"GPS hardware​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#gps-hardware","content":"This table lists GPS modules that we have first hand experience with. We recommend getting one that works with UBlox at 10hz and has hot start capability. A magnetometer is useful only if the GPS unit can be mounted well away from any other electronics. Module\tUblox\t10hz\tHot Start\tMag\tNotesMatek SAM-M8Q\tyes\tyes\tyes\tNo\tworks well Matek M8Q-5883\tyes\tyes\tyes\tQMC5883L\tworks well, mag noisy unless placed carefully iFlight M8Q-5883 V2\tyes\tyes\tyes\tQMC5883L\tworks well, minor spikes in GPS position, mag noisy unless placed carefully "},{"title":"Important notes:​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#important-notes","content":"Do a LOT of GPS Rescue tests with switch initiation at close range over soft grass! Then do them with true failsafe, by turning the radio off, and do these tests initially up close! Before doing radio-off tests, ensure that your radio link can re-establish itself if the radio is power-cycled when GPS Rescue is not enabled. Otherwise it can't re-establish when it needs to. Remember to set the GPS Rescue Hover throttle value accurately! The correct value makes the quad hover, or very slowly descend, while in level mode with the heaviest battery you plan to use. The best value can be estimated by setting Failsafe Stage 1 to Level mode, and then set the throttle value to a value that gets it to climb while in stage 1. The GPS Hover value is the value that the quad will first apply to throttle on signal loss. If too low, it will tend to drop at that point; if too high, it will climb. It is better to 'err on the high side'; climbing too fast is usually less of a problem, than dropping like a stone, when you have signal loss. Also remember to set the Stage 1 throttle value manually to a hover value! (See below). When entering a true RF loss failsafe, the quad will use the Stage 1 settings for throttle during the Stage 1 period while hoping to recover signal. If the Stage 1 throttle channel value is set to 'Auto' you will immediately fall from the sky. Set it to a hover value so that it won't do anything bad before starting the rescue. Always ensure that level mode hovers flat and true before taking off. If the quad drifts sideways during return, it's usually because the accelerometer has a roll offset. When adding a GPS module and setting it up, it should always be checked functionally, outdoors, with a laptop and an internet connection. You can visualise X-Y drift on the map in Configurator (zoom in) and altitude drift is shown numerically. Find out how long it takes to acquire the satellites, how many satellites are found at your location, and whether enabling Galileo with set GPS_UBLOX_USE_GALILEO = ON improves the number of satellites found or the quality of the position lock. Check how long it takes for the altitude reading to stabilise after the sat count stabilises. Before takeoff, always ensure the GPS unit returns solid position readings. At least 8 satellites are needed to arm. 10 is preferable, as seen in the OSD. Then wait another 30-60s before arming while watching altitude estimate. It should stabilise before takeoff. Do not rely on the blue light on the OSD. It will flash on a position lock, but that is not the same as having a home lock. Ensure you have a Home Lock before takeoff, and that the Home Arrow points to Home!. After arming, make sure the OSD shows the home icon, distance to home, and the home arrow points to home. Optionally, display the osd_gps_sats_show_hdop value in the OSD; if this gets close to, or below, 1.0, it's a good indicator of a solid fix (thanks @zzyzx). At the start of a mission-critical flight, confirm normal GPS Rescue behaviour a by doing a close-range test rescue with a switch. Once you know that it turns and points to home, revert the test switch. You can enter and leave GPS Rescue with a switch with immediate effect anytime. This makes field checking easy. Think carefully about the GPS_SET_HOME_POINT_ONCE option. Resetting the home point on every new arm is OK for testing and normal use. Each time you arm, your home position is updated. The home position accuracy improves over time, so you're sure to get the best home position estimate when you finally do take off. The downside is that if you disarm during the flight, GPS rescue will take you back to that new arm point, not to home. If your craft disarms in a bad spot, even if you get signal back, it will will never fly home. In contrast, if you choose to only set the home position once, at first arm, it's important to not arm until you are sure you have a solid home position estimate. Be patient when using the first arm only method. The Stage 1 Failsafe configuration is very important, The defaults are not suitable. Choose either: Hold last values: Configure stage 1 to hold all current channel values, including holding throttle, on signal loss. A transient dropout of less than Stage 1 duration will let the craft keep flying straight, or at whatever values it had just before the signal loss. For long-range cruising this keeps the flight smooth during brief dropouts. The pilot must monitor the Rx link in the OSD or they may not realise they getting dropouts. Manually enable Level (Angle) mode, set throttle to climb a bit, and centre the sticks: Probably the safer option. This will provide the cleanest initiation of the Rescue process. NOTE: without a compass, the quad 'learns' the heading of the quad from the direction of travel over ground from data provided by the GPS. The craft must be travelling at least 2m/s, in clean nose-forward flight, for at least several seconds, for its attitude to be correctly set by the GPS data. Try to fly dead-straight and without side-wind, so that no roll correction is needed when the course over ground matches simple pitch-only flight-path of the quad. It's important fly straight and at least 2m/s before testing GPS Rescue at close range, or the IMU may be confused about the direction home. Check the Home Arrow before initiating the rescue. The default GPS_RESCUE_GROUND_SPEED value is 5m/s, and cannot be set under 2.5m/s, so that the quad will update the IMU heading during the rescue, even if the initial heading is incorrect, but may fly quite fast in the wrong direction beforehand. Hence it is really important to validate the Home Arrow early in the flight. The arrow in the OSD should be pointing to home, and the altitude and distance should be about right, soon after takeoff. The GPS Rescue 'mode' switch will immediately initiate GPS Rescue when activated. This can be used as an 'emergency' rescue for loss of FPV signal or for disorientation when flying LOS. If a failsafe switch is configured, a similar outcome can be achieved by setting the switch mode to immediately action Stage 2. There will be only a short delay before the quad should level out and climb, but its momentum will keep it moving as it was for at least a few seconds, so don't expect miracles. In strong winds the maximum allowed angle of the craft during a rescue, GPS_RESCUE_ANGLE, may need to be increased. The the craft may overshoot or land roughly if the wind is very strong. "},{"title":"Phases of the Rescue​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#phases-of-the-rescue","content":"There are five phases in a Rescue: ASCEND,ROTATE, FLY HOME, DESCEND, LAND. They follow sequentially. Each phase has different targets. Specific exit criteria must be met to enter the next phase. Sanity checks monitor performance during each phase, and will disarm with prolonged failure. Phase\tControlled axes\tFunctionality\tTerminationASCEND\tYaw and pitch\tAscend or descend at set rate, yaw quickly to reduce heading error\tFly home altitude attained ROTATE\tAll axes except roll\tContinue to yaw to reduce heading error\tHeading to home error to less than 15 degrees FLY HOME\tAll axes\tFly home at set altitude and velocity, keep adjusting yaw\tWithin GPS_RESCUE_DESCENT_DIST of home DESCEND\tAll axes\tAltitude and velocity reduced steadily, keep adjusting yaw\tAltitude below GPS_RESCUE_LANDING_ALT LAND\tAll axes except roll\tDescend at set rate, with a zero forward velocity target, keep adjusting yaw\tImpact with ground Notes: Yaw control is active in all phases, starting during the ASCEND phase. Yaw tries to keep the nose pointing towards the home point relative to the current estimated position of the craft, using a simple P controller. The maximum rotation rate to control yaw/heading error is 90 deg/s.Throttle is adjusted either side of the set GPS_RESCUE_THROTTLE_HOVER value, within limits set by GPS_RESCUE_THROTTLE_MIN and GPS_RESCUE_THROTTLE_MAX, at all phases of the rescue, to control altitude using PID controller that includes an acceleration element. Throttle is dynamically adjusted according to the angle of the craft (the angle away from horizontal).Pitch angle controls forward velocity, and becomes active, at half max rate, during the ASCEND phase, is fully active once the error angle to home is less than 45 degrees in ROTATE phase, and stays fully active until LANDING phase, when it again is reduced to half rate.Roll is added to yaw only at lower yaw rates, and is essential to deal with heading drift due to wind. It is active only during FLY HOME and DESCEND phases.During DESCEND phase, the craft tries to stay on the edge of a cylinder that is 2m away from the estimated landing point. It will point towards home while attempting to stay 2m out. The 2m distance is intended to minimise the risk of overshooting home, which then requires a 180 degree turn. In windy situations the craft will typically descend on the down-wind side of the 2m cylinder, and may sit on an equilibrium point further than 2m out.During landing mode, the quad can rotate, and will pitch forward and backward to try to land 2m out from the home point. If the GPS has drifted, the final distance to home and direction to home indicate where the GPS thinks 'home' is at the time of landing.Auto-Disarm is triggered by the accelerometer spike associated with touch-down with the ground. The threshold is not user-adjustable. It is only active after the altitude falls below the GPS_RESCUE_LANDING_ALT value in DESCEND mode. If the altitude has drifted high, so that the craft hits the ground but the GPS thinks it is still high in the sky, it will not disarm on impact. If that happens, the landing sanity check should disarm the craft after about 10s (if the pilot has not done so).A DO_NOTHING phase, which is flat Level Mode with throttle 100 steps below the GPS Rescue hover throttle value, with a 20s limit, is applied in switch induced rescues that experience a fatal sanity check error, to give time for the pilot to reverse the switch rather than immediately disarming. Should a pilot notice a failure to follow the above sequence during a stick induced Rescue, they should immediately recover control, by reversing the switch, to avoid the disarm that will otherwise occur. "},{"title":"Altitude control options​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#altitude-control-options","content":"The GPS_RESCUE_ALT_MODE setting, in association with the GPS_RESCUE_RETURN_ALT and GPS_RESCUE_INITIAL_CLIMB values, determine the target altitude for the flight home, as follows: GPS_RESCUE_ALT_MODE\tNotesMAX_ALT\tThe default. Craft will climb to the highest altitude previously attained since arming, plus the GPS_RESCUE_INITAL_CLIMB height, in metres. Useful when the pilot climbs over the highest objects in the flight path before risking the failsafe. FIXED_ALT\tCraft will return at the exact height above Home Point as configured by the GPS_RESCUE_RETURN_ALT value in metres. If flying low, around trees or buildings, FIXED_ALT can be set to a known height that will clear them. CURRENT_ALT\tCraft will climb GPS_RESCUE_INITAL_CLIMB higher than the current altitude at the time the rescue starts. Useful for testing or for emergency 'panic' switch applications. "},{"title":"Settings​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#settings","content":"Item\tNotesGPS_RESCUE_MIN_START_DIST\tThe minimum distance from home required before a GPS Rescue can be initiated, in metres. GPS_RESCUE_ALT_MODE The return altitude mode, which determines the altitude settings to use for the return flight. GPS_RESCUE_INITAL_CLIMB\tThe amount of height to climb, above either current or max altitude (as set by GPS_RESCUE_ALT_MODE), in metres. GPS_RESCUE_ASCEND_RATE Target climb rate in cm/s during the ASCEND phase. Can be increased to speed up the climb, if desired. GPS_RESCUE_RETURN_ALT\tWhen in FIXED_ALT mode, the altitude to return at, in metres above take-off altitude. GPS_RESCUE_GROUND_SPEED\tThe target velocity (in the direction of home) for the return flight, in cm/s. GPS_RESCUE_PITCH_ANGLE_MAX\tMaximum allowed pitch (and roll) angle, in degrees, during a rescue. May need to be increased above default value if the craft has difficulty maintaining forward velocity against strong winds. GPS_RESCUE_ROLL_MIX\tThe relative amount of roll included when the quad yaws during the return flight. 100 means the normal amount, zero means none. GPS_RESCUE_DESCENT_DIST\tThe distance from home at which the craft starts to descend, in metres. GPS_RESCUE_DESCEND_RATE Target descend rate in cm/s during the DESCEND and LANDING phases. The descent rate at the start of the the DESCEND phase can be up to twice this value, reducing to equal the set value by the time the craft is landing. GPS_RESCUE_LANDING_ALT\tThe altitude above take-off point when auto-disarming is activated during descent, in metres. GPS_RESCUE_THROTTLE_MIN\tThe lowest throttle value that can be applied by the GPS Rescue code. This usually does not require any modification. GPS_RESCUE_THROTTLE_MAX\tThe highest throttle value that can be applied by the GPS Rescue code. This is unlikely to need increasing unless the quad is very heavy. GPS_RESCUE_THROTTLE_HOVER Important The hover throttle value that approximates the value required during the fly home phase, or will result in a steady slow climb in level mode. This is the basic throttle value about which the throttle PIDs vary throttle (within limits). It is important to set this value correctly, to ensure that the craft climbs, rather than drops, right at the start of a rescue, and descends in 'DO NOTHING' mode. GPS_RESCUE_SANITY_CHECKS\tSets what happens if the Rescue fails. See the Sanity checks section GPS_RESCUE_USE_MAG\tUse magmetometer (compass) data to improve heading accuracy. Do not enable this unless the mag is calibrated and a log shows high-quality noise free compass data. GPS_RESCUE_ALLOW_ARMING_WITHOUT_FIX\tOption that permits arming without a home fix (never do this, see below) GPS_RESCUE_MIN_SATS\tValue 5 - 50. The number of satellites required, as well as a 3D fix, for the Home point to be set, and to permit arming when GPS Rescue is configured. Setting this to lower values risks poor GPS control. Default is 8 and with less than 5 we have no 3D fix and cannot control altitude from GPS alone. With a Baro this could be set to 5, since Baro can provide altitude with only a 2D GPS fix, but this possibility has not been tested. ALTITUDE_LPF\tThe cutoff value in Hz * 100 that will be used to smooth the altitude value ALTITUDE_D_LPF\tThe cutoff value in Hz * 100 that will be used to smooth the altitude derivative (vertical velocity) value. This also smooths the Vario signal at present. "},{"title":"PID Tuning suggestions:​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#pid-tuning-suggestions","content":"GPS_RESCUE_YAW_P should be high enough that the quad rotates well enough at the chosen speed to track to home properly. If too high, the nose of the quad will wander left to right as you return. Default is pretty good.GPS_RESCUE_ROLL_MIX at 100 gives approximately the correct amount of roll to make 'co-ordinated' turns in level mode. A higher value increases the relative amount of roll:yaw and may be needed for higher speed returns. Zero means no roll at all. Use the debug GPS_RESCUE_HEADING to see the amount of yaw and roll applied, while comparing the attitude of the quad to the angle to home.Altitude PIDs (GPS_RESCUE_THROTTLE_P, GPS_RESCUE_THROTTLE_I, and GPS_RESCUE_THROTTLE_D) are best adjusted with a very low set groundspeed (eg 50 cm/s), the quad pointing to home when initiating GPS Return, and a relatively steep climb rate at the start. PIDs too high lead to vertical oscillations after the initial climb. D gives faster oscillations than P. Try to minimise them using classical PID control methods. There is a very big delay from pushing the motors to gaining altitude. The debug DEBUG_GPS_RESCUE_THROTTLE_PID will be most useful. It shows throttle P and D, with the measured altitude vs the altitude target.Velocity PIDs (GPS_RESCUE_VELOCITY_P, GPS_RESCUE_VELOCITY_I, and GPS_RESCUE_VELOCITY_D)are best adjusted after setting the altitude PIDs. They directly control the pitch angle of the quad. Too much P and/or D may cause slow oscillations on pitch. Too much I may cause overshoot. DEBUG_GPS_RESCUE_VELOCITY shows P and D with the speed to home and velocity targets. Tune these with zero I. Then add I until any residual over- or under- shoot is eliminated. Too much I will cause slow ongoing wobble.The defaults should be 'about right' for a typical 5&quot; freestyle quad.The quad targets velocity in the direction of home. If it must fly into wind, the maximum angle (set by GPS_RESCUE_ANGLE), must be sufficient for the quad to overcome the wind. Provided the angle is sufficient, the return home velocity should be reasonably accurately maintained. GPS_RESCUE_VELOCITY_I is important when flying into the wind. On windy days, always confirm that the quad can overcome the wind. A lot of battery power can be consumed flying into the wind, always consider this when thinking about how far you fly out with the wind behind you. "},{"title":"Expected behaviours​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#expected-behaviours","content":"The disarm with remains active during switch-induced failsafe, including GPS Rescue. Take care with disarm if the craft is configured to reset the home point after a disarm.To prevent flyaways, the low satellite sanity check will abort the rescue if satellite count falls below half the set GPS Rescue minimum sats for a cumulative increment/decrement period exceeding 10s.At the point of initiation of a rescue, if the basic initial sanity checks fail (eg not enough satellites), there is a 20s 'do nothing but hover' period, before the craft disarms. This applies, for example, in video loss scenarios where the pilot hits the switch and perhaps there were not enough satellites at the time. The craft should level out at the hover throttle value and wait for pilot input or for the sanity check to get corrected.Even if all sanity checks are disabled, there is now an incremental up/down limit of 20s of sanity failure before the quad will be disarmed. In other words, the quad will disarm itself, even if all sanity checks are 'off', in extreme failures of this kind. If you don't like this, speak up. It is a safety feature to prevent otherwise indefinite flyaways that could occur if sanity checks are disabled by the user. The all sanity checks off option is intended only for testing, not for actual use.The minimum velocity required for IMU orientation from a GPS over-ground path is 2m/sWhen GPS Rescue is switch-initiated via a failsafe switch, there is no need to move the sticks more than 30% to regain control. Control is regained immediately the switch is reversed.Minimum initiation distances of 20m, and altitudes as low as 2m allow closer range LOS setup, testing and tuning. Closer distances may be useful when GPS Rescue is used as a emergency safety switch for LOS beginners.The default minimum initiation distance of 30m and minimum initiation altitude of 5m allow easier setup and testing in a small park.GPS distance from home is measured and logged in cm (not metres) and angle in tenths of a degrees (not degrees) to improve accuracy and smoothness.If the user initiates GPS Rescue on a switch, the Aux channels are still &quot;live&quot;. This allows disarming, starting or stopping logging, etc, during a switch induced failsafe. Flight channels (RPTY) will be set or held according to failsafe settings, and are live stick values are never passed during a failsafe, though the stick position is monitored since 30% stick wiggling is needed to exit GPS Rescue by stick movement.For all switch initiated rescues, if the pilot realises the rescue is failing, the switch should be reverted, and the pilot should regain control before the situation becomes irrecoverable.pitch angle change is limited to 25 deg/s.ascent and descent rates are user-configurable.max descent rate, when dropping from considerable height, is 2x the configured descent rate, reducing proportionally to the set descent rate as the craft gets closer to ground level.roll is mixed with the yaw correction to better maintain the intended path to home, especially in windthe default amount of roll is set as a percentage of the yaw value, with the default at 100 resulting in equal roll and yaw for small yaw rates, linearly reducing to no roll component at high yaw valuesGPS Rescue settings are now included in the blackbox log header fields.Debugs to compare set altitude and velocity are provided "},{"title":"Problems and solutions​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#problems-and-solutions","content":"Problem\tSolutionCan't arm\tGPS hasn't enough satellites. 10 is best. Be patient. Floats around on switch initiation\tIn &quot;Do nothing&quot; mode due to failure to initialise, reverse the switch Doesn't level out for 1 second\tWasn't set to enter level mode in Stage 1 failsafe Suddenly drops on initiation, but recovers\tStage 1 throttle value set too low, or not set Drops 1s after initiation, stays low\tGPS Rescue hover throttle value set too low Tracks to one side during return\tLevel mode not calibrated properly, or calibration lost during flight Drifts in final landing phase\tLevel mode not calibrated properly, or lost calibration during flight Disarms while flying home\tNot within 50% of target velocity or altitude for 20s or more in fly home phase Altitude on return consistently low or high\tHover value not set correctly, not enough throttle I Altitude on return randomly low or high\tGPS Altitude drift - check its stability before takeoff Altitude overshoots at start\tNormal behaviour Altitude droops below target at start\tSet a higher altitude buffer if using current altitude gps_rescue_alt_buffer Altitude droops below target at start\tThrottle P and D too low Altitude wobbles quickly during return\tThrottle P and D too high Altitude wobbles slowly during return\tThrottle I too high Long delay before turning\tDelay reaching target altitude - large climb distance with ascent rate too slow Long delay before turning\tDelay reaching target altitude - hover value too low Goes in wrong direction on initiation\tDidn't fly forward at &gt; 2m/s long enough for IMU to calibrate to GPS Goes in wrong direction on initiation\tRandom unknown longstanding bug causing incorrect IMU heading value Goes in wrong direction on initiation\tMag is used but is reporting bad information Pitch wobbles up/down quickly during return\tNormally present; Pitch P and D may be too high Pitch wobbles up/down slowly return\tPitch P and D are too low, or pitch I is too high Overshoots target on landing\tPitch I is too high, descent too fast or short Yaw wobbles left/right all the time\tYaw P too high (unusual) Yaw control is loose\tYaw P too low (likely only on large machines) Landing is hard and doesn't disarm\tGPS Altitude drift downwards, hits ground before landing altitude is reached - check GPS altitude stability before takeoff Large control jumps every second\tGPS unit is reporting values only once a second. If NMEA, use UBlox mode "},{"title":"Sanity Check Options​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#sanity-check-options","content":"Sanity checks monitor the rescue. They do this for both switch-induced, and real loss, GPS Rescues. They are last ditch responses to a failure of the rescue process. They validate that: the Rescue system has a Home Point to aim atthe craft is outside the minimum distance at the start of the rescuesatellite count is OK at the start of the rescuethe satellite count stays OK during the rescueduring the ASCEND phase, the quad is not stuck in a tree or otherwise can't climbduring the FLY_HOME phase, that velocity to home is at least half the set velocity during the fly home phaseduring the LANDING phase and descent phase, that the descent rate is at least half the set descent rate (not stuck in a tree) When a sanity check fails, it means that the craft cannot complete the rescue successfully. It either has no idea where to go, or is already going in the wrong direction, or is stuck in a tree or something. After some reasonable time, the craft should be disarmed so that it will fall without travelling much further, climbing too high, flattening the battery or burning the motors. Each possible failure has a 'grace period' before the quad will disarm. Sanity checks do not cover every failure possibility. There is no check on absolute altitude during the fly home phase, for example. If sanity checks are too aggressive, they can cause false or premature termination of the rescue, leading to an unnecessary disarm and crash. It is very difficult to find the right balance. Note that 'performance based' sanity checks rely on GPS data. False or erratic data may not only send the craft the wrong way (without us having any way of knowing), it may also falsely trigger a sanity check, or may prevent sanity checks from identifying a true failure. A sanity check failure due to GPS signal loss will inevitably be a disarm the craft, to prevent indefinite flyaways. For switch-induced failsafe, sanity checks have an extra delay period, to allow the pilot time to reverse the switch. There are three sanity check modes: RESCUE_SANITY_ON - this gives the strongest sanity check behaviour, with immediate disarm for hard errors like loss of GPS communication, flyaway, low sat count, and no home point on initiating the rescue. These responses will be the same whether the rescue is 'real' or if it was initiated by a switch.RESCUE_SANITY_FS_ONLY- this is the default mode, giving strong sanity check behaviour for true RC link loss, but additional time to reverse the switch for switch-induced failsafe. For example, the quad will enter &quot;Do Nothing&quot; mode for 20s if a rescue is initiated by switch and there is no Home Point.RESCUE_SANITY_OFF - this is intended for testing only. When in this mode, the quad will immediately disarm only if arming without a Home Fix was permitted, there is no Home Fix, and there is a hard (Rx Link Lost) failsafe. In all other cases a failed sanity check results in &quot;Do Nothing&quot; mode for 20s and then a disarm. For safety reasons - to prevent indefinite flyaways - it does not not turn &quot;all sanity checks off&quot; anymore. For sanity checks with a time element, we use a cumulative up/down counter. Starting from zero, the counter increases by 1 every second the value is 'bad', and decreases by 1 every second it is 'good'. Once the accumulator reaches the sanity check time-out, the sanity check fails. This table explains the currently implemented sanity checks. Mode\tSANITY_ON, or true failsafe in SANITY_FS_ONLY\tStick induced SANITY_FS_ONLY, or SANITY_OFF\tNotesNo Home Fix on initiation\tImmediate disarm\tDo_Nothing for 10s then disarm\tUsually it is impossible to arm with no home fix. Initiate inside min DTH\timmediately enters landing mode\timmediately enters landing mode\tCraft should slowly land itself and disarm on touch-down GPS hardware failure\timmediate disarm\tdisarm after 10s\tShould never occur mid-flight Initiate but in crash recovery mode\timmediate disarm\tdisarm after 10s\tGPS Rescue cannot function while in crash recovery mode Climb Phase failure\tdisarm after 10s\tdisarm after 10s\tclimb rate less than half the set rate for cumulative 10s Low Sats\tdisarm after 10s\tcount 10s, Do Nothing for 10s, then disarm\tsat count less than half the GPS Rescue minimum number FlyHome failure\t20s then disarm\tcount 20s, Do Nothing for 10s\tcan't maintain at at least half the set velocity in the direction of home for cumulative 20s. Landing Phase failure\t10s then disarm\t10s then disarm\tdescend rate less than half the set rate for cumulative 10s 'Do Nothing' centres sticks and hovers to give the user time to reverse the failsafe switch, if used. ** In SANITY_OFF mode, the craft can be armed with no home fix, but the rescue will fail, and the craft will disarm and crash after 10s of hovering, whenever the pilot attempts to enable a GPS Rescue. Switch initiated GPS rescue may be helpful when FPV video is lost. The quad should quickly climb high enough to get video back. If something prevents the climb, the craft could be flying away in a weird direction, or stuck in a tree, or almost anything. Hence, if the video has not come back within 20-30s, it's best to undo the failsafe switch, disarm, and start searching. This will keep the quad relatively close to the point of video loss, and retain battery capacity by turning the motors off. "},{"title":"GPS_RESCUE_ALLOW_ARMING_WITHOUT_FIX​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#gps_rescue_allow_arming_without_fix","content":"When GPS Rescue is enabled, arming is not permitted unless there is a GPS position fix and we have at least the required minimum number of satellites, set by gps_rescue_min_sats. This check can be bypassed by enabling allow_arming_without_fix. When arming is permitted without a fix, and the machine is armed without a Home Point being set, and a GPS rescue is initiated, the craft will go into 'do nothing' mode (slow descent with landing detection enabled) for 20s then disarm. This will happen both for true RC Link loss failsafe, and for switch-initiated failsafe tests. It will not fly home under any circumstances, because it has no clue where home is. The 'do nothing' period of 20s exists only to give the pilot time to undo the switch if they realise that the quad is not going to return. Never allow arming without a home point fix if you want GPS Rescue to get you home! This option exists only for testing purposes. "},{"title":"DEBUGS​","type":1,"pageTitle":"GPS Rescue 4.4","url":"/betaflight.com/docs/wiki/archive/GPS-Rescue-v4-4#debugs","content":"There are 4 debugs for GPS Rescue, of which the GPS_RESCUE_TRACKING debug gives a good overview of set vs achieved altitude and velocity. When checking out the altitude PIDs, use the GPS_RESCUE_THROTTLE debug, and for velocity home (pitch control) PIDs, use the GPS_RESCUE_VELOCITY debug. The GPS_RESCUE_HEADING debug is useful for checking heading related information, and can be used to compare GPS headings to magnetometer headings. Compass/Mag headings are always logged whenever a Mag is active. All the GPS configuration settings are included in the Blackbox Log Header. Name\tDebug0\tDebug1\tDebug2\tDebug3GPS_RESCUE_THROTTLE\tThrottle P\tThrottle D\tCurrent craft altitude, cm\tTarget altitude cm GPS_RESCUE_VELOCITY\tVelocity P\tVelocity D\tCurrent craft velocity cm/s\tTarget velocity cm/s GPS_RESCUE_TRACKING\tVelocity to home cm/s\tTarget velocity cm/s\tCurrent craft altitude cm\tTarget altitude cm GPS_RESCUE_HEADING\tYaw rescue rate deg/s * 10\tRoll angle degrees * 1000\testimated craft heading deg * 10\testimated angle to home RTH\tPitch angle of quad\tRescue Phase\tRescue failure code\tseconds failing sanity (*100) + seconds low sats Rescue Phase codes 0 RESCUE_IDLE, 1 RESCUE_INITIALIZE, 2 RESCUE_ATTAIN_ALT, 3 RESCUE_ROTATE, 4 RESCUE_FLY_HOME, 5 RESCUE_DESCENT, 6 RESCUE_LANDING, 7 RESCUE_ABORT, 8 RESCUE_COMPLETE, 9 RESCUE_DO_NOTHING  Rescue Failure codes: 0 RESCUE_HEALTHY, 1 RESCUE_FLYAWAY, 2 RESCUE_GPSLOST, 3 RESCUE_LOWSATS, 4 RESCUE_CRASH_FLIP_DETECTED, 5 RESCUE_STALLED, 6 RESCUE_TOO_CLOSE, 7 RESCUE_NO_HOME_POINT  Seconds failing is calculated so that: values in the hundreds indicate the time in seconds that the sanity timer accumulatedvalues in digits indicate the accumulated low sat timer values "},{"title":"Gyro and Dterm Filtering Recommendations","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Gyro-&-Dterm-Filtering-Recommendations","content":"","keywords":""},{"title":"Changes in Default Filter settings​","type":1,"pageTitle":"Gyro and Dterm Filtering Recommendations","url":"/betaflight.com/docs/wiki/archive/Gyro-&-Dterm-Filtering-Recommendations#changes-in-default-filter-settings","content":"From version 2.7 onward, the default filtering strength settings are reduced in order to provide the best possible flight characteristics. You may find that after upgrading, your aircraft becomes very twitchy or uncontrollable. This can be caused if you have a noisy quad because the vibrations are now making it past the filter into the PID loop. Note: Defaults values can be different across minor and major firmware versions. Always do a CLI DUMP (or a get 'partial name') to see what the default values are before making changes.​ "},{"title":"From Boris:​","type":1,"pageTitle":"Gyro and Dterm Filtering Recommendations","url":"/betaflight.com/docs/wiki/archive/Gyro-&-Dterm-Filtering-Recommendations#from-boris","content":"In case your setup is too noisy you need to adjust the filters. Here are some of the recommendations. The more filtering you use the less noise will be let into the system, but that will reduce the overall responsitivity of the pid controller and provide less stability in prop wash scenarios for example. Using as low as possible Dterm can help too. Default / Optimal flight performance: gyro_lowpass = 100dterm_lowpass = 110gyro_lpf = OFF Slightly noisy setup: gyro_lowpass = 80dterm_lowpass = 100gyro_lpf = OFF Very noisy setup gyro_lowpass = 50dterm_lowpass = 100gyro_lpf = 188HZ 2.6.1 defaults: gyro_lowpass = 80dterm_lowpass = 70gyro_lpf = OFF "},{"title":"Example​","type":1,"pageTitle":"Gyro and Dterm Filtering Recommendations","url":"/betaflight.com/docs/wiki/archive/Gyro-&-Dterm-Filtering-Recommendations#example","content":"Below is a snapshot of the Gyros (top) and PID sum (bottom) using default betaflight 2.8 PID settings. The Blackbox log viewer is zoomed out to 10% which helps to visualize the noise (thick gyro lines = noisy). Before changing the filter settings the quad was nearly unflyable. Blackbox Gyro reading with Default 2.8 settings Blackbox Gyro reading with Very Noisy settings from above "},{"title":"From ctzsnooze's posts:​","type":1,"pageTitle":"Gyro and Dterm Filtering Recommendations","url":"/betaflight.com/docs/wiki/archive/Gyro-&-Dterm-Filtering-Recommendations#from-ctzsnoozes-posts","content":"The ideal value for filters is as high as you can go without getting hot motors etc. I don't think anyone can tell you how high you can go. But your particular concern was that your motors still felt a bit warm. So I'd map out what dterm cut does while leaving gyro cut where it is. The only way to find out is to do the testing. Once you know the best value for Dterm cut, ie the value where motors are coolest, keep dterm cut and gyro cut in the same proportion from then on. If, despite finding the coolest value for dterm cut, they are still warmer than you'd like, try say reducing both by 20%. If they are cool and you want crisper performance, try increasing both by 20%, and keep going up until they become clearly warmer than with a lower value. If you really want to optimise things you need blackbox. Your motors might just be warm because you fly hard! :-) There may be no PID oscillation at all. If that's the case, and you don't have blackbox, you can keep going up on the filters, both in a fixed proportion, keeping dterm cut above gyro cut to the same percentage - until the motors get obviously hotter or noisier, then back off a step. Then if you could be bothered, repeat the dterm cut optimisation until you have the filters set as best they can be. Note that if you change P or D upwards or change props you may have to modify the settings. On my setups 70 for gyro and 90 for dterm keep motors cool even with the most beat up props, flexy frames and oldest motors. See BB logging page for measuring noise and filter. The sequence in disabling notch filters isn't certain. The best approach is to blackbox the quad with both gyro notch filters off and look at the spectrum of the gyro trace. If there is a big peak there, and that peak is resulting in noise that is visible in the motors trace, then it should be filtered out by a gyro notch. If there is diffusely too much gyro noise, but no specific peak, then either use the biquad fitler or lower the gyro cut low pass filter. Not removing a prominent spike in gyro noise will just not be a good idea. Once the gyro trace is relatively clean, then look at Dterm noise spectrum to decide how much filtering it needs; if it has a spike that is causing problems, it should have a notch. But if you already have controlled the same spike in the gyro trace, you may need no notch on D. If you can control a spike with a notch in either the gyro trace or the D trace, which approach is better? Well, it depends. A big spike in gyro that is not filtered out will cause noise on the P trace that will get into the motors. Notches on D will not get this out of P. The only way is a notch on gyro. On the other hand, if the spike is not very prominent in the gyro spectrum, but Dterm exaggerates it and makes it a problem only in D, then put the notch in D and don't worry about a gyro notch for that particular problem. Without a black box there is no reliable way to know what to do. Certainly you can just disable the notches randomly, listen to the sound of the motors, see that they don't get hot, etc, and keep only the filters that are needed. But as to setting the ideal values, you need to get a black box log for that. Recently helped review a noisy log. Quad had PT1 on both gyro and D, and only one single notch, on Dterm. Log showed no peak in noise at the centre point of the Dterm notch when looking at debug notch or the incoming gyro data! That notch was achieving absolutely nothing! :-) Take home message: you cannot guess where to put notch filters! Notch filters really need a black box log to get them focused exactly on a peak. Otherwise they are useless and counterproductive. If you are going to blindly remove a notch to 'see how it goes', try removing the lowest frequency notch before any others. That's the one that is most likely to mess with frequencies relevant to flight dynamics. A notch filter set very high up (eg 300 centre 200 cut) will have much less effect on flight dynamics than a lower notch filter (eg 200 centre 140 cut). Did a heap of testing today... interesting stuff. I realized that if you put P, I and D all to 2 (ie, almost totally off), what you the blackbox the gyro trace (quad safely hand held or in a restraint) shows gyro data without amplification by PIDs. If you zoom in on gyro (say 1000 times, with no expo on the trace), you can see the 'input' noise as would go into the PID loop. If we then add P alone, and test while (safely) hand held, it becomes apparent that the amount of noise added by the 'P' part of the PID calculations is small. Even with PT1 and no notch filters, P itself doesn't seem to be much affected by motor noise, nor contribute to feedback resonance in a big way. If it wasn't for D, all we'd need is a PT1 on gyro. But when you add D - that's when it gets interesting. With only a PT1 on gyro, D carries a heap of amplified noise back to the motors - even if D lowpass is a biquad. This is a cunning way to identify what P or D individually add to the noise sent back to the motors. Overall I get the impression that we need more D filtering than Gyro filtering. We can drop back on gyro, but when we do, more noise gets through to D, making a worse overall noise picture. A but more D filtering would allow less gyro filtering, and probably better handling. PS - I too had many occurrences of 'prop resonance' where the frame shakes and the prop blades flex like crazy, starting really abruptly at just above idle throttle, and easing off with more throttle. It starts abruptly, sounds really bad, the quad shakes violently, and if you're on the ground it adds thrust and tries to fly away. If you throttle past it, all comes good again. Motors quickly get hot! I recorded it. In my case it was a very narrow peak at exactly 145 Hz, put a single gyro notch filter there and it disappeared. Interestingly this shaking was entirely in pitch and roll, yaw was flat and smooth. Also the D component was three times larger than the P component. Once a carefully placed notch filter eliminated the problem, flight was entirely normal all the time. I don't really understand what's causing this, it is definitely a feedback process driven mostly by D, but why it should be so powerful at such low rpm has me beat. NO MORE PROPWASH OSCILLATION A Joshua Bardwell Video. "},{"title":"Version 3.2.X filter\\debug sequence:​","type":1,"pageTitle":"Gyro and Dterm Filtering Recommendations","url":"/betaflight.com/docs/wiki/archive/Gyro-&-Dterm-Filtering-Recommendations#version-32x-filterdebug-sequence","content":" "},{"title":"Filters were changed in Version 3.0​","type":1,"pageTitle":"Gyro and Dterm Filtering Recommendations","url":"/betaflight.com/docs/wiki/archive/Gyro-&-Dterm-Filtering-Recommendations#filters-were-changed-in-version-30","content":""},{"title":"What Defaults changed in 3.1.7?​","type":1,"pageTitle":"Gyro and Dterm Filtering Recommendations","url":"/betaflight.com/docs/wiki/archive/Gyro-&-Dterm-Filtering-Recommendations#what-defaults-changed-in-317","content":"Boris's answer: Basically people kept complaining that betaflight default D was too conservative and therefore changed. Setpoint transition has been disabled (1.0) to give more linearity over the entire stick. I still recommend that you slowly remove default filtering as well if your setup allows you for best results. Nowadays most do softmounting so removing of filters can easily improve performance. The defaults are optimized for hard mounted medium noisy environment for safety. The best tuning performance is achieved with as less Du. I think best filter removal steps would be.​ set d_lowpass_type = PT1 (in the CLI) should always be done first and I think possible on every setup. If it is still fine than: Remove notch 1 (set Gyro Notch Filter 1 Frequency[Hz] = 0 in the config GUI or in CLI type &quot;set gyro_notch1_hz = 0&quot; to disable Notch filter) Then if its still fine Remove notch 2 (set Gyro Notch Filter 2 Frequency[Hz] = 0 in the config GUI or in CLI type &quot;set gyro_notch2_hz = 0&quot; to disable Notch filter) Now if your setup is still clean you could even remove the dterm notch (set D Term Notch Filter Frequency[Hz] = 0 in the config GUI or in CLI type &quot;set d_notch_hz = 0&quot; to disable Notch filter). That will give you the best results. Sharpest response, easiest tuning and literally no prop wash on good setups. Note that default betaflight filters are made so every beginner can put a quad in air without burning his gear. Dterm lowpass is always needed. Never remove that! Even on the cleanest setup. I think if you really put some effort to build a clean setup you easily can get away without most of other filter settings. To test that I was able to repeat it on 3 of my builds. Hardware softmounting is always filtering without extra penalty. The most difference with and with filtering comes from the steep gyro changes. The more filtering there is the slower P will react on high gyro changes and translates itself to more prop wash and less direct feel. As I said defaults are meant to be safe and protect against most common vibrations shown across many hardmounted 4 / 5inch setups. But more and more people care about clean setup nowadays than lets say 1 year ago and that means you may get much better running setup with some filter removals. question from linklemming:​ From BB analysis with debug notch on, I have determined that D lowpass of PT1 is fine and that I only really 1 notch filter (300Hz Center, 200Hz low). I have a softmounted FC. I can see the spike in the frequency range both in P and D. Boris mentions removing gyro notches first, I'm wondering what the trade-offs would be in selecting gyro notch vs D notch. Obviously if using only gyro notch, I get noise reductions in P and D and it seems to me this is better than using D notch unless there is some flight behaviors that would be better suited to using D notch only. The noise I believe is low enough that any P noise from using just D notch would be minimal. Interestingly all the quads I did testing on this weekend show the same noise spike around 300Hz (+/- 30Hz). This includes: F1-4B 3mm with DYS 1806-2700kv motors, dal 4045V2 tri blades on 4s My own design sub250g 180 quad(3mm) with rcx1306-3100kv, dal 4045 dual blades on 4s My own design sub250g 150 quad(3mm) with dys1306-4000kv, dal 4045 dual blades cut to 3&quot; on 4s Im guessing this is just frame resonance? All are 3mm single baseplate designs. Answer from ctzsnooze: To be honest, no-one really knows. If you compare D trace (zoom in, smoothing off, expo off) to P trace (same zoom), and if most of the noise is in D, then there are two ways of dealing with it. First way of thinking about it, just filter what is bad - ie just filter D only. This fixes the noise problem and delays P the least. Second, put the notch on gyro, that's where the noise is coming, this way both P and D will have less noise, and the relative phase lag between P and D won't change. Frankly I doubt it makes any difference.. I do like the idea of only adding filtering where it is necessary; in this case, just putting the notch on D. Sure there will be slightly more phase delay between P and D, but D is already phase delayed because of the D lowpass filter, and the extra phase delay from a 300/200 notch filter on D alone may have no adverse effect. If you had time to try both and compare logs, that would be great. If possible make your flight testing 'blind', ie get someone else to make the change in the firmware so you don't know which you are flying. Be surprised if it makes the slightest difference. If you had to enable the notch filter lower down, eg centre 145 cut 90, for example, it might matter a lot. But high up probably either way is fine, gyro should end up slightly smoother and fly just as well. Testimonials​ Redtail2426: So I ended up switching to pt1, removing both notch filters, and removed the d term notch filter, and the prop wash is pretty much 99% gone, much much better than it was with the default 3.1.7 filtering. Awesome job guys kevinpratt823: I got rid of the Dterm notch and went PT1 yesterday as well, and it was a considerable improvement on a high power to weight build that was struggling with that last bit of oscillation, opened my tuning window up, raised PIDs a bit. Hattrickmwf: Going to PT1 and removing all the notch filters made a huge difference in my quad too. Almost Zero prop wash. I also noticed it handles impacts with gates or ground touches much better too. No Tasmanian Devil quad after impact. May be placebo effect, but it seems to handle a lot better too. Cheredanine: Some interesting stuff: I removed filters on f3 flight controller, by the time I removed first notch filter flight performance was much improved (perceptively) when I removed second notch didn't make much difference (or none that I noticed subjectively) although bb gyro traces remained clean, clearly there was a sort of milestone I passed in terms of latency. I repeated on an almost identical quad running f4, this is where it got interesting, the improvement was similar but les marked, subjectively the most noticeable thing was prop wash vanished. BUT, On a whim I switched from 8khz/4khz to 32khz/16khz the change in speed had a dramatic effect, gyro traces were noisy as hell, but motor noise was at values like 400kz which 8khz should find easily. Front two motors got warm and audibly screamed over about 15-20% throttle. Quad actually flew quite well. Got both set of bb logs and not particularly worried as I usually fly8/4 but thought the result was quite interesting. Oz asked: You find 8/4 flies better than 32/16? (Properly soft mounted) Cheredanine's answer: Subjective but I don't find improvement over 8/4, probably less than that. I have 5 quads with bluejay f4s in them, i gave 32/16 a good test since it became available. Provided you tune it properly, 8/4 is as good as 32/16 as far as I can tell, I am 100% sure I would not be able to tell the difference in a blind test. (The quads I mentioned above are both dquad obsessions with returner r4, 25a blheli_s 16.6 escs, one uses an rg-ssd, the other has a bluejay., no noticeable difference in flight apart from: Normally (with filters) 32/16khz has motor noise above 4khz, this is not apparent on spectrographs at 8/4 but then given the scale of the graph and Nyquist limit I wouldn't expect it to. But strip back the filtering and 32/16 is far messier, flies ok, but the heat and noise from the motor was worrying. All quads have vibration isolation on the fc, where possible using rubber standoffs (exceptions being shrike and tokio-x prototype, the former has to use rubber o rings and the latter has a unique vibrations isolation mount). 32/16 has so far not flown any better than 8/4 and in some cases flown considerably worse. Boris provided the following info: There is additional filtering present when running at 8khz gyro or lower, this is not present when running 32khz. Therefore changing d low-pass to pt1 and removing notch filters when running 32khz will produce much messier gyros. In summary I found quad flew fantastic on 8khz gyro with filters stripped back but on 32khz gryo I had to leave them in place to get similar performance and no heat in motors. Posted by QuadMcFly: So here's my experience with PT1 and the notch filters, as well as some other general thoughts. I gave RF1 a shot for about a month, because I like to try things so I can actually speak from experience. Something about my rig really hated RF1. I had some pretty significant issues with low throttle noise, and the stick handling never felt right. Kind of felt unpredictable like I was having to fight it instead of flowing with it. I don't necessarily think that is reflective of everyone's experience on RF1, I just think there are some setups that it doesn't like at all, and mine happened to be one of them. Anyway I got tired of fighting it, so I put BF 3.1.7 on the revolt, 8k/8k PT1 Dterm, lower gyro notch removed. Got it flying a few days ago and I have been totally blown away. The difference was stunning. Like going from PPM to S.Bus all over again. I don't think I've ever flown anything that flew this well, and I've flown a lot of stuff! It still needs a bit of adjustment to clean up that last bit of prop wash, but man alive! Amazing for a totally blind tune, just thrown in based on the power train. The stick feel is utterly amazing in terms of precision and crispness. As I mentioned a few days ago, DO NOT run PT1 dterm on 32khz! It is quite likely to launch your quad at full throttle! Found that out on my first attempt 8k/8k on the other hand is absolutely stunning! 10/10 would recommend! Here's a boring few clips from about the only spot I really get a chance to fly, feel free to skip it:https://youtu.be/3KZlI8F0ER8 Boris' response: Looking great indeed! It basically all comes down to filter interaction. There is no 32k magic at all. Any kind of bench test didn't show any performance gain going to 32khz update speed for motors. But 32k mode fully disables any kind of internal gyro filtering, while 8k mode still has a 256hz lo-wpass active. The 256hz low-pass is kind of just not enough filtering by itself so it needs a tiny bit of software assistance like pt1 ans you get the best balance of filtering without much signal damage. 32k mode, which essentially only has internal 3600hz low-pass active needs a lot of software assistance to make it useful. The betaflight philosophy has been more to make every-bodies quad fly without damaging their gear and that meant filter protection against any common oscillation scenarios. So with all default soft filters on top of it you were still able to fly 32k mode and it felt a bit better than 8k modes as there was simply less filtering. It is not just delays we are here talking about. What is more important is the amount of signal deformation on sharp changes like what you can get in propwash cases or other very quick changing frequencies. What is the difference between PT1 vs BIQUAD filters​ Answer by pete_oz: A biquad filter is more aggressive (it can filter the noise better at the cost of extra delay). I have no technical expertise to explain how each filter works (perhaps others can explain it for us) but basically based on latest Boris's recommendation we should be using PT1 unless there is too much noise on your copter. Answer by ctzsnooze: PT1 is a standard -6db/octave 'infinite impluse type' IIR type low pass filter. Signal amplitude is halved at the set frequency and then is reduced by a factor of four times each time frequency doubles above that. Delay is approximately 1ms at 100Hz (2ms at 50Hz etc). Phase shift is 45 degrees at cutoff frequency. This filter is the digital equivalent of a simple analog low pass RC filter. BiQuad is a steeper -12dB/octave low pass filter. Signal amplitude is halved at the set frequency and then is reduced by a factor of 8 times each time frequency doubles above that. The 'cost' is that delay and phase shift is doubled. Delay is approximately 2ms at 100Hz (4ms at 50Hz etc). Phase shift is 90 degrees at cutoff frequency (I think that's correct). Basically twice as steep a cut, but more delay. Answer by Boris: Ctznooze explained it already, but here a very easy explanation for those who don't understand how filters work. PT1 is a less good filter, but therefore much faster than BIQUAD. Dterm speed of reaction gets greatly improved with PT1 therefore and the pid controller gets a faster reaction in quick disturbance cases. The main performance difference comes into play during very rapid accelerations and decelerations of gyro changes. You could say that rising and falling edge scenarios from gyro changes are better followed with PT1 than with any other higher order filter. Though BIQUAD coefficients also can be modified to be same to PT1. What is the difference between the gyro notch and the D-term notch?​ Answer by Boris: Gyro notch is applies to gyro input and dterm notch on dterm output. But those are in line. Gyro noise at 300hz will also result to dterm noise at 300hz Loop: Gyro-&gt;PID-&gt;motors And again How should I set Dterm Notch Filter? Do I set it to the same value as Gyro Notch Filter e.g. 285Hz?​ Answer by pete_oz: It's difficult to answer this question because in BB spectro analysis we are unable to produce spectro graph that would show us state of noise after gyro notch filters were applied but before D notch filter is applied. We can see spectro graph before gyro notches are removed (&quot;pre-notch&quot;) and can only compare it gyro spectrum graph after all filters (incl. D notch) are applied. In order to be able to identify this better the developers would have to implement debug mode that would allow us to see state of noise after gyro notch filters but before d notch filter is applied. I remember someone was requesting this functionality on Github but the request was dismissed with explanation given (please don't quote me this) that D term noise pattern is identical to that of gyro noise except for the magnitude of the noise. When asking same question in the past (how to set my D notch filtering) I believe I was given the answer to set my D notch filtering for example between my 2 gyro notches (if I have a gap there) or otherwise set it to where I have most noise. Answer by ctzsnooze: Well, first get the noise level under control with basic filtering (no notch filters at all). By that I mean, configure the basic gyro filter appropriately, either BiQuad or PT1, until your P trace on blackbox is 'smooth enough'. If the P trace has a prominent noise peak, apply a gyro notch filter to specifically block that out - but only if the amplitude is big enough that you can see it in the P trace itself. If the noise is less than 1% of signal, like if you can't really see it in P trace compared to signal, ignore the spectrum and don't use any notch. If you need two gyro notch filters for speciific gyro peaks, use them. After doing all this, then look at the Dterm trace. You must have some basic Dterm filtering. If the Dterm trace appears to have less than a few percent noise, you don't need to do anything, you could conceivably use less filtering an get better performance. If you have a broad band of noise on D, then you may need to lower the overall D lowpass or use a BiQuad on D. Only then would you think about adding a D notch filter, and only to deal with a very specific peak that had got through the gyro notch filters. Finally check the motor traces at different stages in a typical flight. Provided that oscillations are less than a couple of percent, they can basically be ignored. We are not trying to get a flat spectrum, just to make it so that signal to motors is 'clean enough'. If we filter super hard, we may get rid of high frequency noise, but may end up exaggerating low frequency wobbles. There is some 'sweet spot', and it differs according to what you want to achieve. Full optimization simply can't be done without a blackbox, quite a lot of time, and knowing what you're doing. Think of it like you are reprogramming the ECU of your car. Also be aware that if you change your props, if they get some nicks or bends, or if you get a little bearing wear, or even if you just change ESCs, all your careful optimizations done with clean new original gear won't work so well. Reducing filtering to the bare minimum, keeping motors perfect, and only flying clean props = fantastic performance and hardly any propwash wobble (assuming light props, low rotational mass, and free-revving powerful motors). For me, I'd rather fly. I set my filters relatively quite low, and don't care much about a little propwash. Motors stay cool, tolerate bent props really well, don't get burning hot at the drop of the hat. Turn P down on more powerful setups. But yeah, I get propwash on hard 180 stops, so I just live with it and learn to fly smoother arcs :-) No one should use motor signal as the input source in blackbox when modifying filters. Pterm noise is the same as gyro noise multiplied by your P factor. In BlackBox, gyro or P traces should be used as the input source for tuning gyro filters. Dterm noise can only be evaluated using the Dterm trace in BlackBox logs. Be aware that Dterm is calculated after all the gyro filtering, so always first optimise the gyro filters, then worry about Dterm filtering independently. A Dterm notch should only be used when there remains a peak in Dterm and where that peak is of such magnitude to be a significant contributor in terms of your final result. Otherwise don't use it at all. Just randomly setting the Dterm notch in-between the gyro notches is not likely to work well. By comparing noise levels and spectrum between P and D in blackbox, it's actually quite easy to visualise what the Dterm filtering is doing. And of course you can turn it off and do a short test run :-) just not for long or you may overheat. The only role that the motor traces have is to look at your overall 'end result' - to visually quantify the amount of energy in oscillations of any kind, with the goal of keeping the total oscillation energy low enough to be not a practical issue. They should not be used as a blackbox input when tuning filters. Comment by zenkinsw: I'm not too technical but once I switched D lowpass to Pt1 it does handle windy days much better, P hunts much less, and less prop wash too, basically less bumpy fly, but trade off with some more D noises motor get hotter. I think people want to try PT1 need to lower down D back to around 24 first, tune it like the old days, actually I found much better as I know when to stop adding numbers lol, also with dshot much easy to see over Dgains symptoms so you know when to back down. For racing I think Biquad still best if don't mind a touch of prop wash but benefits will more efficient and faster motors. How do I see the dterm trace? Roll/pitch D graph in BB log??​ Answer by ctzsnooze: Yep, click on the icon at the right near the parameter to select that one. For Dterm just graph it, select either roll or pitch (they can be different). Remember that you can scroll to a 'start' point in the log, press 'i' on the keyboard, then scroll a bit further on, press 'o' on the keyboard... now your graph only shows that region of the log. Very, very useful. Allows you to look at hover throttle, mid throttle, high throttle independently, often the peaks are different at different RPM. Looking at noise throughout the entire trace is OK but it can be more productive to focus on the throttle range you care about most (or the range with the most noise). Be sure to edit your BBLog settings to disable all expo and set all gains to 100% in the first instance. Expo on BBLog traces is very confusing, much better disabled. (S &amp; X keys) Finally, use the spectrum only to determine the relative distribution of the frequencies, not the absolute magnitude of the noise. In other words, do not worry about the absolute 'height' of the spectrum. It is always bigger if you include more data. For the same included amount of time, a bigger spectrum means more noise, but you must select the same length range to do valid comparisons. To evaluate the overall magnitude of noise, look at the Motors traces - the wiggly lines themselves - with no expo and 100% scale. Eyeball how much noise you reckon there is, as a proportion of the total motor signal itself. Post by ctzsnooze on using the Filters available in 3.xhttp://www.rcgroups.com/forums/showpost.php?p=35764414&amp;postcount=38600 "},{"title":"Additional discussion on Filter Usage​","type":1,"pageTitle":"Gyro and Dterm Filtering Recommendations","url":"/betaflight.com/docs/wiki/archive/Gyro-&-Dterm-Filtering-Recommendations#additional-discussion-on-filter-usage","content":"Post by Boris​ I still recommend that you slowly remove default filtering as well if your setup allows you for best results. Nowadays most do soft mounting so removing of filters can easily improve performance. The defaults are optimized for hard mounted medium noisy environment for safety. The best tuning performance is achieved with as less Du. I think best filter removal steps would be. set d_lowpass_type = PT1 should always be done first and I think possible on every setup. If it is still fine then: Remove notch 1 Than if still fine remove notch 2 Now if your setup is still clean you could even remove dterm notch. That will give you the best results. Sharpest response, easiest tuning and literally no prop wash on good setups. Note that default betaflight filters are made so every beginner can put a quad in air without burning his gear. Post by ctzsnooze When Boris was first putting notch filters into betaflight they were intended as narrow, specific point filters, to block tight peaks of noise - and for this they are really, really good. However, when set wide, and particularly if set wide with a low cutoff, they do have a 'tail' that causes both delay and phase shift. Those negative effects can extend some way below the lower cutoff point, especially if the filter is 'wide', ie there is a big difference between centre point and low point. For example, setting a notch centre point to 200 and its low point at 100 will have significant effects below 100, whereas setting it to centre of 200 and low point of 160 won't be nearly as much of a problem. Notch filters should be used primarily to control tall, discrete 'peaks' of noise, and only made just wide enough to control the peak. post by r.a.v.​ As explained earlier PT1 is a first order filter and biquad is a second order filter. A main difference is also how steep the cutoff of the filter is. Here's a graph that shows the difference between the two. (X is frequency in Hz, Y is magnitude in dB). You can see that the biquad does not influence frequencies below the cutoff as much as the pt1 filter, but much stronger above. Keep in mind that changes in rx input come in at 9ms = 111Hz and influence the D-term based on setpoint rate which is calculated before the filter is applied, so that could explain why pt1 feels better than biquad. If we combine the filters on gyro with the filters on D, we get something like a 2-3 order filter but with weird behavior on magnitude below the cutoff value. (The coefficients should be changed to get a proper behavior when cascading filters.) So there is not only a phase shift between P and D, but also a large difference in magnitude. Instead of disabling notch filters. I'd recommend raising the cutoff of the D low pass filter. By moving the pt1 cutoff higher and using notches, noise is reduced a lot without influencing lower frequencies. As an example this is what I use on my super noisy noise-o-copter and get cool motors: gyro filter: biquad at 110Hz gyro notch1: 330, cut 250 gyro notch2: 250, cut 170 dterm: pt1 170Hz dterm notch: 280, cut 160 All the filters and signal sources interact with each other and it's difficult to find the perfect setting. Here's my point of view. We have:&lt; 110Hz: Useful, important signals &gt; 200Hz: Motor noise / frame resonance / unwanted signals  Gyro filters: lpf, notch1, notch2 Dterm filters: lpfD, notchD Signal path is like this: gyro -&gt; lpf -&gt; notch1 -&gt; notch2 -&gt; P term -&gt; motor gyro -&gt; lpf -&gt; notch1 -&gt; notch2 -&gt; D term -&gt; lpfD -&gt; notchD -&gt; motor Each filter creates more delay the stronger it is. We want to: keep total delay as low as possible keep delay between P-&gt;motor and D-&gt;motor as low as possible filter out as much noise as possible lpf of second order (biquad) creates most delay but has a steep curve and does not influence frequencies below cutoff too much. lpf of first order (PT1) creates less delay than biquad, but has a strong influence on lower frequencies. Notches are great to remove certain frequencies created by motors and have a delay based on filter width but less than lpf. In my opinion it's best to use biquad and notches for gyro. This does a great job at removing noise but keeping the useful data. The dterm needs still additional filtering so a PT1 at high cutoff and another notch take care of noise without touching low frequency data. This also keeps the delay between D and P low. The default setting of a biquad for D with quite low cutoff creates a lot of delay and also lower magnitude of useful data. post by ctzsnooze on Evaluating and setting Filter: Summary: Raw gyro spectrum shows what is happening without any filtering at all.Normal gyro spectrum shows what happens after gyro LPF and the gyro notch filters.Spectrum from D trace shows how the D calculation adds noise on top of the filtered gyro data. To see what D is 'adding', we compare the spectrum from the D trace (in any given axis) with the gyro spectrum on that axis. We look to see what the D calculation 'adds on'. It usually amplifies noise, progressively more at higher frequencies. That's why D MUST have at least a PT1 low pass filter, and why if there is any high frequency peak creeping through gyro, it will be even bigger in D. The D notch should be applied to that final remaining notch after your gyro notches, or if you have no gyro notches, to deal with whatever is the biggest notch getting through the gyro filtering into D. That's why I say, always, always always get the gyro filters right first, then look at the D filters.finally, PIDsum and motor trace spectrums shows what the motors finally receive; this is the sum of the gyro-&gt;P and gyro-&gt;D pathways added together and modified by your P and D weightings. Remember that we are not 'trying to fix a spectrum'. Our goal is to reduce the relative amount of noise in the signal going to the motors - say as a percentage of total signal to the motors - to a reasonable level. Therefore the final step is to visually examine the motors trace (with scaling at 100% and no expo in the blackbox config), and check that overall the noise contribution is small. It does not have to be zero, just small enough to not be more than say a few percent, ideally. 5% noise costs 5% power and gives you 5% heat. The less noise, the better, all things being equal. You can look at the motors spectrum to see, if there remains a bit more noise present than you want, what its frequency range is. Then you can go back through the pathway to find where best to deal with it. The purpose of the spectrum and the filtering options is to identify the frequencies that contribute to the noise, so that you can then then to set the cut points on the LPF's to get rid of most of it, then add, if needed, the notch filters to remove any stubborn remaining peaks. But you don't need to put a notch on a peak if the actual amount of noise from that peak that is actually present on the motor trace - the waveform itself - is so small as to be irrelevant. We aren't fixing a spectrum! Note that as you reduce filtering, the quad will become 'twitchier'. Reducing filtering means that P and D now are active in higher frequencies that they never 'saw' before. So the quad may fly a bit better perhaps, but may also resonate or go insane from feedback when it didn't used to. The whole goal of filtering is to allow more P and more D than you other wise could use without filtering. And we want more P and more D, if possible, because they are good for propwash. We want the highest P and D possible without overheating motors. But, reducing filtering may limit how much P and D you can safely run without overheating. It's just not true to suggest that 'less filtering means better performance', especially if it limits how much P and D you can run. If you have beat up old machines and dodgy props, you will be able to safely run them on quite high P and D with solid filtering. Somewhere there is a good balance between too much and not enough filtering. Finding the balance that works best for you is what its about. "},{"title":"Frame and Prop Resonance​","type":1,"pageTitle":"Gyro and Dterm Filtering Recommendations","url":"/betaflight.com/docs/wiki/archive/Gyro-&-Dterm-Filtering-Recommendations#frame-and-prop-resonance","content":"Posted by ctzsnooze: There is a lot of confusion about resonance. Frame resonance is completely independent of props. It’s an intrinsic characteristic of the frame. All frames have a natural resonant frequency. At that point, the frame starts to exaggerate how much it shakes in response to the input. Let's say you have a source of shaking that varies in frequency - for instance, an out of balance prop. As the motors go faster, the frequency of the shaking gets higher. That’s our ‘input’. At the frame’s resonant frequency, the frame will shake much more than at any other rpm. Even though the ‘input’ itself hasn’t changed in magnitude, the frame resonance makes it seem like it has. A very hard frame won't resonate until the frequencies are very high, but a softer frame with heavier motors will have a lower resonant frequency. Resonant frame problems will be exaggerated if the arm can flex, ie it is loose at the bolts, or is beginning to fail, or is thin. However you get real issues when the resonant point of the frame coincides with the resonant point of the prop - and then when the PID loop amplifies the whole thing even more. That’s because prop blades have their own resonant frequency, independent of the frame. Hold a prop hard on a table-top and 'pluck' the blade, and you will hear it. Stiffer props make a higher pitched sound, the frequency you hear is approximately the resonant frequency of the prop. You can also pluck the arms of the quad in the same way to hear their natural resonant frequency. If the prop resonant frequency and the frame resonant frequency happen to be very similar, then you can get sudden severe resonance problems. A good way to determine if this is happening is to hand hold the quad and run the motors with props on in the motors tab. Take care. You can then feel (and hear and see if the accelerometer is on) how each motor individually shakes the frame, and if there is some point where the whole thing shakes much more than any other, that’s the resonant point of the system. By testing individual motors you can tell which motor or motors are providing the greatest input stimulus (i.e. has the biggest problem. You can also test with all motors on at once, which tells you the overall smoothness of the whole frame. Note that in the motors tab the PID loop will not amplify anything; what you feel there is purely mechanical without PID amplification. The whole idea of notch filtering is to precisely match the centre of the notch filter exactly to a specific resonant point, and make it only wide enough to cover the width of the resonant peak. To do this we have to precisely know what the resonant points are, so we need a blackbox, and to look at the various traces carefully. As I explained before, a resonant peak on P needs a gyro notch, then re-log and check if D is still a problem. Usually D is the main resonance amplifier. Without blackbox or notches, it is simpler to just put a steeper low pass on D i.e. biquad at a low frequency (70) rather than worrying about D notches. Also, If gyro is filtered properly with suitable gyro notches, you won’t need a D notch since nothing is coming into D at the resonant point. Unfortunately there is no way to predict the resonant points for your frame, since they differ from prop to prop and frame to frame. The only way is to blackbox it and individualize the filters. In the case we are discussing, the only notch filter that was in use was a D filter, and it was achieving nothing because there was no resonant point at its centre frequency. Notch filters have to be tuned specifically prop by prop and frame by frame. Note that the notch filters do not stop the shaking or the resonance. What they do is stop the PID loop from positively feeding back and amplifying that resonance. The result is less overall shaking. When done properly, the quad itself will shake just as much as it did when driven from the motors tab, but not more. Then if you have a minor prop imbalance, the frame will still shake and resonate, maybe badly, but you should be able to keep flying and your motors won't get hot or sound bad. It would still be good to fix the bearings or replace the bent prop, but at least you can keep flying in the meantime. That’s the whole idea behind notch filtering; blackbox logs are the only way to do them properly, the defaults most likely are wrong, and it absolutely must be individualized per prop and per frame. PS - also there are certain points in BLHeli where the motors are not controlled as smoothly as other points. If you spool motors slowly up without props in the motors tab you will hear them - it just sounds gritty. You can feel it (and see it if the accelerometer is enabled). Sometimes these points provide another trigger for resonance. If the rotational speed of the motors at these points coincides with other resonances you then get issues at those throttle points that aren't apparent elsewhere. continued experiments and discussion from ctzsnooze:​ Spent half the day messing with filters and logging stuff. Bluejay F4 board, O ring mounted with beveled overdrilled holes (not a super soft mount, but not hard either), Tornado T2's. I'd previously optimised P and D, was trying a 'from the very basics' test of a range of filter strategies. I tried arming with only PT1 both at 130 on Gyro and D, and with no notches at all. Terrible grinding noise at idle! Log shows massive but really tightly defined sine wave peak at 180Hz. Looking at the props I can see them flexing like crazy, with so much energy that the frame flex makes the prop nuts are a little blurry. At slightly lower lowpass settings, but still with no notches at all, I can throttle up past this and the motors run smoothly... So I was sitting there, wondering what to try next, flicking the ends of the props (stiff 50403's), and I noticed that they have a musical 'note'. A fundamental frequency. I wondered what frequency that was? Recorded the plucked prop sound, checked its frequency - guess what, nearly exactly 180Hz. Hmm! Got some cyclones, which I use sometimes, they 'pluck' at 300Hz (stiffer). So I stuck a gyro filter with midpoint 180 and low point at 140 and bingo no more shaking - able to bring the lowpass values up quite high now. So I made another profile for cyclones with the notch centred around 300. Same outcome! I also noticed that with PT1 on both gyro and D, the proportion of noise on D compared to P becomes progressively greater as frequency increases. To keep the two in a constant relationship, a biquad on D works much better. Once the amplitudes of P and D sort of are the same, we only need to put notches in the right place on gyro, and none are needed on D. So I ended up with PT1 on gyro, biquad on D, and just a single gyro notch to suit the exact prop resonance point, nothing else. Flew great! I set both lowpass points at the same frequency, and tested higher and lower. Too high (with high PIDs), and the shakes would reappear either side of the gyro notch! Clearly there was some upper value where there was so little filtering that even good props would feedback and shake, and there also was a lower bound were bad props were happily tolerated. Since I often re-use not so great props, and 'fly home' with bent ones often enough, I went for lower filters. I ended up with both lowpass filters cutting from 80, PT1 on gyro and biquad on Dterm, a single gyro notch at 140/180 (for light but stiff 50403's), P around 40-50 and D around 25. I'd recommend this as a basic starting 'recipe' from which one could lift the lowpass values later. At least one notch needs to match the prop resonance, so go pluck your prop! :-) Quick description by ctzsnooze of measuring Prop Resonance: Get a representative prop, hold the hub hard onto a firm table, with one blade poking out over the edge. Try to dull the other blades so they don't rattle. Plucking the blade itself takes some practice to get a good sound, a clean flick up from below should make a smooth clean tone. There are quite a few Audio FFT apps that record a short sample and present a 3D FFT with the noise peak highlighted; ideally one where you can scroll back looking for the peak. Usually quite easy to identify, there will be one big sine wave peak that fades out like a guitar string being plucked. iAnalyzer Lite on iOS for example. The predominant sine-wave like frequency is the fundamental resonant frequency of the prop, and works really well as the main notch filter value. Completely stops grinding on idle on all my quads that had it, first time. Video- How to Quickly Find Natural Resonant Frequency of a Propeller. Uses the app: FFT spectrum analyzer ​ More from ctzsnooze:​ True motor noise (bearings, out of balance bells, loose bolts, out of balance props, etc) is typically a sort of random junk broadly spread over a range of frequencies from low to high, occasionally with some small peaks, but basically a smooth spread. The actual frequency of this noise at any point in time correlates with motor rpm. A single out of balance bell or prop will induce sine wave shaking of the frame and the frequency will increase as rpm increases. Obviously all motors make some shaking and noise, and the frequency obviously changes during the flight. The key thing is that noise from bearings or out of balance props / motor bells will be rpm dependent and will vary in frequency. Low pass filters deal very well with noise over a broad spread of frequencies going from low to high. A notch only takes out a tiny piece of it, leaving the rest untouched. If out of balance motor noise coincides with the natural resonant frequency of a prop, arm or other frame component, it will become greatly exaggerated... Resonance is a definite 'noise' peak at a specific frequency. It really isn't random noise at all, it's a sine wave type pattern in the black box traces, and a definite tall peak in the spectrum. Generally it is at prop resonance frequency, or less commonly at the natural resonant frequency of (say) a loose or flexy arm or excessively soft motor mount. The resonant frequency does not change much with motor rpm, but may be triggered at specific rpm. The more aggressive your PIDs, the faster responding the ESCs and motors, the flexier the frame and the motor mounts, the bigger and stronger this resonance will be. Resonant peaks are best dealt with using a notch filter at the exact resonant point. When prop resonance is triggered, the frequency is relatively focused around the natural resonant frequency of the props. This can happen at idle, or at certain rpm points, or just be there all the time randomly. The props can resonate at nearby frequencies too, just not as well as the dead centre of their resonant point, so the peak can be wide or narrow. If there is a dominant peak, the auto setting filters being developed for 3.2 may be able to find that automatically. In the meantime, for people without blackbox, a single gyro notch set at your prop resonant point (with the low point about 25% lower) is a very good starting point for a single notch / PT1 setup. If you are experimenting with PT1 only low pass and minimal notch setups, this is what I would do: Set both gyro and D to PT1 at about 100, disable all notch filters except just one. Measure your prop resonance, and set that single gyro notch at the prop resonance point, low side 25% below centre point, and check that the quad flies OK. If the motors are too hot, my next step, rather than adding notches, would be to shift to biquad on D, since in nearly every log I've seen with broad motor noise, heat is mostly generated by D amplification at higher frequencies, and a biquad on D is the most effective method for dealing with this problem. That's my starting point, anyway. Posted by ctzsnooze​ There are a number of formulas that calculate phase shift vs frequency for various filters, including notches. For lowpass filters, the delay in ms is intrinsically linked to the cutoff frequency and is more commonly expressed in terms of phase shift. For our PT1 (one pole) type lowpass filters, phase shift is 45 degrees or 1/8th of the wavelength at cutoff frequency. If we set the cutoff frequency to 125Hz, where the wavelength is 8ms, our delay will be 1ms; if we set a PT1 to 62.5Hz, delay will be 2ms. For biquads we just double the delay, ie 2ms at 125Hz and 4ms at 62.5Hz. For notch filters, the delay is more complex, and is especially troublesome if set wide and low. I think that our notch filters cause phase shift of 45 degrees at their -3dB low point and 90 degrees at centre. Because the centre is not always twice the low point, there is no simple numerical 'delay' equivalent. However, if we have the low point of a notch at 125hz and centre at 250, the implied delay for both points is 1ms. But if the centre point is closer to the low point, the delay is no longer a simple time but is frequency dependent. Notch filters carry their phase shift / delay effect lower and deeper than simple low pass filters. Note that in both cases, the higher the filter frequencies can go, the less delay we get. And that each filter adds its own delay, in series; they add up. We can very easily accumulate 7-8ms delay from strong filtering (especially on D). That delay is simply massive when compared to gyro update and PID recalculation rates happening more than 50 times faster, ie every 0.125ms at 8k/8k. It's why a machine with lots of filtering has problems with propwash, and in terms of propwash actually won't handle any better than 2k2k. For D to work properly, the phase relationship between P and D must be preserved. When we filter D with a biquad + notch we offset D significantly and wreck those phase relationships. Softmounting the FC will make it harder for noise to be transmitted via the bolts to the gyro chip, hopefully so that less software filtering is required. For this to work, a mechanical equivalent of whatever electronic filtering you took away is needed, and that's difficult to achieve in a controllable fashion. In any case, if the FC mounting was soft enough to cut high frequencies as effectively as our low pass filters, it will inevitably incur delays of comparable magnitude. Soft mounting motors if done effectively can result in reduced noise transmission into the frame without significantly negatively impacting the time taken for the motor to generate thrust. In principle this is very appealing. However if too soft the motor can process and wobble in the mounts, causing larger scale low frequency shaking than would otherwise happen. This limits how soft they can be. And the entire bolt needs to be isolated from the frame to be effective. If most of the noise can pushed upwards into a range well above the frequencies we care about, the filtering we apply can be less intensive, causing less delay. Super stiff frames, effective motor soft mounts, stiff props, high rpm setups, tight bearings, no shaft travel, perfectly balanced props, exactly equal thrust per blade, and perfect ESCs all play a part in shifting the noise spectrum higher and higher and reducing the amount of noise to be filtered. For my race quads I've largely given up on getting rid of propwash. I filter heavily so I can fly with beat up props and smashed up motors and light-weight arms that have a bit of flex, that gives me heaps of propwash. But if I wanted a super smooth freestyle quad, or spent more money on new props and motors all the time, I'd set up a stiff quad as above and would get a very different propwash experience. "},{"title":"Filter Delays​","type":1,"pageTitle":"Gyro and Dterm Filtering Recommendations","url":"/betaflight.com/docs/wiki/archive/Gyro-&-Dterm-Filtering-Recommendations#filter-delays","content":"Post by ctzsnooze All filters add delay. Doubling slope on an IIR LPF doubles delay since the same 1st order filter is simply applied twice. None currently are FIR. FIR were evaluated and not as good as simple IIR. Dterm is IIR, gyro cut was biquad (i think it still is). There is a recent post about the notch filter that linked to the GitHub page where the Notch was discussed before implementation. Diagrams there show delay for different filter combinations. Lots of thought has gone into current filter design. Posted by ctzsnooze: Switching from biquad to PT1 , while leaving frequency the same, say at 100Hz, will do the following: Twice as much noise at 200hz Four times as much noise at 400hz Almost no change in phase delay at 10hz About 15 degrees less phase delay at 50hz 45 degrees less phase delay at 100hz The improvement in phase delay at 100hz can be thought of as about 1.5ms less absolute delay. Post by r.a.v. showing Filter delays:​ Here's an overview of the delay between 90Hz and 170Hz: biquad: 2.75ms vs 2.5ms at 100Hz pt1: 0.88ms vs 0.8ms  I'll just throw in some notch delays for notches with cutoff 80Hz below each center. As you can see the delay is very low but the strong filtering allows higher cutoff for lpf filters. So total delay of notch + high cutoff lpf is lower than lpf alone with low cutoff while the noise is still reduced significantly.  "},{"title":"Hardware Reference","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Hardware-Reference","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"Hardware Reference","url":"/betaflight.com/docs/wiki/archive/Hardware-Reference#introduction","content":"This page provides details for hardware developers for future boards to ensure maximum compatibility with Betaflight. "},{"title":"Target Maintenance​","type":1,"pageTitle":"Hardware Reference","url":"/betaflight.com/docs/wiki/archive/Hardware-Reference#target-maintenance","content":"A hardware developer is responsible for developing, and maintaining, their target within Betaflight. Target files are being separated as much as possible to the main code so as to facilitate this. "},{"title":"Adding new targets​","type":1,"pageTitle":"Hardware Reference","url":"/betaflight.com/docs/wiki/archive/Hardware-Reference#adding-new-targets","content":"If you are adding a new flight controller then: Make any PRs against the master.Don't change the travis.yml or fake_travis_build.sh files - these are just for a subset off all builds to check PRsAdd page to wiki describing the flight controller and giving a link to at least one supplier. "},{"title":"Hardware​","type":1,"pageTitle":"Hardware Reference","url":"/betaflight.com/docs/wiki/archive/Hardware-Reference#hardware","content":""},{"title":"MPU (SPI versus I2C)​","type":1,"pageTitle":"Hardware Reference","url":"/betaflight.com/docs/wiki/archive/Hardware-Reference#mpu-spi-versus-i2c","content":""},{"title":"MPU Interrrupt​","type":1,"pageTitle":"Hardware Reference","url":"/betaflight.com/docs/wiki/archive/Hardware-Reference#mpu-interrrupt","content":""},{"title":"Blackbox Flash​","type":1,"pageTitle":"Hardware Reference","url":"/betaflight.com/docs/wiki/archive/Hardware-Reference#blackbox-flash","content":""},{"title":"MCU​","type":1,"pageTitle":"Hardware Reference","url":"/betaflight.com/docs/wiki/archive/Hardware-Reference#mcu","content":"Excerpts from the data sheets / reference manuals that cover possible pin / timer / DMA assignments: STM32F3STM32F405STM32F411STM32F722STM32F745STM32H743 (pins only) "},{"title":"Protocols​","type":1,"pageTitle":"Hardware Reference","url":"/betaflight.com/docs/wiki/archive/Hardware-Reference#protocols","content":""},{"title":"Telemetry​","type":1,"pageTitle":"Hardware Reference","url":"/betaflight.com/docs/wiki/archive/Hardware-Reference#telemetry","content":"IBus​ IBus telemetry specification "},{"title":"HID Joystick Support","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/HID-Joystick-Support","content":"HID Joystick Support HID joystick support is currently only available on F4 / F7 boards. To enable it, set usb_hid_cdc to on in CLI, and reboot the flight controller. It will then be recognised as a HID joystick when plugged in via USB. For Windows 7, a driver needs to be installed, it can be downloaded from here.","keywords":""},{"title":"Iterm Relax explained","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/I-Term-Relax-Explained","content":"","keywords":""},{"title":"Freestyle Tune​","type":1,"pageTitle":"Iterm Relax explained","url":"/betaflight.com/docs/wiki/archive/I-Term-Relax-Explained#freestyle-tune","content":"For smooth flying such as freestyle when extremely fast and aggressive turns are rare I term can be relaxed as far as completely inhibit it during manoeuvres. Freestyle tuning might requires lower cutoff values, typically about 10-15. Ideally I term should be 'locked' as the moves starts and come back on shortly after the sticks stop moving as illustrated in the log trace below.  "},{"title":"Racing Tune​","type":1,"pageTitle":"Iterm Relax explained","url":"/betaflight.com/docs/wiki/archive/I-Term-Relax-Explained#racing-tune","content":"When racing shorter I term accumulation suppression allows the quad to better track aggressive turns and quick blips. Racing tuning might requires higher cutoff values, typically about 20-30. For example, in the above log trace a higher cutoff value allows for better setpoint tracking on quick twitch inputs.  "},{"title":"Known Drawbacks​","type":1,"pageTitle":"Iterm Relax explained","url":"/betaflight.com/docs/wiki/archive/I-Term-Relax-Explained#known-drawbacks","content":"Bacause I is 'locked' to the pre-existing value before entering a fast manoeuvre, when it comes back on the old I offset takes a little while to resolve.  Such effect is even more prominent with gyro mode, since the I term locking is slightly delayed compared to setpoint.  "},{"title":"How to fix this? Increasing modes​","type":1,"pageTitle":"Iterm Relax explained","url":"/betaflight.com/docs/wiki/archive/I-Term-Relax-Explained#how-to-fix-this-increasing-modes","content":"This can be fixed using the INCREASING modes of the Iterm Relax. The Iterm Relax can be configured in RP, RPY, RP_INC and RPY_INC modes. The two modes that have the _INC in the name only lock the I accumulation from INCREASING, letting it to reduce if the I accumulation is not needed anymore. By default Betaflight uses the RP mode, so if you want to remove this accumulation you can change it to RP_INC. "},{"title":"RSSI with Spektrum","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Howto-use-RSSI-with-Spektrum-SPM4649T-and-other-satellites","content":"RSSI with Spektrum In Betaflight 3.3.0 there will be a possiblity to get a Received Signal Strength Indicater (RSSI) in OSD in a couple of different ways. True RSSI as reported by SPM4649T receivers. Preconditions: Rx is connected and setup for Telemetry, as described here: Spektrum-SPM4649T-SRXL-Telemetry-setup.Rx firmware is updated to at least version 1.1.9 Fake RSSI based on radio link fades reported by any Spektrum Satellite Rx. No preconditions. All you have to do is to Select any free RC channel for RSSI in the BFC Receiver Tab. AUX8 for example.Enable RSSI in the OSD tab of BFC. Done. The Betaflight and Spektrum RSSI % values are not the same. Currently not user adjustable in Betaflight. In your Tx you should however be able to select three different units. &quot;%&quot;, &quot;dBm&quot; or &quot;%R&quot;. None of those scales in the same way as BetaFlight. Spektrum &quot;%&quot; and &quot;dBm&quot; drops too fast close up and &quot;%R&quot; to fast at range end. The scaling in BetaFflight is a compromise between the two, the green line below. The Betaflight fake RSSI values are not scaling too well to distance either, looks more like the red &quot;%R&quot; curve above. This is because it is based on fades and frame losses. And fades start to occur close to range limit. Currently the fake RSSI scaling is not configurable, 40 lost frames/s are regarded as 0% RSSI, and 0 lost frames/s is 100% .","keywords":""},{"title":"Integrated Yaw","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Integrated-Yaw","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Integrated Yaw","url":"/betaflight.com/docs/wiki/archive/Integrated-Yaw#overview","content":"Integrated Yaw is a feature which corrects a fundamental issue with quad control: while the pitch and roll axis are controlled by the thrust differentials the props generate yaw is different. Yaw gyro changes happen primarily due to inertia when the rpm of the motors change. A constant acceleration of yaw requires a constant rate of increase/decrease in the rpm of the yaw motor pairs. This means that on Yaw I has the effect of P and P the effect of D. FF is a control element that adds impetus based on the acceleration in setpoint rate. This results in several issues on yaw. Typically yaw will react very fast initially, then fall back and catch up again over time. Integrated Yaw fixes this by integrating the output of the yaw pid before applying them to the mixer. This normalizes the way the pids work. You can now tune as any other axis. It requires use of absolute control since no I is needed with Integrated Yaw. "},{"title":"Setup​","type":1,"pageTitle":"Integrated Yaw","url":"/betaflight.com/docs/wiki/archive/Integrated-Yaw#setup","content":"Here are the CLI commands to enable it: set use_integrated_yaw=on set iterm_rotation=off set abs_control_gain=10 set p_yaw=30 set d_yaw=20 set i_yaw=0 set f_yaw=60  The yaw pids serve as starting point and might need adjustment. Make sure I is low or zero since significant I leads to strong oscillations. Pitch and roll might require slight retuning - primarily reducing I a bit since absolute control acts similar to a second I term.  To be noted: There is no more I and maybe it doesn't make sense anymore, but in the past the CLI Command set iterm_relax=RPY  was mandatory. Hopefully someone will edit it, if it is relevant or not... "},{"title":"Installing Betaflight","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Installing-Betaflight","content":"","keywords":""},{"title":"How to install Betaflight firmware on your FC:​","type":1,"pageTitle":"Installing Betaflight","url":"/betaflight.com/docs/wiki/archive/Installing-Betaflight#how-to-install-betaflight-firmware-on-your-fc","content":"Using Betaflight Configurator, select the Firmware Flasher tab and select what firmware to flash in one of two different ways, online or local firmware. Load online firmware. Select Target and Version in the upper left corner. Press &quot;Load Firmware [Online]&quot;, lower right part of the screen.Load local firmware. Press the &quot;Load firmware [Local]&quot; button, you can now browse to the folder you have the local Betaflight firmware file. Select the correct firmware hex-file matching your Flight Controller.Leaving all options unchecked ** (defaults) press &quot;Flash firmware&quot;. The Configuration tool should now erase the target and flash the selected firmware to your Flight controller. All this assumes you have the correct drivers etc setup correctly, read further on for details. There are basically two classes of USB devices used by all FCs: Type 1. Using a Silabs CP2103 USB interface chip. 1.1 Needs the Silabs CP210x driver. Used in both BootLoader mode for flashing and normal config mode. Shows up as a &quot;COMx&quot; device in BFC.http://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers Type 2. Using the MCU integrated STM32 VCP USB interface. 2.1 Needs WinUSB driver when in BootLoader mode, for flashing. Installed by Zadig or ImpulseRC DF. Shows up as a &quot;DFU&quot; device in BFC. 2.2 Needs STM VCP driver for connection and configuration with BFC Shows up as a &quot;COMx&quot; device in BFC. CC3D is a special case. It is an type 2 FC, but it is lacking the 2.1 USB-DFU interface as it is an STM32F1 based FC. All F1 based FC only has serial UART based bootloader interfaces. CC3D needs an external USB-serial adapter on UART1 for bootloader connection and flashing. (Or a secondary bootloader flashed, OP Bootloader for example). "},{"title":"Native USB based flight controllers - type 2​","type":1,"pageTitle":"Installing Betaflight","url":"/betaflight.com/docs/wiki/archive/Installing-Betaflight#native-usb-based-flight-controllers---type-2","content":"Note that this is for those controllers that are not using a hardware serial bridge - e.g. FTDI or SiLabs CP210x. Driver issues can be fixed using this handy tool: https://impulserc.blob.core.windows.net/utilities/ImpulseRC_Driver_Fixer.exe It requires .net framework v4.5. Available here: https://www.microsoft.com/en-au/download/details.aspx?id=30653 If you are having trouble connecting to your flight controller: "},{"title":"DFU flashing under Windows - USB DFU:​","type":1,"pageTitle":"Installing Betaflight","url":"/betaflight.com/docs/wiki/archive/Installing-Betaflight#dfu-flashing-under-windows---usb-dfu","content":"Make sure you have zadig if you're using Windows to enable the DFU driver. Instructions: Download Zadig: http://zadig.akeo.ie/Put device in DFU mode. If this is the first time to put Betaflight on you need to short the BL or BOOT pads (or press and hold the BOOT tactile button) while plugging the USB into the board.Open Zadig.Options &gt; List All DevicesClick on the drop down box and click the device listed STM32 BOOTLOADERIn the box to the right of the green arrow, select WinUSB (v6.1.7600.16385)Click Install DriverAfter the install completes, restart your computer (you can cheat and ensure no browser is running - but it is not guaranteed to work). The board should stay in DFU mode - IF - usb power remains during the reboot. If not, execute step 2 again.Open up the Betaflight configurator.Go to firmware flasher, select &quot;No reboot sequence&quot;On F4 targets disable &quot;Full Chip Erase&quot;. Use the config reset in Configurator later. (#200 reports the issue.)Load Firmware [Local]Browse to and select the proper hex file. (betaflight_REVO.hex for the revo, for example)Click flash firmware.The board should start flashing. First indicating an erase, then flash and finally verification.Once flashed your board will reboot, but you may need to install the STM VCP driver (see below) for Betaflight Configurator to connect to the board. "},{"title":"Installing STMicro Virtual Com Port (VCP) Driver under Windows:​","type":1,"pageTitle":"Installing Betaflight","url":"/betaflight.com/docs/wiki/archive/Installing-Betaflight#installing-stmicro-virtual-com-port-vcp-driver-under-windows","content":"Many of the F7, F4 (REVO, ALIENFLIGHTF4, BLUEJAYF4, etc), and some F3 boards (SPRacingF3EVO, STM32DISCOVERY) utilise the STM32 Virtual Com Port (VCP) - a CDC serial implementation. This allows the UARTs on board to be utilised whilst the USB is connected. This requires the STM VCP driver to be installed so that the VCP to be recognised as an additional comm port on the PC.NOTE: this is similar to installing a USB serial driver, e.g. FTDI or SiLabs The STM32 VCP driver can be downloaded here --&gt; http://www.st.com/web/en/catalog/tools/PF257938 NOTE: Once you download and run the installation it has not installed the driver, merely unpacked the choice of drivers. Locate the installation directory and then run the EXE file pertaining to your system. e.g. C:\\Program Files (x86)\\STMicroelectronics\\Software\\Virtual comport driver\\Win8\\ &lt;- will have two files present. One for 64 bit systems (dpinst_amd64.exe) and one for 32 bit systems (dpinst_x86.exe). "},{"title":"Windows 10​","type":1,"pageTitle":"Installing Betaflight","url":"/betaflight.com/docs/wiki/archive/Installing-Betaflight#windows-10","content":"in many cases, the above might not work. installing Virtual COM port drivers from SiLabs will solve the issues:https://www.silabs.com/products/development-tools/software/usb-to-uart-bridge-vcp-drivers "},{"title":"Platform Specific: Linux​","type":1,"pageTitle":"Installing Betaflight","url":"/betaflight.com/docs/wiki/archive/Installing-Betaflight#platform-specific-linux","content":"Linux does not know the concept of product specific 'device drivers', so no driver installation is needed. But there are a couple of steps required to make the Betaflight configurator work on linux: Linux requires udev rules to allow write access to USB devices for users. If you are not familiar with udev rules don’t worry, we will walk you through the process in the proceeding steps using the command line interface (CLI). Note: you might need to install libatomic: $ sudo apt install libatomic1  Step 0:​ Without next command the configurator will not launch on at least ubuntu 20.04 and higher $ sudo usermod -a -G plugdev $USER  Step 1:​ Since we will be using the CLI, simply copy and paste this command into your terminal, it will create the required file for you: (echo '# DFU (Internal bootloader for STM32 MCUs)' echo 'ACTION==&quot;add&quot;, SUBSYSTEM==&quot;usb&quot;, ATTRS{idVendor}==&quot;0483&quot;, ATTRS{idProduct}==&quot;df11&quot;, MODE=&quot;0664&quot;, GROUP=&quot;plugdev&quot;') | sudo tee /etc/udev/rules.d/45-stdfu-permissions.rules &gt; /dev/null  The file created is /etc/udev/rules.d/45-stdfu-permissions.rules, which is used when your flight controller is in DFU mode. Step 2:​ Make sure you've got permissions to access your flight controller in non-DFU mode (borrowed from https://github.com/GoldenCheetah/GoldenCheetah/wiki/Allowing-your-linux-userid-permission-to-use-your-usb-device): Note: This example assumes that you know the device name of you USB device and that your userid has sudo privileges. In this example our Linux userid is user and we are on the server called machine. Our USB device is called /dev/ttyUSB0. Check the current permissions and owner/group of the device. [user@machine ~]$ ls -la /dev/ttyUSB0 crw-rw----. 1 root dialout 188, 0 Apr 3 21:16 /dev/ttyUSB0 For this configuration, the owner is root, the group is dialout and both the owner/group have read/write permissions. What you need to do is make your login userid part of the group associated with the USB device. For this case, we add the group dialout to our userid user using the usermod command. This command requires root privileges to run. [user@machine ~]$ sudo usermod -a -G dialout user You will need to log out then log back in and now you should have access to the device. Troubleshooting installation problems:​ If you see your ttyUSB device disappear right after the board is connected, chances are that the ModemManager service (that handles network connectivity for you) thinks it is a GSM modem. If this happens, you can issue the following command to disable the service: sudo systemctl stop ModemManager.service  If your system lacks the systemctl command, use any equivalent command that works on your system to disable services. You can likely add your device ID to a blacklist configuration file to stop ModemManager from touching the device, if you need it for cellural networking, but that is beyond the scope of cleanflight documentation. If you see the ttyUSB device appear and immediately disappear from the list in Cleanflight Configurator when you plug in your flight controller via USB, chances are that NetworkManager thinks your board is a GSM modem and hands it off to the ModemManager daemon as the flight controllers are not known to the blacklisted Sometimes, after other programs (configuration scripts, ESC firmware uploaders) have used the port that your flight controller is recognised as, and (i.e. /dev/ttyUSB0 or /dev/ttyACM0), and change modes on the port without resetting them. This leaves the configurator unable to connect to the flight controller, even after unplugging / replugging the USB cable. In this situation, the following command will reset the port settings to defaults: stty sane -F /dev/&lt;your port&gt;  "},{"title":"Diagnosing if your CPU is dead, or just missing firmware (Blue LED of Death)​","type":1,"pageTitle":"Installing Betaflight","url":"/betaflight.com/docs/wiki/archive/Installing-Betaflight#diagnosing-if-your-cpu-is-dead-or-just-missing-firmware-blue-led-of-death","content":"The symptoms between a fried CPU, and a CPU that is missing firmware is almost identical, with the exception that it is impossible to flash firmware to a dead CPU. CPUs may arrive from the manufacture dead, die when it first powers on do to a manufacturing defect, or die when if you wire up your board incorrectly (e.g. connect the 5v rail or battery power to a UART port). When a CPU dies, you may or may not see magic smoke. The STM32 chipset requires 3.3v of power to operate, and so on-board dedicated voltage regulators are required to provide stable power to the CPU during operation. Since this is usually the only thing on the board requiring this voltage, you can determine if the CPU is fried using the following two methods: Use a multimeter to measure the resistance between the 3.3v pad on your flight controller, and any ground pin on the board. The resistance should be in the mid to high kilo-ohm range if the CPU is operational. The resistance will be near zero (1-3 ohms) if the CPU is dead.If you do not have a multimeter available, find the 3.3v voltage regulator on your flight controller, and connect it to power (i.e. USB). If the temperature remains low (about 30C), then the flight controller is probably okay. If temperatures rise quickly (between 80-150C), then the CPU is probably dead. Video Tutorial:  "},{"title":"Additional Tutorial Links​","type":1,"pageTitle":"Installing Betaflight","url":"/betaflight.com/docs/wiki/archive/Installing-Betaflight#additional-tutorial-links","content":"Start with the following video that gives a very comprehensive guide on Betaflight and the best practice approach for it's configuration:http://www.youtube.com/watch?v=xSzO6HP6yzs New Video by Joshua Bardwell on the BetaFlight Configurator:https://www.youtube.com/watch?v=VAHUZZXIn9o There is a step-by-step guide on how to flash the flight controller with Betaflight here: http://quadquestions.com/blog/2015/12/25/betaflight_flashing/ How to flash Betaflight on CC3D video guide:http://www.rcgroups.com/forums/showpost.php?p=34196999&amp;postcount=21477 There is a topic on this FAQ page called &quot;Which HEX target do I download and flash to my Flight Controller&quot; that will help when it comes to deciding which file to use on your Flight Controller board. Also check the Boards (Wiki menu at the right) from more info on the FC board you have. Most have information (Note: these wiki pages are to be maintained by the FC Designed/Seller or by dedicated Users) but some are blank. "},{"title":"IRC Tramp","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/IRC-Tramp","content":"","keywords":""},{"title":"Prerequisite​","type":1,"pageTitle":"IRC Tramp","url":"/betaflight.com/docs/wiki/archive/IRC-Tramp#prerequisite","content":"You own a IRC Tramp HV which has at least firmware version 1.26. Units distributed during summer 2016 at several FPV events do not have support yet for the serial interface. Units produced and shipped directly from china after the official launch should have version 1.26. For the serial interface to work on firmware 1.26, the TNR tag should be disconnected, otherwise, the tag is actively preventing the serial interface to work. This limitation will be discarded in the next batch starting mid february and including firmware version 1.27. So basically, here is the checklist: firmware &gt;= 1.26disconnect TNR tag on firmware == 1.26 Please note: the firmware version included is not necessarily the one on the label. Mine reads &quot;Batch 01&quot; and &quot;1.22&quot;. However, after reading the firmware version (through the serial interface), it turns out to be &quot;1.26&quot;. "},{"title":"Setup​","type":1,"pageTitle":"IRC Tramp","url":"/betaflight.com/docs/wiki/archive/IRC-Tramp#setup","content":"Wiring Just wire the Tramp T (telemetry) wire to a free hardware UART (TX) port. Configuration The up to date configurator supports easy configuration of the SmartAudio on the selected port. Goto Ports tabSelect IRC Tramp from Peripherals drop down menuSpeed can be left at AUTO.  "},{"title":"IRC Tramp CMS guide​","type":1,"pageTitle":"IRC Tramp","url":"/betaflight.com/docs/wiki/archive/IRC-Tramp#irc-tramp-cms-guide","content":"The top menu for IRC Tramp VTX looks like this.While most of the entries are intuitive, there are several things that need additional explanation. "},{"title":"Status Line​","type":1,"pageTitle":"IRC Tramp","url":"/betaflight.com/docs/wiki/archive/IRC-Tramp#status-line","content":"The status line on the top menu page of Tramp VTX menu indicates current status of the vtx in the following format: * bc ffff tppp  where b : Current transmitting band, A (BOSCAM A), B (BOSCAM B), E (BOSCAM E), F (FatShark/NexWave) or 'R' (Raceband). c : Current transmitting channel, 1 through 8. ffff: Current transmitting frequency. t: Current thermal protection status. If thermal protection is in effect, this field is '*', otherwise space (' '). ppp: Current transmitting RF power, numeric value in mW (milli-Watt). Note that the status line indicates &quot;running&quot; status of the VTX device, and values may be different from band, channel and power setting entries below the status line. "},{"title":"Thermal Protection​","type":1,"pageTitle":"IRC Tramp","url":"/betaflight.com/docs/wiki/archive/IRC-Tramp#thermal-protection","content":"When the thermal protection is in effect, the device will automatically regulate the RF power. Therefore, value set by POWER entry will not be displayed on the status line. "},{"title":"Modify VTX Settings (TBS Unify / TrampHV) using FrSky TARANIS Betaflight LUA script​","type":1,"pageTitle":"IRC Tramp","url":"/betaflight.com/docs/wiki/archive/IRC-Tramp#modify-vtx-settings-tbs-unify--tramphv-using-frsky-taranis-betaflight-lua-script","content":"https://github.com/betaflight/betaflight-tx-lua-scripts/releases "},{"title":"Modify VTX Settings (TBS Unify / Tramp HV / RTC6705 ) using Spektrum VTX Setup Menu​","type":1,"pageTitle":"IRC Tramp","url":"/betaflight.com/docs/wiki/archive/IRC-Tramp#modify-vtx-settings-tbs-unify--tramp-hv--rtc6705--using-spektrum-vtx-setup-menu","content":"Any VTX that is configurable from CMS and CLI can also be controlled using a Spektrum TX with VTX Setup menues, introduced in betaflight 3.3.0.  If you are using telemetry and a SPM4649T receiver, you can also see the current VTX status on the same VTX Setup screen. This can be very useful if VTX settings are changed in some other way than from the Transmitter VTX Setup menu.  "},{"title":"Modify VTX Configuration (TBS Unify / TrampHV) using CLI Settings​","type":1,"pageTitle":"IRC Tramp","url":"/betaflight.com/docs/wiki/archive/IRC-Tramp#modify-vtx-configuration-tbs-unify--tramphv-using-cli-settings","content":"As of Betaflight version 3.3.0, CLI settings to modify the VTX configuration are supported. See the VTX CLI Settings page for more information. "},{"title":"Launch Control","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Launch-Control","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Launch Control","url":"/betaflight.com/docs/wiki/archive/Launch-Control#description","content":"Adds a race start assistance system that allows the pilot to pitch forward and then release the sticks with the quad holding position for the race start. Available starting with Betaflight 4.0. "},{"title":"Safety​","type":1,"pageTitle":"Launch Control","url":"/betaflight.com/docs/wiki/archive/Launch-Control#safety","content":"While the quad is actively in Launch Control it may appear to be docile and safe. In reality it's anything but. You should treat it as if it's a powerful beast ready to leap ferociously at any point. Never take your hands off the controls and be prepared to disarm. Never stand close or allow others to. Follow all normal safety considerations. "},{"title":"Launch procedure:​","type":1,"pageTitle":"Launch Control","url":"/betaflight.com/docs/wiki/archive/Launch-Control#launch-procedure","content":"Launch Control mode switch is enabledArmLeave throttle at minimumPitch quad forward to desired angleRecenter sticksAdvance throttle to launch Example video: https://youtu.be/_S0rn3zcN0Q "},{"title":"Mode switch configuration:​","type":1,"pageTitle":"Launch Control","url":"/betaflight.com/docs/wiki/archive/Launch-Control#mode-switch-configuration","content":"For Launch Control to be enabled the mode must be configured. The state of the mode is captured at arming so the pilot has multiple options on how he wishes to set it up. Options include a dedicated switch, a momentary toggle held when arming, tied directly to the arming switch, or even always active. "},{"title":"Parameters:​","type":1,"pageTitle":"Launch Control","url":"/betaflight.com/docs/wiki/archive/Launch-Control#parameters","content":"launch_control_mode: Allows NORMAL (default), PITCHONLY, and FULL. NORMAL: designed for launching off the ground balanced on a bottom-mount battery. Roll and pitch will hold position. Yaw control is available but the PID controller will not attempt to hold yaw position.PITCHONLY: for use with race launch stands or possibly off the gound with top-mount batteries. Disables roll and yaw completely. Also the front motors are kept at idle to minimize chances of falling off the stand. Do not use this mode if trying to balance off a battery as the quad will fall forward since the front motors will not react.FULL: Like NORMAL but adds position holding for yaw as well. Use care with this option as yaw tends to windup if left too long. launch_trigger_allow_reset: Allows OFF and ON (default). Determines the launch triggering reset behavior. After a launch is triggered we want to disable the feature so that if the pilot crashes and then re-arms Launch Control will not be active. ON: Allows the pilot to reset the Launch Control trigger by turning the mode switch off and back on again while disarmed. Use this method if you've configured your mode switch in such a way that you can optionally enable it.OFF: Launch Control cannot be reset and will be disabled until a power cycle or flight controller reboot. This method should be used if you can't independently disable the mode like if it's enabled all the time or tied to the arming switch. As long as the launch has not been triggered the pilot can arm/disarm multiple times and the feature will still be available. So if the quad was to fall off the blocks for example the pilot can reposition and simply re-arm. launch_trigger_throttle_percent: Allows 0 - 90 (default 20). Adds a throttle deadband below which Launch Control will be active. The launch will be triggered once throttle exceeds the configured percent. Higher values provide a more aggressive launch as the throttle will &quot;jump&quot; to the configured percentage. Setting to 0 will cause the trigger to be min_check. The default value of 20 provides a good initial deadband to prevent accidental triggering while still providing a good &quot;jump&quot; off the blocks. Be careful with higher values as the quad can be quite aggressive when launching. launch_control_gain: Allows 0 - 200 (default 40). Determines the Iterm gain used to hold position. If the quad has difficulty holding position then increase this value. Be careful with high values as windup can occur. If you hear the motors continuing to speed up while position is being held then the gain is likely too high. Basically you want to use the lowest value that works acceptably. While raised up in the launch position it's normal for the quad to move around a little. In this position it's very susceptible to wind in particular. Normally a little motion won't be a problem and it's not necessary to try to tune this with increased gain. "},{"title":"Accelerometer Integration​","type":1,"pageTitle":"Launch Control","url":"/betaflight.com/docs/wiki/archive/Launch-Control#accelerometer-integration","content":"If the accelerometer is enabled then additional feedback will be presented in the OSD that indicates the current pitch angle. The pilot can use this to fine tune their launch angle for consistency. launch_angle_limit: Allows 0 - 80 (default 0) Allows the pilot to optionally set an angle limit that will limit the forward pitch. Provides an assist to help the pilot attain a consistent launch angle. It is simply a limit that prevents any more forward pitch when reached. The quad will not actively or automatically go to this angle. Pilot can still adjust the angle lower if desired. Setting to 0 disables the limit. "},{"title":"OSD Integration​","type":1,"pageTitle":"Launch Control","url":"/betaflight.com/docs/wiki/archive/Launch-Control#osd-integration","content":"If the warnings element is enabled then when Launch Control is active a LAUNCH indicator will be displayed. Also make sure that the Launch Control warning option is enabled (osd_warn_launch_control = ON). Additionally if the accelerometer is enabled the current pitch angle will be appended like LAUNCH 25. Added in 4.2: The OSD warning will start to blink when the throttle gets within 10% of the trigger percentage. Provides a visual indication that the throttle is close to triggering a launch. All of the Launch Control parameters can be adjusted in the OSD menus. They're under PROFILE -&gt; MISC PP -&gt; LAUNCH CONTROL. "},{"title":"NOTES​","type":1,"pageTitle":"Launch Control","url":"/betaflight.com/docs/wiki/archive/Launch-Control#notes","content":"Launch Control will not activate if any of the following are true: Arming while in a flight mode other than acroMOTOR_STOP is enabled and the motors are not spinning when armed (airmode is off)3D feature is enabledUsing stick arming "},{"title":"Led Strip Functionality","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/LED-Strip-Functionality","content":"","keywords":""},{"title":"Betaflight 4.0​","type":1,"pageTitle":"Led Strip Functionality","url":"/betaflight.com/docs/wiki/archive/LED-Strip-Functionality#betaflight-40","content":"Add crash flip recovery_led_warning, this can be used instead of a buzzer when crash flip recovery is active (AKA Turtle MODE). Added on the list of warnings to be shown on LED_STRIP. @watageek Please don't change the page title, as it is part of the URL that already have a reference to. "},{"title":"LED color by AUX channel​","type":1,"pageTitle":"Led Strip Functionality","url":"/betaflight.com/docs/wiki/archive/LED-Strip-Functionality#led-color-by-aux-channel","content":"Some race events require each craft to be identified by LED colors, and it is convenient to have an AUX channel to change the color. For example, the first FAI drone event in Shenzhen requests one of Red, Blue, Yellow, Green, Purple and White for this purpose. https://github.com/betaflight/betaflight/issues/6896#issuecomment-427647756 gives a solution based on available LED strip facility. "},{"title":"LED color based on VTX frequency​","type":1,"pageTitle":"Led Strip Functionality","url":"/betaflight.com/docs/wiki/archive/LED-Strip-Functionality#led-color-based-on-vtx-frequency","content":"When using TBS SmartAudio or IRC Tramp you can have the LEDs change color based on your VTX channel by enabling the VTX overlay in the LED strip tab. Betaflight 3.3 The following table shows what color each frequency is assigned to. Frequency range\tDefault color\tColor index&lt;= 5672\tWhite\t1 &gt; 5672 &lt;= 5711\tRed\t2 &gt; 5711 &lt;= 5750\tOrange\t3 &gt; 5750 &lt;= 5789\tYellow\t4 &gt; 5789 &lt;= 5829\tGreen\t6 &gt; 5829 &lt;= 5867\tBlue\t10 &gt; 5867 &lt;= 5906\tDark violet\t11 &gt; 5906\tDeep pink\t13 The default color can be changed by double-clicking the color and moving the Hue slider or by using the color command in the CLI. "},{"title":"Example​","type":1,"pageTitle":"Led Strip Functionality","url":"/betaflight.com/docs/wiki/archive/LED-Strip-Functionality#example","content":"color 3 10,0,255 color 4 38,0,255  color &quot;color_index&quot; &quot;Hue&quot;, &quot;Saturation&quot;, &quot;Value&quot;  "},{"title":"How to set up Throttle functionality with LEDs​","type":1,"pageTitle":"Led Strip Functionality","url":"/betaflight.com/docs/wiki/archive/LED-Strip-Functionality#how-to-set-up-throttle-functionality-with-leds","content":"For the selected LED, select function Color, then activate the Color Modifier that's labeled Throttle by default. After that, it's possible to select another channel which will control the fading of the selected LED (drop-down menu). After that, choose one of the 16 colors. This is the color which is shown when the chosen channel is at its Middle value. The color with the previous number is shown when the chosen channel is at its Minimum value, and the color with the next number is shown when the channel is at its Maximum value. The colors loop around if using channel 0 or 15. The fade is linear of all HSV values, so it's easy to fade from completely black to bright yellow or red. "},{"title":"Change LED color with an aux channel.​","type":1,"pageTitle":"Led Strip Functionality","url":"/betaflight.com/docs/wiki/archive/LED-Strip-Functionality#change-led-color-with-an-aux-channel","content":"By using an aux channel instead of throttle as the color modifier you can use an aux channel on your radio to adjust the LED color. When using the Color function the aux channel will only fade through the previous color to the next color with the selected color being at the center position of the aux channel. By changing the LED Function to Arm State the aux channel will fade through all possible colors. "},{"title":"Mixer Types","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Mixer-Types","content":"","keywords":""},{"title":"Mixer type: LEGACY (Current mixer)​","type":1,"pageTitle":"Mixer Types","url":"/betaflight.com/docs/wiki/archive/Mixer-Types#mixer-type-legacy-current-mixer","content":"set mixer_type = LEGACY &lt;--- enabled by default  "},{"title":"Mixer type: LINEAR​","type":1,"pageTitle":"Mixer Types","url":"/betaflight.com/docs/wiki/archive/Mixer-Types#mixer-type-linear","content":"set mixer_type = LINEAR &lt;--- to enable  "},{"title":"Mixer type DYNAMIC:​","type":1,"pageTitle":"Mixer Types","url":"/betaflight.com/docs/wiki/archive/Mixer-Types#mixer-type-dynamic","content":"set mixer_type = DYNAMIC &lt;--- to enable  Note: The above graph is the ideal scenario of dynamic mixer, but the actual result depends of PIDsum contribution from other axes. If only 1 axis asks for full authority the result will be exactly same like with LINEAR mixer. The optimal results are achieved, when multiple axes are requesting authority. Short summary of differences between mixers: LEGACY tries to keep requested throttle position as long as possible, till the point where it cannot maintain current throttle position it will drastically start to change throttle to still get desired authority. That is also the reason of sharper transition. LINEAR will start changing throttle earlier in order to prevent these steep transitions at the end. In other words it smooths out the thrust increase/decrease for desired correction. DYNAMIC This is another experimental mixer variation of mixer from tylercorleone. It behaves very similar to linear mixer, but much smarter. When all of the PIDsum comes from single axis it will behave exactly same as linear mixer, but when PIDsum to mixer is combined from other axes the mixer will adapt itself to stay closer to requested throttle level. "},{"title":"Mixer Support","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Mixer-Support","content":"","keywords":""},{"title":"The future​","type":1,"pageTitle":"Mixer Support","url":"/betaflight.com/docs/wiki/archive/Mixer-Support#the-future","content":"Ultimately, motor and servo mixes will be dynamically loaded by configurator, and rarely used mixers are likely to resurrect (if devs find them useful enough). "},{"title":"The support matrix (x = not included, o = included)​","type":1,"pageTitle":"Mixer Support","url":"/betaflight.com/docs/wiki/archive/Mixer-Support#the-support-matrix-x--not-included-o--included","content":"Mixer\tF1 (*1)\tF3\tF4 &amp; F7\tNoteQUADX\to\to\to QUADX 1234\to\to\to QUAD+\to\to\to Tricopter\to\to\to Gimbal\to\to\to Hex +\tx\tx\to Hex X\to\to\to Hex H\tx\tx\to Octo Flat +\tx\tx\to Octo Flat X\tx\tx\to Flying Wing\to\to\to Airplane\to\to\to\tSingle prop (inconsistent with graphic) Heli 120\tx\tx\tx\tNo code Heli 90\tx\tx\tx\tNo code Single Copter\tx\tx\tx\tInsufficient code (no mmix) Dual Copter\tx\tx\to\tDoesn't reset without #3178 Bicopter\tx\tx\to\tDoesn't reset without #3178 V-tail Quad\to\to\to A-tail Quad\to\to\to Y4\to\to\to Y6\tx\tx\to Octo X8\tx\tx\to\tCan be emulated by mmix (see below) PPM to SERVO\tx\tx\tx\tNo code, can be emulated by smix (see below) Custom\to\to\to Custom Airplane\to\to\to Custom Tricopter\to\to\to\t *1: CJMCU and MICROSCISKY only supports QUAD mixer. Octo X8 emulation​ mixer custom mmix reset mmix 0 1.000 -1.000 1.000 -1.000 mmix 1 1.000 -1.000 -1.000 1.000 mmix 2 1.000 1.000 1.000 1.000 mmix 3 1.000 1.000 -1.000 -1.000 mmix 4 1.000 -1.000 1.000 1.000 mmix 5 1.000 -1.000 -1.000 -1.000 mmix 6 1.000 1.000 1.000 -1.000 mmix 7 1.000 1.000 -1.000 1.000  PPM to SERVO emulation​ An example of direct channel mapping. mixer customairplane smix reset smix 0 0 4 100 0 0 100 0 smix 1 1 5 100 0 0 100 0 smix 2 2 6 100 0 0 100 0 smix 3 3 7 100 0 0 100 0 smix 4 4 8 100 0 0 100 0 smix 5 5 9 100 0 0 100 0 smix 6 6 10 100 0 0 100 0 smix 7 7 11 100 0 0 100 0  Other emulations​ It is easy to create a set of mmix/smix for a given mixer configuration; take corresponding lines from the source src/main/flight/{mixer,servos}.c and convert them to CLI format. "},{"title":"Multicopter Spazzing Out?","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Multirotor-Spazzing-Out","content":"","keywords":""},{"title":"Flight Controller Orientation.​","type":1,"pageTitle":"Multicopter Spazzing Out?","url":"/betaflight.com/docs/wiki/archive/Multirotor-Spazzing-Out#flight-controller-orientation","content":"Remove your props!Plug your multirotor into your computerNavigate to the Betaflight configuratorIn the Setup tab, you should see a 3D model of a quadcopterMove your model around in your hand, verifying that each movement correctly corresponds to whats shown on the screen (with the arrow aligning with what is supposed to be the front of your quad)If this is NOT correct: Navigate to the Configuration tabDepending on which way the board was misaligned, offset the angle under &quot;Board and Sensor Alignment&quot;Normally this means, &quot;Yaw Degrees&quot; gets set to &quot;-90&quot; or &quot;90&quot;, or whatever angle your board is offset bySave and reboot, verify direction in Setup and repeat as needed Notes: Board alignment should be indicated by an silkscreen arrow, but always use BF for reference.There is no need to plug in the battery for this check, and if you do, make sure to remove props "},{"title":"Prop Direction.​","type":1,"pageTitle":"Multicopter Spazzing Out?","url":"/betaflight.com/docs/wiki/archive/Multirotor-Spazzing-Out#prop-direction","content":"According the the motor direction reference image at the bottom, look at each individual propIf you spin the appropriate motor in the correct direction, the higher (leading edge) of the prop should be forwards in the direction of travel.Opposing motor corners in a quad must have the same direction propeller.If this is NOT correct: Change the props to be appropriate, verify once again before powering. Notes: NEVER ATTEMPT TO CHECK PROP DIRECTION WHILE PLUGGED INIn normal configuration, this means the front two motors should spin inside towards the front and vice versaOnce again, running reversed props, everything should spin in the opposite direction (Towards the sides)  YOU MUST REMOVE PROPELLERS BEFORE FOLLOWING ANY OF THE INSTRUCTIONS BELOW!​ "},{"title":"Motor Direction.​","type":1,"pageTitle":"Multicopter Spazzing Out?","url":"/betaflight.com/docs/wiki/archive/Multirotor-Spazzing-Out#motor-direction","content":"Remove your props!Plug your multirotor into your computerNavigate to the Betaflight configuratorPlug in your LiPo (PROPS OFF)Navigate to the Motors tabClick the checkbox verifying that you've taken off your propsSlowly raise the master slider until all 4 motors are just barely spinning smoothlyTake your finger and make sure that they follow the direction indicated by the reference image at the bottomIf this is NOT correct: Make note of the corresponding motor numbers that are spinning the wrong wayOption 1: Disconnect from betaflight and open the BLHeli configurator (Must have supported ESCs)Click &quot;Read Setup&quot;For &quot;Motor Direction&quot; select &quot;Reversed&quot; for the motor numbers that need itClick &quot;Write Setup&quot; Option 2: Reverse any 2 of the 3 motor wires on your ESC by resoldering them Notes: If you are running reversed props, everything should spin in the opposite direction and you must have turned it on in the configuration tab) "},{"title":"Motor Order.​","type":1,"pageTitle":"Multicopter Spazzing Out?","url":"/betaflight.com/docs/wiki/archive/Multirotor-Spazzing-Out#motor-order","content":"Remove your propsPlug your multirotor into your computerNavigate to the Betaflight configuratorPlug in your LiPo (PROPS OFF)Navigate to the Motors tabClick the checkbox verifying that you've taken off your propsRaise each slider one by oneThe number on the slider should be the same as the motor that it is spinning, according the the reference image below (or the image in the configurator)If this is NOT correct Grab a peice of paper and make a chart for any that differ|| Slider thats being moved ||VS|| The motor number that actually spins ||Open CLI Type resourceScroll up find the list that looks like resource MOTOR 1 ___type resource MOTOR &quot;The motor number that actually spins&quot; &quot;the letter-number combo next to the original slider #&quot;For example, if I moved slider 1 and motor 2 spun up, then when I typed resource, I saw:resource MOTOR 1 A03resource MOTOR 2 B00I'd type resource MOTOR 2 A03 and hit enterContinue this until all motors are remaped, than type save to save the configuration Notes: https://www.youtube.com/watch?v=z5aO-3_n-Hs Reference Image (this is the Betaflight default):  "},{"title":"OSD & CMS Adjusting Screen","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/OSD-and-CMS-Adjusting-Screen","content":"","keywords":""},{"title":"Adjusting CMS Screen​","type":1,"pageTitle":"OSD & CMS Adjusting Screen","url":"/betaflight.com/docs/wiki/archive/OSD-and-CMS-Adjusting-Screen#adjusting-cms-screen","content":"Different display devices have different characteristics, so you may be experiencing inconvenience such as displayed items truncated at the right edge, top most line is only displayed lower half, and so on. There are CLI variables that you can tweak to fit the content inside your screen. MAX/AB7456 based FC-integrated (SPI-connected) OSD specific​ vcd_v_offsetAdjust the vertical position of the first row. vcd_h_offsetAdjust the horizontal position of the left edge. displayport_max7456_col_adjustAdjust number of characters in a line. displayport_max7456_row_adjustAdjust number of rows on the screen. External OSD (DISPLAYPORT capable MWOSD and others)​ displayport_msp_col_adjustAdjust number of characters in a line. displayport_msp_row_adjustAdjust number of rows on the screen. Example​ Original Screen Screen with displayport_max7456_col_adjust = -2 "},{"title":"OSD Font Upload Problem","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/OSD-Font-Upload-Problem","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"OSD Font Upload Problem","url":"/betaflight.com/docs/wiki/archive/OSD-Font-Upload-Problem#description","content":"Betaflight-configurator font upload function via USB doesn't seem to work on some flight controllers.  No matter how many times you upload the font, the OSD still display the default font. "},{"title":"Resolution​","type":1,"pageTitle":"OSD Font Upload Problem","url":"/betaflight.com/docs/wiki/archive/OSD-Font-Upload-Problem#resolution","content":"You need the battery to be plugged in so the function works properly (PROPS REMOVED!). Plug the battery in FIRST, then connect to USB. "},{"title":"Most probable Cause​","type":1,"pageTitle":"OSD Font Upload Problem","url":"/betaflight.com/docs/wiki/archive/OSD-Font-Upload-Problem#most-probable-cause","content":"Some flight controller designed don't power the OSD chip properly (or at all) when connected only to USB. The OSD font is stored inside the OSD chip so it must be powered and communicating with the rest of the flight controller so that the font can be updated. Concerned Board The following board/FC are known to have font upload problem Board Name\tTarget\tOSD chip\tLipo in fix issue ?\tProduct URLDAL RC F405 AIO\tDALRCF405\tN/A\tyes\tdalrc DAL RC F722Dual\tDALRCF722DUAL\tN/A\tyes Speedy Bee F7 AIO\tSPEEDYBEEF7\tN/A\tyes\tSpeedy Bee F7 Diatone Mamba F405 Mini FC\tFURYF4OSD\tN/A\tyes\tdiatone Source Issue link "},{"title":"Paralyze For Team Races","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Paralyze-for-Team-Races","content":"Paralyze For Team Races During team relay races it's unsafe to retrieve crashed quads because the course is continuously hot. In order to safely fly a backup quad with the primary quad crashed in the field (but powered up) it's necessary to: Disable arming, so that the crashed quad doesn't unintentionally arm when taking off with the backup. This is specifically a problem when a transmitter can send signals to all powered up receivers (like FrSky ACCST D8/D16 and others)and change the VTX to an unused (graveyard) channel with low power output so it doesn't interfere with the backup quad. Betaflight 3.5 introduced a new mode called paralyze which disables arming. It can only be invoked while the quad isn't armed. Paralyze is a sticky mode, so once it's active, the FC has to be power cycled. In order to invoke it, the mode needs to be in a disengaged state at least once, so that forgetting to flip the switch back after crashing doesn't immediately invoke paralyze on the backup quad. Paralyze itself only takes care of preventing arming. To also put the VTX into pit mode and keep it there, you can link it to Paralyze in the CLI: aux 2 39 2 1700 2100 0 45 The aux channel (2 in this case) and the range (1700-2100 here) doesn't matter as 45 at the end of the command means mode 39 (VTX Pit mode) is linked to 45 (Paralyze). Whenever 45 is active, 39 is activated as well and therefore sticky like Paralyze. Make sure that VTX Pit mode is set up correctly by specifying a pit mode frequency in CLI: set vtx_pit_mode_freq = 5917 ","keywords":""},{"title":"Pinio & PinioBox","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Pinio-and-PinioBox","content":"","keywords":""},{"title":"Overview​","type":1,"pageTitle":"Pinio & PinioBox","url":"/betaflight.com/docs/wiki/archive/Pinio-and-PinioBox#overview","content":"PINIO is an abstraction of simple GPIO (General Purpose I/O) pin facility, and PINIO BOX is a facility to associate boxes (modes) to PINIO.Most targets are build to be capable of configuring up to four pins for the PINIO facility, which can then be controlled by the PINIO BOX facility. "},{"title":"PINIO​","type":1,"pageTitle":"Pinio & PinioBox","url":"/betaflight.com/docs/wiki/archive/Pinio-and-PinioBox#pinio","content":"An MCU pin can be assigned to PINIO by resource CLI command. resource PINIO &lt;index&gt; &lt;pinID&gt;  Example of resource with PINIO: [...] resource PINIO 1 A1 resource PINIO 2 A8 resource PINIO 3 C9 resource PINIO 4 D2 [...]  "},{"title":"PINIO CONFIG​","type":1,"pageTitle":"Pinio & PinioBox","url":"/betaflight.com/docs/wiki/archive/Pinio-and-PinioBox#pinio-config","content":"I/O configuration of each pin is specified by pinio_config CLI variable, which is a comma separated list/array of 8-bit values. MSB represents inversion, and remaining 7-bits specify I/O mode as defined in drivers/pinio.h (Only push-pull output is defined for this PR). PINIO CONFIG\tHEX\tDECPINIO_CONFIG_OUT_INVERTED\t0x80\t128 PINIO_CONFIG_MODE_MASK\t0x7F\t127 PINIO_CONFIG_MODE_OUT_PP\t0x01\t1 Note: Values can be combined together Example of pinio_config set pinio_config = 1,129,1,1  Sets Output-Push-Pull for PINIO #1, #3 and #4, and Inverted Output-Push-Pull for PINIO #2. Default value is 1 (Output-Push-Pull). "},{"title":"PINIO BOX​","type":1,"pageTitle":"Pinio & PinioBox","url":"/betaflight.com/docs/wiki/archive/Pinio-and-PinioBox#pinio-box","content":"CLI variable pinio_box, comma separated list of permanent ID of boxes, associate the boxes to corresponding PINIOs. Once associated, the boxes's activation status are reflected to the associated PINIOs (and then to pins). Since the PINIO BOX facility has it's own capability of monitoring activation state of boxes, it operates independently from what boxes are meant for. (In other words, the PINIO BOX adds PINIO capability to boxes.) Permanent IDs 40 through 43 are user defined boxes, which are activated and appear as USER1 through USER4 in the list of boxes at places such as Modes tab in configurator. Example of pinio_box set pinio_box = 0, 39, 43, 255  With this assignment, PINIO #1 through #4 are associated with boxes as follow. PINIO\tDescription\tPermanent ID1\tARM\t0 2\tVTX PIT MODE\t39 3\tUSER4\t43 4\tBOXID_NONE\t255 For permanent ID of boxes (or AUX modes), the table below is based on msp/msp_box.c. Box\tMode\tID\tNotesBOXARM\tARM\t0 BOXANGLE\tANGLE\t1 BOXHORIZON\tHORIZON\t2 BOXBARO\tBARO\t3 BOXANTIGRAVITY\tANTI GRAVITY\t4 BOXMAG\tMAG\t5 BOXHEADFREE\tHEADFREE\t6 BOXHEADADJ\tHEADADJ\t7 BOXCAMSTAB\tCAMSTAB\t8 BOXCAMTRIG\tCAMTRIG\t9\t(removed) BOXGPSHOME\tGPS HOME\t10\t(removed) BOXGPSHOLD\tGPS HOLD\t11\t(removed) BOXPASSTHRU\tPASSTHRU\t12 BOXBEEPERON\tBEEPER\t13 BOXLEDMAX\tLEDMAX\t14\t(removed) BOXLEDLOW\tLEDLOW\t15 BOXLLIGHTS\tLLIGHTS\t16\t(removed) BOXCALIB\tCALIB\t17 BOXGOV\tGOVERNOR\t18\t(removed) BOXOSD\tOSD DISABLE SW\t19 BOXTELEMETRY\tTELEMETRY\t20 BOXGTUNE\tGTUNE\t21\t(removed) BOXRANGEFINDER\tRANGEFINDER\t22\t(removed) BOXSERVO1\tSERVO1\t23 BOXSERVO2\tSERVO2\t24 BOXSERVO3\tSERVO3\t25 BOXBLACKBOX\tBLACKBOX\t26 BOXFAILSAFE\tFAILSAFE\t27 BOXAIRMODE\tAIR MODE\t28 BOX3D\tDISABLE / SWITCH 3D\t29 BOXFPVANGLEMIX\tFPV ANGLE MIX\t30 BOXBLACKBOXERASE\tBLACKBOX ERASE (&gt;30s)\t31 BOXCAMERA1\tCAMERA CONTROL 1\t32 BOXCAMERA2\tCAMERA CONTROL 2\t33 BOXCAMERA3\tCAMERA CONTROL 3\t34 BOXFLIPOVERAFTERCRASH\tFLIP OVER AFTER CRASH\t35 BOXPREARM\tPREARM\t36 BOXBEEPGPSCOUNT\tBEEP GPS SATELLITE COUNT\t37 BOX3DONASWITCH\t3D ON A SWITCH\t38\t(removed) BOXVTXPITMODE\tVTX PIT MODE\t39 BOXUSER1\tUSER1\t40 BOXUSER2\tUSER2\t41 BOXUSER3\tUSER3\t42 BOXUSER4\tUSER4\t43 BOXPIDAUDIO\tPID AUDIO\t44 BOXPARALYZE\tPARALYZE\t45 BOXGPSRESCUE\tGPS RESCUE\t46 BOXACROTRAINER\tACRO TRAINER\t47 BOXVTXCONTROLDISABLE\tDISABLE VTX CONTROL\t48 BOXLAUNCHCONTROL\tLAUNCH CONTROL\t49 BOXMSPOVERRIDE\tMSP OVERRIDE\t50\t Note: Value 255 is defined as BOXID_NONE which specifies the specified slot is not used. "},{"title":"Examples​","type":1,"pageTitle":"Pinio & PinioBox","url":"/betaflight.com/docs/wiki/archive/Pinio-and-PinioBox#examples","content":"These are some general examples. Some inbuilt or external devices/modules come with a dedicated pin/wire to enable/disable it. This depends on the device, but such a pin/wire is necessary for the PINIO function to work the way it is supposed to. On some devices this pin needs to be set HIGH/ON/1 (about 3,3V ) to enable it, on others, it needs to be LOW/OFF/0 (about 0 V) to do the same. This really depends on the device. "},{"title":"Find already defined PINIO functions​","type":1,"pageTitle":"Pinio & PinioBox","url":"/betaflight.com/docs/wiki/archive/Pinio-and-PinioBox#find-already-defined-pinio-functions","content":"Some flight controller targets come with PINIOs preconfigured, for example to switch the camera, the VTX supply voltage or an inbuilt Bluetooth device. Check the unified target configuration of your flight controller or use the resource command on the running board, to find any existing PINIOs -- if any. You may find something like resource PINIO 1 B00 or PINIO 1 B00. This shows us, that there is already a PINIO with the index of 1 (PINIO #1). If you want to add additional PINIOs, make sure not to remove existing ones in the process, by incrementing the index! "},{"title":"Disable internal Bluetooth device, when craft gets armed​","type":1,"pageTitle":"Pinio & PinioBox","url":"/betaflight.com/docs/wiki/archive/Pinio-and-PinioBox#disable-internal-bluetooth-device-when-craft-gets-armed","content":"Most flight controller targets with an inbuilt Bluetooth module, are already preconfigured, so there is often no need to do anything at all! Still, it may be interesting to find out, if and how it is configured. The configuration may look like this: # resource [...] resource PINIO 1 B00 [...] # get pinio_config pinio_config = 129,1,1,1 Array length: 4 # get pinio_box pinio_box = 0,255,255,255 Array length: 4 Default value: 0,255,255,255  This is PINIO #1(mapped to pin B00), so we only look at the first of the four comma seperated values in the arrays. The value of pinio_box is 0, which -- according to the table above -- is set to the BOXARM box/mode. So if the craft gets armed, this gets activated, too. The value of pinio_config is 129 which -- very simply put -- means it is set to on/off mode and also gets inverted. Inverted means, is gets turned off, when the matching PINIO gets turned on -- and vice versa. So if the craft gets armed, the B00 pin will be set to.... LOW (about 0 V). In this example, this means, that the inbuilt Bluetooth module turns off, when it senses a LOW signal on this pin (simply because it's built this way). "},{"title":"Disable external Bluetooth UART-Adapter, when the craft gets armed​","type":1,"pageTitle":"Pinio & PinioBox","url":"/betaflight.com/docs/wiki/archive/Pinio-and-PinioBox#disable-external-bluetooth-uart-adapter-when-the-craft-gets-armed","content":"This is bascially the same as with the internal module. The only difference is, that you need to select a free pin to switch the device on and off and you need to know what type of signal (HIGH or LOW) your device expects. Let's say you decide to use the otherwise unused PPM pin to switch your newly added Bluetooth module, which comes with an additional pin/wire that may be labeled POWER or ENABLE. The documentation of the module tells you, that the signal on this pin needs to be LOW for the module to turn off. Please note, that there maybe pins on the breakout board of the Bluetooth module that aren't actually connected to anything! You also need to know if you already have on or more PINIO functions configured (see above!). # resource [...] resource PPM B09 [...] resource PINIO 1 C08 resource PINIO 2 C09 [...] # resource PPM none Resource is freed # resource PINIO 3 B09 Resource is set to B09 # get pinio_config pinio_config = 1,1,1,1 Array length: 4 # set pinio_config = 1,1,129,1 pinio_config set to 1,1,129,1 # get pinio_box pinio_box = 40,41,255,255 # set pinio_box = 40,41,0,255 pinio_box set to 40,41,0,255 # save  Some things to note here: There are already two PINIO functions set up, so the one we add will be #3. We set the third value of pinio_config from 1 to 129 (inversion), because the device shall switch off when this box/mode turns on. We set the third value of pinio_box from 255 to 0 because we want to activate this, when the device is armed (see table above!). Don't forget to save! "},{"title":"Switch Bluetooth device on, when in Pit Mode​","type":1,"pageTitle":"Pinio & PinioBox","url":"/betaflight.com/docs/wiki/archive/Pinio-and-PinioBox#switch-bluetooth-device-on-when-in-pit-mode","content":"This is the exact same setup as above, but instead of setting pinio_box for PINIO #3 to 0, it is set to 39. Now the Bluetooth module will turn on, when in pit mode. "},{"title":"Switch VTX on/off using a USERn function controlled by the sender​","type":1,"pageTitle":"Pinio & PinioBox","url":"/betaflight.com/docs/wiki/archive/Pinio-and-PinioBox#switch-vtx-onoff-using-a-usern-function-controlled-by-the-sender","content":"This time, we want to switch the VTX with an actual switch on the sender. For this to work, we need A VTX that comes with a pin to switch it off. A function on the flight controller board that allows to switch off the supply voltage for the VTX. A simple circuit with a transistor, that gets placed between VTX supply voltage and VTX. There are ready made modules like &quot;RealPit&quot; available for this. For this, we use one of the BOXUSER&lt;n&gt; modes/boxes (IDs 40 to 43). This will add a matching User mode/function in the Modes tab of the Configurator, which can then be mapped to a channel on the sender. Let's say we have a &quot;clean&quot; flight controller without any preconfigured PINIOs or User functions and the PPM pin is the one to be used for this: #resource [...] resource PPM B03 [...] # resource PPM none Resource is freed # resource PINIO 1 B03 Resource is set to B03 # get pinio_box pinio_box = 255,255,255,255 # set pinio_box = 40,255,255,255 pinio_box set to 40,255,255,255 # save  Some things to note here: We don't change pinio_config, since the example VTX will switch on when the pin is pulled HIGH. So the default value of 1 is fine. We set the first value of pinio_box to 40, since this is the first and only User function on this board (again, see table above!). The only thing left is now to map the function in the Modes tab of the Configurator (not, that this will only show up, after setting an ID of 40-43 in pinio_box). Don't forget to save! "},{"title":"FAQ​","type":1,"pageTitle":"Pinio & PinioBox","url":"/betaflight.com/docs/wiki/archive/Pinio-and-PinioBox#faq","content":"None yet. "},{"title":"PID Tuning Guide","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide","content":"","keywords":""},{"title":"Quadcopter and Betaflight cheat sheet​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#quadcopter-and-betaflight-cheat-sheet","content":""},{"title":"Introduction​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#introduction","content":"On my journey, though hundreds of videos, tutorials and manuals (Bardwell, UAV Tech, JohnnyFPV, Mr. Steele, Le Drib, RotorRiot (sorry, for the missed ones) and wrote down their suggestions). This is the result of my notes. It should provide the least necessary but most compressed information to start tuning and setting your Quadcopter. In my case I use the widely spread Taranis X7 remote control. I am a freestyle pilot, so keep in mind, that these settings are in this scope (more smooth, softer flight behaviour). Remote Control (Taranis X7) "},{"title":"Channel Mapping​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#channel-mapping","content":"TAER Throttle/Aileron(Roll)/Elevator(Pit)/Rudder(Yaw)TRPY Short\tName\tHeli\tPlane\tGerman\tChinese\tChannelA\tAilerons\tRoll\tRoll\tQuerruder\t横滚\tCH1 E\tElevator\tPitch\tNick\tHöhenruder\t俯仰\tCH2 T\tThrottle\tThrottle\tThrottle\tGas\t油门\tCH3 R\tRudder\tYaw\tGear\tSeitenruder\t偏航\tCH4 Betaflight "},{"title":"Default startoff settings​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#default-startoff-settings","content":"Gyro update freq 8kPID Loop freq 8k samplingAirmode ALWAYS ONAntigravity gain ONDynamic Filter ONFilter (turn notch filters off)PID: Add &quot;your&quot; rates as a referenceBlackbox: 2-4k samplingBardwell's starting rates (mostly 5&quot; copters): \tP\tI\tD\tFF\tRC\tSR\tRCexpoRoll\t46\t45\t25\t100\t1.55\t0.73\t0.3 Pitch\t50\t50\t27\t100\t1.55\t0.73\t0.3 yawD\t65\t45\t0\t100\t1.0\t0.73\t0.3 Batteries / Lipo values Here are some suggested ranges based on tests. For your radio: Cells\tmAh\tVolt\tDescNiMh 6 cells\t800mAh\t7 to 8 volts\tAbout 1 hour remaining at 7 volts, 4 hours at 8 volts. NiMh 6 cells\t2400mAh\t7 to 8 volts\tAbout 2 hour remaining at 7 volts, 12.5 hours at 8 volts. Lipo 3 cell\t800mAh\t11 to 12 volts\tAbout 1 hour remaining at 11 volts, 6 hours at 12 volts. "},{"title":"Under Load​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#under-load","content":"The voltage of a discharged LiPo cell is 3.00V, and discharging below this will definitely damage the cell. Cells\tmin\taverage\tmax\tDesc1\t3.2V - 3.3V\t3.7V\t4.2V 2\t6.4V - 6.6V\t7.4V\t8.4V 3\t9.6V - 9.9V\t11.1V\t12.6V 4\t12.8V - 13.2V\t14.8V\t16.8V 5\t16.0V - 16.5V\t18.5V\t21.0V 6\t19.2V - 19.8V\t22.2V\t25.2V\t "},{"title":"C (constantly discharge)​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#c-constantly-discharge","content":"2600mAh (2.6Ah) and a C rating of 55C 55 * 2.6 = max constant output, which is 143A. 5C 1300mAh: 5 * 1.3A == 5.6A "},{"title":"Cell capacity / percentage​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#cell-capacity--percentage","content":"voltage chart vs remaining capacity. Cell Voltage\tPercentage4.00V\t84% 3.96\t77% 3.93\t70% 3.90\t63% 3.86\t56% 3.83\t48% 3.80\t43% 3.76\t35% 3.73\t27% 3.70\t21% 3.67\t14% PID  P = The present (proportional)I = The Past (integral)D = The Future (derivative / damping) !Dangerous Community Presets "},{"title":"P-term​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#p-term","content":"Controls the strength of how tightly the machine tracks the sticks (the Setpoint). Higher value (gains) provide tighter tracking, but can cause overshoot if too high in proportion to the Derivative (D-term). Think of the P-term as the spring on a car. P gain determines how hard the flight controller works to correct error to achieve the desired flight path (i.e. where the pilot wants the quad to go by moving the transmitter sticks). Think of it as a sensitivity and responsiveness setting. The snappy response provided with a high P gain can even make it feel like you have increased your rates. Generally speaking, higher P gain means sharper control while low P gain means softer control. If P is too high, the quadcopter becomes too sensitive and tends to over-correct, eventually it will cause overshoots, and you will have high frequency oscillations. You can lower P to reduce the oscillations, but reduce it too much and your quadcopter will start to feel sloppy. It is proportional to the magnitude of error (setpoint and gyro). Bigger error means push harder to get to the setpoint Smaller error means keep trying but don't push as hard zero error means do nothing The primary determinant of your copter's flight-feel and handling High P-gain means the copter accelerates harder to reach the target rotational rate Higher P-gain feels sharper Lower P-gain feels softer too high P-gain results in more (slow, sluggish) oscillation "},{"title":"I-Term (integral)​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#i-term-integral","content":"I term determines how hard the FC works to hold the drone’s attitude against external forces, such as wind and off-centered CG. Think of it as the stiffness setting in the stall motion of your quadcopter, and how well it holds its attitude. if you notice some drifting without user command, then increase it When I-gain gets too high, your quadcopter will be overly constrained by this, and start to feel stiff and unresponsive. It’s similar to having a slower reaction and a decreased P gain. Excessive I gain in extreme cases can create a low frequency oscillation. You can increase I-gain to “fix” these tiny details in the flight performance. To avoid undesired “stiffness” with high I-gain use “Anti Gravity“. It allows to have lower I-gain when cruising, and only increase your I-gain when doing throttle punches. Proportional to magnitude and duration of errorcorrects for accumulated, un-corrected errorcorrects for steady-state error and persist biasIf too low, quad is slipping, skating, like on iceRaise I-gain until the copter holds attitude on all three axes in response to strong throttle moves (the rest will be done by anti_gravity_gain)in betaflight, raise I-gain just until the copter holds attitude during normal flight, then add anti_gravity_gain to control throttle coupling "},{"title":"D-term (dangerous) (dampening)​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#d-term-dangerous-dampening","content":"Controls the strength of dampening to ANY motion on the craft. For stick moves, the D-term dampens the command. For an outside influence (prop wash OR wind gust) the D-term dampens the influence. Higher gains provide more dampening and reduce overshoot by P-term and FF. However, the D-term is VERY sensitive to gyro high frequency vibrations (noise | magnifies by 10x to 100x). High frequency noise can cause motor heat and burn out motors if D-gains are too high or the gyro noise is not filtered well (see Filters tab). Think of the D-term as the shock absorber on your car, but with the negative inherent property of magnifying high frequency gyro noise. Too high D-gain can burn your motors!D-gain works as a damper and reduces the over-correcting and overshoots caused by P-term. Like a shock absorber stops the suspension from being bouncy, adding D-gain can “soften” and counteract the oscillations caused by excessive P-gain, as well as minimizing propwash oscillations. When D-term is too low, your quad will have bad bounce-backs at the end of a flip or roll, and you will also experience the worst propwash oscillations in vertical descents. Increasing D-gain can improve these problems, however, an excessive D-gain value can introduce vibration in your quadcopter because it amplifies the noise in the system. Eventually this will lead to motor overheat and quad oscillation. Another side effect of excessive D-term is the decrease in the quad’s response, this effect is often described as “mushy”. set debug_mode=d_min Proportial to the change in magnitude of error Anticipates the future state of the system based on its current movement It reduces the P-term overshoot and oscillation (damping effect) But accelerates the P term too! Amplifies noise (vibration) in the system motors make vibrationsvibration comes to gyroD-Term amplifies the vibrationsmotors burn up low-pass filter on the D-term is mandatory to remove high-frequency noise reduces the effect of P-term oscillations allows higher P-gain (for sharper handling) without excess oscillation The only PID-term that can respond quickly enough to handle fast-changing situations like propwash oscillation Is the only PID-term that can and will smoke motors if you are not careful always to raise D-gain in relatively small increments always do a short test flight and check for hot motors after raising D gain! "},{"title":"d min​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#d-min","content":"Set the lowest D-term, it then get dymacially increased (to PID's maximum D-term) on sharper stick movements D Min provides a way to have a lower level of D in normal flight and a higher level for quick maneuvers that might cause overshoot, like flips and rolls. It also brings D up during prop wash. Gain adjusts how fast D gets up to its maximum value and is based on gyro to determine sharp moves and propwash events. Advance makes D go up earlier by using setpoint instead of gyro to determine sharp moves. "},{"title":"PID-tuning in a nutshell​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#pid-tuning-in-a-nutshell","content":"Raise P till quad is &quot;sharp&quot;Raise D till it's soft enoughRaise I till (too much looses control (slow response)if oscillation is fast, reduce Dif oscillation is slow, raise D (or lower P) If you try to explore errors in a Blackbox Tool, set FF (FeedForward) to zero (disable it)! P -&gt; Higher makes Quad more sharp (oscillates if too high or low) I -&gt; High Makes the quad more digital / mechanical (measures errors) holds the attitude better if raised D -&gt; High values dampes the P (works against P, flattens the curve) D-term relates on the gyro measurements  "},{"title":"Solve​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#solve","content":"high D / Low P = Low PD ratio = Bounces backLow D / High P = High PD ratio = "},{"title":"Yaw PID​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#yaw-pid","content":"P -&gt; too low, too sloppy, like on ice turn it up to 60, 90, 100I maybe 120D could be 0then use FeedForward to get sharpness back (100?) "},{"title":"Tuning for Freestyle​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#tuning-for-freestyle","content":"my tuning approach focuses on: minimizing propwasheliminating bouncebacks after flips and rollssolitd attitude hold on throttle change the main maneuvers I use to tune are sharp turns, flips and rolls, and throttle punches "},{"title":"PID Tuning (borrowed from Betaflights manual)​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#pid-tuning-borrowed-from-betaflights-manual","content":"Guide Start with slightly lower than default P gains as provided by the installed BetaFlight firmware. P of 4.0 on Pitch and Roll are good starting points. Also lower the I and D gains on pitch and roll in order to tune P with minimal interference from I and D. I of 20 and D of 5 are good starting points. For yaw, it is prudent to decrease default P by HALF and reduce I just a bit, to eliminate that axis as a source of oscillations. Yaw will be tuned last. Over a series of flights, increase P gain on Roll axis until you see oscillations when you approach full throttle and you get very rapid visible and audible shakes. Then set P term to roughly 70% of the value that caused the oscillations. Test to see if the quad holds the desired roll angle and does not drift by rolling the copter to a specific angle, and then punch and drop throttle several times. The angle you gave it relative to the horizon should not change significantly. If the angle appears to drift, increase I gain. If you don't see drift, don't change I. You can change the &quot;feel&quot; of your copter by raising or lowering I after you achieve a good tune. (I does not really affect final P and D values. Increase D gain on each axis ONLY to the extent that it helps reduce bounceback after flips/rolls or prop-wash oscillations after an abrupt descent. If neither is a problem, then LEAVE D LOW. At this point the Copter should be around 80-90% tuned. Note: Too high of D term can cause motors to get hot. Do a short flight, 10-30 seconds, land and check motors. If you can hold your finger on the motors then they are not too hot. Yaw often requires the least tuning, but it may still introduce significant oscillation if you ignore it. Start with the Yaw P that you chopped in half in step one and verify that you do not get significant vibrations when you do a long punch-out or fast forward flight. Start pushing up Yaw P by .5 increments until you start to see roughness through your fpv camera when in fast forward flight or punches. Then decrease a bit. Fine tune by looking at Yaw P term in blackbox. It MAY be oscillating a bit, but pull up the Yaw gyro trace to see if those P oscillations actually make it to the Gyro. If the yaw gyro looks relatively smooth, you're ok. Note: Because yaw inherently has less positive control (a.k.a. authority), than pitch and roll, a wider range of values are acceptable. Relatively higher P and I values and relatively low D values are the norm because of the inherent lack of authority compared to pitch and roll. A blackbox log is usually necessary to fine-tune. Most excess P oscillation comes from either roll or pitch, but if any roughness at full throttle remains, look at a blackbox log to see if yaw P starts to oscillate on full throttle. If so, decrease yaw P. Finally, refine the relationship between P and I by looking for a tendency to resist or &quot;fall into&quot; strong turns. Very low I values will result in an axis that drifts over time. Low I values on an axis will allow that axis to change attitude more freely but may still hold attitude. Higher I values on an axis will hold attitude very well, but may tend to resist movement and can add a feeling of inertia. Very high I values can create an overly &quot;robotic&quot; feeling and even oscillations. Can also refine P by analyzing Blackbox Logs. This may get you closer to a perfect tune. Notes: The undesirable flight characteristic called bounce-back oscillation occurs when you abruptly return the pitch/roll stick to center, and the copter rotation does not make a &quot;clean&quot; stop. It could be the result of: D that is too lowP that is too highor even P that is too low (a low P gain can cause slow, sloppy oscillations because it's not providing enough authority to get to the intended end-state). Trashcan PIDs​ \tP\tI\tD\tFF\tRC\tSR\tRCexpoRoll\t45\t45\t25\t100\t1.20\t0.75\t0.0 Pitch\t50\t50\t27\t100\t1.20\t0.75\t0.0 yawD\t45\t100\t0\t100\t1.30\t0.80\t0.0 "},{"title":"PID Masterclass​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#pid-masterclass","content":"Autoselect Profile dependend on your Battery Voltage​ This selects profile 1 if you connect a 3S battery and selects profile 2 if you connect a 4S batteryprofile 0 to select Profile 1set auto_profile_cell_count=3 for 3S Profileprofile 1 to select Profile 2set auto_profile_cell_count=4 for 4S Profile Filter If your quad &quot;bumps&quot; or &quot;flip out&quot; or fly away, you may have too less filtering Reduce Filtering for better propwash handlingRaise D-Gain about 5 pointsEach filter introduces delay/lag Default / Optimal flight performance:​ gyro_lowpass = 100 dterm_lowpass = 110 gyro_lpf = OFF Slightly noisy setup:​ gyro_lowpass = 80 dterm_lowpass = 100 gyro_lpf = OFF Very noisy setup​ gyro_lowpass = 50 dterm_lowpass = 100 gyro_lpf = 188HZ "},{"title":"Dynamic Notch Filter ON​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#dynamic-notch-filter-on","content":"You can always switch it on(mid 100 - 400Hz) Motor noise filter / READS the ESC motor speed and let follow the filter to it (it is not &quot;static&quot;, it &quot;moves&quot; with the speed of the motors) (Gyro Low pass &lt; 90Hz) Width could be 20-40 (suggested by UAV-Tech) "},{"title":"Dynamic Filter (mostly off)​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#dynamic-filter-mostly-off","content":"If you have use Dynamic Filter on, then (UAV Tech suggests) turn off Gyro Notch Filter 1 and 2 (they got &quot;replaced&quot; by the dynamic filter&quot;) "},{"title":"dyn_filter_range​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#dyn_filter_range","content":"Low (1kHz sampling) 83Hz to 500Hzlower min = 67 Hz | Ctr Min 83Hzbigger Low RPM QUads (6&quot; + props or low KV quads) Medium (1.3KHz sampling) 110Hz to 660Hzlower min = 89Hz | Ctr min = 110Hznormal 4s 5&quot; quads&quot; High (2KHz sampling) 166Hz to 900Hzlower min = 133Hz | Ctr min = 166Hzsmaller &lt;3&quot; Quads | High KV | 5 on 6S "},{"title":"Always check motors temperature after changing any filter​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#always-check-motors-temperature-after-changing-any-filter","content":"You have to add filters because you get hot motors (Too much noise)Each filter delays, they more filter, the more muddy "},{"title":"D-Term Lowpass​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#d-term-lowpass","content":"Most in need of filtering Too low makes more delay PT1 = at least one (faster, better propwash handling) (you should not use BIQUAD - Bardwell said, UAF-Tech said PT1 is not good enough, BIQUAD has more lag but is stronger) "},{"title":"Gyro Notch Filters​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#gyro-notch-filters","content":"Mostly everyone does not need Gyro notch filters.Could be switched off if motors not getting hot after disabled them. "},{"title":"Gyro Lowpass​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#gyro-lowpass","content":"Look in Betaflight-Blackbox-Explorer or PID-Toolbox where to set the Lowpass frequency "},{"title":"D-Term Notch​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#d-term-notch","content":"If your motors get hot after 30s - 1m flight, then you maybe need a D-term notch.When hardware condition is not good (propeller and motor vibrations) you can switch on.Disable it if you wanna tune till the end "},{"title":"Yaw Lowpass​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#yaw-lowpass","content":"Most often noisier than other axis Oscillations Regular to the fixed freqzency = P-term issueRandomly / irregular Vibration could be D-term (amplifies noise)Props (punch throttle) oscillation higher frequency Propwash Prop wash happens when changing speed or if you suddenly accelerate from a dead stop. These sudden movements cause the prop's spin to create turbulence, causing instability while steering.. change ratio between P/DLower P and Raise De (raise d makes motors hotter)Or use feedforward "},{"title":"RC Smoothing​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#rc-smoothing","content":"Smoothing Type = FilterCh Smoothed = RPYTIf you dont smooth on Y then you cant have ff on yawInput cuttoffType = AUTOInput FilterType = BIQUADDerivative CutoffType = AUTODerivative FilterType = BIQUAD Throttle boost Boosts throttle faster than you command Absolute control Good for windy days 1-5 (10) may best experience FeedForward F-gain is only active during stick movements and is responsible for the responsiveness of the craft. To put it simply, if you want sharper response, increase F gain. If you want smoother ending of a rapid movement, increase D gain. The more D, the smoother everything will be, the more F, the more control you will have. If you have oscillation in Yaw, you can try higher F and I values, then drop P to maintain the responsiveness while keeping oscillations caused by P gain to a minimum. The faster the sticks are moving, the more FeedForward we get. FeedForward helps P drive the quad into turns. Unlike P, FeedForward cannot cause oscillation, no matter how much FF is added. With FeedForward, we get better stick responsiveness without pushing P so high as to cause wobbles. It also reduces the delay time between input and response. Less delay means less error and less I windup/overshoot. It is great for racing, LOS and radical freestyle flying. It isn't great for cinematic HD. Too much causes: overshoot at the start of a flip, particularly when the sticks hit 100% travelexaggerated responsiveness to RC stepsamplification of shaking when the pilot is cold or nervousspikes in the motor traces and brief shakes with big RC stepsgyro getting ahead of setpoint "},{"title":"advantages:​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#advantages","content":"adjustable per axisdirectly calculates off RC-Rate (derivative = magnitude of slope) no gyro noise influenceno additional D-term latencyworks on yaw (w/o d-term)provides a better fundamental for future development (cleaner) "},{"title":"Smart feedforward​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#smart-feedforward","content":"makes FF and P-term NOT sumcan be used to have FF push movescan be used to have moves based on measurement (old setpoint weight = 0) BUT then also have FF value for sharp stick inputsrequires higher FF values (&gt;200) to have FF values be of any affect "},{"title":"feedforward transition / OLD way: Setpoint Weight​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#feedforward-transition--old-way-setpoint-weight","content":"feedforward == Setpoint Weightlow is more smoother / sluggishRaise FF if it feels to stiff / decrease cutoffAdd more sharp movement when stick is changing fastotherwise it is more soft70 - 200 for example Freestyle pilots love more smooth movements, so lower it.it could be very helpful on yaw axis 0.15 means the center 15% of my stick travel are softer. FeedForward provides 'dynamic stick boost' or 'dynamic stick responsiveness'. It pushes the quad quicker into turns when the sticks are moved quickly. With feedforward, the faster the sticks are moved, the bigger the push. And it doesn't wait for any error to develop, the response is instantaneous. The feedforward effect is attenuated around centre sticks by the transition parameter, so the quad can be made more damped (less twitchy) around centre for freestyle type flying by setting transition to 0.5 or 0.1 as usual, but for racing and for direct responses it's best to leave transition at 0. Zero FeedForward allows D-term to dampen the quad all the time, even when the quad is instructed to turn quickly. Too much FeedForward may make the quad too twitchy, and may cause overshoot. [D-gain]/26 x [setpoint] x 100 = FF gain  set f_ptich = 100 set f_roll = 100 beacon RX_SET set small_angle = 180 set pid_process_denom = 1 set vbat_pid_gain = ON feature ANTI_GRAVITY set gyro_lowpass2_hz = 0 set dyn_filter_range = HIGH set dshot_idle_value = 250  "},{"title":"ff_boost​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#ff_boost","content":"This is a fantastic new feature that markedly reduces delay in fast setpoint changes. Most motors take time to spin up / slow down. They need to be pushed harder at the very start of a move than in the middle. FF and P both ramp up slowly at the start of a move because initially our fingers move slowly and most pilots use Expo in their Rates setup. So until now, the motors haven't got that immediate push needed unless really high FF gains were used (250+). But with FF gains of that magnitude, overshoot is hard to control, especially because of SuperRate being applied at the end of the stick travel, really casing FF to boost the move right when we need the quad to start to slow down to not overshoot. 'ff_boost' is a PID parameter that is proportional to the stick acceleration. Technically it is the second derivative of Setpoint. "},{"title":"Setpoint weight (is outdated > 4.x, new one: is FeedForward)​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#setpoint-weight-is-outdated--4x-new-one-is-feedforward","content":"setpoint is degrees-per-second of rotational rate, as commanded by stick positionMeasurement is degrees-per-second of rotational rate as reported by the gyroWe are talking only about Acro/Rate Mode here, not autolevel 0.5 is may too sluggish 2.0 D26/26 SW1 == FF 100 HIGH -&gt; more aggressive, each stick move is copied instantly - 255 LOW -&gt; more smushier / Smoother, good for freestyle - 0 (then you need more D) "},{"title":"Setpoint (deprecated) / FeedForward-transition​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#setpoint-deprecated--feedforward-transition","content":"Reduces the weight when the stick is returning to center 0.15 = 15% of sticktravel is smooth When nose is raising/lowering when giving throttle punch raise AG. Is a virtual I booster if changed. "},{"title":"I-term rotation​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#i-term-rotation","content":"Rotates the current I Term vector properly to other axes as the quad rotates when yawing continuously during rolls and when performing funnels and other tricks. Very appreciated by LOS acro pilots. "},{"title":"I-term Relax​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#i-term-relax","content":"Reduces I accumulation on fast stick movements. It markedly reduces I bounce-back after flips or rolls, and allows higher levels of I than before. Typically I can be increased by 50% or more, which improves directional stability while flying in turbulent air or when approaching gates at high speed. LOW -&gt; more looser feeling (10) (even without feedforward)HIGH -&gt; more stiff (especially for freestyle tracking moves)I-term relax on = less bounce backs at the end of flips and rollsyou feel it on racing type settings Freestyle: Cutoff: 10Type: Gyro Race: Cutoff: 20Type: Setpoint "},{"title":"Integrated Yaw​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#integrated-yaw","content":"Integrated Yaw is a feature which corrects a fundamental issue with quad control: while the pitch and roll axis are controlled by the thrust differentials the props generate yaw is different. Integrated Yaw fixes this by integrating the output of the yaw pid before applying them to the mixer. This normalizes the way the pids work. You can now tune as any other axis. It requires use of absolute control since no I is needed with Integrated Yaw. "},{"title":"I-term relax Type​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#i-term-relax-type","content":"Limits the accumulation of I Term when fast movements happen. This helps specially to reduce the bounceback at the end of rolls and other fast movements. You can choose the axes in which this is active, and if the fast movement is detectd using the Gyro or the Setpoint (stick). Gyro = more for Freestyle pilots (good at bouncebacks, bad in turns) uses a high-pass filter based on rate of change stick movements Setpoint = more better for racers and all around (bad in bouncebacks, better in turns) (but try for yourself) better landing after flips "},{"title":"I-term relax cutoff​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#i-term-relax-cutoff","content":"lower for for looser stick-feel instead of high feedforwardit's not stiff anymore20 default, 15 - 10 Antigravity Fixes the problem when you move throttle stick rapidly, to tilt the quad up or down the nose.0 - 30 Anti Gravity boosts the I term when fast throttle changes are detected. Higher gain values provide stability and better attitude hold when you pump the throttle. Throttle Mid 0.5Throttle expo 0 TPA (Throttle PID Attenuation) TPA is a setting to reduce the effectiveness of PD gains as throttle increases(only D-term by default). TPA basically allows an aggressively tuned multi-rotor (one that feels very locked in) to reduce its PID gains when throttle is applied beyond the TPA threshold/breakpoint in order to eliminate fast oscillations tpa_mode: PD/D (Only acts on D-term by default)tpa_rate: TPA 0.6 means 60% PIDs decrease on full throttletpa_breakpoint: TPA breakpoint 1250(25%) - throttle value at wich TPA starts to work  Better propwash (before move D gain up, move TPA up) Throttle Limit never get up to 100% Throttle scale / clipthrottle limit (percentage) Radio Frequencies and Systems Taranis 2,4Ghz (factory standard)Crossfire 900MHz (longer range / more expensive) Analysis Tools Blackbox ExplorerPID ToolboxPlasmatreeblackbox-tools "},{"title":"BLACKBOX EXPLORER​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#blackbox-explorer","content":"Use UAV-Tech's JSON File to have the most important views availablehttps://drive.google.com/drive/folders/1hWgcADCI3Aa4XLUiGsGQbPHxdkE94taP Holistic Flight performancePID OperationsProp wash eval. * How gyro is following setpoint SAND BOXSmoothingSAND BOXYaw evaluation bounce backs Pitch evaluation bounce backs Roll evaluation bounce backs Noise analysis noise trails Debug mode (to log filter on logger) Mostly set debug_mode = GYRO_SCALED could be used. get debug set gyro_filter_debug_axis = ROLL set rc_smoothing_debug_axis = ROLL set acro_trainer_debug_axis = ROLL set osd_debug_pos = 2049 set debug_mode = GYRO_SCALED set debug_mode=gyro_raw set debug_mode=notch set debug_mode=fft set debug_mode=gyro set debug_mode=dfilter If PID-error is Zero, you have a perfectly tuned quad (also if in windy condition) D-term should be soft (not noisy), otherwise you cant handle Propwash "},{"title":"I-term​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#i-term","content":"below zero your quad is more heavy to the rightabove zero your quad is more heavy to the leftcould also occour on windy days (force from outside)is your gyro multiplied by a gain "},{"title":"PID error​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#pid-error","content":"is the offset of your setpoint and gyrothe &quot;perfect tuned quad&quot; always has zero PID errorgyro should exactly track setpointbiggest errors occour if you start a sharp pitch or rollpropwash also generates PID errordrives the PID "},{"title":"PID SUM​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#pid-sum","content":"is the Setpoint minus Gyro Tuning tricks TL;TR from https://oscarliang.com/quadcopter-pid-explained-tuning/ Tune one axis at a time: first roll, then pitch, and finally yaw Every time you change a value, you should ask yourself: “is it getting better or worse?” Try to find the peak where the quad has the best flight characteristics before performance starts to degrade again. When P-gain is too low: slow oscillation. When P-gain is too high: very fast oscillations. Fine tune it until you get to a point where the quad feels very responsive and nimble, making sure there is no excessive amount of vibration. Also listen to your motors, twitching motors are a sign of excess P gain which might not be visible in the camera. If your quad flies fine in low to mid throttle, but only gets oscillations with high throttle, then increasing TPA will help. Do a punch out and see if there is any fast oscillations, if so, increase TPA. Good TPA will give you a relatively smooth punch out. I personally wouldn’t use TPA higher than 0.4, otherwise your quad might feel “loose” at high throttle. When you do aggressive maneuvers like flips and rolls, and your quad overshoots at the end of the move then bounce back, increase D for the affected axis. Increasing D-gain can also help reduce prop wash (oscillation when you descent). Be careful because excessive D-gain can introduce oscillations to your quad, and also make motors run hot, so use just enough to minimize propwash. Another sign of too much D-term is fast oscillations at the end of a roll or flip. Note that to eliminate bounces at the end of a flip or roll, you can also use Setpoint Transition which we will talk about next. Bank your quad to the left and right to see if it’s holding the angle well. Ideally it should just stay at the same attitude as you release the roll stick. If the quad can’t hold the angle then it’s an indication that I gain is probably too low. Your quad can drift with the wind, so you might want to increase I a bit more on a windy day depending how bad it is. I recommend setting I-term just high enough to stay level, excessively high I gain can result in a stiff, robotic feeling, and even oscillations. Setpoint is the commanded Roll rate.Gyro is tracking Setpoint as good as possible (windy days...) "},{"title":"Tiny PID process explained​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#tiny-pid-process-explained","content":"D-term always works against P-term: If P raises, D goes highIf P goes low, D goes high again "},{"title":"PID Toolbox​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#pid-toolbox","content":"https://github.com/bw1129/PIDtoolbox/wiki/PIDtoolbox-user-guide PID-error = Setpoint - Gyro "},{"title":"Pins / Resource​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#pins--resource","content":"resourceresource show resource list (bf 3.x) then it shows which Pins are used (Example: LedStrip, I2C)resource i2c_scl 1 none unassign current I2Cresource led_strip 1 none unassign current LedStripresouce camera_control B06 Whatever your PIN ID you haveresource list check if your change is appliedset camera_control_key_delay = 125save Listing your settings Difference to regular settings diff CameraControl "},{"title":"Mamba F405 (FURYF4OSD)​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#mamba-f405-furyf4osd","content":"1kohm resistorresource LED_STRIP 1 NONEresource CAMERA_CONTROL 1 A00set camera_control_ref_voltage = 300set camera_control_key_delay = 150set camera_control_internal_resistance = 100 camera_control_button_resistance = 450,270,150,68,0 -&gt;&gt;&gt; measured 450,270,150,68,0 Crossfire CF Nano RX: Ch1 - RXCh2 - TXCh4 - LQ (for RSSI) Smart Audio SmartAudio uses a UART SBUS - RX Smart Port - TX "},{"title":"Protocols​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#protocols","content":"https://drohnen360.com/was-bedeutet-pwm-ppm-sumd-sbus-f-port/ Radio Setup 1RSS - Antenna 1 Signal Strength Uplink - received signal strength antenna 1 (RSSI) 2RSS - Antenna 2 Signal Strength Uplink - received signal strength antenna 2 (RSSI) TRSS - TX Radio Signal Strength ()Signalstärke Downlink) RQly - Uplink - link quality (valid packets) (Empfangsqualität Empfänger) RSNR - Uplink - signal-to-noise ratio - RX Uplink SNR - Uplink - signal-to-noise ratio TQly - Downlink - Link Quality (Empfangsqualität Sender) TPWR - TX Power Sendeleistung TSNR - TX Downlink SNR - Downlink - signal-to-noise ratio FM - Flugmodus RFMD - Aktualisierungsrate 0= 4Hz; 1= 50Hz, 2= 150Hz GPS - GPS Coordinates GSpd - GPS Speed Hdg - GPS Heading Alt - GPS Altitude Sats - # of Satellites Ptch - Pitch angle of MFD Roll - Roll angle of MFD Yaw - Yaw angle of MFD (relative to north?) RXBt - Receiver Battery voltage Curr - current Current 0.00 A Aktueller Strom Capa - Capacity 0 mah Akkukapazität VFAS = Voltage of Flight Controller BLHeli settings Basically, this is it! PWM Frequency: 48KHz for freestyle; Default (or higher) for racingMotor Timing: 22 or Auto for freestyle; 25 (or higher) for racingESC Protocol: DShot1200 or Multishot Motors 2200KV == 2200 rpm per Volt KV == Velocity Constant (K in science) "},{"title":"Remap Motors​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#remap-motors","content":"type resource Example: Lets say 1 and 4 are wrong resource MOTOR 1 B01 resource MOTOR 2 A02 resource MOTOR 3 A03 resource MOTOR 4 B00 then unset 1 and 4 and remap them by: resource MOTOR 1 none resource MOTOR 4 none resource MOTOR 1 B00 resource MOTOR 4 B01 save Done "},{"title":"Supermario as startup sound​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#supermario-as-startup-sound","content":""},{"title":"Motor 1​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#motor-1","content":"Set Music On Set Gen. Length 5 Set Gen. Interval 0 Paste these notes: C6 8 G5 8 C6 8 E6 8 G6 8 C7 8 G6 8 G#5 8 C6 8 D#6 8 G#6 8 D#6 8 G#6 8 C7 8 D#7 8 G#7 8 D#7 8 D6 8 F6 8 A#6 8 F6 8 A#6 8 D7 8 F7 8 D7 8 F7 8 A#7 8 F7 8  "},{"title":"Motor 2​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#motor-2","content":"Set Music On Set Gen. Length 5 Set Gen. Interval 0 Paste these notes: C6 8 G5 8 C6 8 E6 8 G6 8 C7 8 G6 8 G#5 8 C6 8 D#6 8 G#6 8 D#6 8 G#6 8 C7 8 D#7 8 G#7 8 D#7 8 D6 8 F6 8 A#6 8 F6 8 A#6 8 D7 8 F7 8 D7 8 F7 8 A#7 8 F7 8  "},{"title":"Motor 3​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#motor-3","content":"Set Music On Set Gen. Length 5 Set Gen. Interval 0 Paste these notes: C6 8 G5 8 C6 8 E6 8 G6 8 C7 8 G6 8 G#5 8 C6 8 D#6 8 G#6 8 D#6 8 G#6 8 C7 8 D#7 8 G#7 8 D#7 8 D6 8 F6 8 A#6 8 F6 8 A#6 8 D7 8 F7 8 D7 8 F7 8 A#7 8 F7 8  "},{"title":"Motor 4​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#motor-4","content":"Set Music On Set Gen. Length 5 Set Gen. Interval 0 Paste these notes: C6 8 G5 8 C6 8 E6 8 G6 8 C7 8 G6 8 G#5 8 C6 8 D#6 8 G#6 8 D#6 8 G#6 8 C7 8 D#7 8 G#7 8 D#7 8 D6 8 F6 8 A#6 8 F6 8 A#6 8 D7 8 F7 8 D7 8 F7 8 A#7 8 F7 8  BiDirectional Dshot Update BLHeli &amp;&amp; Upgrade to latest Firmware Count your Magnets on motors and type that in Betaflight Configurator Set Dhsot 300/600 go to Motors tab, connect your Battery and look that error rate (percentage) MUST be 0% (100% if Batt not connected) OG to Filter settings and Switch on Gyro RPM Filter Harmonics 1 (most cases) (BUT YOU SHOULD SET IT TO 3 ) you can now use dynamic notch to watch something else (noise) than the motors (loose cables, screws,...) Set Dyn filter range to &quot;low&quot; Q to 200 Make a slight test flight, if motors cool or slighly warm you can reduce filter by move &quot;Gyro Filter Multiplier&quot; and &quot;D term Filter muliplier&quot; to the right (less filtering) Do not use very new props (to prevent too less filtering) you can use this too​ remove other filers (only Version == 4.0) d-term lp 1 dyn min cutoff 60 d-term lp 1 dyn max cutoff 175 VTX Just based on my past experience in VTX testing, lower frequency channels usually have higher output power. For example, on Raceband, R1 usually has higher output power than R8. Another thing to take into account is the tuning of your transmitter antenna and receiver antenna. Assuming they are both tuned to 5800MHz, then the performance is going to be better on channel F4 (Fatshark 4) or R5 (Raceband). If they are tuned to 5700MHz, then the best channels would be E1 or R2. VTX TABLES https://betaflight.com/docs/wiki/archive/VTX-Tables "},{"title":"TBS UNIFY PRO 5G8 HV​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#tbs-unify-pro-5g8-hv","content":""},{"title":"vtx​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#vtx-1","content":"vtxtable bands 5 vtxtable channels 8 vtxtable band 1 BOSCAM_A A FACTORY 5865 5845 5825 5805 5785 5765 5745 5725 vtxtable band 2 BOSCAM_B B FACTORY 5733 5752 5771 5790 5809 5828 5847 5866 vtxtable band 3 BOSCAM_E E FACTORY 5705 5685 5665 5645 5885 5905 5925 5945 vtxtable band 4 FATSHARK F FACTORY 5740 5760 5780 5800 5820 5840 5860 5880 vtxtable band 5 RACEBAND R FACTORY 5658 5695 5732 5769 5806 5843 5880 5917 vtxtable powerlevels 4 vtxtable powervalues 0 1 2 3 vtxtable powerlabels 25 200 500 800 "},{"title":"master​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#master","content":"set vtx_power = 500 set vtx_band = 3 set vtx_channel = 3 set vtx_freq = 5665 Personal PID Tunes Trashcan​ set dshot_idle_value = 250 (instead of 450, was too floaty)set throttle_limit_type = SCALEset throttle_limit_percent = 80 // or 70 or 50 Throttle​ set thr_mid = 0set thr_expo = 25 Cinewhoop "},{"title":"Motors​","type":1,"pageTitle":"PID Tuning Guide","url":"/betaflight.com/docs/wiki/archive/PID-Tuning-Guide#motors-1","content":"3800 is fine. Sweet spot for these whoops is 1407 or 1507 and 3600/3800kv on 4s. 2800-3100kv if going 6s. Banggood Parcel / Shipping Priority Direct seems to get imported to Europe legally and then re-shipped from .nl. Very fast. It bypasses any tax charges for parcels from outside EU. European Direct is the same as Priority Direct, it ships with a parcel company instead of regular mail, I have personally had some trouble getting these packages. Default Shipping everything that's non taxable (shipments &lt;E21 over here) and I can wait for, I do with the default free shipping.Air Parcel Register Chinese airmail, will not always taxed. EMS will get taxed but the service charge for the tax handling should be included in the shipping price. Expedited Shipping parcel service that charges a fairly high service charge for customs and tax handling. BF 4.2 set ff_interpolate_sp = AVERAGED_3 for Freestyle in a nutshell 1 - Bounce back on rolls or flip. If the quad overshoot and then bounce back, Increases D for the affect axis. 2 - If you are pitched and going forward and the angle of your pitch changes, Increase I on pitch. If the angle of the tilt is not holding, then increase I for roll. 3 - Slow oscillations is too low P term 4 - Punch throttle and cut. If there is movement then add anti-gravity gain. 5 - If nose wanders without increase in throttle then increase I gain. Similar to #2 6 - If nose wanders with throttle then increase anti-gravity gain 7 - Propwash on hard turn. Increase D or Lower P. You will have to try it with both pitch and roll 8 - Sliding out in turn. Increase Yaw I gain 9 - Oscillations with high throttle only. Increase TPA 10 - If you want a more robotic feel to your quad, Increase I for pitch and roll. "},{"title":"Presets 4.3","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Presets-in-BF-4.3","content":"Presets 4.3 Welcome to the Betaflight firmware-presets wiki! Please find the full description here:https://github.com/betaflight/firmware-presets#firmware-presets Quick start guide on how to add your presets to Betaflight:Quick-Start-for-Preset-Authors","keywords":""},{"title":"Presets Quick Start for Authors","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Quick-Start-for-Preset-Authors","content":"Presets Quick Start for Authors This is a step-by-step guide on how to create your first preset, verify, and submit it for approval. You will need: Github Account and basic Github understandingInstalled Git and/or GitHub DesktopInstalled node.js ....","keywords":""},{"title":"Remapping Motors with Resource Command","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Remapping-Motors-with-Resource-Command","content":"Remapping Motors with Resource Command Necessity for swapping/shifting/rotating motor positions rises from time to time. Before v3.1, we had to either use long wires between FC and ESC to retain the original mapping (which make the build messy) or use a custom mix to change how each motor contributes to attitude adjustment. With 3.1, we can easily modify motor mappings with resource CLI command. See Betaflight resource mapping for descriptions of this command. ####Videos: A Joshua Bardwell Video: Resource Remapping- No more Custom Motor MixerProject Blue Falcon video: Find Bad ESC output Pin and Remap Motors A Blue Falcon video:Remap Motors In Betaflight (damaged pins fix) ###Examples: Here, the most common case of &quot;rotating FC or PDB&quot; is taken as an example. Suppose you have a board with motor numbers labeled like this: FRONT 4 2 3 1 BACK and for some reason, you want to rotate the board 90-degrees clock wise, ending up with FRONT 3 4 1 2 BACK Let's fix this. Record the current motor mapping Type resource list to find out the original mapping. # resource list ... A06: MOTOR 1 A07: MOTOR 2 A11: MOTOR 3 A12: MOTOR 4 ... Write a diagram with the original pin to motor mapping. FRONT 4(A12) 2(A7) 3(A11) 1(A6) BACK Rotate the drawing clock wise 90-degrees. FRONT 3(A11) 4(A12) 1(A6) 2(A7) BACK Remove the old motor position label. FRONT A11 A12 A6 A7 BACK This is your actual MCU pin position. Assign new motor position label to the MCU pins. FRONT 4(A11) 2(A12) 3(A6) 1(A7) BACK This is your new mapping. The cli resource command for this mapping is: resource motor 1 a7 resource motor 2 a12 resource motor 3 a6 resource motor 4 a11 save As you enter these commands, you will be seeing error messages in the form * ERROR * X also used by MOTOR Y. The overlapping mapping is transitional, and you will be ending up with clean mapping at the end. If you don't like the error messages, you can clear the old mapping by following typing following commands prior to new mapping. resource motor 1 none resource motor 2 none resource motor 3 none resource motor 4 none This is just an example. Please work on your case on your own and verify the results before flying. Have fun!!!","keywords":""},{"title":"Rate Calculator","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Rate-Calculator","content":"Rate Calculator In order to convert between Betaflight, RaceFlight and FlightOne rates, the converters below can be used. There is also now a converter for Betaflight, Raceflight, KISS, Actual and QuickRates below. Please note that not every curve can be recreated perfectly in a different rate model. Actual and Quick rates use max velocity directly as a variable (velocity in degree/sec at maximum stick deflection). If you put rates of a different rate model into the configurator it shows you the corresponding max velocity. RaceFlight/Betaflight/KISS rate chart (converter is not working anymore): https://apocolipse.github.io/RotorPirates/ Betaflight/Actual rates chart: https://www.desmos.com/calculator/r5pkxlxhtbhttps://kmitchel.github.io/ (divide Center and Max by 1000) Betaflight rate tuner and RaceFlight/Betaflight converter: https://erikspen.github.io/betaflightratestuner Betaflight/Quick rates chart: https://illusionfpv.github.io/ FlightOne/Betaflight rate converter: https://flightone.com/rates/ Collection of rate presets and rates of established pilots: https://gist.github.com/microraptor/52f01490f1c7aa86d91e8710556f123b More about Actual and Quick rates: https://betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#New-Rates-modeshttps://github.com/betaflight/betaflight/pull/9495https://github.com/betaflight/betaflight/pull/9506 Automatically convert Betaflight, Raceflight, KISS, Actual and Quick rates from one type to another https://rates.metamarc.com/","keywords":""},{"title":"Running with reversed motors","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Reversed-motor-direction","content":"","keywords":""},{"title":"Spinning outwards at the front and back​","type":1,"pageTitle":"Running with reversed motors","url":"/betaflight.com/docs/wiki/archive/Reversed-motor-direction#spinning-outwards-at-the-front-and-back","content":"This page is primarily for myself since I always forget which command it is. Reversed motors would be spinning outwards (contrary to the standard inwards), that is the front left spins counterclockwise, front right clockwise:  ^ ^ 4| |2 \\ / x ^ / \\ ^ |3 1|  To make betaflight understand this change, the command given is (as of betaflight 3.2): set YAW_MOTORS_REVERSED=ON  For older betaflight: set YAW_MOTOR_DIRECTION=-1  Note - setting these values will not make the motors spin the other direction. It simply tells betaflight that the motors are reversed so it can control the yaw accordingly. Motor direction has to either be changed in blheli or by swapping motor wires. "},{"title":"Resource Remapping Command","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Resource-remapping","content":"","keywords":""},{"title":"Available functions, values and constraints​","type":1,"pageTitle":"Resource Remapping Command","url":"/betaflight.com/docs/wiki/archive/Resource-remapping#available-functions-values-and-constraints","content":"Function\tIndex\tDescription\tConstraintsADC_BATT\t-\tBattery voltage sensor\tCan only be mapped to other ADC pin ADC_CURR\t-\tBattery current sensor\tCan only be mapped to other ADC pin ADC_RSSI\t-\tAnalog RSSI input from receiver\tCan only be mapped to other ADC pin BEEPER\t-\tSignal buzzer\tUsually hard-wired to the base of a transistor to switch the buzzer. CAMERA_CONTROL\t-\tFPV camera OSD control\tEmulates joystick key presses. Needs hard-wired resistor and/or capacitor. Therefore existing CAMERACONTROL pin _may only be usable for certain low frequency applications, like SmartAudio. ESCSERIAL\t?\t?\t? I2C_SCL\t1-n I2C_SDA\t1-n INVERTER LED\t1-3\tIndicator LEDs\tDon't confuse with LED_STRIP! LED_STRIP\t-\tWS2812 LED data\tUsually very good choice for alternative usage, if no WS2812-LEDs are connected/used MOTOR\t1-n\tMotor signal\tMapping between other motor pins) (swapping) should always work fine. Other pins may not work (DMA conflict with DShot). PPM\t-\tReceiver PPM input\tUsually good choice for alternative usage PWM\t1-n\tReceiver PWM input\t? SERIAL_RX\t1-n\tSerial receive pin\tCan not be remapped to any other pins, but can be used for different functions (including software serial ports). SERIAL_TX\t1-n\tSerial send pin\tSERIAL_RX/SERIAL_TX 11-12 are software serial ports #1 and #2 SERVO\t1-n\tServo signal\t? SONAR_ECHO\t- SONAR_TRIGGER\t- SPI_MISO\t1-n SPI_MOSI\t1-n SPI_SCK\t1-n  "},{"title":"Wiki pages with examples of using the Resource Commands:​","type":1,"pageTitle":"Resource Remapping Command","url":"/betaflight.com/docs/wiki/archive/Resource-remapping#wiki-pages-with-examples-of-using-the-resource-commands","content":"Remapping Motor outputsUsing Servos &amp; SERVO_TILTUsing CHANNEL_FORWARDINGSetup on a Fixed Wing Aircraft "},{"title":"RunCam Device Protocol","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/RunCam-Device-Protocol","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"RunCam Device Protocol","url":"/betaflight.com/docs/wiki/archive/RunCam-Device-Protocol#description","content":"RunCam Device Protocol is the serial communication protocol initially developed for the RunCam Split and analog cameras. The protocol itself supports not only full camera osd menu navigation but also triggering recording on split style cameras as well as communicating the available sd-card space, syncing the current date, writing to the osd and turning the camera or wifi function (if available) on and off. Not all features of the protocol are currently supported in betaflight but both betaflights support and the protocol itself are in continued development. Lately similar to TBS Smartaudio and IRC Tramp other companies (for instance Caddx) started to adopt support for the protocol in their cameras. "},{"title":"Currently supported features in betaflight​","type":1,"pageTitle":"RunCam Device Protocol","url":"/betaflight.com/docs/wiki/archive/RunCam-Device-Protocol#currently-supported-features-in-betaflight","content":"Full camera OSD controlStarting/Stopping recording on split style camerasTriggering photo snapshots on runcam split camerasWifi and power toggling on runcam split cameras "},{"title":"Protocol specification​","type":1,"pageTitle":"RunCam Device Protocol","url":"/betaflight.com/docs/wiki/archive/RunCam-Device-Protocol#protocol-specification","content":"The current protocol specification can be found here: !http://note.youdao.com/groupshare/?token=9AD3F89F0B92488E8241F58CAEDF7939&amp;gid=29699666  "},{"title":"Setup​","type":1,"pageTitle":"RunCam Device Protocol","url":"/betaflight.com/docs/wiki/archive/RunCam-Device-Protocol#setup","content":"One free non-inverted UART on the FC is required (TX and RX)Select Runcam Device in the Ports Tab in Betaflight Configurator for the used UART.Soft serial may work for some devices and some functions (Softserial has been reported to work with the Runcam Split 2/Mini at least for the record button function). "},{"title":"Supported cameras/devices and functions​","type":1,"pageTitle":"RunCam Device Protocol","url":"/betaflight.com/docs/wiki/archive/RunCam-Device-Protocol#supported-camerasdevices-and-functions","content":""},{"title":"Analog/classic fpv cameras​","type":1,"pageTitle":"RunCam Device Protocol","url":"/betaflight.com/docs/wiki/archive/RunCam-Device-Protocol#analogclassic-fpv-cameras","content":"Any RunCam Camera that supports UART camera controls should work. Micro Swift 3, Runcam Racer 2, etc. Supported Features​ OSD Menu ControlShortcuts like scene switching "},{"title":"RunCam Split​","type":1,"pageTitle":"RunCam Device Protocol","url":"/betaflight.com/docs/wiki/archive/RunCam-Device-Protocol#runcam-split","content":"RunCam Split cameras (1,2,mini and mini 2 etc.) also work however may require a firmware update. The first runcam split shipped with a different protocol - make sure to upgrade it either way as newer firmwares improved various things. Supported Features:​ OSD Menu Control​ Entering the osd menu to change settings should work with the same stick commands as FPV Camera Control  Camera Button Simulation (Record/Photo/Wifi/Power Button)​ Video demonstration: https://goo.gl/tm8CPS Preparation​ Firmware: BetaFlight Firmware (≥3.2.0) Configurator software: Betaflight Configurator (≥3.2.0) Any available UART interface on the BetaFlight 1.Connect the RunCam Split with the UART interface of the Flight Controller​  2.Make the Flight Controller recognize the Split​ For example, we connect the Split to the UART 3 interface on the BetaFlight: connect the flight controller to the computer, then open the Betaflight Configurator. In the Peripherals column of the line UART3 (on the Ports tab), select RunCam Device and click Save And Reboot. 3.Instructions of the functions of the camera and assigning transmitter channels to them​ In the Betaflight Configurator, navigate to the Modes tab. There are new CAMERA WI-FI, CAMERA POWER and CAMERA CHANGE modes. CAMERA WI-FI: turn on/off the WIFI of the camera. When in the OSD of the camera, this is used to confirm your selection. CAMERA POWER: start/stop the video. When in the OSD of the camera, this is used to move to the next menu item. CAMERA CHANGE MODE: switch among the three modes, video, photo and OSD setting mode. When in the OSD of the camera, this will exit the menu. Assign any available channel to the function you need, for example: Assign the AUX1 to the CAMERA WI-FI, range 1900-2100 Assign the AUX2 to the CAMERA POWER, range 1900-2100 Assign the AUX3 to the CAMERA CHANGE MODE, range 1900-2100 4.Assign the channel to the switch of the controller​ Please choose your Model on the controller, then access to the Mixer interface and assign the channel to the switch of the controller. Take opentx 2.2.0 for example, assign the channels CH5, CH6, and CH7 to SA, SB, SD respectively. 5.Test​ Power the Flight Controller and the RunCam Split Set the SA to the bottom, the camera turns on/off the WIFI Set the SB to the bottom, the camera starts/stops the video Set the SD to the bottom, the camera switches among the three modes: video, photo and OSD setting mode "},{"title":"Caddx Turtle v2​","type":1,"pageTitle":"RunCam Device Protocol","url":"/betaflight.com/docs/wiki/archive/RunCam-Device-Protocol#caddx-turtle-v2","content":"Caddx also implemented support for the RunCam Device protocol via their last firmware update. Please note however that only the turtle v2 correctly supports UART controls as the v1 had some incompatible connections on the board despite having UART pads. For the v1 you can still use FPV Camera Control to enter the OSD and control the camera via your transmitter. Beware that OSD control is disabled during recording. CADDX support: Turtle V2 can support RUNCAM protocol without flashing firmware. Turtle V2 has two different versions of hardware. Flashing the firmware may cause the yellow screen to not work. If you need technical support, please go to CADDXFPV official Facebook Supported Features:​ OSD Menu Control​ Entering the osd menu to change settings should work with the same stick commands as FPV Camera Control  Camera Button Simulation (Recording)​ Just as with the RunCam Split starting/stopping recording on a switch is supported. Follow the instructions outlined above to set it up. "},{"title":"Other supported devices​","type":1,"pageTitle":"RunCam Device Protocol","url":"/betaflight.com/docs/wiki/archive/RunCam-Device-Protocol#other-supported-devices","content":""},{"title":"RunCam Control Adapter (OSD Cable Simulation)​","type":1,"pageTitle":"RunCam Device Protocol","url":"/betaflight.com/docs/wiki/archive/RunCam-Device-Protocol#runcam-control-adapter-osd-cable-simulation","content":"The RunCam Control Adapter, which connects between the OSD pin and an UART on the FC, allows navigation of the OSD menu via the transmitter. Unlike the FPV Camera Control however no additional resistors or capacitors are required. Depending on the device some shortcut keys are also supported. For example keeping roll pressed to to the right will switch the currently selected scene when using a Micro Swift2. Setup Guide​  List of confirmed compatible cameras​ Swift series\tCompatible Eagle series\tCompatible Sparrow series\tCompatible Owl series\tCompatible\tSwift 2\tYes Micro Eagle\tYes Sparrow\tYes Owl 2\tYes Micro Swift 2\tYes Eagle 2 Pro\tYes Micro Sparrow\tYes Owl\tNo Swift 2 Rotor Riot\tYes Night Eagle 2\tYes Micro Swift\tYes Eagle 2\tYes Swift Mini 2\tYes Eagle\tNo Swift Mini\tYes  Sky series\tCompatible Nano\tCompatibleSKYPLUS\tYes Nano\tNo SKY\tYes  "},{"title":"Runaway Takeoff Prevention","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Runaway-Takeoff-Prevention","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Runaway Takeoff Prevention","url":"/betaflight.com/docs/wiki/archive/Runaway-Takeoff-Prevention#description","content":"Runaway Takeoff Prevention is a safety feature designed to detect and auto-disarm if an unsafe response is detected by the PID controller on the first takeoff after power-up. Sometimes referred to as a &quot;Tasmanian Devil&quot;, some configuration or hardware issues can cause a violent and dangerous out-of-control spin immediately after arming or as the throttle is raised for takeoff. Some common causes are: Props on incorrectlyMotor order wrongMotors spinning the wrong directionFlight controller (gyro) orientation incorrect This feature is designed to only intervene and auto-disarm during a runaway event on first takeoff after powering up, and should have no impact on normal flight. "},{"title":"WARNING​","type":1,"pageTitle":"Runaway Takeoff Prevention","url":"/betaflight.com/docs/wiki/archive/Runaway-Takeoff-Prevention#warning","content":"While this feature is designed to prevent most types of runaway takeoff events, it cannot be guaranteed that all such occurrences will be prevented. The wide range of hardware and variable circumstances mean that there may be cases where this feature may be unable to provide additional protection. As always it is the pilot's responsibility to ensure their aircraft is configured properly and safe to fly. "},{"title":"Operation​","type":1,"pageTitle":"Runaway Takeoff Prevention","url":"/betaflight.com/docs/wiki/archive/Runaway-Takeoff-Prevention#operation","content":"The Runaway Takeoff Prevention feature is enabled by default beginning with Betaflight 3.3. There are two phases of operation: Takeoff: After the first arm after powering up, the feature looks for excessive PID responses that indicate the craft is not responding properly and escalating towards an out-of-control runaway event. If detected the flight controller will automatically disarm. A beep pattern - one long, one short - will indicate that a runaway takeoff event occurred and &quot;RUNAWAY&quot; will be displayed as the arming disabled reason in both the OSD and CLI. Successful Flight: Once the craft successfully takes off and is in controlled flight the feature will deactivate for the remainder of the battery. After that finial successful take-off, the pilot can arm and disarm at any time without re-activating the feature. The detection of successful flight involves looking at throttle level and control stick activity along with the craft responding correctly to the PID controller over a period of time. By deactivating the feature after successful flight is detected we prevent subsequent inadvertent disarming caused by crashes or gate/branch clips. This short video is an example of the feature activating: https://youtu.be/FEczCjAWv_0 Unsuccessful Flight: If triggered, the pilot should disarm immediately. The feature will remain active until a successful flight clears the problem. Re-arming without solving the problem will likely re-trigger the protection. False triggering can, rarely, occur. It can be minimised by modifying the configuration parameters. "},{"title":"Configuration​","type":1,"pageTitle":"Runaway Takeoff Prevention","url":"/betaflight.com/docs/wiki/archive/Runaway-Takeoff-Prevention#configuration","content":"In general there shouldn't be any need to adjust the configuration parameters. Default values were chosen based on testing and should give good results. However as is always the case, additional testing and feedback from the users may identify some further optimization to these settings. It's anticipated that once the Runaway Takeoff Prevention feature matures that some of the tunable values might be eliminated and replaced with optimized hard-coded values to simplify the configuration. The first group of parameters configure how the feature detects and activates during a runaway takeoff event: runaway_takeoff_prevention = ON Set this to OFF to completely disable the feature. Note that there will be no protection against runaway takeoff events and the firmware will behave as it did before the feature was implemented. WE DO NOT RECOMMEND DISABLING THE FEATURE. Runaway events can be quite violent and personal injury or damage to property can occur for even seemingly minor setup issues like putting the props on incorrectly. The remaining parameters affect the logic used to detect normal controlled flight and deactivate the feature for the remainder of the battery: runaway_takeoff_deactivate_throttle_percent = 25 (reduced to 20 in BF4.0) Determines the minimum throttle percentage threshold where successful flight can be considered. Valid values range from 0 to 100. Along with throttle level the logic also requires activity on the roll, pitch or yaw sticks (minimum 15% deflection) along with the PID controller successfully controlling the craft with the PID_sum staying under control. When these conditions are met the logic accumulates successful flight time. Generally you won't need to adjust this value as most quads require around 25% or more throttle to takeoff/hover. The exception may be if you have and extremely powerful or light craft that is capable of flying well below 25% throttle. In this case you may want to lower this value closer to your actual hover throttle percent. If this value is set too low it's possible that the logic will deactivate too quickly and may not trigger in a real runaway event. Setting it too high will result in the logic taking more flight time to deactivate as it only accumulates flight time when the throttle is above the setting. runaway_takeoff_deactivate_delay = 500 This is the amount of successful flight time in milliseconds that must be accumulated to deactivate the feature. Valid values range from 100 (0.1 seconds) to 1000 (1 second). The default value of 500 (0.5 seconds) seems to be very reliable and shouldn't need to be adjusted. The goal is to deactivate the logic after a &quot;reasonable&quot; but short period of time once we've determined the craft is flying normally. However we want it to deactivate before we might reach the first point where a crash or other event may occur (like at the first gate during a race). Raising this value will delay the deactivation and it's possible that a crash or gate/branch clip could cause an unintended disarm. Lowering this value too much could result in the logic deactivating too soon and not providing protection in a runaway event. It's important to note that the delay is the accumulated amount of flight time where the other criteria like throttle level, stick activity (minimum 15% deflection), etc. are met. Thus the &quot;real&quot; elapsed time before deactivation may be longer than 0.5 seconds if the throttle was dropping below the limit or if the R/P/Y sticks were centered. The actual behavior can be viewed by using blackbox logging - see the debugging section below. "},{"title":"Debugging​","type":1,"pageTitle":"Runaway Takeoff Prevention","url":"/betaflight.com/docs/wiki/archive/Runaway-Takeoff-Prevention#debugging","content":"Additional data may be captured in a blackbox log that will give insight into the operation of the Runaway Takeoff Prevention feature. Enable capturing this additional data by: set debug_mode = RUNAWAY_TAKEOFF This will enable additional debug values in the log that can be used to observer the operation of the feature. debug[0] - boolean value (0/1) This value indicates whether the feature is active (1) and in detection mode. Once successful flight deactivates the feature the value will be (0). debug[1] - boolean value (0/1) Indicates whether the PID_sum value for some axis has exceeded the runaway_takeoff_threshold and we are in a countdown for runaway_takeoff_activate_delay milliseconds. The logic is preparing to auto-disarm assuming the PID_sum value continues to exceed the threshold. debug[2] - boolean value (0/1) Indicates that the criteria for deactivation (throttle level, stick activity and PID response) has been met and we are accumulating in-flight time. debug[3] - number Indicates the in-flight milliseconds accumulated so far. Once this reaches runaway_takeoff_deactivate_delay the feature will be disabled. Any time debug[2] = 1 then debug[3] will be accumulating time. As the Runaway Takeoff Prevention feature matures based on feedback from the user community the debugging features may become unnecessary and removed to save space some time in the future. "},{"title":"Known Issues​","type":1,"pageTitle":"Runaway Takeoff Prevention","url":"/betaflight.com/docs/wiki/archive/Runaway-Takeoff-Prevention#known-issues","content":"Crashing severely immediately on takeoff may cause an auto-disarm. Not really an issue and probably a good thing. Simply don't crash on takeoff. :)Severe bouncing/bumping the ground on takeoff may cause a disarm. This is not actually very likely to occur as it takes a really big hit to trigger the disarm with the default configuration.Arming with no props and moving the R/P/Y sticks significantly may trigger a disarm. This is normal and is caused because the PID controller is trying to control the craft and it's not responding properly (because there are no props!). As a result the PID_sum values will grow as the PID controller begins to push harder and harder to make something happen. This can end up looking like a runaway PID_sum event. The feature has provisions in place to allow limited bench testing without disarming. Heavy yaw movements could still trigger a disarm but generally &quot;wiggling&quot; the sticks to see the motor responses won't be a problem. Testing while connected to the configurator will temporarily disable runaway takeoff prevention and allow unlimited bench testing without props.&quot;Hand flying&quot; with the props off could trigger a disarm. NEVER TRY TO HOLD AN ARMED CRAFT IN YOUR HANDS WHILE THE PROPS ARE ON!! If the props are off and you move the craft around while the motors are spinning the PID controller will oppose the motion but because there are no props the PID_sum value will grow possibly triggering a disarm. On the other hand, holding the craft still while moving the sticks to feel the motor response will not trigger a disarm. "},{"title":"Version History​","type":1,"pageTitle":"Runaway Takeoff Prevention","url":"/betaflight.com/docs/wiki/archive/Runaway-Takeoff-Prevention#version-history","content":"Betaflight 4.0 Changed runaway_takeoff_deactivate_throttle_percent default to 20. Betaflight 3.3 Simplified configuration by removing unnecessary tuning parameters runaway_takeoff_threshold and runaway_takeoff_activate_delay. The previous default values were found to be appropriate and unnecessary to tune.Enhance logic to accelerate deactivation under higher throttle conditions. Betaflight 3.3RC3 Added gyro rate checking to activation detection to improve bench testing Betaflight 3.3RC2 Reactivate the feature after the pilot uses crash-flip to recover from a crash. Provides protection for the next arming and takeoff in case of broken props or other problems that might cause a runaway.Disable the feature temporarily while crash-flip is active to prevent triggering while the pilot is attempting to flip over.In coordination with Betaflight Configurator 10.2.0 or later, temporarily disable the feature when arming while connected to the configurator. This allows unrestricted bench testing without risk of triggering a disarm. Prevents any need to manually disable the feature which may result in forgetting to re-enable before flying. Betaflight 3.3RC1 Initial release "},{"title":"Problems with SBus and FPort when using OpenTX","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/SBus-FPort-and-RC-Smoothing-when-using-OpenTX","content":"","keywords":""},{"title":"Why is setting the number of channels important?​","type":1,"pageTitle":"Problems with SBus and FPort when using OpenTX","url":"/betaflight.com/docs/wiki/archive/SBus-FPort-and-RC-Smoothing-when-using-OpenTX#why-is-setting-the-number-of-channels-important","content":"If a FrSky X link is set to more than 8 channels, some channels will only get sent every second packet, i.e. will have a latency of 18ms. Other channels will be sent every 9ms. It's not clear which channels will be affected, and which won't. This delay is noticeable and has a negative impact on flight control. It will also cause unwanted ripples in the motor signals when sticks are moved. "},{"title":"Why is this relevant to RC smoothing settings in Betaflight?​","type":1,"pageTitle":"Problems with SBus and FPort when using OpenTX","url":"/betaflight.com/docs/wiki/archive/SBus-FPort-and-RC-Smoothing-when-using-OpenTX#why-is-this-relevant-to-rc-smoothing-settings-in-betaflight","content":"Derivative or feed-forward components in the PIDs, such as D setpoint weight or throttle boost, require smooth changes in the RC signal. Without any smoothing, the signal going to the motors will be sharp and spiky. Lots of stick movement will then then make motors unnecessarily hot and waste battery power, without achieving anything useful. By appropriately smoothing the RC setpoint changes, these spikes can be rounded off, so the motors sound smoother and don't get so hot. To provide optimal smoothing, the flight controller needs to know the time interval between new data elements. When automatically determining the RC smoothing configuration, Betaflight measures the time between data packets, but does not know how the user has configured the radio link itself. So it currently assumes that SBus and FPort users will have set it to 9ms data intervals, as above, by limiting the number of channels in FrSky X mode to only 8. If users have configured more than 8 channels, they should manually configure the RC smoothing settings and not use the automatic values. "},{"title":"Can I just use the automatic / default settings if I limit the channel count to 8?​","type":1,"pageTitle":"Problems with SBus and FPort when using OpenTX","url":"/betaflight.com/docs/wiki/archive/SBus-FPort-and-RC-Smoothing-when-using-OpenTX#can-i-just-use-the-automatic--default-settings-if-i-limit-the-channel-count-to-8","content":"Yes. Everything will work fine like that. Betaflight 3.4 sets the optimal filter values automatically if interpolation is set to AUTO: set rc_interp = AUTO "},{"title":"When should I override the default settings?​","type":1,"pageTitle":"Problems with SBus and FPort when using OpenTX","url":"/betaflight.com/docs/wiki/archive/SBus-FPort-and-RC-Smoothing-when-using-OpenTX#when-should-i-override-the-default-settings","content":"In auto mode, Betaflight assumes the user has limited the FrSky X mode channel count to 8 or less, and that the incoming data interval is 9ms. On that basis it will typically set the filter frequency to 50Hz and the older interpolation window to 11ms. Manually setting a lower filter frequency will smooth out the RC input ripple that goes to the motor. Usually this is not necessary. If the user runs a lot of D weight or throttle boost, greater than normal smoothing can make the motor traces smoother. Unfortunately this smoothing will add latency, delay, and diminish the feed forward effect, which isn't a good thing. Usually it is better to accept some degree of noise in the motor signal and keep using the defaults. If SBus data is at 9ms intervals, the automatic settings are at 50Hz. The lowest I would recommend overriding to, when attempting to reduce RC ripple, would be 30Hz. "},{"title":"What if I need more than 8 channels of data?​","type":1,"pageTitle":"Problems with SBus and FPort when using OpenTX","url":"/betaflight.com/docs/wiki/archive/SBus-FPort-and-RC-Smoothing-when-using-OpenTX#what-if-i-need-more-than-8-channels-of-data","content":"If more than 8 SBus or FPort channels are needed in FrSky X mode, it's best to set the number of channels to 16 so that all will have the same 18ms step interval, and manually configure both smoothing filters to 25Hz, and set the interpolation time to 19ms. If the number of channels is set to a number between 8 and 16, for example, 11, data will be received at 9ms intervals on 13 channels, and 18ms intervals on 3. Logging is needed to identify which are fast and which are slow. If all dynamic control signals are put on the fast channels, and switches are only set on the slow channels, the default values for smoothing and interpolation are fine and will optimise performance. "},{"title":"Why use filter based RC smoothing over the older interpolation method?​","type":1,"pageTitle":"Problems with SBus and FPort when using OpenTX","url":"/betaflight.com/docs/wiki/archive/SBus-FPort-and-RC-Smoothing-when-using-OpenTX#why-use-filter-based-rc-smoothing-over-the-older-interpolation-method","content":"It's faster, has less delay, keeps motor traces smoother, is much less badly affected by looptime jitter, and handles packet loss in the Rx link better. that's it - enjoy! "},{"title":"Serial Blackbox Logging","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Serial-BlackBox-Logging","content":"","keywords":""},{"title":"OpenLog is not a suitable serial blackbox logging device for Betaflight 4.0 and beyond​","type":1,"pageTitle":"Serial Blackbox Logging","url":"/betaflight.com/docs/wiki/archive/Serial-BlackBox-Logging#openlog-is-not-a-suitable-serial-blackbox-logging-device-for-betaflight-40-and-beyond","content":"As a result of never ending demands for different log items for better and more diverse flight characteristics analysis, output bandwidth requirement for serial blackbox output finally exceeded 230.4Kbps which is the fastest supported by OpenLog. For 4.0 and beyond, serial blackbox users must use logging devices with faster communication speed such as OpenLager instead, and configure baudrate at 1.5Mbps at least for stable recording. See https://github.com/betaflight/betaflight/issues/9043#issuecomment-544333986 for bandwidth requirement for varying logging rates. "},{"title":"Additional info from the future (Betaflight 4.3):​","type":1,"pageTitle":"Serial Blackbox Logging","url":"/betaflight.com/docs/wiki/archive/Serial-BlackBox-Logging#additional-info-from-the-future-betaflight-43","content":"We can now disable blackbox headers to save logging overhead. This can make OpenLog work again because it doesn't need to handle as much data. We have presets to disable blackbox headers (see the blackbox_disable preset). Try it and see if slower loggers will work again with less data to log! "},{"title":"Serial Passthrough","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Serial-Pass-Through","content":"","keywords":""},{"title":"Update FrSky XSR RX Firmware​","type":1,"pageTitle":"Serial Passthrough","url":"/betaflight.com/docs/wiki/archive/Serial-Pass-Through#update-frsky-xsr-rx-firmware","content":"I was unable to replicate due to issues with the FrSky tool not loading COM ports. If you are familiar with this procedure, please update if necessary. UPDATE: Joshua Bardwell has posted a video on this process. Seehttps://www.youtube.com/watch?v=Hzf-EuQZYsE "},{"title":"FrSky Tool​","type":1,"pageTitle":"Serial Passthrough","url":"/betaflight.com/docs/wiki/archive/Serial-Pass-Through#frsky-tool","content":"https://www.frsky-rc.com/stk/ Expand Tool-FrSky update sportClick the Download buttonExtract the contents (it's a .zip) and remember the location "},{"title":"FrSky Rx Firmware​","type":1,"pageTitle":"Serial Passthrough","url":"/betaflight.com/docs/wiki/archive/Serial-Pass-Through#frsky-rx-firmware","content":"https://www.frsky-rc.com/download/ Download the firmware for your Rx (if you don't see your Rx, below, go to the download page (above) and find the correct firmware for your model Rx). Extract and remember the location: https://www.frsky-rc.com/xsr/https://www.frsky-rc.com/r-xsr/https://www.frsky-rc.com/xm-plus-mini-sbus-non-telemetry-full-range/https://www.frsky-rc.com/x4rsb/https://www.frsky-rc.com/r9-mini/https://www.frsky-rc.com/r9-slim-plus/ "},{"title":"The Process​","type":1,"pageTitle":"Serial Passthrough","url":"/betaflight.com/docs/wiki/archive/Serial-Pass-Through#the-process","content":"NOTE: This might not work in every case. To increase success rate, it's important to power the Rx from a 5 volt source other than a dedicated Rx power pad, as you do not want the Rx to be powered by USB. On some flight controllers, there is a set of dedicated pads for Rx, i.e., Ground, 5V, and Signal. The 5V pad is sometimes powered when connecting USB. You want to avoid this 5V source and tap into any other 5V source on the FC. ALSO, this works best if you know SmartPort is working, as you will use this UART. It's much easier to deal with an F4 flight controller that has a dedicated SmartPort pad. If no dedicated pad, then you'll need to understand inversion, which is beyond this scope. F3's and F7's natively support UART inversion, so almost any UART Tx pad will do, so it's a non-issue on those. IMPORTANT! Don't disconnect power while flashing/upgrading your Rx! Connect the copter to your computer via USB (if the Rx powers up, might as well stop - it should not power up), and note the COM portGo to Ports tab and note the UART SmartPort is on, and subtract 1 (e.g., if SmartPort is on UART 3, then 2 is the number you want)Open Betaflight Configurator, connect you copter, access CLIEnter and send command serialpassthrough 2 57600 (where '2' is the UART ID; remember, UART 3 is actually ID 2, UART 2 would be 1, and UART 1 would be 0), then press ENTER. If all went well, you should see: Port 2 opened, baud = 57600 Forwarding, power cycle to exit Close Betaflight Configurator (but do not power cycle the FC)Start the FrSky_Update_sport_rev... tool (this will be found in the folder where the contents of Tool-FrSky update sport were extracted to)Select the COM port (whatever Betaflight Configurator was using).Then click the File button and navigate to where you extracted the firmware update for your Rx. The tool is now waiting to find a device; the bottom of the tool window will show &quot;Finding device...&quot;Apply power to the copter (LiPo), which will power the Rx. If that went well, you should see the firmware version at the bottom of the tool window, instead of &quot;Finding device&quot;. If this is not the case, then it didn't work. If okay up to this point, click the Download button...the status message at the bottom should now read &quot;Please wait, in progressing&quot; (their typo, not mine) "},{"title":"If the Rx is powered up by USB​","type":1,"pageTitle":"Serial Passthrough","url":"/betaflight.com/docs/wiki/archive/Serial-Pass-Through#if-the-rx-is-powered-up-by-usb","content":"It happens in some cases. If you have such a setup, you will need some way to disconnect the receiver, i.e. use a plug. Reconnect it once the tool window shows &quot;Finding device...&quot; and flashing will commence. Try at own risk. "},{"title":"NOTES​","type":1,"pageTitle":"Serial Passthrough","url":"/betaflight.com/docs/wiki/archive/Serial-Pass-Through#notes","content":"From BryceJ: On my Spracingf3 board with a CP210x it would only work if I had my MSP changed to 57600 as well. Not sure what is the issue there. (If you change the MSP speed make sure you reconnect to the configurator at 57600 as well) If you use the PID/VTx adjustment on the taranis, make sure that still works. There was a couple versions that it didn't. For disconnecting the XSR, if you have the plug still on there you can plug and unplug that. On a x4r it would be a little more annoying if you direct soldered it. "},{"title":"minimOSD Serial Pass-through​","type":1,"pageTitle":"Serial Passthrough","url":"/betaflight.com/docs/wiki/archive/Serial-Pass-Through#minimosd-serial-pass-through","content":"Allows use of the MW OSD Configurator to adjust settings and load fonts. Video "},{"title":"Servos & Servo Tilt","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Servos-&-SERVO_TILT-for-3.1","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"Servos & Servo Tilt","url":"/betaflight.com/docs/wiki/archive/Servos-&-SERVO_TILT-for-3.1#introduction","content":""},{"title":"Starting with v3.1, default servo output assignments are deleted from the firmware. Instead, servo outputs must be explicitly assigned byresource CLI command. (For details of the resource command, please refer to Betaflight resource remapping.​","type":1,"pageTitle":"Servos & Servo Tilt","url":"/betaflight.com/docs/wiki/archive/Servos-&-SERVO_TILT-for-3.1#starting-with-v31-default-servo-output-assignments-are-deleted-from-the-firmware-instead-servo-outputs-must-be-explicitly-assigned-byresource-cli-command-for-details-of-the-resource-command-please-refer-to-betaflight-resource-remapping","content":"Background Internal on STM32 processors are Timers that are used for timing the output pulse to motor, servos, etc. Each FC board can have different STM32 pins connected to input &amp; outputs on the FC. This is one of the main reasons for different Target hex files. The pins and internal resource are Defined in the &quot;target'c' source files found here. For example: The timer and channel assignment for outputs SPRacingF3/target.c lists: Output 1: TIM16 CH1 Output 2: TIM17 CH1 Output 3: TIM4 CH1 Output 4: TIM4 CH2 Output 5: TIM4 CH3 Output 6: TIM4 CH4 Output 7: TIM15 CH1 Output 8: TIM15 CH2  Grand rule is that channels of a timer can not be assigned to different functions. If you have motors connected to Outputs 3 and 4, then TIM4 is locked to motor and can not be used for something else. This means that you can not use Output 5 and 6 for servos. (The exceptional case is when motors are controlled by legacy PWM protocol; in this case, motors and servos may be able to be mixed on channels of the same timer. If this does not work for your board, see fixes below.) Options are (1) Output 1 &amp; 2: Servos and Output 3~6: Motors or (2) Output 1~4: Motors and Output 7 and 8: Servos Then there is another point of consideration if you are using Dshot; DMA channel conflict.  "},{"title":"General Information​","type":1,"pageTitle":"Servos & Servo Tilt","url":"/betaflight.com/docs/wiki/archive/Servos-&-SERVO_TILT-for-3.1#general-information","content":"Use resource list to view current running assignments. resource list  Servos are assigned to board pads/pins by resource CLI command. resource servo n xYY  Here, n is a servo number starting from 1, xYY is a MCU pin identifier, for example, A8, c8 and B10. Notice that the servo numbers are 1 origin. This is different from servo numbering in the configurator's Servos tab. Servos you assign here as 1 and 2 corresponds to servos 0 and 1 in the Servos tab.  "},{"title":"Examples​","type":1,"pageTitle":"Servos & Servo Tilt","url":"/betaflight.com/docs/wiki/archive/Servos-&-SERVO_TILT-for-3.1#examples","content":"Here are some examples of assignments. If you can't find a one that fit your needs, then you have to go read the hard boiled story: Working on your own in the later half of this page. Target/board maintainers, please add example entries that reflect mappings based on the v3.0.1 pwm_mapping.c; it can cover all the mappings, not only for servo tilts  Example 1: NAZE32 &quot;Shift by 2&quot; style assignment​ If you have a NAZE32 already setup based on &quot;Shift Motor Outputs by 2&quot; rule, and it was working prior to v3.1, here is your assignment. Note: The default assignment uses motors 1-4 which will cause conflicts if you attempt to reassign servos to motors 5-6. On F1 boards, assign the Servos output to motors #1 &amp; 2 to avoid timer conflicts and reassign Motors 1-4 to previous 3-6 pin assignments to prevent timer issues. resource motor 1 none resource motor 2 none resource servo 1 a8 resource servo 2 a11 resource motor 1 b6 resource motor 2 b7 resource motor 3 b8 resource motor 4 b9 save   Example 2: SPRacing F3 Controlling External PWM triggered Buzzer​ This example is for controlling PWM triggered buzzer on Matek 5-in-1 PDB, but can be applied to other cases. Objective: To control an external PWM controlled device (Matek 5-in-1 PDB buzzer), with SPRacing F3, using IO_1[4] (RC CH2) with AUX2 switch. This can be accomplished by one of two ways: A. (Available for all v3.1) Use SERVO_TILT and assign AUX channel of your choice to servo 0 on the Servo tab. B. (Limited to v3.1.5 and later) Use CHANNEL_FORWARDING and set CLI variable channel_forwarding_start to your switch channel number. Option A is recommended if gimbal servo is not used and number of devices are less than or equal to two (SERVO_TILT can only control two channels). Here's step by step for option A, controlling IO_1[4] (RC CH2) with AUX2: (1) BF3.1 does not configure any servo for you; you have to assign it explicitly. (1-1) Make sure you are not using PPM input (CH2 shares a timer with PPM). (1-2) Use following CLI command resource pwm 2 none resource servo 1 a1 save  (2) Turn on SERVO_TILT(And turn off CHANNEL_FORWARDING if you have it on.) (3) On Servo tab, check A2 on servo 0. Resource command above specified servo 1, but this number is 1-origin, servo tab servos are 0-origin, so these are the same. (4) At this point, you should be able to confirm servo 0 on Motor tab responding to AUX2 switch inputs. (5) And if you connect your external device to IO_1[4], you should be able to confirm it is working.  Example 3: SPRacing F3 EVO Controlling External Still Camera Shutter​ Motor output 8 was used resource servo 1 b1   Example4: Servo for Tri-Copter on an F3 board (thanks Bking1340)​ Just to give some feedback how I got my tricopter servo to work 100% on a F3 board(Xracer F303) and betaflight 3.1.7 Motor 1-3 are connected to motor pin 1-3. I don`t want to draw power from the board with my servo, so the + - of the servo goes to a 5v ubec and the signal goes to motor pin 8 (On F3 boards Servos output to motors #7 &amp; 8 to avoid Timer conflicts). Now you must assign your servo in cli: If you type 'resource' in the CLI, you will see that motor 8 are on A03, but Serial_Rx 2 are also on A03 What I did is: Resource motor 8 None Resource Serial_Rx 2 None Resource servo 1 A03  And my servo are working, I did not have to change directions on servo or epa etc. I'm no pro and still don't know what Serial_Rx 2 are doing, but everything is working correctly in the last 2 flights. I have a taranis with a x4r on Sbus and smartport - pids are showing on my taranis as well as battery voltage - seems like I don't use Serial_Rx 2. I halved the P and I 50% from stock on yaw, but the tail were loose, went back to stock and it`s rock solid with no oscillation.  Example 5: Setup for Matek F411 mini for Tricopter in Betaflight 3.2.2 by Flashted​ If Firmware update is needed on F411, it is best done in the CLI. I have found these instructions work with the Betaflight 3.2.2, Something has changed in the higher versions that have made changes to how the tail servo outputs, and this method does not work with Betaflight 3.4.1, or higher. I have not tried between version 3.2.2 - 3.4.0 either. I am at the moment trying to figure out what has changed, and why, but, if you want to try with higher versions, try it, and try to figure it out. Betaflight 3.2.2 works with a minimum of effort to get your craft flying. In the future, I want to experiment with GPS rescue for tricopter, which Betaflight 3.2.2 does not support, so I am going to go foward to version 3.4.1 which supports GPS rescue, and start there. If you power down the board, press the bootloader button on the Matek F411 flight controller, and plug back in like a lot of other boards, it does not enter bootloader mode, and there is NO blinking led confirming bootloader mode, at least with my windows 10 laptop. It does not work. If computer can't detect it, reinstall DFU drivers with zadig or use this https://impulserc.blob.core.windows.net/utilities/ImpulseRC_Driver_Fixer.exe To enter bootloader mode in CLI: In CLI Type bl enter Then bootloader mode is enabled, and newer firmware can be flashed. Do a full CLI dump, to have a reference to the original file before making ANY changes. You may need a fixed starting point in case you have to start over. You must assign it to be a tricopter &quot;first&quot;, and then &quot;save and reboot&quot; it as a tricopter so that all resources, and their designations will show up in the CLI. Setup: The first servo output channel is used for tail servo The first motor output channel is used for tail motor The second motor output channel is used for right motor The third motor output channel is used for left motor. The 2 front motors face forward and (tail) rear motor / servo facing towards you. On the board: Motor 1 - (rear) to motor output pin S1 Motor 2 (right) to motor output pin S2 Motor 3 (left) to motor output pin S3 Motor 4 motor output pin S4 is free, as this is a Tricopter. Motor pin 4 will not work for tail servo due to timing issue. (Tail servo setup is explained below, keep reading) If you need more outputs for servos, or as I needed strobes, motor 4 (S4) can't be remapped to servo if motor 3 (S3) is assigned to a motor. If S5 is used for a servo, S6 can be remapped to a servo also. I used S5 for telemetry in Taranis. You can also use RSSI pad or LED pads for servo outputs. I chose to try to disable motor 4, and noticed that I lost motor 2 when I tried to calibrate the esc's due to some Betaflight strangeness. I re-asigned motor 4 back to the original assignment, and motor 2 worked again, no problems. Go figure... In the BetaFlight GUI in the Receiver Tab is a selection for how the connection to the model is setup. Betaflight Defaults to AETR1234 Aileron, Elevator, Throttle, Rudder(yaw) Aux 1 2 3 4. This is an accepted standard setup on Taranis. In the Configuration tab: feature SERVO_TILT feature CHANNEL_FOWARDING Need to be OFF. Selecting TRICOPTER sets yaw output to servo automaticly. How to set the tail servo: I chose to use pin 6 in my setup for tail servo, as pin 5 in my setup is used for telemetry, as I stated earlier. In the CLI: Type resource motor 6 none save Then the pin will be free. Pin on board is S6, and B10 is the location of the pin. Type: resource servo 1 B10. save Nothing needs to be changed in the Servos tab for movement. Do not draw power from the board with a servo especially on a tricopter. Positive, black negative are going to a pdb 5v output. The yellow or white wire, signal wire can be connected to motor pin 5, motor pin 6, 7 or 8, will work. IF you want to disable the tail servo when it`s not armed, go to the CLI. Type: set tri_unarmed_servo = OFF save Or if you want it on. Type: set tri_unarmed_servo = ON save Now check if your servo/motor are tilting in the correct direction. If you move your yaw stick to the left, the motor must tilt to the right. If not, there are 2 ways to fix this. In CLI: Type Set yaw_control_direction = -1 save If you quickly move your tail to the right the motor must tilt quickly to the left, and vice versa. You can just reverse the yaw direction on your Tx, but it is better to do it in the GUI, so the flight controller does not have to process the data. Set the endpoints in the GUI so you have 40 degrees deflection in both directions, and neutral at as level as you can get it. An analog servo works as will a digital one in most cases my directions were not reversed with an analog servo, but may be with a digital. Hopes this helps. Cheers!!!   New Example Place Holder​  "},{"title":"Working on your own​","type":1,"pageTitle":"Servos & Servo Tilt","url":"/betaflight.com/docs/wiki/archive/Servos-&-SERVO_TILT-for-3.1#working-on-your-own","content":"There are several rules for successful servo MCU pin assignment. The MCU pin must be connected to an accessible board pad or through-holeThere may be a free unused MCU pin on your board, but without the pin broken out as an accessible pad or through-hole, you will end up with horrendous work of breaking out MCU pins by micro soldering. The MCU pin must have a timerMCU pins are associated with different functions. Some are capable of working as UART signal pins, some are capable of working as I2C or SPI bus signal pins, and yet some are only capable of driving the pin logic high or low. Servo outputs need the timer function. Pins associated with timer can be found out by executing resource list command and looking for &quot;MOTOR&quot; or &quot;PWM&quot; entries. The timer should not collide with other usesThis rule requires a bit of explanation. An MCU pin associated with timer is connected to a timer channel of the timer. Each timer has it's own time base (or clock), and all timer channels on the same timer behaves according to the time base. Think, for example, a group of people looking at a (physical) clock with only one hand. Each is given a task of yelling out loud when the second hand advanced certain number of times. If you give them a clock with a hand advancing every second, they will yell based on seconds. Now think of another group of people and give them a clock with a hand that advances once every hour. They will be yelling based on hours. You can NOT mix someone told to yell at every X seconds with someone told to yell at every Y hours in a same group. (To continue...) "},{"title":"Setup for Fixed Wing Aircraft","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Setup-for-a-Fixed-Wing-Aircraft","content":"","keywords":""},{"title":"If you're looking to fly a simple delta wing, scroll to bottom.​","type":1,"pageTitle":"Setup for Fixed Wing Aircraft","url":"/betaflight.com/docs/wiki/archive/Setup-for-a-Fixed-Wing-Aircraft#if-youre-looking-to-fly-a-simple-delta-wing-scroll-to-bottom","content":"Some have asked if BetaFlight can control a Fixed wing aircraft. "},{"title":"Boris' Note:​","type":1,"pageTitle":"Setup for Fixed Wing Aircraft","url":"/betaflight.com/docs/wiki/archive/Setup-for-a-Fixed-Wing-Aircraft#boris-note","content":"I would not trust this as nobody is testing it, but it may work.​ iNav fork puts a lot of effort in airplane modes. Its better to try them.​ The page is to help those that wish to Experiment and Test Fixed Wing functionality with BetaFlight.​ Do Remember that YOU are the TESTER.​ Reference the Betaflight resource remapping. Note: Pin re-mapping requires BetaFlight 3.1 an higher. AresFPV asked this in Boris' ßF Thread and then did research on how to do this. His findings are:​ Fixed wing success: For the few of you that are trying to get fixed wing working in BetaFlight, I've been able to have some success on the bench. I'm using BetaFlight because iNAV doesn't have the piko blx target yet. This post helped a lot: https://www.rcgroups.com/forums/showpost.php?p=36886595&amp;postcount=45058 Select WING as type. Basically you need to map the right servos to the pins used by motors 3 and 4 (on a wing) using the CLI Resource. Use the servos tab to reverse them if needed. Set the PWM frequency as separate from PID loop and set it to 50hz to make the servos work (you will lose all of the new ESC protocols but that's not as important on a plane). The modes and mixes work fine for me as-is and I expect that everything else will be fine as well(like OSD). I just need to add FPV to it and get it up in the air!  A note from Maine_Guy 1-25-20​ The notes below did not help me in my quest to get my 4 channel micro F4 board running (although helpful). Persistence, luck, and the latest build did. The new version of Betaflight allows for timer remapping, which may alleviate issues noted below with the timer conflicts. --mixer is mixer CUSTOMAIRPLANE --I kept motor 1 as originally assigned resource MOTOR 1 B00 --I reassigned motor outputs 2-4 to servos resource SERVO 1 A02 resource SERVO 2 A03 resource SERVO 3 B01 --motor mix mmix 0 1.000 0.000 0.000 0.000 --servo mix (this one I found by trial and error - since the servo outputs don't seem to match - but it works! smix reset smix 0 3 1 100 0 0 100 0 // smix 1 2 0 100 0 0 100 0 // smix 2 4 2 100 0 0 100 0 // smix 3 0 3 100 0 0 100 0 //is this needed? not sure --lastly, reassign the timer on b01 timer B01 AF1  A Post by RCvehicleGuy:​ Well I messed with trying to get betaflight to work with an airplane. It was clearly not intended to work. What I wanted to do was use the resource command to put servos 1-4 on motor outputs 1-4 on my naze board and do a custom smix to assign stabilized roll, stabilized elevator, rc throttle, and stabilized rudder to the outputs respectively. Like a futaba radio. It sounds simple but for the life of me couldn't get it to work last night. I think something is broken somewhere, these possibilities haven't been tested I would think, seeing as betaflight is designed for acro-quad flying it really only gets tested on acro-quads. I think the key is the smix command, either it isn't working correctly or I don't understand it well enough to work. I'll try again when I have more time and see if I can't get this working. so to output stabilized roll to servo 1 I believe the smix command is, if you just reset the smix: smix 0 0 0 100 0 0 100 0, or something like that. rule 0, servo 0 (1), source 0 (PID roll), 100 (rate), 0 (null speed), 0 (min), 100 (max), 0 (box. don't know what this is). As I said I will try again. I already tried iNav but without the resource command I can't map servo 1 to motor output 1, or don't understand how that would work at least. Part 2: OK! I'd like to update that I have the outputs on my Naze32 working for stabilized roll, pitch, and yaw, good for a typical 3 servo 4 channel plane. I am using a 1k cycle and pid loop time. I wanted to use motor output 4, resource b07, as rudder, but it seems broken on my Naze so I moved that to 3 and decided to just use the throttle output on my receiver instead. It's interesting to watch the PIDs wind-up with throttle applied. They wind up up much harder for setpoint changes and hardly at all for board movements. This should make for some interesting flight characteristics. I'm excited to get this on the Crack Laser and in the air to see how it changes the way it flies. It will be funny to be doing a rolling loop and let go of the aileron and have iterm windup keep it rolling another 3 revs or so, lol. I'm more interested in the applications of level mode. For people new to airplanes or for strangers who ask if they can fly, having a working level mode means hey why not. On small 3d foamies at least, what is usually a touchy aerobatic machine could be turned into what amounts to a 3 channel trainer with level mode working. I'll update again after I get it installed in the plane, reversing figured out, and a testflight in. Here is a screenshot of my smix:https://www.rcgroups.com/forums/showthread.php?2464844-Betaflight-Flight-Controller-Firmware-Discussion-Thread/page3040#post36958637 smix 0 2 0 100 0 0 100 0 smix 1 3 1 100 0 0 100 0 smix 2 4 2 100 0 0 100 0 smix 3 5 7 100 0 0 100 0 Part 3: Well the thing about it continuing a roll for three revs after you finish a rolling maneuver is true, lol. I've set the I-terms to 0. My original understanding was that there is I term decay and I term gradually becomes less and less effective as it wound up and built up error would be forgiven after a while. Will try to tune some more. I did put the gyro on a perfectly flying plane, might be impossible to make it any better. Part 4: Well I've come to the conclusion that airplanes just don't need gyro stabilization, I'll keep playing with it, because it's interesting, the plane does fly. So far the only neat thing it has accomplished are hard stops for point rolls. I have D at 3 right now and it still has too much of a dampening effect, As you approach your desired rate it steps in and backs off the rate for you. Putting D at 0 and upping rates a little. After turning up the rates and getting rid of D it's starting to make sense. Going to lower my P on ailerons and introduce D back in there and see where it's at. Flies kind of weird, I guess we'll see if it works out. Part 4: It is interesting to fly. I think the application is better suited to something that is less impacted by the extra 7 grams or so a Naze32 adds. It really isn't awful but you can tell it is carrying more weight. The plane I have it on is a Twisted Hobbies Crack Laser. It's an EPP plane for 3D aerobatics that has an AUW of 160-170g or so. I've been flying 3d foamies for many years now and it's the only thing that I'm pretty good at. Auto level works, I need to tune it in better though. With an airplane, especially a flat wing foamie like this one, the elevator doesn't control pitch proportional to servo travel. So it needs some tuning. It works really well for the roll axis, but it doesn't have enough authority on the pitch axis. I have to hold the stick full back to get it to nose up enough to fly, with 45 degree angle limits in place. The strength parameter of angle mode might need to have pitch and roll decoupled for this to work really well for airplanes. The weather took a turn here so it may be a few days or more before I can really mess with the settings and see if I can get it working well. I need to experiment with the D-term and the D setpoint weight. The most interesting application of this is getting roll hesitations to be unnaturally crisp. Realistically using a gyro on a plane like this is more pain than gain, but it's fun to experiment. I think the best application for these boards are quads and hopefully some experimenting will be done and helicopters will work too. The smix I'm using looks like this:# smixsmix 0 2 0 100 0 0 100 0 /pairs PID roll with motor out 1/smix 1 3 1 100 0 0 100 0 /pairs PID pitch with motor out 2/smix 2 4 2 100 0 0 100 0 /pairs PID yaw with motor out 3/smix 3 5 7 100 0 0 100 0 /Attempt to pair RC Throttle to motor out 4/ The smix is for single servo ailerons, elevator, and rudder. It's meant to run 3 servos off the first 4 outputs and an esc off the 4th. For my Naze, maybe it's the board or the code, but I can't get anything to output of motor out 4. I ended up hooking the throttle directly to the receiver and that's fine. But for dual aileron applications you'll want to use motor out 4 for another aileron. Or for when you need other things to work. To understand what all the parameters of smix do, you can google cleanflight smix and it is explained well. I think for flying wing smix there are video tutorials of people setting this up. My resource setup looks like this:# resourceresource SERVO 1 A08resource SERVO 2 A11resource SERVO 3 B06resource SERVO 4 B07These are the resources used by motors 1-4 typically. Interestingly, as identified in the GUI under the servos tab and in the smix commands, as you may have noticed, all the servo labels in the resource command are -1 in value compared to the values used in smix and in the servos tab. So that is one bug that could be fixed. You must use an index between 1 and 8 when resourcing a servo. I tried to resource servo 0 and servo -1 to compensate for the strangeness and it doesn't let you. These resources are also only applicable to the Naze32 I'm pretty sure. Other boards are likely to have a different IO and to determine where to assign the servos can be done with the resource command. You will be able to see where motors 1-4 are resourced and just swap in the servos to these places. ISSUES: I've been having issues with the BF CLI by the way. Sometimes I get garbage characters in the top of the display and other weird things happen sometimes. I flashed cleanflight to my Naze and in the cleanflight CLI it's all pretty and straight. Not that betaflight doesn't work, but it looks a little weird, thought I'd say something. The smix only seems to work on mixer customairplane. When I use mixer custom I can't get the servos to work. As mentioned only the first three motor outs do anything, the fourth I couldn't get to work. The last two MAY work, I don't have pins soldered on the board right now.... I'm not aware of a servo update frequency parameter but having one could be good for airplanes. Those with digital servos can use 200-300hz update frequencies. For future helicopter applications I know that some tail servos have a smaller centerpulse, sort of half way between oneshot and PWM. I think that's everything I learned so far regarding betaflight and planes. Post by: touchthebitum​ Not a great video (first test in LOS flight) but it is only to illustrate that Betaflight can work pretty good with a fixed wing. I'm impressed of the landing speed in acc mode. It was very windy (about 20kmh)https://youtu.be/DpmqeoRGwgA  Betaflight-compatible FC on an EPP Foam Plane by etheli​ I wanted to add a Betaflight-compatible flight controller to a 28&quot; EPP foam plane to get support for OSD, FrSky SBUS receiver, easy VTX frequency configuration, and stabilized flight modes. It took a bit of research and tweaking to come up with a good Betaflight configuration for airplane use. The configuration I came up with lays out on the F3 Omnibus board like this:  Using Betaflight v3.3.3, I started with a CUSTOMAIRPLANE model/mix type. The resources are allocated as follows: resource MOTOR 1 B08 # motor PWM1 &lt;- Throttleresource SERVO 1 A02 # motor PWM4 &lt;- Elevatorresource SERVO 2 A03 # motor PWM3 &lt;- Aileronresource SERVO 3 B07 # motor PWM7 &lt;- Aileron2resource SERVO 4 B06 # motor PWM8 &lt;- Rudderresource SERVO 5 B04 # SBUS/PPM &lt;- Camera tilt [AUX2 (ch6)]resource SERVO 6 A08 # ledstrip &lt;- AUX3 (ch7) # Rule Servo Source Rate Speed Min Max Boxsmix 0 2 1 100 0 0 100 0 # Servo 1 Elevator &lt;- Stabilized pitchsmix 1 3 0 100 0 0 100 0 # Servo 2 Aileron &lt;- Stabilized rollsmix 2 4 0 100 0 0 100 0 # Servo 3 Aileron2 &lt;- Stabilized rollsmix 3 5 2 100 0 0 100 0 # Servo 4 Rudder &lt;- Stabilized yawsmix 4 6 9 100 0 0 100 0 # Servo 5 &lt;- RC AUX2 (ch6)smix 5 7 10 100 0 0 100 0 # Servo 6 &lt;- RC AUX3 (ch7) Because of internal-processor-timer constraints the PWM2 output cannot run a servo (only a motor). Any needed servo reversing should be done in the flight controller (not in the transmitter). The servo-reversing commands look like this: smix reverse 2 1 r # reverse Servo 1 Elevatorsmix reverse 3 0 r # reverse Servo 2 Aileronsmix reverse 4 0 r # reverse Servo 3 Aileron2smix reverse 5 2 r # reverse Servo 4 Ruddersmix reverse 6 9 r # reverse Servo 5 RC AUX2 (ch6)smix reverse 7 10 r # reverse Servo 6 RC AUX3 (ch7) In my setup I needed to reverse the Elevator and Rudder servos. See here for a file containing the basic configuration. The plane flies great in gyro-stabilized (acro) mode. For tuning I needed to lower most of the values to tame oscillations, and I increased the servo 'rate' values to increase the responsiveness of the controls: set p_pitch = 40set i_pitch = 40set d_pitch = 25set p_roll = 25set i_roll = 25set d_roll = 15set p_yaw = 50set i_yaw = 30set roll_srate = 100set pitch_srate = 80set yaw_srate = 80 For the self-leveling flight mode to work well, the plane should be in a somewhat pitch-up position when the accelerometer is calibrated in Betaflight. The calibration can also be trimmed up in that direction. I've posted a full build article for this plane here.  Betaflight for a Flying Delta Wing (using a Betaflight F3) by DangerFlite​ I've been reading the above text and following the thread on rcgroups trying to get a simple rate mode working on my delta wing using a Betaflight F3. I ran into problems because: I'm not using a Naze32, so the aforementioned resource assignments don't applyI'm only using two elevons, so the mixes applied above don't work for meBetaflight is confusing when it comes to servos (everywhere in betaflight it appears to be servo 3 / 4 for the elevons but when you assign resources, they are referred to as servo 1 / 2)It is a lot easier than it looks. The purpose of this guide is to help someone who doesn't already know So far I have the flight controller working great in passthrough mode (manual flight), Acro/rate mode (stabilised), and Angle mode (self-level). Even in passthrough mode the BFF3 is still useful as it enabled the use of an SBUS receiver, telemetry, battery monitoring, and an excellent OSD. Wiring configuration​ Connect the ESC to 'M1' pad on the Betaflight F3 (1/2 in below image)Connect left elevon servo to 'M3' pad on the Betaflight F3 (3 in below image)Connect right elevon servo to 'M4' pad on the Betaflight F3 (4 in below image)  Betaflight Settings​ Flash betaflight with full chip eraseConfigure your ports / receiver / other settings as normalConfiguration tab &gt; Select &quot;Flying Wing&quot; mixer typeCLI tab &gt; Run the following commands to get the servos working: resource servo 1 b08 resource servo 2 b09 save Servo tab &gt; Reverse either servo 3 or 4 (if needed) by setting the rate to -100 (assuming 100% of travel is needed)Modes tab &gt; Set your arm switchModes tab &gt; Set up passthrough mode for manual flight (no stabilisation) and Angle mode for self levelling (useful once you get the trim right). I recommend having passthrough mode set in case of any strange tuning issues so you can take control. Betaflight for a Flying Delta Wing (using a Matek f405 and Matek FCHUB-W PDB) by druckgott​ Wiring configuration​ Connect the ESC to 'M1' pad on the Matek FCHUB-W PDBConnect left elevon servo to 'SV3' pad on the Matek FCHUB-W PDBConnect right elevon servo to 'SV4' pad on the Matek FCHUB-W PDB  You have now to MAP the Servos to this Pins: resource servo 1 C07 resource servo 2 C08 save Now it works Some troubleshooting and extra notes:​ If your plane reacts correctly to roll but wrongly to pitch (or vice versa), swap the resource assignments of the servos My ESC refused to work at all even though it worked fine when the FC was set to the Quad X configuration. The below configuration fixed the issue. You might be fine to leave these at MULTISHOT125 or one of the DSHOT settings depending on what your ESC supports. It must be something to do with timers. The servos worked regardless of the ESC protocol selected. Configuration tab &gt; Set ESC/Motor protocol to &quot;PWM&quot;†Configuration tab &gt; Enabled &quot;Motor PWM Separated from PID Speed&quot;†Configuration tab &gt; Set &quot;Motor PWM Frequency&quot; to 480hz† All of the PID loop / gyro update frequency combinations I tried yielded the same results. I had to raise pitch/roll P significantly and almost completely disable the I term to get the wing feeling responsive (and not overshoot the angles a lot). D remained basically where it was. Great having the OSD to configure this in the field! "},{"title":"Single Wire Soft Serial","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Single-Wire-Software-Serial","content":"","keywords":""},{"title":"Disclaimer:​","type":1,"pageTitle":"Single Wire Soft Serial","url":"/betaflight.com/docs/wiki/archive/Single-Wire-Software-Serial#disclaimer","content":"Software Serial is not recommended for RC control links and should not be used to connect serial receivers. "},{"title":"Software Serial List of compatible pins​","type":1,"pageTitle":"Single Wire Soft Serial","url":"/betaflight.com/docs/wiki/archive/Single-Wire-Software-Serial#software-serial-list-of-compatible-pins","content":"Not for public viewing yet. List of compatible pins. CLI commands to free up PWM 5 and PWM 6: resource MOTOR 5 NONE resource MOTOR 6 NONE CLI commands to assign softserial: resource serial_tx 11 &lt;pin&gt; resource serial_tx 12 &lt;pin&gt; NOTE: The OK means it is compatible, and does not warrant it will work when it is configured as a part of a complete system.  OMNIBUS(F3) (by @jflyper) Pin\tLabel\tS.Audio\tTramp\tS.Port\tNoteA8\tLED strip\tNG\tNG\tNG B4\tPPM (*1)\tOK\t?\tOK\tWhen PPM not in use B6\tPWM8/SCL\tOK\tOK\tOK\tI2C must be de-configured? Need furthe testing. B7\tPWM7/SDA\tOK\t?\t?\tDitto @olexs: B07 (PWM7/SDA) works with S.Audio on 3.2, no extra config needed (I2C resources aren't mapped per default).  OMNIBUSF4 (by @jflyper) Pin\tLabel\tS.Audio\tTramp\tS.Port\tNoteA1\tPWM5\tOK\t?\tOK A8\tPWM6\tOK\tOK\t?\tTramp report by @llambkin B14\tPPM\tOK\t?\t? B15\tCH2\tOK\t?\t? C8\tCH5\tOK\t?\t? C9\tCH6\tOK\t?\t?\t  OMNIBUSF4SD (by @jflyper, @antonig) Pin\tLabel\tS.Audio\tTramp\tS.Port\tNoteA9\tTX1\tOK\t?\tOK @stsa64\t@stsa64: Smartport does not work if running Tramp on A8 (PWM6) via softserial (timer conflict??) A1\tPWM5\tOK @basdelfos\tOK @stsa64\tOK @basdelfos A8\tPWM6\tOK\tOK\tOK B14\tPPM\t?\t?\t? B15\tCH2\t?\t?\t? C8\tCH5\t?\t?\t? C9\tCH6\t?\t?\t?\t  SPRACINGF3 (by @jflyper) Pin\tLabel\tS.Audio\tTramp\tS.Port\tNotesA0\tIO_1[3] PPM/CH1\tOK\t?\t?\tWhen PPM is not in use A1\tIO_1[4] CH2\tOK\t?\t?\tWhen PPM is not in use B4\tIO_1[5] CH5\tOK\tOK\t? B5\tIO_1[6] CH6\tOK\t?\t? A8\tIO_1[7] LED strip\tOK\t?\t? B0\tIO_2[5] CH7\tOK\t?\t? B1\tIO_2[6] CH8\tOK\t?\t? B8\tM5\tNG\t?\tNG\tTIM4 crash with M3&amp;M4 B9\tM6\tNG\t?\t?\tTIM4 crash with M3&amp;M4 A2\tM7\tOK\tOK\t? A3\tM8\tOK\tOK\t?\t Note: Some reports CH1 and CH2 not working: (https://github.com/betaflight/betaflight/issues/2532#issuecomment-284669276)  SPRACINGF3EVO Pin\tLabel\tS.Audio\tTramp\tS.Port\tNotesA8\tLED strip\tNG\tNG\t?\t@pafleraf B1\tM8\tOK\tOK\tOK\t@pafleraf Note: Soft Serial for this target is disabled in bf 3.1.7. However, it works with bf 3.2.0 nightly as of today (2017-05-13)  REVOLT Pin\tLabel\tS.Audio\tTramp\tS.Port\tNotesB6\tLED\t?\t?\tNG\t@alenl2; Need further testing C1\tCRNT\t?\t?\tNG\t@alenl2; No timer? A9\tTX1\t?\t?\tNG\t@alenl2; Timer conflict? (need checking) A10\tRX1\t?\t?\tNG\t@alenl2; Timer conflict? (need checking) B10\tTX3\t?\t?\tNG\t@alenl2; Timer conflict? (need checking) B11\tRX3\t?\t?\tNG\t@alenl2; Timer conflict? (need checking) C6\tTX6\t?\t?\tOK\t@alenl2 C7\tRX6\t?\t?\tOK\t@alenl2  KISS (KISSFC) Pin\tLabel\tS.Audio\tTramp\tS.Port\tNotesA13\tPWM5\tOK (@alenl2)\t?\tNG @basdelfos/@alenl2 A02\tPITCH\tNG (@alenl2)\t?\tOK @basdelfos/@alenl2 A15\tROLL\t?\t?\tOK\t@basdelfos  BLUEJAYF4 Pin\tLabel\tS.Audio\tTramp\tS.Port\tNotesB00\t?\tNG (v1)\t?\tNG\tstaryk@rcg B01\t?\tNG (v1)\t?\tNG\tstaryk@rcg  IRCFUSIONF3 Pin\tLabel\tS.Audio\tTramp\tS.Port\tNotesA00\tPPM\t?\t?\tOK\tWhen PPM is not in use  BETAFLIGHTF3 Pin\tLabel\tS.Audio\tTramp\tS.Port\tNotesB01\tSoft Serial TX1\tOK (v1)\t?\t?\t@iwarp A02\tSoft Serial TX2\tNG (v1)\t?\t?\t@iwarp B07\tPPM\tOK (v1)\t?\t?\t@iwarp http://i.imgur.com/Mh41SmG.jpg Note (2017-07-27) by @jflyper: BETAFLIGHTF3 had a timer assignment problem with pre-3.2 firmware. It is fixed with 3.2, and PB01 and A02 should work as software serial --- need to be verified (29/10/17) by @iwarp B01 confirmed working on 3.2.1 "},{"title":"Soft Mounting and Noise Reduction","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Soft-Mounting-and-Noise-Reduction","content":"","keywords":""},{"title":"Damping Theory by ctzsnooze:​","type":1,"pageTitle":"Soft Mounting and Noise Reduction","url":"/betaflight.com/docs/wiki/archive/Soft-Mounting-and-Noise-Reduction#damping-theory-by-ctzsnooze","content":"Regarding so-called 'maximum damped frequency'... Ideal hardware damping results in a physical effect comparable to that of an electronic low pass filter. We want is full transmission without delay of frequencies below a cut point, and attenuation above that; the higher we go in frequency above the cut point, the less gets transmitted through the damping material. Real world hardware damping usually has the unfortunate result of also generating a resonant peak at the frequency where the damping ought to start. At frequencies above that resonant peak, there is a progressive cut. In principle, therefore, there is no 'maximal damping frequency'. There is just a cutoff point above which damping / attenuation gets progressively greater. The classical physical 'damper' is the shock absorber on a car. Electronic low pass filters (eg PT1 or biquad) do not resonate around cutoff. But most real world hardware damping methods do. The typical damping method we use involves some soft, vibration absorbent material that has a bit of 'give', isolating one part of the system from another. The ideal damping material is a viscoelastic substance that absorbs high frequencies and does not act like a spring. Real world damping materials all act like springs. The springier they are, the more resonance you will get. Adding mass to an object on a spring will lower the cut / resonant peak frequency but will also increase the magnitude of the resonance. For a flight controller, we want to reduce transmission of high frequency noise, but not cause resonance around the peak. The isolating materials should be viscoelastic, not springy. 'Hard' rubber foam and silicone are not viscoelastic. They will minimize transmission of noise but will result in a resonant peak. Adding mass to the FC will lower the cut point and attenuate noise. Very light FC's on relatively hard foam will not be damped much and may resonate at exactly the point we want to cut. If an arm has flex, it will have a resonant peak at a certain frequency and dampen out noise above that. Adding mass to the end of the arm eg with heavier motors will lower that frequency and enhance resonance. Making the arm stiffer will shift the resonant peak higher and attenuate the magnitude of the resonance. The two main problems with 'soft mounting' methods are: they all can induce resonance at or around their cutoff point, and it is difficult to know what the actual cutoff point will be. It is possible to test performance of soft mounting systems is to push noise through them and see how much gets through. For an FC we have the recorder built in - the gyro. So if we were to hard attach the FC to a loudspeaker cone, and drive noise into the loudspeaker, we could get the frequency response of that system (the loudspeaker itself would be non-linear especially with the mass of the FC attached). If we put a soft mount between the loudspeaker cone and the FC, we could see exactly how that soft mount altered noise transmission to the FC; we would have scientific evidence of what kind of attenuation / resonance was actually happening. To do it properly, the mass of the soft mount parts would be included in the first part of the test by attaching them to the loudspeaker cone but not in the attenuation pathway. I did something like this about 30 years ago when testing frequency response of arterial pressure monitoring systems. It takes quite a bit of time to do. Until someone gets hard data on it, we really have no idea if our soft mounts are too soft, too hard, causing resonance, etc. "},{"title":"Soft Mounting the FC board​","type":1,"pageTitle":"Soft Mounting and Noise Reduction","url":"/betaflight.com/docs/wiki/archive/Soft-Mounting-and-Noise-Reduction#soft-mounting-the-fc-board","content":"A nice Over view of the Yaw Twitch and/or throttle oscillations from ctzsnooze​ Lots of us have seen exactly this behaviour. I am surprised that you seem so astonished now that you find it happens to you. It happens randomly. It could happen to anyone. It just happened to happen to you. :-) It goes away with replacing the gyro chip, replacing the FC, or soft mounting the FC; these fixes work whether or not capacitors are added. Sometimes it goes away by just adding capacitors. Since soft mounting is a reliable fix, external vibration seems the likely culprit, difficult otherwise to explain how soft mounting often causes it to just disappear. Blheli-s ESCs are more commonly implicated than non-BLHeli-s ESC's and in some cases capacitors help so there may be an electrical contribution. It is far more common on yaw than the other axes. The yaw sensor within the chip must be physically different from pitch/roll since the axes relative to the layer of silicon for yaw vs pitch/roll are quite different. That's all we know for sure. How these factors actually cause the oscillation, and why it is yaw exclusive, is completely speculative. When soft mounting doesn't work it's usually because it isn't done in such a way as to effectively isolate the FC. I've seen such extreme examples as to render the quad un-flyable, and also much milder examples, so it is not an all or none thing. Although the magnitude is increased by higher yaw P it is not simple feedback oscillation, there is no threshold value of P below which it disappears. The actual oscillation frequencies are so low as to not be attenuated by the o-rings. Exactly what the o-rings block is not clear. It cannot be eliminated by filtering the gyro data - as has been pointed out before, out the primary oscillation frequency is within the range we need for to fly the quad normally. It is not a software issue in blheli or Betaflight, we can be sure of that. Replacing the gyro chip doesn't change that software yet it does fix the problem. My gut feeling is that this is an inherent issue in these gyro chip themselves, and that some individual examples of these chips get it much worse than others. That's why I recommend replacing the gyro chip or the whole FC if simple soft mounting fails to solve the problem. When you guys say you are soft mounting, be aware you need to over drill the holes to 4mm and ideally bevel the top and bottom of the hole so that the FC 'floats' in all axes. You need to check for free movement. If you don't drill out the holes the bolt holes will stick on yaw on the bolts and transmit vibrations directly. Also you can't have anything stiff pushing on the FC, ideally all wires to/from it need to be very fine silicone. You should revisit that mounting and check it does work like you can freely wiggle the board in all three movements. Do that before doing anything else. That is the most likely thing to fix it. I have seen this problem twice (two separate quads, both 6000's, out of maybe 15 machines) and exhaustively tested solutions on those two with the problem. It is pointless trying to filter it out. It is a hardware gyro issue where it is sensitive to noise generated by motors powered by BLHeli-s ESCs. It will be affected by changing yaw P but typically not eliminated. In both cases, proper soft mounting fixed it. Without the soft mounting I also could eliminate it on one by desoldering the gyro chip and replacing it with a brand new one. I didn't try that on the other. My conceptual model is that the hardware PWM system in BLHeli-S ESCs causes some kind of very specific noise at certain throttle points that deeply affects the yaw sensor part of some gyro chips. It is also possible that there is an issue in BLHeli-S code that causes the problem. By that I mean there may be a throttle point where output is not linear. I have noticed that by spooling motors in motors tab very slowly and listening carefully there are some throttle points where the motors lose their smoothness. This non smoothness at certain points is also the case on non BLHeli-s ESCs. It could be that all four motors together at these points somehow encourage positive feedback. To rule this out someone needs to thrust test in such a way to validate linear proportional motor output in the affected range. But to date no-one has done that test or identified any specific ESC firmware issue. FWIW, I disable all dithering in BLHeli-S. Maybe give that a try. But the most important thing is a truly functional soft mounting. Not some half-hearted bunch of o rings​ MotoLab Cyclone boards have plenty of space around the holes, intentionally, no problem there. It's a totally different situation with a Dodo, which has components very close to the holes. Especially tough if the FC bolts need to keep going up for structural reasons like on many small frames, in which case you have no option but to enlarge the holes. I can't stress enough that just over drilling isn't enough. The board can and will slide on the o ring until one hole stops with the edge of that hole wedged on a bolt. Beveling the top and bottom of the hole allows re-centering and is essential with a yaw issue of his kind. I use a cheap conical grinding stone to make the bevel. Post by jubifly​ Had similar problems on my build. I tried both, limiting possible electrical noise with capacitors and mechanical vibrations by soft mounting the FC with some rubber o-rings. Both with no luck. I then tried to remove the FC completely from fixed parts at the frame and left it hanging in the air (just the motor and rx wires) and the yaw twitches disappeared. My thoughts on that were that the rubber rings were not applicable (maybe too hard?!) for soft mounting... Maybe try leave the FC dangling in the air and see if it still happens - just to definitely eliminate the possibility of mechanical noise being the issue. Here is a post from ctzsnooze on a better soft-mounting method.​ http://www.rcgroups.com/forums/showpost.php?p=35486733&amp;postcount=36111 Post from deekon on Soft Mounting:​ https://www.rcgroups.com/forums/showpost.php?p=38103439&amp;postcount=50944 "},{"title":"Links to Soft Mounting hardware:​","type":1,"pageTitle":"Soft Mounting and Noise Reduction","url":"/betaflight.com/docs/wiki/archive/Soft-Mounting-and-Noise-Reduction#links-to-soft-mounting-hardware","content":"OZ -- I am using these, $4.30 for 8 shipped. They are rubber 8mm x 8mm with standard M3 male/female mounting.http://www.ebay.com/itm/151873404692?_trksid=p2057872.m2749.l2649&amp;ssPageName=STRK%3AMEBIDX%3AIT&amp;rmvSB=trueThese are the only ones I have tried and all yaw twitches are gone, they are stiffer than I would think would work, but working well on my revolts (SSG) and sparky2's (9250) flight controllers @ 32/16, motors are hard mounted. These were just posted and look to be red silicon (softer?)http://rotorgeeks.com/index.php?route=product/product&amp;product_id=599&amp;search=damp Gozz -- These are the ones I recently started using too, they work very well for the size.https://www.readymaderc.com/store/index.php?main_page=product_info&amp;cPath=53_777&amp;products_id=6306 "},{"title":"Soft Mounting Motors​","type":1,"pageTitle":"Soft Mounting and Noise Reduction","url":"/betaflight.com/docs/wiki/archive/Soft-Mounting-and-Noise-Reduction#soft-mounting-motors","content":"Comments on this by AILERON8:​ Isolating vibration at its source before it's amplified is standard practice in just about every mechanical and aeronautical engineering handbook that's ever been written. Yet for some reason most folks in this hobby are so laser focused on a software-based filter or FC enhancement of some sort they're blinded to what should be an obvious solution. Dampening the motor vibration, stiffening the frame, or even placing a sensor near or on the motors (utilizing the active feedback signal within the FC software for an automated/enhanced filter) are going to have a much more pronounced effect on noise reduction than all the software filtering in the world. I'd also just like to mention that I am in no way trying to imply that software-based filters in the flight controller are ineffective. Only that reducing motor vibration has great and untapped potential in my opinion. AILERON8:​ The same goes for motor soft mounting, the bolts must be isolated for the method to reach its full potential. I have yet to see a quad with fully soft-mounted motors, but I suspect it would make for the smoothest, most oscillation-free quad ever. So oscillation-free these 32khz gyro's should be all set for takeoff. Floating motors should eliminate the opportunity for resonance to develop and propagate towards the sensitive gyros. Unlike soft-mounting the FC, for motor dampening to be effective it doesn't need to eliminate frame oscillation. The goal for motor dampening is to decouple the frames' natural resonant frequency from the motor as its oscillations vary in frequency and amplitude. All motors oscillate, regardless of balancing. The frame won't oscillate if it's detached from the motors. The motor must completely float in order to achieve this effect however. Which is why I think folks will be in for a surprise when they see how well motor soft mounting can be if fully implemented. I honestly think FC soft mounting will be a thing of the past when the results start pouring-in... Using these wiggly jiggly ones from BG:  Tesseract1984:​ Agreed. Having tried it all (soft mount FC, caps on mains, caps on ESCs, soft mounting motors), this seems to be the ticket. I've had varying levels of success with each option. The most useless of them all being a cap on the mains. Soft-mounting motors makes the most sense. In my opinion doing it to the FC is a band-aid while doing the motors attacks the source and doesn't introduce any delay. A little anecdotal story; i once went overboard with soft mounting a LUX v1 and it actually caused problems. I not only had those rubber bobbins, but also O-rings and the lower standoffs resting on a tpu printed plate with screw holes. What this caused was a very slow wobbling oscillation akin to when I-term is too high (at least in older BetaFlight versions). While multi-rotor flight is still in it's infancy and we are trying new things, yes there are a lot of hype trains. As you can see I've been on them all, but truly, this is the first one that has conclusively solved a plethora of issues including: FPV video interferenceHD cam jelloSporadic yaw twitchUn-tuneable D-termetc etc Would love to see frames come out that have motor soft mounting built into the frame. IMO this should become an industry standard. Also had an idea a few months ago for FC screw holes to have silicon material with a hole big enough for screws. Anyway, just my 2 cents. Just converted my whole fleet using tpu soft mounts and it has literally changed my quadcopter experience. My HD footage actually starting to look like I might know what I'm doing. All aboard, the hype train is leaving the station! Another Post on curing oscillations from linklemming:​ https://www.rcgroups.com/forums/showpost.php?p=36220137&amp;postcount=41113Later comment: I just stuck three squarish (~15mm) pieces of electrical tape on the frame underneath the motors, used an exacto knife to cut holes in the tape for the screws and remounted the motors making sure not to tighten them down too much. I really doubted it would be as effective as it was since vibes can still come thru the mounting screws but it fixed the issue. "},{"title":"Motor Vibration Isolators. Printed in extra flexible NinjaFlex (softer than TPU)​","type":1,"pageTitle":"Soft Mounting and Noise Reduction","url":"/betaflight.com/docs/wiki/archive/Soft-Mounting-and-Noise-Reduction#motor-vibration-isolators-printed-in-extra-flexible-ninjaflex-softer-than-tpu","content":"https://www.rcgroups.com/forums/showpost.php?p=36698872&amp;postcount=2693 Motor soft mount idea:​ Some experiments and observations from AILERON8:​ I've found it's these lower frequencies where the soft motor mounts work best. Sometimes shifting the noise upward, but often eliminating it altogether. In addition to trying-out the dynamic notch filter on two quads I spent last weekend playing with my motor softmounts. Empirical testing only, e.g., quads with busted BB's at the moment unfortunately. I also noticed how the higher sounding prop resonance from one of my quads didn't change (as much) with motor soft mounting. My FC soft mounts seemed to be more effective at alleviating the mid-to-high frequencies of the singing unbalanced butter cutters I was testing. It was far from an exhaustive design of experiment, but there was definitely a trend where my silicone and/or rubber soft mounts helped to get rid of the lower motor and frame resonance without having to place additional BF filters. Using the same butters I also noticed how removing my gyro notches had a noticeable impact on mid throttle oscillation reduction as it related to the noisy props. At least on the one quad I was testing, and that's not the first time I've experienced this effect. I'm hoping to do more testing this upcoming weekend and finally get some BB logs to show cause &amp; effect. Let me clarify on my first statement: not actually &quot;shifting&quot; the frequencies higher, but reducing the amplitude of the lower frequencies, leaving the higher frequency noise alone. "},{"title":"Adding Cap(s)​","type":1,"pageTitle":"Soft Mounting and Noise Reduction","url":"/betaflight.com/docs/wiki/archive/Soft-Mounting-and-Noise-Reduction#adding-caps","content":"Thread about Caps for Noise reduction (has links to recommended Caps):​ https://www.rcgroups.com/forums/showthread.php?2830948-Capacitors-for-noise-reduction Post by Swing3r​ I had issues with yaw oscillation at mid throttle with Aikons + Lumenier 2206-2350KV-motors. Soft mounting helped but not fully so I also added a low ESR 1000uF 63V capacitor to my PDB (cycolone FC is powered by lipo directly) and viola, all traces of the yaw-oscillation is gone. Post by fftunes​ Just another small report of electrical noise: Friend built another all new quad with naze r6 which produced a weird high frequency hum, no matter what filters/PID etc were set to. A single cap (35v 470uf) to the pdb fixed it. "},{"title":"Originally Posted by mnemennth: ad nauseum​","type":1,"pageTitle":"Soft Mounting and Noise Reduction","url":"/betaflight.com/docs/wiki/archive/Soft-Mounting-and-Noise-Reduction#originally-posted-by-mnemennth-ad-nauseum","content":"Today's high-speed high-current ESCs are the electronic equivalent of a chainsaw running WOT, and your entire power supply has to juggle 4 of them at once. They used to have 330-470uF capacitors right on the ESC to clean up this noise, but everybody bitched that the ESCs were too big/long/fat/lumpy, so they started designing with big banks of tiny ceramic caps right on the ESC as a substitute. What they didn't realize was that ceramic caps are not the same as equivalent electrolytic caps due to a factor known as derating. At around the same time, we started demanding massive increases in both speed and current capacity from our ESCs... Ironically, we needed those big caps on the ESCs more than ever just at the time we got rid of them. We need to put that capacitance back on there one way or another. I recommend still installing a 1000uF 35V Low-ESR cap even if you are using a regulator to power your video equipment. Linear regulators can pass some very fast-acting spikes right through to the load they power, while switching regulators are prone to being themselves damaged by such voltage spikes; enough so that Pololu warns about the issue at the bottom of every one of their regulator listings. This search returns only capacitors advertised as Low ESR, and only US vendors.https://www.ebay.com/sch/i.html?_from=R40&amp;_sacat=0&amp;_nkw=1000uf+25v+low+ESR&amp;LH_PrefLoc=1&amp;_sop=15 Look for name brands like Panasonic, Sanyo, Nichicon or Rubycon. Pick a vendor with a price and ETA you like. To be sure you get low ESR you need to check the part # against the MFR website; Low-ESR/High Ripple current rated is what we want. There simply is no better way to spend 3 grams on a build. "},{"title":"List of Soft mounting parts from SadLeprechaun-​","type":1,"pageTitle":"Soft Mounting and Noise Reduction","url":"/betaflight.com/docs/wiki/archive/Soft-Mounting-and-Noise-Reduction#list-of-soft-mounting-parts-from-sadleprechaun-","content":"I use this stuff for soft mounting/vibrations:Motorsstand offso-rings (on top of standoffs)HD cam / escs:Cap for battery lead:Caps for ESCs: It took all that and removing gyro notch filters / PT1 fix to get the F60 Pro quad to run without mid-throttle jitters. Each thing reduced them more and more. "},{"title":"Soft mounting parts from AILERON8​","type":1,"pageTitle":"Soft Mounting and Noise Reduction","url":"/betaflight.com/docs/wiki/archive/Soft-Mounting-and-Noise-Reduction#soft-mounting-parts-from-aileron8","content":"motor mountsWhat I also like about the sticky rubber mounts is they're effective without having to stack them in multiples. Just one on top of the arm and a TPU soft mount underneath is enough to improve the noise profile. Especially for really powerful motors.Pictures "},{"title":"Post on soft motor mounts:​","type":1,"pageTitle":"Soft Mounting and Noise Reduction","url":"/betaflight.com/docs/wiki/archive/Soft-Mounting-and-Noise-Reduction#post-on-soft-motor-mounts","content":"https://www.rcgroups.com/forums/showpost.php?p=37788454&amp;postcount=49263 "},{"title":"Spektrum and RC Smooting Filter","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Spektrum-and-RC-Smoothing-Filter","content":"","keywords":""},{"title":"A little background.​","type":1,"pageTitle":"Spektrum and RC Smooting Filter","url":"/betaflight.com/docs/wiki/archive/Spektrum-and-RC-Smoothing-Filter#a-little-background","content":"Spektrum has two basic RC protocols, but they can operate at different frame rates: DSMX 22msDSMX 11ms (preferred)DSM2 22msDSM2 11ms (uncommon) Most people will be using DSMX, and most of the Spektrum transmitters support DSMX 11ms. However a few do not. When you bind, always bind in 11ms mode if it is available. "},{"title":"Transmitters that do not support 11ms:​","type":1,"pageTitle":"Spektrum and RC Smooting Filter","url":"/betaflight.com/docs/wiki/archive/Spektrum-and-RC-Smoothing-Filter#transmitters-that-do-not-support-11ms","content":"DX6iDXeDX6e If you own one of these transmitters and use DSMX protocol, you may need to manually set your Rc smoothing cutoffs to: set rc_smoothing_input_hz = 21 set rc_smoothing_derivative_hz = 21  These are the default values for 22ms (if auto detect was able to detect it). If you don't own one of those transmitters, you can probably stop reading now. Auto detect cutoffs (set to zero in cli) will most likely work. To double check (with transmitter and receiver powered and connected) type rc_smoothing_info in CLI and check the detected frame rate. It seems since 3.4.0 release that 22ms is at least sometimes auto detected, have yet to confirm if it is 100%. Basically what happens is with DSMX (Spek2048), the receiver always outputs 11ms frames to the FC. So RC Smoothing Filter correctly detects 11ms frame interval and sets the Input and Derivative filters accordingly (41hz for both). But if the transmitter is sending frames at 22ms the cutoffs of 41hz are not low enough, and will cause large spikes in RC command, Dterm, and Motor outputs. The FC can't tell what frame interval the TX-RX link is using, only what the receiver is putting out. "},{"title":"DSM2 Protocol​","type":1,"pageTitle":"Spektrum and RC Smooting Filter","url":"/betaflight.com/docs/wiki/archive/Spektrum-and-RC-Smoothing-Filter#dsm2-protocol","content":"For DSM2 (Spek1024), I don't have DSM2 hardware to verify. It could be a problem here too. The best way to know is look at a log, or post the log in Slack/Facebook/RCgroups for someone to look at. "},{"title":"Charts from Spektrum showing what transmitters support DSMX 11ms and which do not:​","type":1,"pageTitle":"Spektrum and RC Smooting Filter","url":"/betaflight.com/docs/wiki/archive/Spektrum-and-RC-Smoothing-Filter#charts-from-spektrum-showing-what-transmitters-support-dsmx-11ms-and-which-do-not","content":"https://www.dropbox.com/s/3nkaonks1uimvrb/Spektrum%20transmitter%20comparison%20charts.zip?dl=0 "},{"title":"How to setup Spektrum Serial Receivers","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Spektrum-Rx-setup","content":"","keywords":""},{"title":"Binding​","type":1,"pageTitle":"How to setup Spektrum Serial Receivers","url":"/betaflight.com/docs/wiki/archive/Spektrum-Rx-setup#binding","content":"Spektrum Bind Facility "},{"title":"Telemetry​","type":1,"pageTitle":"How to setup Spektrum Serial Receivers","url":"/betaflight.com/docs/wiki/archive/Spektrum-Rx-setup#telemetry","content":"Howto setup Spektrum SPM4649T Telemetry "},{"title":"RSSI​","type":1,"pageTitle":"How to setup Spektrum Serial Receivers","url":"/betaflight.com/docs/wiki/archive/Spektrum-Rx-setup#rssi","content":"Howto use RSSI with Spektrum SPM4649T and other satellites "},{"title":"Spektrum Satellite Bind 3.2","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Spektrum-Satellite-Bind-for-3.2","content":"","keywords":""},{"title":"General Description​","type":1,"pageTitle":"Spektrum Satellite Bind 3.2","url":"/betaflight.com/docs/wiki/archive/Spektrum-Satellite-Bind-for-3.2#general-description","content":"Prior to 3.2, Spektrum satellite bind pin was fixed to a pre-defined pin, usually a RX pin of fixed UART port. With 3.2 and later, you have a freedom of moving the Spektrum satellite receiver around with bind facility following your choice of UART. The bind pin automatically defaults to RX pin of the UART port the satellite receiver is configured; if you configure UARTx for serial RX and set serial RX protocol to one of SPEKTRUM kind, then UARTx_RX will be used for binding. If SRXL is selected as a serial RX protocol, then UARTx_TX will be used for binding. With 3.3 and later, the automatic bind pin selection also works for DSM receivers connected in half-duplex mode (see note below). Note Binding will only work if there are a direct connection between the FC processor and the satellite, allowing for bi-directional data. On REVO, and all other F4 based FCs there are inverters on some UARTs that will block the binding signal. UART3 is usually OK on most F4s, UART1 and 6 might be more troublesome. F4 boards with TX pin of an UART exposed directly to pads/THs can use the TX pin and CLI serialrx_halfduplex set to ON. "},{"title":"Overriding Bind Pin Default​","type":1,"pageTitle":"Spektrum Satellite Bind 3.2","url":"/betaflight.com/docs/wiki/archive/Spektrum-Satellite-Bind-for-3.2#overriding-bind-pin-default","content":"The automatic bind pin selection can be overridden by specifying a pin to use by RX_BIND resource and resource cli command. resource RX_BIND pin-id  There are targets with RX_BIND by default, which disables the automatic port selection. In this case, you can remove this assignment by the following command. resource RX_BIND NONE  "},{"title":"Bind Plug​","type":1,"pageTitle":"Spektrum Satellite Bind 3.2","url":"/betaflight.com/docs/wiki/archive/Spektrum-Satellite-Bind-for-3.2#bind-plug","content":"The bind plug facility is also reconfigurable with 3.2. Use resourceRX_BIND_PLUG to specify the bind plug pin. resource RX_BIND_PLUG pin-id  Note that only the Negative logic plug (short to ground to make it work) type is supported (for now). "},{"title":"Binding Sequence once all is setup. This is the Same as has been.​","type":1,"pageTitle":"Spektrum Satellite Bind 3.2","url":"/betaflight.com/docs/wiki/archive/Spektrum-Satellite-Bind-for-3.2#binding-sequence-once-all-is-setup-this-is-the-same-as-has-been","content":"In the CLI:set spektrum_sat_bind = 9 save  Unplug USB cable, plug it back in, when the LED in the receiver flashes, bind it to the RC transmitter. Normally you are now done with the bind process, unless you have also disabled automatic reset. Described below. Automatic reset from bind mode is enabled by default, in some situations it may be needed to disable it at the same time binding is setup: set spektrum_sat_bind = 9 set spektrum_sat_bind_autoreset = OFF save  If automatic reset from bind mode is disabled, you have to manually reset it after binding is complete set spektrum_sat_bind = 0 set spektrum_sat_bind_autoreset = ON save  Other bind options values: 3 for dsm2 1024/22ms 5 for dsm2 2048/11ms 7 for dsmx 2048/22ms 9 for dsmx 2048/11ms "},{"title":"Reverse range​","type":1,"pageTitle":"Spektrum Satellite Bind 3.2","url":"/betaflight.com/docs/wiki/archive/Spektrum-Satellite-Bind-for-3.2#reverse-range","content":"It is usually necessary to reverse the ROLL and the YAW. rxrange 0 2000 1000 rxrange 1 1000 2000 rxrange 2 2000 1000 rxrange 3 1000 2000  More details can be found here: https://github.com/SpektrumFPV/SpektrumDocumentation/blob/master/Telemetry/Remote%20Receiver%20Interfacing.pdf "},{"title":"Howto setup Spektrum SPM4649T SRXL Telemetry","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Spektrum-SPM4649T-SRXL-Telemetry-setup","content":"","keywords":""},{"title":"The information you can get via Spektrum Telemetry.​","type":1,"pageTitle":"Howto setup Spektrum SPM4649T SRXL Telemetry","url":"/betaflight.com/docs/wiki/archive/Spektrum-SPM4649T-SRXL-Telemetry-setup#the-information-you-can-get-via-spektrum-telemetry","content":"RSSI, Frame drops and Holds.Battery Voltage. Min/Max and current value.Battery Current and Capacity used.Betaflight Configuration Menu System, CMS.VTX Status (In a separate VTX Setup menu) In BetaFlight 4.0 a few items have been added, you will be able view: Battery average cell voltage or voltage of the full pack, depending on how you have set the cli parameter: report_cell_voltage = OFFAllowed values: OFF, ON Core temperature of the flight controller CPU.Combined average RPM of all motors. Please note: RPM values below 1000 will be shown as 999, due to limitations in the Spektrum telemetry frame. Use the transmitter scroller to select the items you like to use. Note: When using CMS in this way, it will be given highest possible priority on the telemetry radio link for performance reasons. A few other telemetry reports will be disabled as long as you are using CMS. This makes it VERY IMPORTANT to leave CMS with a proper EXIT, otherwise you will loose some telemetry data. Like battery current and capacity used, VTX status etc. "},{"title":"Telemetry sample screen shots.​","type":1,"pageTitle":"Howto setup Spektrum SPM4649T SRXL Telemetry","url":"/betaflight.com/docs/wiki/archive/Spektrum-SPM4649T-SRXL-Telemetry-setup#telemetry-sample-screen-shots","content":" "},{"title":"New items in BF4.0:​","type":1,"pageTitle":"Howto setup Spektrum SPM4649T SRXL Telemetry","url":"/betaflight.com/docs/wiki/archive/Spektrum-SPM4649T-SRXL-Telemetry-setup#new-items-in-bf40","content":" "},{"title":"Supported Sensors","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Supported-Sensors","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"Supported Sensors","url":"/betaflight.com/docs/wiki/archive/Supported-Sensors#introduction","content":"This page is a un-complete list of supported sensors by betaflight. To be sure that your sensor is supported check in /src/main/drivers/drivers/ accgyro, barometer, rangefinder, compass "},{"title":"Compass​","type":1,"pageTitle":"Supported Sensors","url":"/betaflight.com/docs/wiki/archive/Supported-Sensors#compass","content":"AK8975AK8963HMC5883lQMC5883lHMC5983 "},{"title":"Gyroscope / Accelerometer​","type":1,"pageTitle":"Supported Sensors","url":"/betaflight.com/docs/wiki/archive/Supported-Sensors#gyroscope--accelerometer","content":"MPU3050MPU6050MPU6500MPU6000MPU9250BMI160BMI270ICM20601ICM20602ICM20649ICM20689ICM40625L3GD20LSM6DSO(LSM6DSOX) "},{"title":"Barometer​","type":1,"pageTitle":"Supported Sensors","url":"/betaflight.com/docs/wiki/archive/Supported-Sensors#barometer","content":"BMP085BMP280BME280BMP388QMP6988MS5611DSP310 "},{"title":"Range Finder​","type":1,"pageTitle":"Supported Sensors","url":"/betaflight.com/docs/wiki/archive/Supported-Sensors#range-finder","content":"HCSR04Benewake LIDAR TF02Benewake LIDAR TFmini "},{"title":"TBS Unify Smartaudio","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio","content":"","keywords":""},{"title":"What's new​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#whats-new","content":"2017-02-12 Note on compatibility of SmartAudio V1 devices (Compatibility section)2018-07-19 Note on operational mode switching2020-07-25 Updated targets, removed broken link. Added link to latest revision of TBS SmartAudio documentation TBS SmartAudio​ Latest manual: https://www.team-blacksheep.com/tbs_smartaudio_rev09.pdf "},{"title":"Setup​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#setup","content":"From teralift's post in Boris' thread (modified a bit)​ Targets TBS SmartAudio is supported on all F3, F4, F7 and H7 targets (except for those with integrated VTX). Wiring Just wire the SmartAudio wire to a free TX port, hardware UART or software serial. For software serial, be careful that your port may not be labelled TX, or port labelled TX may not work. (It can be freely assigned to valid timer port.) (There are some compatibility issues reported; if you have any problems, search the net before going into the BF github repo and cry for help.) Configuration The up to date configurator supports easy configuration of the SmartAudio on the selected port. Goto Ports tabSelect TBS SmartAudio from Peripherals drop down menuSpeed can be left at AUTO.  Generic CMS 3.1 will come with the generic CMS (Configuration Menu System) that runs on top of multiple display devices; FC-integrated OSD, I2C OLED display and external OSD (MinimOSD variants) running latest version of MWOSD (Release 1.6.5 or later). (You even can switch between OSD and OLED while in CMS.) This means that users of external OSDs can control SmartAudio from the CMS. From AILERON8's post in Boris' thread:​ There is a little info on smartaudio setup in here, but you may need to do a bit of troubleshooting to make it work for your particular setup. Good luck! I look forward to setting up SmartAudio on my next BFF3 quad myself. https://github.com/betaflight/betaflight/issues/1029 http://team-blacksheep.com/tbs-unify-pro-5g8-manual.pdf Here is a tutorial by Amano13:​ https://tmr.kiwi/betaflight-mwosd-smartaudio-cms/ From Boris:​ The easiest is of course to get fc with OSD. That works absolutely flawless, but there is a separate betaflight repository with LUA scriptshttps://github.com/betaflight/betaflight-tx-lua-scripts I am thinking to add more howto videos to github locations. So those who are willing to make nice howto videos please post it in here. "},{"title":"User's Responsibility​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#users-responsibility","content":"The SmartAudio support unlocks certain capabilities of a SmartAudio device, to provide users with maximum flexibility. Therefore, it is user's responsibility to operate the device within the limits of respective local regulations. "},{"title":"Compatibility​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#compatibility","content":"Both SmartAudio V1, V2 and newer devices are supported. The SmartAudio V1 is NOT compatible with some hardware UARTs (as of 2017-02-12). If you have trouble with V1 devices with hardware UARTs, please try the software serial (available in v3.1.6 patch release or later). Unify 5G8 Pro Race Edition: Lower frequencies are not supported. Power setting can be selected as 500 or 800, but will only go up to 200, as will be indicated on the status line. SPARKY2: Due to the pull-up resistors, Flexi-port is not suitable for Unify 5G8 Pro, Pro HV and Pro HV Race edition. Main-port may be compatible (need testing). "},{"title":"SmartAudio CMS guide​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#smartaudio-cms-guide","content":""},{"title":"The top menu (Band/Channel mode)​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#the-top-menu-bandchannel-mode","content":"The top menu for SmartAudio VTX in band/channel mode looks like this.While most of the entries are intuitive, there are several things that need additional explanation. "},{"title":"Status Line​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#status-line","content":"The status line on the top menu page of SmartAudio VTX menu indicates current status of the vtx in the following format: m bc ffff ppp  where m : Operational model, F (Freestyle) or R (Race). b : Current transmitting band, A (BOSCAM A), B (BOSCAM B), E (BOSCAM E), F (FatShark/NexWave) or 'R' (Raceband). c : Current transmitting channel, 1 through 8. ffff: Current transmitting frequency. ppp: Current transmitting RF power, numeric value for mW (25, 200, 500, 800), or PIR (In-Range Pit mode) or POR (Out-Range Pit mode). Note that the status line indicates &quot;running&quot; status of the VTX device, and values may be different from band, channel and power setting entries below the status line. "},{"title":"Operational Models​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#operational-models","content":"In Betaflight, a SmartAudio device operates in one of two operational models: Race​ This is a model that gives minimum interferance to other pilots. A SmartAudio device powers up in pit mode, and remain in pit mode until transmission is commenced. When operating in this model, left most character of the status line is R. If the device is in pit mode, current power field of the status line is either PIR or POR, until transmission is commenced. While in the pit mode, changes to BAND, CHAN and POWER will not take effect until SET menu entry and associated confirmation is done (transmission commencing).BAND, CHAN and POWER can be modified after commencing, but they all still require SET to take effect. Refer to TBS Unify 5G8 Pro Manual for explanation of &quot;In-Range&quot; and &quot;Out-Range&quot;. Freestyle​ This is a model used when flying alone. A SmartAudio device will power up actively transmitting at band and channel with power as they were set before the power cycle. When operating in this model, left most character of the status line is F, and current power field matches that of power level selection menu entry. Changes to POWER takes effect immediately, but changes to BAND and CHAN must be commenced by SET. Switching between Freestyle and Race​ There is an OPMODEL entry in the CONFIG sub-menu. Select either FREE or RACE. A device must be power cycled immediately after the selection for the change to take effect. "},{"title":"The top menu (Band/Channel mode)​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#the-top-menu-bandchannel-mode-1","content":"When a SmartAudio device is in user frequency mode, the SmartAudio CMS Top Menu looks like this.It allows direct entry of arbitral frequency between 5600 and 5900MHz, by selecting the FREQ entry, which will take to a submenu like this.  The NEW FREQ allows selection of a new frequency, and SET will commence the transmission at the frequency. Accelerating auto repeat can be used here to prevent you from grounded when making a large change. Switching between band/channel mode and user frequency mode​ To switch from band/channel to user frequency mode: (1) Navigate to SA CONFIG menu. (2) Change OP MODEL to FREE if not already FREE. (4) Power cycle the SmartAudio device (You don't have to power cycle the FC). (5) Navigate back to SmartAudio VTX top menu. To switch from user frequency mode to band/channel mode: (1) Navigate to SA CONFIG menu. (2) Change FSEL MODE to CHAN. (3) Power cycle the SmartAudio device (You don't have to power cycle the FC). (4) Navigate back to SmartAudio VTX top menu. "},{"title":"CONFIG sub-menu​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#config-sub-menu","content":" OP MODEL​ Selection between race operational model (RACE) and freestyle operational model (FREE). Requires power cycle to take effect. When race operational model is selected, the frequency selection mode (FSEL MODE) will automatically set to CHAN. This is by the specification of the current hardware (Unify 5G8 Pro/Pro HV/Race). FSEL MODE​ Frequency selection method. Requires power cycle to take effect. Channel mode ('CHAN'): Frequency is selected by specifying band and channel.Frequency mode ('FREQ'): Frequency is specified by numerical value in MHz. When set to frequency mode, operational model is automatically set to freestyle, and top menu will be altered to enable direct frequency adjustment. The Frequency mode (FREQ) is only available when the operational model is freestyle (FREE). To choose the frequency mode, first switch the operational model to free style. PIT FMODE​ Specifies frequency to use while in pit mode. Requires power cycle to take effect. In-Range (PIR): Pit mode frequency is specified by band and channel set before the power cycle.Out-Range (POR): Pit mode frequency is specified by the value of POR FREQ. WARNINGDo not change this entry to POR without VRX capable of receiving at frequency specified by the POR FREQ entry. If you do without such VRX, you will be blinded until Out-Range pit mode is cleared. POR FREQ​ Specifies frequency to use while in Out-Range pit mode. STATX​ Protocol statistics between a flight controller and a SmartAudio device. May help you to trouble shoot connection problems. "},{"title":"Trouble shooting​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#trouble-shooting","content":"Recovery from accidental Out-Range pit mode​ You can cancel pit mode by button operation. Refer to the Unify manual.You can use alternative CMS device such as I2C OLED to cancel the Out-Range mode.You can tap or connect VIDEO OUTPUT from OSD and connect it to external display or goggle's VIDEO INPUT. "},{"title":"Modify VTX Settings (TBS Unify / TrampHV) using Spektrum VTX Setup Menu​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#modify-vtx-settings-tbs-unify--tramphv-using-spektrum-vtx-setup-menu","content":"Please read the Spektrum VTX setup section on the IRC Tramp WiKi page: IRC-Tramp#modify-vtx-settings-tbs-unify--tramp-hv--rtc6705--using-spektrum-vtx-setup-menu "},{"title":"Modify VTX Settings (TBS Unify / TrampHV) using FrSky TARANIS Menu​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#modify-vtx-settings-tbs-unify--tramphv-using-frsky-taranis-menu","content":"http://www.nitbeatfpv.com/tramphv-unify-vtx-settings-taranis Note: The bf script linked in this 'how to' link isn't the latest one. You need the one linked here.https://github.com/betaflight/betaflight-tx-lua-scripts "},{"title":"Taranis upgrading and setup​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#taranis-upgrading-and-setup","content":"Originally Posted by elmattbo: Ensure opentx 2.2 on the radio and avoid rc11. If upgrading from 2.1 you will have to copy in the new file structure for 2.2 to the sd card - back your sd card up first. The early bf 3.1 releases do have SmartAudio selectable in the ports tab but don't necessarily work, so update to the latest bf. Install the lua scripts linked from the bf wiki (x7, x9 as appropriate) into the scripts folder on the Taranis sd card. Attach the vtx audio lead to either uart 1 or 3 tx pin (RG SSD FC - Connect to the UART available on the FC you use). Select tbs SmartAudio for the appropriate UART in the ports tab. Go to display in the Taranis and set a screen to 'scripts' it should then offer you the lua script you installed earlier. From the main model screen a long press of page will bring up the bf scripts and you press menu to cycle to the vtx screen. Update from elmattbo: So after trying it today I found that the vtx didn't respond to changes in the lua script. Tried a power reboot after changing settings but it made no difference. I suspect I'm missing something in the set up, but it could be that the taranis reads the vtx, but doesn't write any changes. I have read that the half wave duplex (or whatever it is) communications protocol took a little figuring out for the devs so the issue may be in betaflight too. Fixed! I hadn't saved the settings with a long press of the Taranis menu. Change VTX Settings Store or Reload values - Long Press MENU button Switch screens - Short Press MENU button Navigate between values - &quot;+&quot; &amp; &quot;-&quot; buttons EDIT value - Press ENTER "},{"title":"Modify VTX Configuration (TBS Unify / TrampHV) using CLI Settings​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#modify-vtx-configuration-tbs-unify--tramphv-using-cli-settings","content":"As of Betaflight version 3.3.0, CLI settings to modify the VTX configuration are supported. See the VTX CLI Settings page for more information. "},{"title":"Using both SmartAudio and microphone at the same time​","type":1,"pageTitle":"TBS Unify Smartaudio","url":"/betaflight.com/docs/wiki/archive/TBS-Unify-Smartaudio#using-both-smartaudio-and-microphone-at-the-same-time","content":"General concept of wiring​ The digital signal can be connected either directly or using a Resistor. If it comes from a microcontroller with 3.3V, best solution is to use a voltage divider to ~0.9V for a proper audio level (4k7 and 1k8 resistor values in our case). The analog signal needs to be ac coupled using a series capacitor from audio source to the smart audio signal. Ideal capacitance is around 100nF. (The click sound in your audio will disappear after arming) Ideal connection:​  These two configurations might work as well depending on how it is used and connected:​   "},{"title":"Telemetry","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Telemetry","content":"Telemetry Telemetry is information sent back to your RC transmitter via the RC data link. For example, telemetry allows for your RC transmitter to read out your main battery voltage or RSSI. For telemetry to work your RC receiver and transmitter must support it. The specific data that Betaflight will send via telemetry depends on the telemetry protocol being used. For example, FRSky Smartport will send a certain set of information while Crossfire will send another set. Here is the set of telemetry fields send via the Crossfire protocol.https://github.com/betaflight/betaflight/blob/daa6df80248c9a806b7d77c402d415a15f4e2667/src/main/telemetry/crsf.c#L168 Here is the set of telemtry fields sent via Smartport can be seen here : https://github.com/betaflight/betaflight/blob/daa6df80248c9a806b7d77c402d415a15f4e2667/src/main/telemetry/smartport.c#L89 All telemetry protocols can be inspected here : https://github.com/betaflight/betaflight/tree/master/src/main/telemetry","keywords":""},{"title":"Tuning Dynamic Idle","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Tuning-Dynamic-Idle","content":"","keywords":""},{"title":"Introduction​","type":1,"pageTitle":"Tuning Dynamic Idle","url":"/betaflight.com/docs/wiki/archive/Tuning-Dynamic-Idle#introduction","content":"Dynamic Idle improves how Betaflight controls the motors at the low end of the rpm range. It requires an ESC that supports Bidirectional DShot telemetry - ie, an ESC that can send RPM data to the flight controller. Using this RPM data, the flight controller can dynamically alter motor drive to prevent any motor falling below a set minimum RPM. This improves handling and reduces the risk of desyncs. It also allows lower fixed idle settings, which improves straight line braking and hang time. Additionally, dynamic idle improves PID controller performance at zero throttle by permitting stronger braking of motors that are in positive airflow conditions. NOTE 1: Dynamic Idle requires fully functional BiDirectional DShot telemetry. NOTE 2: Dynamic Idle is off by default. To enable it, enable DShot Telemetry, and set dyn_idle_min_rpm to a suitable value in the CLI. For typical 5&quot; quadcopters 30-40 (3000-4000 RPM) is a suitable starting point. Please read the tuning section, below. NOTE 3: Dynamic Idle must not be used with 3D mode. NOTE 4: Transient throttle limit should be disabled while using Dynamic Idle (set transient_throttle_limit = 0) "},{"title":"How does Dynamic Idle work?​","type":1,"pageTitle":"Tuning Dynamic Idle","url":"/betaflight.com/docs/wiki/archive/Tuning-Dynamic-Idle#how-does-dynamic-idle-work","content":"Let's first explain how idle is managed without dynamic idle.​ Without dynamic idle, the lower limit of motor drive, under all conditions, is set by the dshot_idle_value. This defaults to 5.5%. When throttle stick is at zero, the motors always get 5.5% motor drive. The PIDs cannot reduce motor drive below 5.5%, either. Imagine we are in a flat drop, or have done a quick 180 degree reversal from high forward speed. In both these situations, airflow is pushing into the props from below the quad (negative inflow). This can slow them down a lot. They may either turn so slowly that they can't start quickly when needed, or stop spinning completely, or even spin backwards. This can lead to poor handling or total loss of control (motor desync), often most obvious at the end of fast flips or rolls. To avoid these issues, we usually need to set the dshot_idle_value relatively high. Also, because the motors are always getting a relatively high drive signal, even when it isn't really needed, we get a limit on our inverted hang time, the quad can be floaty, and we don't get such strong motor braking as we need when stopping flips and making quick moves, or when chopping throttle. If we want to quickly stop a fast roll move, we need to slow down the driving motors. When we tell them to stop, they are moving quickly forward in the air. They have strongly positive airflow which keeps them spinning faster than they need to be. The PIDs would really like to send zero motor drive to them - maximal braking - but cannot send less than 5.5%, even though they are in no danger of stopping. Because they can't be slowed down as much as they could, our ability to stop the turn is not as good as it could be. Finally, lets consider an inverted drop, with a yaw while inverted. While dropping cleanly, the motors will be at 5.5% motor drive, pushing downwards. Air is flowing into the props as we drop, and likely they are spinning faster than is needed. We would like them to spin more slowly, or resist spinning harder, to improve 'hang time' - but we can't, because DShot idle is a high enough number to prevent desyncs. Additionally, if we try to yaw while inverted, the PIDs can only make the motors go faster than idle, and speeding up the motors while inverted really limits hang time. How does dynamic idle change things?​ With dynamic idle enabled, the PIDs are allowed to send zero drive to the motors, so long as they don't spin too slowly. The actual RPM is continually monitored using Bidirectional DShot telemetry. Idle motor drive is dynamically adjusted to keep the slowest motor above the configured minimum RPM - even if its drive signal is zero. Hence dynamic idle will greatly reduce the chance of a desync, and allow lower overall idle settings. Because the motors won't slow down as much under strong reverse airflow conditions, they can start up quickly. This provides improved zero throttle turn responsiveness, greater stability against cross-axis wobble when stopping a flip quickly, and improved zero throttle stability in flat drops. Under strongly positive inflow conditions, where the motors will be spinning faster than expected, they can now be braked much harder, since the PIDs can send as little as zero drive to slow them down, instead of the mandatory 5.5%. This is beneficial when quickly stopping a fast flip or roll, or when performing tricks during inverted drops. These are the three key elements to dynamic idle for 4.2, but only the first two are relevant in 4.3: We get the actual motor RPM via bidirectional DShot telemetry, and use this to prevent any motor falling below the set dyn_idle_min_rpm value. We allow the PIDs to send motor drive to zero, provided that RPM is OK In 4.2, the dshot_idle_value becomes our minimum throttle value. In 4.3, the dshot_idle_value is ignored. "},{"title":"Setup - enabling dynamic idle​","type":1,"pageTitle":"Tuning Dynamic Idle","url":"/betaflight.com/docs/wiki/archive/Tuning-Dynamic-Idle#setup---enabling-dynamic-idle","content":"Enable DShot Telemetryset dyn_idle_min_rpm above zero, eg between 30 and 40, to enable Dynamic Idle. In Betaflight 4.3, that's all you need to do. 4.3 users should follow the instructions in the 4.3 tuning guide, and not the instructions below. In 4.2, the Dynamic Idle control code was not so effective, and the following (complicated) setup procedure was recommended: Take props off !!Set your normal Dshot Idle value in the configuration page of the configuratorGo to the motors tabRe-check that you really did take props off !! :-)Connect a Lipo at around 3.8 - 3.9VEnable the motorsUse the master slider to adjust motor drive; for example, if your Dshot Idle value is 5%, set the motor drive to 1050read the RPM you get at this idle.set your dynamic idle minimum RPM value to something a bit below the idle RPM. Note that 20 means 2000 RPM. For example, if the idle RPM at 1050 was say 2,000, take two zeros off to get 20, then take off 20% to get 16; set your dynamic idle minimum (dyn_idle_min_rpm in CLI) to 16. This setting method puts a kind of throttle up value of 5.5% above a minimum rpm which acts as a lower 'back-stop'. If you already are running a known good DShot idle value, start off with that, and set the dyn_idle_min_rpm value set 20% lower as described above. "},{"title":"Tuning​","type":1,"pageTitle":"Tuning Dynamic Idle","url":"/betaflight.com/docs/wiki/archive/Tuning-Dynamic-Idle#tuning","content":"Most of the benefits of dynamic idle happen 'out of the box' as soon as dynamic idle is enabled at the correct rpm value. Turn responsiveness, drop stability, and desync reduction should improve immediately. Higher minimum RPM values - 30-40 - with lower DShot Idle percent values will keep the motors spinning more quickly when the throttle is cut, or in strongly positive inflow states. This will lead to more rapid spool up when needed, better zero throttle stability, and crisper flips - at the cost of less effective braking and a more 'floaty' feel, and reduced inverted hang time. Lower idle values (both reduced together) will lead to improved inverted hang time, at the cost of greater risk of de-sync, reduced stability when chopping throttle hard after a punch, when blipping up from idle, and any time you are at idle, eg mid-flip, flat drops, etc. Because the motors will idle more slowly, they may have difficulty re-starting after being commanded to idle, eg at the end of a flip, causing instability and bounce back. Every quad is different, and the purpose we put them to varies a great deal. Unless your requirements or build are unusual, the default idle value is usually quite good. Low authority quads (larger props, weaker motors, ducted cine quads, endurance quads) will typically do better with higher idle values. High authority quads often fly best with idle values around 4-4.5%. I'm after lots of inverted hang time in 4.2​ To get longer inverted hang time, go for the lowest possible values of both DShot idle percentage and dyn_idle_min_rpm. Keep dyn_idle_min_rpm adjusted relative to DShot as described above (20% lower than the idle rpm). REMEMBER: both values must be reduced! You can go as low as you like, eventually you will get annoying instability with throttle chops, or desyncs. If you were running DShot idle of 5% and dyn_idle_min_rpm of 20 was 20% below rpm at 5%, you could try DShot idle of 4% and dyn_idle_min_rpm of 16. If that was OK, then 3.5% and 14, even 3% and 12. When hard flip stops or throttle chops get ragged, or you start tumbling out of the sky under reverse airflow due to a desync, that's too low. You can typically get well below the default DShot idle value. Really low idle settings may maximise inverted time but will adversely affect stability as described above. Is this useful for whoops?​ Yes, for sure. 4.3 is better. Whoops have low authority at idle that is often improved significantly with the combination of Thrust Linear and Dynamic Idle. Whoops may require higher than default idle values to keep their motors spinning reliably. I'm a very high turn rate Acro LOS pilot​ When targeting very high maximum turn rates - 1800 deg/s for example - desyncs can be more of a problem than for quads with lower target rates. For maximum acrobatic and hang performance in a high power to weight LOS quad, the goal would be the lowest idle values that didn't cause desyncs or other adverse effects like excessively slow startup after flips. Note that if the rpm from dyn_idle_min_rpm is higher than that of DShot idle, hovers may not be smooth, since the dynamic idle controller may hunt around a little, but desyncs are less likely. I'm a race pilot​ Mostly a high minimum RPM of 3500 - 4000 works best. The DSHot Idle value can be set low, eg 2-3% Racers typically use low throttle very little of the time, so you might wonder why you'd bother with something that only influences idle behaviour. There are two reasons. First, braking. Sure we want to go fast, but we also want to slow down. If we can set idle lower than usual, we can brake harder. Dynamic idle lets us do that. We can go full throttle, and when we cut throttle, we will bleed off speed more quickly, making the next turn easier. We will also be able to drop into dive gates more aggressively on cutting throttle. Second, turn performance high speed. Typically at high speed we have strong positive inflow. We can turn faster with dynamic idle active because under positive inflow conditions it can brake motors down to zero drive, helping turn in more quickly. When flying race courses that involve high speed entries to maneuvers such as split-S or tight hairpins, dynamic idle may allow more consistent 'reverse throw' and improved control/propwash management, allowing more accurate rhythm-based turn entry and vertical maneuvers (e.g. repetitive dive/antigravity gates or inverted dive entries). Optimal dynamic idle for experienced racers, who keep throttle on most of the time, may be with slightly reduced idle values. Something like your DShot idle reduced to say 4 - 4.5%, and dyn_idle_min_rpm 20% below that, maybe. The downside of lower idle values is that if you do make a mistake and do a zero throttle reversal, it may be uglier. "},{"title":"The technical stuff​","type":1,"pageTitle":"Tuning Dynamic Idle","url":"/betaflight.com/docs/wiki/archive/Tuning-Dynamic-Idle#the-technical-stuff","content":"When we first arm, until Airmode is activated, Dynamic Idle is constrained to a fixed 4% maximum increase in motor drive, for safety reasons. If we have set DShot idle to a very low value, like 1%, we may see a slightly lower, and very stable, RPM before Airmode activates - a value which may be less than our configured minimum RPM. Once Airmode is active, Dynamic Idle becomes fully effective, that is removed, and the RPM should not fall below the target RPM while in flight. Dynamic idle adjustments are not instantaneous. The correction factor uses a special PID controller where the adjustment is proportional to the difference between the needed and actual motor accelerations. Feedback delays have some potential for instability when extreme values are used. The stability of the dynamic idle controller can be tested by hovering with very low dynamic idle. The quad will rely entirely on dynamic idle to maintain stable hover RPM. On unusual builds, it might be unstable so take care. You would do this kind of testing only to check that the dynamic idle system was working well. Usually it is not needed. The secondary settings are best left at defaults. idle_adjustment_speed is a gain multiplier on the crude difference between actual and target rpm. Default is 50. idle_p sets the gain of the controller. Higher values will cause corrections to be more aggressive. These two parameters should not need adjusting in most cases. To confirm that they are appropriate for your quad, enable the RPM debug, fly straight vertically up at speed, cut throttle quickly to zero, and drop straight flat down under zero throttle. If the motor traces and rpm traces are smooth, all is good. If they are wobbling, the values may need to be tweaked a bit. My race quads work very well with idle_p a bit higher, at 80, but increasing idle_adjustment_speed as well made the rpm traces a bit sawtoothed. idle_pid_limit constrains the maximum allowed error correction. If set too low, reverse airflow may still cause a desync because the amount of correction may be inadequate. idle_max_increase is a limit on the maximum allowed percentage increase in idle above zero, expressed as percent *10. Default of 150 means 15% motor drive is the maximum increase that can be applied to prevent a desync. Higher values run the risk of driving the other motors very hard in the event of a prolonged desync. The Dynamic Idle debug returns: 0 : motorRangeMinIncrease * 1000 1 : targetRpsChangeRate (simple RPM error * idle_adjustment_speed) 2 : error (amount of error to fix) 3 : minRps (lowest current motor rpm, in revolutions per second * 10)  So, for example, a minRps value of 500 corresponds to 50.0 * 60 = 3000rpm "},{"title":"Tuning Tips for BF 3.4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4","content":"","keywords":""},{"title":"Notes about some new 3.4 features and defaults​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#notes-about-some-new-34-features-and-defaults","content":""},{"title":"I just want to fly, not read all this stuff...​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#i-just-want-to-fly-not-read-all-this-stuff","content":"No problem, flash the code, and do a brief test fly with the stock defaults. Both 8k and 32k gyro modes should fly on defaults, though 32k may require more filtering - always check motor temps after the first flight. Note that 3.4 contains major changes to filtering and several new features that dramatically improve potential flight performance. Do not expect it to fly the same as earlier versions! If motor temps are OK, and handling generally alright, there are several changes that may further improve flight behaviour. If motors are warmer than you'd like, check the section on filters below. Otherwise, the defaults are probably OK for your quad. For optimal flight performance I'd recommend enabling iterm_relax by pasting into the CLI: set iterm_relax = RP  This will enable the term_relax code on pitch and roll. It markedly reduces I bounce-back after flips or rolls, and allows higher levels of I than before. Typically I can be increased by 50% or more, which improves directional stability while flying in turbulent air or when approaching gates at high speed. I'd also recommend using the new filter based rc_smoothing on all axes: set rc_smoothing_type = FILTER set rc_interp = AUTO set rc_interp_ch = RPYT  This removes spikes and sharp edges that otherwise arise during rapid stick inputs. It should keep the motors sounding smooth and running cool during frequent rapid stick inputs, without delaying responsiveness as much as the older interpolation method (which is still available as an alternative). If you enable item_relax, throttle_boost, or use D setpoint weight above zero, you definitely should activate RC smoothing on the relevant axes, as above. IMPORTANT: SBus or FPort users should stop using OpenTX when using 16 channels. IMPORTANT: Spektrum users with certain transmitters (DX6i, DXe, DX6e) should read this document for setting up RC Smoothing Filter correctly. Note that with RC smoothing, the sharp spikes from D weight or throttle inputs will be smoothed out. While this improves efficiency, motor temperature, and smoothness of motor control signals, losing those spikes reduces the effectiveness of D weight, P, and throttle boost, during very rapid stick inputs, a tiny bit. After enabling RC smoothing, if you notice a small reduction in response to rapid stick inputs, consider increasing D weight, throttle boost and, perhaps, P by up to about 20%. Usually this is not required. "},{"title":"The defaults are OK but I want to make some changes. What do I need to know?​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#the-defaults-are-ok-but-i-want-to-make-some-changes-what-do-i-need-to-know","content":"The new default D weight value is 0.6. This is approximately equal to 0.8 in pre-3.4 versions. More D weight means greater immediacy of stick responses, particularly to quick stick movements. If the default of 0.6 doesn't feel responsive enough at the same rates as before, try a higher value. 1.0 is sufficient to overcome the normal damping behaviour that D itself would otherwise slow down responses to your stick inputs - the quad shifts from the measurement mode of D calculation to to error mode. Values above 1.0 provide an additional 'feed forward' effect. Higher D weight can feel excessively twitchy, but can allow reduction in P while retaining the same overall responsiveness. The new default D Setpoint Transition value is zero. If you previously flew with 1.0 or 0.5, to get a smooth centre feel for freestyle, and it now feels too twitchy around centre sticks, use your old setting. The default of 0 provides equal stick responsiveness regardless of stick position, and is recommended for racing. 0.5 is great for freestyle. Values above zero, but under 0.1, are not recommended, because they may cause glitching when the sticks are smoothly swept across the centre position. If your PID settings were higher than the current defaults, and the quad feels like it is a bit less responsive than before, try with values for P, D, and D weight more like what you had, and consider trying 20% above your old defaults. "},{"title":"Can I enable the new features on F3 boards?​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#can-i-enable-the-new-features-on-f3-boards","content":"As of 3.4.0 official release, F3 boards will have most of the options available by default. Due to flash memory limitations, features like item_relax may not be available on some F3 boards. A custom build compiled without some Rx protocols or Acro-Trainer will run all the new features on F3's with more than 128k of flash. As an example, a MOTOLAB F3 can run 4k4k at 30% CPU with dual filters, throttle boost, iTerm_relax and filter based rc_smoothing - and it flies really well. Binaries of 3.4 with the new features enabled on F3 instead of Acro-Trainer can be found here:https://github.com/joelucid/betaflight/releases/tag/3.4a "},{"title":"What about these new dual filters?​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#what-about-these-new-dual-filters","content":"3.4 provides dual low-pass filter capability for both gyro and D filtering. The default is to have all four low-pass filters active at the same time, the dynamic notch filter on, but no other notch filters active. This provides less filtering delay, typically, than before, but with better filter performance. The two gyro filters clean up noise before the gyro signal enters the PID loop. P, I and D are then derived from that filtered data. The two D filters are applied only to the D signal. To determine the relative contribution of P and D noise to overall motor noise, analyse a blackbox spectrum from PID_P and compare that to a spectrum from PID_D. Typically there will be more D noise than P noise. Hence we usually need filter D more heavily than P. The more filtering we apply, the less noise gets through to the motors, and this keeps them sounding smooth and running cool. If we apply too much filtering, the PID calculations will be delayed, and flight performance will suffer. Without enough filtering, the motors may run hot, especially if the props get bent or the motor bearings are worn, etc. Dual PT1 filters allow fine tuning of the amount of filtering to match the noisiness of the quad. Here are some examples of typical filtering setups, that can be pasted into the CLI: A really good quad with a very solid frame, new motors, and only ever flown with clean well balanced light props: set gyro_lowpass_type = PT1 set gyro_lowpass_hz = 150 set gyro_lowpass2_type = PT1 set gyro_lowpass2_hz = 400 set dterm_lowpass_hz = 100 set dterm_lowpass2_hz = 250  A typical 5&quot; quad with motors/props that aren't new but are average, and bent props aren't a problem: (if MPU6000 gyro is used gyro_lowpass2 can be set to 0 for best performance but logging/hot motors should be used to verify if this ok) set gyro_lowpass_type = PT1 set gyro_lowpass_hz = 120 set gyro_lowpass2_type = PT1 set gyro_lowpass2_hz = 300 set dterm_lowpass_hz = 100 set dterm_lowpass2_hz = 250  A typical quad on a decent frame that needs to tolerate bent props: set gyro_lowpass_type = PT1 set gyro_lowpass_hz = 120 set gyro_lowpass2_type = PT1 set gyro_lowpass2_hz = 300 set dterm_lowpass_hz = 80 set dterm_lowpass2_hz = 160  A beat up quad on a sloppy frame that often is flown with bent props: set gyro_lowpass_type = PT1 set gyro_lowpass_hz = 90 set gyro_lowpass2_type = PT1 set gyro_lowpass2_hz = 180 set dterm_lowpass_hz = 70 set dterm_lowpass2_hz = 140  The higher the filter numbers - meaning, less filtering - and the better the state of the quad, the better it will fly. "},{"title":"What about the PIDs - are the defaults OK?​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#what-about-the-pids---are-the-defaults-ok","content":"We think the defaults are pretty good for most quads. Lots of people report that they fly great. If your focus is racing, and your quad is not carrying a GoPro, and is light and responsive, you might try these settings: set rc_smoothing_type = FILTER set setpoint_relax_ratio = 0 set dterm_setpoint_weight = 120 set iterm_rotation = ON set iterm_relax = RP set iterm_relax_type = SETPOINT set iterm_relax_cutoff = 12 set throttle_boost = 2 set throttle_boost_cutoff = 15 set p_pitch = 32 set i_pitch = 65 set d_pitch = 23 set p_roll = 30 set i_roll = 60 set d_roll = 21 set p_yaw = 65 set i_yaw = 60 set d_yaw = 20 set tpa_rate = 15 set tpa_breakpoint = 1050  If your focus is freestyle, and the quad is a little heavier, perhaps something like this: set rc_smoothing_type = FILTER set setpoint_relax_ratio = 50 set dterm_setpoint_weight = 80 set iterm_rotation = ON set iterm_relax = RP set iterm_relax_type = GYRO set iterm_relax_cutoff = 10 set throttle_boost = 8 set throttle_boost_cutoff = 15 set p_pitch = 58 set i_pitch = 65 set d_pitch = 35 set p_roll = 50 set i_roll = 60 set d_roll = 30 set p_yaw = 65 set i_yaw = 60 set d_yaw = 20 set tpa_rate = 20 set tpa_breakpoint = 1050  If experimenting with Absolute Control, use these settings: set iterm_rotation = OFF set abs_control_gain = 10  For smaller crafts use abs_control_gain = 5 *See bottom of page for more info on Absolute Control "},{"title":"My quad doesn't feel as responsive as it used to!​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#my-quad-doesnt-feel-as-responsive-as-it-used-to","content":"If you've enabled rc_smoothing and it is set to interpolation, try set rc_smoothing_type = FILTER. Consider increasing P, I and D by around 20% over previous values. If the quad didn't need much filtering, try the 'clean quad' filter settings, above. If all else fails, revert to your old code - you may find, by now, that it doesn't feel quite as good as you remember it! "},{"title":"Should I keep the dynamic notch filter on always?​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#should-i-keep-the-dynamic-notch-filter-on-always","content":"Probably. It does add delay, but really helps if a prop gets bent. For super clean setups where performance is everything, try with it off. Make a very heavily D filtered profile to limp home if needed, otherwise motors can overheat a lot. "},{"title":"Do I need the fixed notch filters anymore?​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#do-i-need-the-fixed-notch-filters-anymore","content":"Short answer: No. They cause a lot of delay, and dual PT1 filters usually are enough. Long answer: Fixed notch filters may be useful if a log spectrum shows a clear noise peak despite the dynamic notch. Typically a problematic peak will appear at prop resonant frequency on flexible frames. The only way to know for sure is to get a blackbox log and use PID-Analyzer or Blackbox Explorer to perform spectral analysis. Prop resonant frequency can be determined using an audio spectrum analyser and 'plucking' the propeller, sometimes just setting a D notch at that frequency can be useful. "},{"title":"Do I need to change Airmode settings?​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#do-i-need-to-change-airmode-settings","content":"Nothing has changed. However quads are getting more powerful. If you'd like to ensure that Airmode enables reliably on takeoff, set the start percentage to a value around your hover throttle value, e.g., for a quad that hovers on 20% throttle: set airmode_start_throttle_percent = 20  If you are a racer and would like to hold angle on a starting block, set the air mode start percentage to a value a bit below hover point; in the above example, 10-15 would start airmode at a throttle value that wouldn't make the quad take off. "},{"title":"Information about some of the new features:​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#information-about-some-of-the-new-features","content":""},{"title":"Filter based RC smoothing​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#filter-based-rc-smoothing","content":"3.4 brings, thanks to eTracer, RC smoothing, with less delay and less jitter than interpolation methods. Furthermore it is capable of adjusting the filter setpoint automatically to suite the RC command intervals. To activate the filter method, paste and save set rc_smoothing_type = FILTER in the CLI. A biquad filter is then applied to the set incoming RC data, smoothing off the sharp square corners at the default frequency. Sharp steps on throttle, P and D weight are then attenuated. Because D setpoint weight adds even bigger spikes with each RC input, a second filter is applied specifically to D setpoint weight. The end result is a smoother set of motor traces. Each incoming RC step results in an immediate step up in PIDsum and the motors, but the step up is not a sharp spike any more, reducing motor heat accumulation, improving efficiency, and making them sound smoother during rapid stick movements. Spikes also can trigger iterm_windup protection, this code avoids that problem. When set rc_smoothing_input_hz = 0, the code calculates the ideal low-pass value for RC command based on the initial RC interval. The same applies for set rc_smoothing_derivative_hz = 0, which sets the second low-pass value that gets applied to D weight automatically. For 9ms Sbus, the automatic value is 50Hz. The actual values are written into the blackbox log header. If you run very high levels of D weight, a somewhat lower derivative smoothing frequency may smooth out some of the big spikes that you might otherwise see. Some people have voiced concern that low-pass filtering RC inputs will cause delay. While that is true, without any filtering the motors trace gets filled with spikes that appear at each RC input step. The current filter based smoothing code just takes the sharp point off these spikes, and doesn't delay the bulk of the step, or the majority of the D weight effect at all - the step up in the motors trace is still there at exactly the same time, just a bit smoother and rounder. "},{"title":"iTerm Relax​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#iterm-relax","content":"The new iTerm_relax functionality by JoeLucid cuts, or reduces, I accumulation during fast stick inputs. It can be enabled to work on pitch and roll alone, or pitch, roll and yaw. The code has two operational modes, setpoint and gyro. Gyro mode is more clinical and complete in suppressing iTerm, Setpoint mode is a bit smoother with slightly softer landings after flips. Setpoint mode applies a high-pass filter to RC input, resulting in a value that gets higher whenever the sticks are moved quickly. When the rate of change is zero (i.e., the sticks are not moving), iTerm accumulation is normal. Accumulation is then attenuated linearly as the stick movement approaches a threshold. Above threshold, no iTerm accumulation occurs at all. Gyro mode uses a high-pass filter based on rate of change of stick movement, and uses this to create a window either side of the gyro value inside which the quad should be tracking. While inside the window, no iTerm accumulation occurs. If the sticks are held still, the window compresses back to nothing, and iTerm accumulation becomes normal again. Since Gyro bases the amount of iTerm suppression on how well the quad follows the expected path it can adjust the iTerm if that's required to implement the setpoint change demanded by the sticks. This can facilitate better tracking in unbalanced quads or if throttle changes are applied during the move. In both case the filter time constant can be adjusted to fine-tune the response. Typically no adjustment is required. Sometimes after a fast multi-rotation flip, or other fast input, some I may accumulate and hang around too long once the stick movements stop, causing a late settling of turn rate. Typically this will be less of a problem if the frequency is increased. This feature is really useful and is capable, in a quad where P and D are well tuned, of totally eliminating bounce-back due to I. "},{"title":"Throttle Boost​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#throttle-boost","content":"This feature, also by JoeLucid, improves responsiveness to fast throttle inputs. The code uses high-pass filtering on the RC throttle signal to create additional 'kicks' in throttle. It is basically a feed forward factor on throttle. The faster the throttle stick is moved, the greater the boost effect. The result is a quicker, more responsive feel to fast throttle inputs - both on increasing throttle, and cutting throttle. It is particularly useful for quads that are weaker in terms of throttle responsiveness, or for making 3S feel like 4S, or 4S feel like 5S. The height of each 'kick' is determined by the size of the RC step multiplied by the throttle_boost amount, and how long it lasts is set by the throttle_boost_cutoff value. The default throttle_boost_cutoff value is 15Hz, meaning a time constant of 10ms. This works well for SBus 9ms radio setups, with or without rc smoothing on throttle. It results in about 40% residual 'kick' carrying over into the next step, accumulating as the stick movement continues quickly, and dissipating otherwise. The kick is rounded somewhat. If rc_smoothing is enabled on throttle, a higher cutoff frequency can reduce the residual for accumulation, allowing the rc smoothing handles the spikes that would otherwise appear. For example, a value of 25 at 50Hz is about the same as 5 at 15Hz, but with less overshoot tendency. If the throttle_boost value is 0, the effect is disabled. With the default throttle_boost_cutoff of 15, throttle_boost = 5 is enough to overcome most to all RC smoothing delay on throttle (if indeed rc smoothing was applied to throttle). Throttle should feel a bit more responsive - and sound smoother - than un-smoothed throttle input. Increasing boost above 5 at 15Hz results in feed forward on throttle. Values of 10 or higher can be used to overcome excessive motor delay when over-propping weaker motors. Too much throttle boost may cause a kind of over-run and excessive sensitivity to big inputs. This can be attenuated by choosing a higher throttle boost cutoff frequency, e.g. 50Hz, and a corresponding increase in amount, e.g. 25. RC smoothing on throttle then becomes essential. That's because higher cutoff frequency will cause sharper spikes of shorter duration, with less tendency to accumulate. Leaving the default value at 15 is probably a good idea. Better, if a sensitivity adjustment is needed, to change the throttle_boost value. "},{"title":"iTerm Rotation​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#iterm-rotation","content":"This is also by JoeLucid and is activated by default and much appreciated by LOS acro pilots, particularly when yawing continuously during rolls and when performing funnels and other tricks. The code rotates the current iTerm vector properly as the quad rotates on other axes. For FPV the effect is fairly subtle but can result in somewhat more predictable responses during abrupt stick inputs and while performing tricks. There are no settings to adjust, just on or off. "},{"title":"Smart Feed Forward​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#smart-feed-forward","content":"This experimental code, again by JoeLucid, modifies how D weight works. It is not enabled by default Normally, D setpoint weight is a feed forward amount that increases with quicker RC stick movements. The greater the D weight, the greater the stick sensitivity to pitch and roll. In the classical betaflight PID system, D setpoint weight assists P in initiating turns. Typically D setpoint weight climbs quicker and relatively earlier than P. Adding more D setpoint weight, and reducing P a little, can reduce PID overshoot without losing stick sensitivity. Smart Feed forward changes the D setpoint weight behaviour, such that it replaces P entirely, but only when it is greater than P (and in the same direction). For it to work, the D setpoint value must be set significantly higher than usual - up to 2.0 or more. Then, a large part of the initial part of a turn is driven very hard by D weight, and P doesn't need to do so much. In some settings, this can reduce overshoot a bit. "},{"title":"Absolute Control​","type":1,"pageTitle":"Tuning Tips for BF 3.4","url":"/betaflight.com/docs/wiki/archive/Tuning-Tips-for-Betaflight-3.4#absolute-control","content":"This is experimental code by JoeLucid as well. It's purpose is to address the same attitude issues as iterm_rotation but without some of its downsides. Absolute Control continuously measures the error of the quads path over stick input, properly rotated into the quads coordinate system, and mixes a correction proportional to that error into the setpoint. It's as if you noticed every tiny attitude error the quad incurs and provided an instantaneous correction on your TX. The result is significantly better tracking to sticks, particularly during rotations involving yaw and other difficult situations like throttle blips. Absolute control will likely eventually replace iterm_rotation, but is not yet enabled by default. You should not enable abs_control and iterm_rotation at the same time. To enable: set abs_control_gain = 10. Smaller quads are ok with 5. AbsoluteControl needs to be used with iTermRelax to avoid bounce-backs due to the latency between stick movement and quad response. iTermRelax will then suspend AbsoluteControl error accumulation as well during quick moves. Finally AbsoluteControl only kicks in once the throttle minimum for airmode activation is exceeded to avoid undue corrections on the ground. "},{"title":"Unified Targets for users","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Unified-Targets","content":"","keywords":""},{"title":"Working on firmware​","type":1,"pageTitle":"Unified Targets for users","url":"/betaflight.com/docs/wiki/archive/Unified-Targets#working-on-firmware","content":"Save a copy of the unified target to your computer from the repository, lets use MTKS-MATEKF411.config as an example. Open up the file in a text editor and take a look at the first line. # Betaflight / STM32F411 (S411) 4.1.0 Jun 25 2019 / 10:27:57 (2a6e94d03) MSP API: 1.42 In this case, STM32F411 is the processor target used, so when you compile a target you'll want to use make TARGET=STM32F411 "},{"title":"Combine and flash with the configurator​","type":1,"pageTitle":"Unified Targets for users","url":"/betaflight.com/docs/wiki/archive/Unified-Targets#combine-and-flash-with-the-configurator","content":"In the configurator load the .config file first, and then load the betaflight_4.x.x_STM32F411.hex, now flash the firmware. On the first connect you will be prompted to Apply Custom Defaults just like the regular flashing procedure "},{"title":"make_config_hex.sh​","type":1,"pageTitle":"Unified Targets for users","url":"/betaflight.com/docs/wiki/archive/Unified-Targets#make_config_hexsh","content":"make_config_hex.sh is a script in src/utils that can be used to combine a unified target configuration with a firmware image. The combined .hex may be useful to share with other users of the same flight controller. Users of the combined .hex will be prompted to Apply Custom Defaults, just like the regular flashing procedure. The srec_cat program is part of srecord, which is available in ubuntu under universe. apt install srecord Windows binaries to not seem available, but they do have instructions Take a look at src/utils/make_config_hex.sh for more information. "},{"title":"VTX CLI Settings","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/VTX-CLI-Settings","content":"","keywords":""},{"title":"Change vtx power level using aux channel​","type":1,"pageTitle":"VTX CLI Settings","url":"/betaflight.com/docs/wiki/archive/VTX-CLI-Settings#change-vtx-power-level-using-aux-channel","content":"vtx - vtx channels on switch &lt;index&gt; &lt;aux_channel&gt; &lt;vtx_band&gt; &lt;vtx_channel&gt; &lt;vtx_power&gt; &lt;start_range&gt; &lt;end_range&gt;  For example the following will configure a 3-position switch on Aux3 to switch power levels 1/2/3. vtx 0 2 0 0 1 900 1200 vtx 1 2 0 0 2 1300 1700 vtx 2 2 0 0 3 1800 2100  Note that the aux channel value supplied to the vtx command is zero-based. This means 0 = Aux1, 1 = Aux2, and so on. So in the example 2 represents Aux3. This can also be used to switch to specific band/channels based on a switch but since the band/channel in the example above are 0 it won't change channels - only power. Whenever the vtx_band, vtx_channel, or vtx_power values are 0 it means to leave the current setting unchanged. See the help for the vtx command. If Low Power Disarm is enabled, it will override changes made by the vtx command. And for the OSD element: Enable the vtx Channel element on the OSD tab to display vtx channel and power. "},{"title":"VTX Tables","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/VTX-Tables","content":"","keywords":""},{"title":"VTX Tables for Use in Configurator​","type":1,"pageTitle":"VTX Tables","url":"/betaflight.com/docs/wiki/archive/VTX-Tables#vtx-tables-for-use-in-configurator","content":"Instructions for use: right click on the file, 'Save link as';in configurator, go to the 'Video Transmitter' tab, use 'Load from file' to load the file saved in the previous step;click 'Save' to save the VTX table on the flight controller. For a quick video on how to determine your Smart Audio version: https://youtu.be/eaSmoOPk9KY?t=65 Smart Audio Debug[0] key: 100 = SA 1.0 116 = SA 1.0 unlocked 200 = SA 2.0 216 = SA 2.0 unlocked 300 = SA 2.1 316 = SA 2.1 unlocked Update: 30 Oct 2019: The SmartAudio tables for the EU had a bug that caused the F and R bands to have the wrong frequencies. They have been fixed, please re-install the updated tables. Manufacturers / Models to Use this File with\tFile\tIRC Tramp Protocol: IRC Tramp\tIRC Tramp (USA) IRC Tramp (EU) MATEKSYS VTX-MINI\tVTX-MINI (INT) iFlight The Force Long Range\tForce LR (USA) RunCam TX200U\tIRC Tramp (USA) IRC Tramp (EU) RunCam TX100\tIRC Tramp (USA) IRC Tramp (EU) Speedy Bee TX800\tIRC Tramp (USA) IRC Tramp (EU) Speedy Bee TX500\tIRC Tramp (USA) IRC Tramp (EU) TBS SmartAudio Protocol: TBS (SA 1.0 was only used the first generation TBS devices)\tSmartAudio 1.0 (USA) SmartAudio 1.0 (EU) TBS (used on most VTX that support SmartAudio)\tSmartAudio 2.0 (USA) SmartAudio 2.0 (EU) TBS (currently only applicable to latest TBS models like EVO or Pro32)\tSmartAudio 2.1 (USA) SmartAudio 2.1 (EU) On-Board VTX: Flight controllers with on-board VTX\tRTC6705 (USA) RTC6705 (EU)\t "},{"title":"Setting up VTX Tables in CLI​","type":1,"pageTitle":"VTX Tables","url":"/betaflight.com/docs/wiki/archive/VTX-Tables#setting-up-vtx-tables-in-cli","content":"See https://betaflight.com/docs/development/VTX#vtx-table "},{"title":"VTX Button usage​","type":1,"pageTitle":"VTX Tables","url":"/betaflight.com/docs/wiki/archive/VTX-Tables#vtx-button-usage","content":"While the VTX button is held the STATUS 2 LED will flash N times per second indicating the action that will be taken when the button is released. The flashing starts as soon as the button is held. e.g. You press the button, count flashes and then release as appropriate. | Duration | Function | Flashes | |---------------|---------------------------|-----------|  Example to cycle VTX power | 0 seconds | 1 second | 2 seconds | 3 seconds | 4 seconds | 5 seconds | 6 seconds or more| [-HOLD BUTTON------------------------------|-RELEASE BUTTON-NOW------------|-RELEASED TO LATE TO CHANGE POWER | | 4 Flashes | 3 flashes | 3 flashes | 2 flashes | 2 flashes | 1 flash | 1 flash | | 0 seconds | 1 second | 2 seconds | 3 seconds | 4 seconds | 5 seconds | 6 seconds or more | |-HOLD BUTTON------------------------------|-RELEASE BUTTON-NOW------------|-RELEASED TOO LATE TO CHANGE POWER| | 4 Flashes | 3 flashes | 3 flashes | 2 flashes | 2 flashes | 1 flash | 1 flash |  The VTX button works with ALL VTX systems including onboard RTC6705, Tramp and SmartAudio. If the VTX can be turned off then POWER 0 will turn off the VTX and POWER 1 will set the VTX into it's lowest power output. If the VTX cannot be turned off then POWER 0 will set the VTX into it's lowest power output. Some videotransmitters have restrictions on its usage. For example, SmartAudio V1.0 and V2.0 devices can only enter pitmode on power-up. Betaflight can make the these devices leave pitmode, but not enter it. "},{"title":"Yaw Spin Recovery and Gyro Overflow Detect","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/archive/Yaw-Spin-Recovery-and-Gyro-Overflow-Detect","content":"","keywords":""},{"title":"Yaw Spin Recovery Notes​","type":1,"pageTitle":"Yaw Spin Recovery and Gyro Overflow Detect","url":"/betaflight.com/docs/wiki/archive/Yaw-Spin-Recovery-and-Gyro-Overflow-Detect#yaw-spin-recovery-notes","content":"This new feature, enabled by default in betaflight 3.4, reduces the severity and duration of un-commanded severe yaw spins. For example, if a quadcopter clips a gate, tree, branch or other object and causes a high rate yaw spin, it may go into a 'never-ending' uncontrollable spin. Typically it makes a distinctive warbling noise and climbs rapidly - the so-called Yaw Spin To The Moon (YSTTM) problem. 3.4 introduces two code features that should bring such spins under control more quickly and cleanly. Yaw Spin Recovery is intended primarily for FPV pilots, and works best with MPU gyros. LOS acro pilots who use high yaw rates may prefer to disable this function. "},{"title":"Usage​","type":1,"pageTitle":"Yaw Spin Recovery and Gyro Overflow Detect","url":"/betaflight.com/docs/wiki/archive/Yaw-Spin-Recovery-and-Gyro-Overflow-Detect#usage","content":"yaw_spin_recovery can be enabled or disabled in the CLI: set yaw_spin_recovery = ON or set yaw_spin_recovery = OFF The 'threshold' value is the spin rate, in degrees per second, at which the spin protection kicks in. The default threshold of 1950 was chosen to minimise false triggering. For FPV, a lower value, e.g. 100-200 above your maximum configured yaw rate, is recommended. For example, a quad with a maximum configured yaw rate of 700 degrees/sec: set yaw_spin_threshold = 850 Too low a threshold may cause false triggering, and delay return to normal control. "},{"title":"How does it work?​","type":1,"pageTitle":"Yaw Spin Recovery and Gyro Overflow Detect","url":"/betaflight.com/docs/wiki/archive/Yaw-Spin-Recovery-and-Gyro-Overflow-Detect#how-does-it-work","content":"Once triggered, yawspin_recovery assigns full motor authority to the correction of the spin, and stops all unrelated PID and throttle activity. One pair of motors goes full on, the others go to minimum rpm. Once the yaw spin rate falls _below threshold by 100 degrees per second, and stays below threshold for 20ms, full control is returned to the pilot. Without this feature active, it is possible for any quad to get indefinite spins when the spin rate confuses the gyro. See &quot;What is the underlying cause&quot; below... "},{"title":"Should I lower the threshold?​","type":1,"pageTitle":"Yaw Spin Recovery and Gyro Overflow Detect","url":"/betaflight.com/docs/wiki/archive/Yaw-Spin-Recovery-and-Gyro-Overflow-Detect#should-i-lower-the-threshold","content":"A threshold of 1000 will reduce the total time spent in a typical out of control yaw spin by about half, compared to a threshold of 1950. For quads configured with a maximum yaw rate of about 800 degrees/sec, a threshold of 1000 works well, and should result in a return to normal control in about a quarter of a second after clipping a gate. False triggering will occur if the quad's yaw rate exceeds the threshold during normal flying. It is very unusual for FPV pilots to exceed 500 degrees/sec in normal racing, even during very quick turns. Exceeding 500 degrees/sec usually only happens if the pilot performs 'tricks' involving sustained commanded yaw spins. Personally, I run 850 and find that works very well for me. My maximum yaw rate is configured to 800 but even if I do a deliberate full yaw spin, I don't see anything suggesting that I hit the limit. "},{"title":"What happens if the threshold is too low?​","type":1,"pageTitle":"Yaw Spin Recovery and Gyro Overflow Detect","url":"/betaflight.com/docs/wiki/archive/Yaw-Spin-Recovery-and-Gyro-Overflow-Detect#what-happens-if-the-threshold-is-too-low","content":"If the maximum yaw rate is configured to be greater than the threshold, a sustained yaw spin will cause the quad to 'stutter' in yaw. The motors will push past threshold, then the PIDs will be disabled and the quad's spin will be slowed down, then the motors will push past threshold, again and again. The solution is to reduce the maximum commanded yaw rate, or set the threshold higher. "},{"title":"What should I do if I clip a gate and spin?​","type":1,"pageTitle":"Yaw Spin Recovery and Gyro Overflow Detect","url":"/betaflight.com/docs/wiki/archive/Yaw-Spin-Recovery-and-Gyro-Overflow-Detect#what-should-i-do-if-i-clip-a-gate-and-spin","content":"No specific actions are required by the pilot. The safest thing to do is to cut throttle, centre sticks, and mentally prepare for either re-gaining control, or disarming. When yaw spin protection is triggered, the quad gets driven with 50% effective throttle. It will accelerate briefly, perpendicular to the spin axis, but control should be returned to the pilot quickly, and should not climb much. There is no need to increase throttle manually. Control will be returned to the pilot 20ms after the spin rate falls 100 degrees/sec below threshold. Although the quad will still be spinning, the PIDs will become fully active, and will quickly stabilise the quad. By the time the pilot can see which way the quad is pointing, it should be easy to control. If the spin is prolonged, for example more than half a second, there may be a gyro overflow, a badly bent prop or some other hardware problem, and the pilot should disarm. "},{"title":"I have an ICM gyro, will this work with gyro_overflow_detect active?​","type":1,"pageTitle":"Yaw Spin Recovery and Gyro Overflow Detect","url":"/betaflight.com/docs/wiki/archive/Yaw-Spin-Recovery-and-Gyro-Overflow-Detect#i-have-an-icm-gyro-will-this-work-with-gyro_overflow_detect-active","content":"Gyro_overflow_detect is special code intended to deal with overflow issues on ICM gyros. The default is to be on, for all axes. It is unwise to disable this if your quad has an ICM gyro. It is not needed or helpful for MPU gyros. ICM gyros are susceptible to overflow-inversion problems if exposed to very high turn rates. If enabled and set to ALL, overflow protection will kick in and disable all PIDs whenever any axis exceeds 1950 degrees/second. Because the FC then won't know the actual direction of the spin, it slows down all motors to their minimum / idle throttle value, until all axes fall below 1850 degrees per second. This can take a long time, since the quad does not actively oppose the spin. 1850 degrees/second is still a very fast spin. If yaw spin recovery is active at a lower threshold (say 800), recovery to below 800 will be faster and cleaner than otherwise. So the answer is yes, yaw_spin_recovery is useful for ICM gyros even if Gyro_overflow_detect is enabled. "},{"title":"Why can't the quad re-orient itself to the original heading and attitude?​","type":1,"pageTitle":"Yaw Spin Recovery and Gyro Overflow Detect","url":"/betaflight.com/docs/wiki/archive/Yaw-Spin-Recovery-and-Gyro-Overflow-Detect#why-cant-the-quad-re-orient-itself-to-the-original-heading-and-attitude","content":"That would require valid accelerometer and mag sensor data, which could be inaccurate immediately after a crash. In any case, any such recovery would take some time, may interfere with more accurate pilot inputs, might glitch at the point of transfer back to acro mode and may fly away the wrong way. "},{"title":"What would happen if I set the threshold too low?​","type":1,"pageTitle":"Yaw Spin Recovery and Gyro Overflow Detect","url":"/betaflight.com/docs/wiki/archive/Yaw-Spin-Recovery-and-Gyro-Overflow-Detect#what-would-happen-if-i-set-the-threshold-too-low","content":"Yaw will jitter around whenever commanded yaw rate is held long enough for the quad to hit the yaw spin protection threshold, and normal pitch and roll control would get a bit messed up. In normal FPV flying and racing, actual yaw rates more than 500 degrees/sec are unusual even in the fastest turns. However, some FPV freestyle pilots like to do fast yaw spins, and may set a maximum yaw spin rate (in the rates part of the configurator) as high as 1000, and actually achieve that sometimes. If, say, the quad was configured for yaw rates of 1000 degrees/second and the yaw spin protection threshold was set at 800, and if the pilot then did a flat yaw spin by holding yaw at 100% with pitch and roll centred... the quad would rotate faster and faster, using one pair of motors to generate the yaw. When the quad hit the yaw spin protection point of 800, the opposite pair of motors would spin maximally, quickly slowing the yaw rate down to 700 degrees/second. This would probably take only 100ms. The quad might climb momentarily and wobble a bit, and for this short time there would be zero pitch and roll authority. This would quickly terminate, and if the higher yaw spin rate was still being commanded, the quad would again speed up to 800 degrees per second. An FPV pilot would see the yaw rate jittering between 700 and 800, there may be some pitch and roll artefacts, and the quad would make a strange noise. If this happens just turn the threshold up a bit. "},{"title":"What does it look like in a blackbox log?​","type":1,"pageTitle":"Yaw Spin Recovery and Gyro Overflow Detect","url":"/betaflight.com/docs/wiki/archive/Yaw-Spin-Recovery-and-Gyro-Overflow-Detect#what-does-it-look-like-in-a-blackbox-log","content":"Here is a real log of clipping the ground during an arcing turn with an MPU gyro. It's only a small impact. Peak yaw rate of about -1800 degrees/sec is attained within 2ms, exceeding the threshold of 800 and initiating yaw_spin_protection. At that point, two motors get 100% drive and the opposing pair 0% drive, resulting in maximum authority to slow the spin. During this time the roll and yaw components passively rotate the quad (it does a kind of axle roll around one arm at the same time). After about 120ms yaw rate drops below 700, then there is a 20ms delay period, and about 140ms after impact, normal PID control is returned to the pilot. The quad still is rolling in excess of 2000 degrees per second but now that the quad is not spinning, the PID system corrects this within about another 140ms. The quad becomes flyable again about ¼ second after impact. Note that if the threshold was set at default value of 1950, the yaw_spin_protection code would not be activated with this impact.  This is a log of a much more significant impact. The peak yaw spin rate probably exceeded 8000 degrees per second, judging by rate of return to normal, and involved bent props. The total time in full yaw_spin_recovery mode (one pair of motors full on) is about 600ms. This is the longest spin yet recorded with yaw spin protection. The vast majority resolve in under 400ms. Note that there is also significant pitch and roll wobble from the impact, as well as yaw spin. The instant of impact there is more than 2000 degrees/sec in pitch and, soon after, more than 2000 deg/sec in roll. If this was an ICM gyro, all PIDs would have been zeroed and there would be no active suppression of these spins - it would most likely take more than 3-4 seconds to passively slow down enough for control to be returned to the pilot, if this was an ICM gyro. This was an MPU6000 gyro, so yaw_spin_protection could actively stop the spin with full motor authority regardless of the magnitude of the spin. During the yaw spin correction period, all pitch and roll wobbles died out without any active PID involvement. By the time the spin had resolved, there was no meaningful pitch and roll problem. Most likely the reasonably rapid passive attenuation of pitch and roll wobble is because of the gyroscopic stabilisation effect of having two motors running full on in opposite directions, and the substantial air resistance in the pitch and roll axis of a quad that is actively suppressing a yaw spin.  With yaw_spin_protection, this massive spin stopped relatively quickly. "},{"title":"What is the underlying cause of these indefinite yaw spins - how does this code work?​","type":1,"pageTitle":"Yaw Spin Recovery and Gyro Overflow Detect","url":"/betaflight.com/docs/wiki/archive/Yaw-Spin-Recovery-and-Gyro-Overflow-Detect#what-is-the-underlying-cause-of-these-indefinite-yaw-spins---how-does-this-code-work","content":"A spin of this magnitude rotates the frame so fast that motors swap position (move 180 degrees opposite to their previous position) in 40ms or less. This is as fast as a motor can speed up or slow down. The normal PID responses to pitch and roll wobbles will not actually make any difference to motor speed until it has rotated to the opposite location from where it should have been. This means that pitch and roll PID responses in a rapidly rotating spin will feed back positively on themselves, maintaining or worsening the pitch and roll wobbles as long as the quad keeps spinning. Additionally, because the PID system is switching motors on and off randomly to deal with the massive swings in gyro values on pitch and roll, it does not put full authority into suppressing the spin. As a result the spin persists for a very long time. It is possible that at some point the motor speed changes may feed back positively into the spin. This bizarre combination of factors is what causes yaw spin to the moon events on MPU gyros. The key factor is having an extremely high yaw spin component. Very high rate pure pitch spins do not have this problem, nor do high rate axle rolls involving high rates of pitch and roll at the same time. But when pitch and roll is combined with high spin rates, logs show the gyros and PIDs going all over the place on all axes in a chaotic manner. By focusing the quad on actively suppressing the yaw spin component, these kinds of long duration flyways are prevented. That's what this code does. "},{"title":"Aikon F4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/AIKONF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Aikon F4","url":"/betaflight.com/docs/wiki/boards/AIKONF4#description","content":"FC with no PDB aimed at multi-rotor and fixed wing use, Aikon F4 features a carefully-chosen timer design which allowed to run 4-6 motors with burst DSHOT with maximum efficiency. On board are dedicated pads for ESC telemetry, VTX and camera control. Board also features an 11-pin connector for plug-and-play connection with Aikon AK32 4in1 ESC, providing voltage, current and ESC telemetry reading with no additional wires. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"Aikon F4","url":"/betaflight.com/docs/wiki/boards/AIKONF4#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"Aikon F4","url":"/betaflight.com/docs/wiki/boards/AIKONF4#hardware","content":"MCU: STM32F405IMU: ICM-20602Motor outputs: 4-6IMU Interrupt: YesBARO: OptionallyVCP: YesHardware UARTS: UART1 for SerialRX, UART3 for Inverted SmartPort, UART2 and UART4 available for general useSoftware serial: SOFTSERIAL1 for VTX control (shared with UART1TX), SOFTSERIAL2 for ESC telemetry (shared with UART4RX)OSD: YesBlackbox: SPI 16MBPPM/LED_STRIP Shared: YesBattery Voltage Sensor: YesIntegrated Voltage Regulator: YesButtons: Boot "},{"title":"Features​","type":1,"pageTitle":"Aikon F4","url":"/betaflight.com/docs/wiki/boards/AIKONF4#features","content":"UART3 inverter is controllable by software, you can use the SBUS pad for any unidirectional protocol by setting serialrx_inverted accordingly. There's also a solder-jumper to bypass the inverter and connecto UART3_RX to DSMX pad directly. Software serial is preconfigured by default, all you have to do is enable SOFTSERIAL1 for VTX control and SOFTSERIAL2 for ESC sensor on the Ports tab in Configurator. "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"Aikon F4","url":"/betaflight.com/docs/wiki/boards/AIKONF4#manufacturers-and-distributors","content":"https://www.aikon-electronics.com/ "},{"title":"Designers​","type":1,"pageTitle":"Aikon F4","url":"/betaflight.com/docs/wiki/boards/AIKONF4#designers","content":"AIKON Electronics Avi Jang "},{"title":"Maintainers​","type":1,"pageTitle":"Aikon F4","url":"/betaflight.com/docs/wiki/boards/AIKONF4#maintainers","content":"Andrey Mironov (@DieHertz) "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"Aikon F4","url":"/betaflight.com/docs/wiki/boards/AIKONF4#faq--known-issues","content":"First revision has no diode protecting the 5V input on the 11-pin ESC connector, make sure to pull the 5V wire coming from our ESC in order to avoid two regulators fighting against each otherFirst revision has RX4 (ESC Telemetry) and GND pad silkscreen swapped near motor outputs "},{"title":"AIORACERF3","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/AIORACERF3","content":"","keywords":""},{"title":"Hardware​","type":1,"pageTitle":"AIORACERF3","url":"/betaflight.com/docs/wiki/boards/AIORACERF3#hardware","content":"MCU: STM32F303CCT6IMU: MPU9250(SPI)IMU interrupt: YesBARO: BMP280(I2C)VCP: YesHardware UARTS: 3PWM input: NoPWM outputs: 8OSD: Yes, Minim-OSD, connected to UART1Blackbox: MicroSD card slot (SD/SDHC, upto 64GB)PPM/UART Shared: UART2Serial-RX: selectable UART2/UART3Battery Voltage Sensor: Yes, onboard voltage dividerCurrent Sensor: Provided by ARPDB (optional)Voltage converter: 3.3V/500mA buck converterIR-LED driver for ransponder: YesBuzzer driver: YesButtons: 1/DFURSSI Analog/PWM port: YesSWD port: Yes "},{"title":"Features​","type":1,"pageTitle":"AIORACERF3","url":"/betaflight.com/docs/wiki/boards/AIORACERF3#features","content":"The PWM solder pads close to the four corners, making it easier to connect the ESC signal lines.Gyro via SPI and 8K ready.Integrated Minim-OSD and FTDI debug socket.ZH 1.5-3P socket used for DSM/S.BUS. and others SRX receivers, it can be selected voltage 3.3V/5V on backside solder pads.WS2811 LED-strip supported.Optimized solder pads for optional ARPDB.Dimension: 35x35x7.4mm / fixing hole spacing 30mm.Supports DShot (see this page for setup instructions).ARPDB designed for ARF3 FC.Two types, Type-A with XT60 mounting holes and suitable for X-frame, Type-B is classic version.3 oz copper for high current.Max input voltage / current sensing: 28V/90A.Back converter outputs: 5.3V/3.5A. "},{"title":"Hardware Designs​","type":1,"pageTitle":"AIORACERF3","url":"/betaflight.com/docs/wiki/boards/AIORACERF3#hardware-designs","content":"GPIOTX1:PA9/RX1:PA10TX2:PA14/RX2:PA15TX3:PB10/RX3:PB11MPU_CS:PB9MPU_SCK:PB3MPU_SDO:PB4MPU_SDI:PB5MPU_INT:PC13SCL:PB6SDA:PB7SD_CS:PB12SD_SCK:PB13SD_SDO:PB14SD_SDI:PB15SENS_I:PA4SENS_V:PA5RSSI:PB2PWM1:PB1PWM2:PA7PWM3:PA2PWM4:PA1PWM5:PB0PWM6:PA6PWM7:PA3PWM8:PA0 "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"AIORACERF3","url":"/betaflight.com/docs/wiki/boards/AIORACERF3#manufacturers-and-distributors","content":"CRIUSAvailable hereAnd here "},{"title":"Designers​","type":1,"pageTitle":"AIORACERF3","url":"/betaflight.com/docs/wiki/boards/AIORACERF3#designers","content":"CRIUS "},{"title":"Maintainers​","type":1,"pageTitle":"AIORACERF3","url":"/betaflight.com/docs/wiki/boards/AIORACERF3#maintainers","content":"Hardware: Eric LiangSoftware: tianbin4279 / lijingwei0710 / Michael Keller "},{"title":"Similar Targets​","type":1,"pageTitle":"AIORACERF3","url":"/betaflight.com/docs/wiki/boards/AIORACERF3#similar-targets","content":"SPRACINGF3EVO "},{"title":"Other Resources​","type":1,"pageTitle":"AIORACERF3","url":"/betaflight.com/docs/wiki/boards/AIORACERF3#other-resources","content":"Manual "},{"title":"AIR32","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/AIR32","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"AIR32","url":"/betaflight.com/docs/wiki/boards/AIR32#description","content":"The AIR32 flight controller uses SMT32F3 processor and low noise MPU6000 gyro on SPI bus for faster acquisition of gyro data. Board have 3 fully usable UART ports without interference in USB port (VCP) but it still compatible with BLHELI passtrough. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"AIR32","url":"/betaflight.com/docs/wiki/boards/AIR32#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"AIR32","url":"/betaflight.com/docs/wiki/boards/AIR32#hardware","content":"MCU: STM32F3IMU: MPU6000BARO: NoVCP: YesHardware UARTS: 3OSD: NoBlackbox: NoPPM: YesBattery Voltage Sensor: YesIntegrated Voltage Regulator: 5V 600mA (up to 6S input)Brushed Motor Mosfets: NoButtons: BOOT button "},{"title":"Features​","type":1,"pageTitle":"AIR32","url":"/betaflight.com/docs/wiki/boards/AIR32#features","content":"(add list of features) "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"AIR32","url":"/betaflight.com/docs/wiki/boards/AIR32#manufacturers-and-distributors","content":"Flyinglemon - https://flyinglemon.eu "},{"title":"Designers​","type":1,"pageTitle":"AIR32","url":"/betaflight.com/docs/wiki/boards/AIR32#designers","content":"Flyinglemon - https://flyinglemon.eu "},{"title":"Maintainers​","type":1,"pageTitle":"AIR32","url":"/betaflight.com/docs/wiki/boards/AIR32#maintainers","content":"(add your name here if you help test or contribute code for this board) "},{"title":"Similar Targets​","type":1,"pageTitle":"AIR32","url":"/betaflight.com/docs/wiki/boards/AIR32#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) "},{"title":"Variants​","type":1,"pageTitle":"AIR32","url":"/betaflight.com/docs/wiki/boards/AIR32#variants","content":"Differences: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"AIR32","url":"/betaflight.com/docs/wiki/boards/AIR32#faq--known-issues","content":"Wiring:Use wiring only from PDF file https://flyinglemon.eu/index.php?controller=attachment&amp;id_attachment=5On website graphics has mistake with GND and Vcc for UART1 - they are swapped. DSHOT:Working for now only with test version from master branch. Be careful with using test versions! If you are in to it you will need to make some adjustments: Solder motor 1 to motor 5 pin on FC.Leave motor 2 and 3 on their pins.Solder motor 4 to motor 6 pin on FC.Remap by using following commands: resource MOTOR 5 freeresource MOTOR 6 freeresource MOTOR 1 A01resource MOTOR 4 A02save LED strip output should work - its sharing DMA with motor 4 pad. This is the main reason why 4th motor should be remaped to other pin. PPM pad sharing same DMA channel like MOT6 so taking PPM pad for one of motors doesn't make sense. Better is to use motor 6 pad just to keep all motors on dedicated pads - MOT1-6. "},{"title":"AirBotF4 and FLIP32F4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/AIRBOTF4FLIP32F4","content":"","keywords":""},{"title":"Firmware targets​","type":1,"pageTitle":"AirBotF4 and FLIP32F4","url":"/betaflight.com/docs/wiki/boards/AIRBOTF4FLIP32F4#firmware-targets","content":"For boards with a SDCARD holder, use AIRBOTF4SD. Otherwise, use AIRBOTF4. "},{"title":"Board specific 3.2 changes​","type":1,"pageTitle":"AirBotF4 and FLIP32F4","url":"/betaflight.com/docs/wiki/boards/AIRBOTF4FLIP32F4#board-specific-32-changes","content":"LED strip has been changed to MCU pin PB6, which is connected to designated LED signal pin on most Airbot/FLIP32 F4 boards. Try rewiring your LEDs to the pin. If you choose to keep the current wiring, you can do so by entering the CLI command resource motor 5 none resource led_strip a1  "},{"title":"Dual gyro boards​","type":1,"pageTitle":"AirBotF4 and FLIP32F4","url":"/betaflight.com/docs/wiki/boards/AIRBOTF4FLIP32F4#dual-gyro-boards","content":"With dual gyro variant of the AirbotF4 and FLIP32F4 (e.g. FLIP32-F4-DUAL GYRO EDITION), gyro to use can be selected by CLI variable gyro_to_use. set gyro_to_use = 0 # Selects MPU6000 set gyro_to_use = 1 # Selects ICM2060x  "},{"title":"Serial RX UART and programmable inverters on Airbot F4 variants​","type":1,"pageTitle":"AirBotF4 and FLIP32F4","url":"/betaflight.com/docs/wiki/boards/AIRBOTF4FLIP32F4#serial-rx-uart-and-programmable-inverters-on-airbot-f4-variants","content":"Applicable to post-3.1.7 builds Board\tSerial RX\tInverter CLI CommandAirbot F4 MPU9250\tUART1\tresource inverter 1 a10 Airbot F4 Nano\tUART3\tresource inverter 3 a8 Airbot F4 Dual Gyro\tUART6\tresource inverter 6 d2 (default for AIRBOTF4SD target) "},{"title":"AlienFlight (ALIENFLIGHTF1 and ALIENFLIGHTF3 target)","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ALIENFLIGHT","content":"","keywords":""},{"title":"Flashing the firmware​","type":1,"pageTitle":"AlienFlight (ALIENFLIGHTF1 and ALIENFLIGHTF3 target)","url":"/betaflight.com/docs/wiki/boards/ALIENFLIGHT#flashing-the-firmware","content":"The firmware can be updated with the Cleanflight configurator as for any other target. All AlienFlight boards have an boot jumper which need to be closed for the initial flashing or for recovery from an broken firmware. "},{"title":"AlienFlight (ALIENFLIGHTF1, ALIENFLIGHTF3, ALIENFLIGHTF4 and ALIENFLIGHTNGF7 target)","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ALIENFLIGHTF1","content":"","keywords":""},{"title":"Flashing the firmware​","type":1,"pageTitle":"AlienFlight (ALIENFLIGHTF1, ALIENFLIGHTF3, ALIENFLIGHTF4 and ALIENFLIGHTNGF7 target)","url":"/betaflight.com/docs/wiki/boards/ALIENFLIGHTF1#flashing-the-firmware","content":"The firmware can be updated with the BetaFlight configurator as for any other target. All AlienFlight boards have a boot jumper which need to be closed for initial flashing or for recovery from a broken firmware. The firmware for the OpenSky receiver can be updated via serial pass-through and the embedded boot loader. The initial flashing need to be done with the ISP programming pins. The target for the embedded AlienFlight OpenSky receiver is &quot;AFF4RX&quot;. Please refer to the OpenSky project for more details. https://github.com/fishpepper/OpenSky/blob/master/README.md "},{"title":"AlienFlight (ALIENFLIGHTF1, ALIENFLIGHTF3, ALIENFLIGHTF4 and ALIENFLIGHTNGF7 target)","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ALIENFLIGHTF3","content":"","keywords":""},{"title":"Flashing the firmware​","type":1,"pageTitle":"AlienFlight (ALIENFLIGHTF1, ALIENFLIGHTF3, ALIENFLIGHTF4 and ALIENFLIGHTNGF7 target)","url":"/betaflight.com/docs/wiki/boards/ALIENFLIGHTF3#flashing-the-firmware","content":"The firmware can be updated with the BetaFlight configurator as for any other target. All AlienFlight boards have a boot jumper which need to be closed for initial flashing or for recovery from a broken firmware. The firmware for the OpenSky receiver can be updated via serial pass-through and the embedded boot loader. The initial flashing need to be done with the ISP programming pins. The target for the embedded AlienFlight OpenSky receiver is &quot;AFF4RX&quot;. Please refer to the OpenSky project for more details. https://github.com/fishpepper/OpenSky/blob/master/README.md "},{"title":"AlienFlight (ALIENFLIGHTF1, ALIENFLIGHTF3, ALIENFLIGHTF4 and ALIENFLIGHTNGF7 target)","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ALIENFLIGHTF4","content":"","keywords":""},{"title":"Flashing the firmware​","type":1,"pageTitle":"AlienFlight (ALIENFLIGHTF1, ALIENFLIGHTF3, ALIENFLIGHTF4 and ALIENFLIGHTNGF7 target)","url":"/betaflight.com/docs/wiki/boards/ALIENFLIGHTF4#flashing-the-firmware","content":"The firmware can be updated with the BetaFlight configurator as for any other target. All AlienFlight boards have a boot jumper which need to be closed for initial flashing or for recovery from a broken firmware. The firmware for the OpenSky receiver can be updated via serial pass-through and the embedded boot loader. The initial flashing need to be done with the ISP programming pins. The target for the embedded AlienFlight OpenSky receiver is &quot;AFF4RX&quot;. Please refer to the OpenSky project for more details. https://github.com/fishpepper/OpenSky/blob/master/README.md "},{"title":"AlienFlight (ALIENFLIGHTF1, ALIENFLIGHTF3, ALIENFLIGHTF4 and ALIENFLIGHTNGF7 target)","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ALIENFLIGHTNGF7","content":"","keywords":""},{"title":"Flashing the firmware​","type":1,"pageTitle":"AlienFlight (ALIENFLIGHTF1, ALIENFLIGHTF3, ALIENFLIGHTF4 and ALIENFLIGHTNGF7 target)","url":"/betaflight.com/docs/wiki/boards/ALIENFLIGHTNGF7#flashing-the-firmware","content":"The firmware can be updated with the BetaFlight configurator as for any other target. All AlienFlight boards have a boot jumper which need to be closed for initial flashing or for recovery from a broken firmware. The firmware for the OpenSky receiver can be updated via serial pass-through and the embedded boot loader. The initial flashing need to be done with the ISP programming pins. The target for the embedded AlienFlight OpenSky receiver is &quot;AFF4RX&quot;. Please refer to the OpenSky project for more details. https://github.com/fishpepper/OpenSky/blob/master/README.md "},{"title":"ALIENWHOOP","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ALIENWHOOP","content":"","keywords":""},{"title":"ALIENWHOOP Board​","type":1,"pageTitle":"ALIENWHOOP","url":"/betaflight.com/docs/wiki/boards/ALIENWHOOP#alienwhoop-board","content":" AlienWhoop flight controller for Tiny Whoop, Blade Inductrix, Eachine, BetaFPV, and other micro brushed quadcopter frames. Best in class flight controller running BetaFlight. Choice of the top performing ARM processors: High-performance ST Microelectronics ARM Cortex-M4 core F4 168 MHz CPUHigh-performance ST Microelectronics ARM Cortex-M7 core F7 216 MHz CPUHighest-performer ST Microelectronics ARM Cortex-M4 core F4 OVERCLOCKED to 240 MHz!! Choice of top performing motion processors: Invensense MPU-6500 Six-Axis (Gyro + Accelerometer) low power consumption MEMS MotionTracking™ DeviceInvensense MPU-9250 Nine-Axis (Gyro + Accelerometer + Compass) low power consumption MEMS MotionTracking™ Device Capable of 32kHz gyro sampling and 32kHz PID loop with overclocked F4 (32kHz gyro sampling rate might not be optimal depending on features selected 16/16 or 16/8 might be preferable).Extreme power. Choice of either (1) Fairchild Semiconductor FDMA410NZ MOSFET with 9.5A continuous and 24A burst brushed motor insanity (8.5mm coreless scream), (2) FDMA410NZT MOSFET with 9.5A continuous and 63A burst, or (3) Infineon Technologies IRFHS8342 MOSFETUART4 solder pads for programmable LED strip (SUPER COOL) using WS2812B RGB or RX/TX for Micro MinimOSDSupports most serial external receivers. Officially supporting FrSky XM, XM+, R-XSR (SBUS/Fport), LemonRX DSM2 and DSMX (SBUS), and FlySky FS-A8S (iBUS) satellites. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"ALIENWHOOP","url":"/betaflight.com/docs/wiki/boards/ALIENWHOOP#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"ALIENWHOOP","url":"/betaflight.com/docs/wiki/boards/ALIENWHOOP#hardware","content":"MCU: STM32F405RGT6 or STM32F722RET6Brushed Motor Mosfets: Fairchild Semiconductor FDMA410NZ (9.5A/23A pulsed), FDMA410NZT (9.5A/63A pulsed), or Infineon IRFHS8342 MOSFET up to 75A pulsedIMU: MPU-6500 or MPU-9250 (both SPI)BARO: N/AUSB: STM32 VCPHardware UARTS: UART4 solder pads for Micro MinimOSD, LED strip, etc.OSD: N/ABlackbox: N/A on V2; via onboard flash V2.1PPM/UART Shared: N/ABattery Voltage Sensor: N/ACurrent sensor: N/AIntegrated Voltage Regulator: 3.3VButtons: 2 jumpers (1: DFU, 2:Receiver Bind) "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"ALIENWHOOP","url":"/betaflight.com/docs/wiki/boards/ALIENWHOOP#manufacturers-and-distributors","content":"AlienWhoop (Manufacturers) AlienWhoop Shop: https://shop.alienwhoop.us/products/alienwhoop-v2-1-f4-brushed-flight-controllerBetaFPV: https://betafpv.com/products/alienwhoop-f4-brushed-flight-controllerDrone Junkie: https://www.dronejunkie.co.uk/alienwhoop-f4-brushed-flight-controller-v2TinyWhoop: https://www.tinywhoop.com/collections/electronics/products/alien-whoop-v2-1-f4-brushed-flight-controllerDIY files here: https://oshpark.com/shared_projects/p4hs6DbI "},{"title":"Designers​","type":1,"pageTitle":"ALIENWHOOP","url":"/betaflight.com/docs/wiki/boards/ALIENWHOOP#designers","content":"AlienWhoop "},{"title":"Maintainers​","type":1,"pageTitle":"ALIENWHOOP","url":"/betaflight.com/docs/wiki/boards/ALIENWHOOP#maintainers","content":"@brucesdad13 "},{"title":"Acknowledgements​","type":1,"pageTitle":"ALIENWHOOP","url":"/betaflight.com/docs/wiki/boards/ALIENWHOOP#acknowledgements","content":"*Acknowledgements: AlienWhoop V2 and 2.1 are remixes of AlienFlight F3 Quad Brushed V1 "},{"title":"ANYFCF7","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ANYFCF7","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"ANYFCF7","url":"/betaflight.com/docs/wiki/boards/ANYFCF7#description","content":"Opensource (CC BY-SA 3.0) STM32F7 based flightcontroller designed for BetaFlight and InavFlight usage. Source: https://github.com/sambas/hw/tree/master/AnyFCF7 "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"ANYFCF7","url":"/betaflight.com/docs/wiki/boards/ANYFCF7#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"ANYFCF7","url":"/betaflight.com/docs/wiki/boards/ANYFCF7#hardware","content":"Size: 36x36mm (30.5x30.5 mounting holes)MCU: STM32F745VGT 100pin lqfpIMU: MPU6000 SPIIMU Interrupt: YesBaro: MS5611VCP: YesHardware UARTS: 810-pwm outputs (DSHOT supported six of them)6-pwm inputs (PPM on input 1 and UART6 on input 3/4)Blackbox: SD cardBattery Voltage Sensor: Yes, 10k/1k dividerCurrent sensor input: Yes, 1k series resistor protectionAnalog RSSI input: Yes, 1k series resistor protectionSolder pads for DFU bootDedicated external I2C for compass, pitot etc.External SPI shared on UART4/5 connector for future upgrades (osd, imu)CAN-bus ready "},{"title":"Features​","type":1,"pageTitle":"ANYFCF7","url":"/betaflight.com/docs/wiki/boards/ANYFCF7#features","content":"BlHeli passthrough: YesWS2811 Led Strip: Yes (mapped to output 4) "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"ANYFCF7","url":"/betaflight.com/docs/wiki/boards/ANYFCF7#manufacturers-and-distributors","content":"MXK? started to produce these, but used cheaply sourced parts. Currently known sources for these boards: https://www.banggood.com/STM32F745-100lqfp-216MHz-MPU6000-SPI-F7-Flight-Controller-for-FPV-Racing-Support-Betaflight-p-1137386.htmlhttp://www.buzzhobbies.com.au/anyfc-f7-flight-controllerhttp://www.readytoflyquads.com/anyf7-fc "},{"title":"Designers​","type":1,"pageTitle":"ANYFCF7","url":"/betaflight.com/docs/wiki/boards/ANYFCF7#designers","content":"Sambas "},{"title":"Maintainers​","type":1,"pageTitle":"ANYFCF7","url":"/betaflight.com/docs/wiki/boards/ANYFCF7#maintainers","content":"Sambas "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"ANYFCF7","url":"/betaflight.com/docs/wiki/boards/ANYFCF7#faq--known-issues","content":"SDcard detect not working correctly on chinaboards "},{"title":"Output pinout​","type":1,"pageTitle":"ANYFCF7","url":"/betaflight.com/docs/wiki/boards/ANYFCF7#output-pinout","content":"Output number\tMCU Pin\tDefault motor\tDSHOT\tOther1\tA03\t4\tYES DMA1_ST6 2\tA01\t3\tYES DMA1_ST4 3\tE06 NO 4\tB05 YES DMA1_ST5\tDefault LEDSTRIP 5\tB09 NO 6\tA02\t2\tYES DMA1_ST1 7\tA00 YES DMA1_ST2 8\tB03 YES DMA1_ST6 9\tB04 YES DMA1_ST4 10\tB08\t1\tYES DMA1_ST7\t "},{"title":"Other Resources​","type":1,"pageTitle":"ANYFCF7","url":"/betaflight.com/docs/wiki/boards/ANYFCF7#other-resources","content":"RC Groups Thread: https://www.rcgroups.com/forums/showthread.php?2847666-Next-generation-flight-controller-AnyFC-F7 "},{"title":"ANYFCM7","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ANYFCM7","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"ANYFCM7","url":"/betaflight.com/docs/wiki/boards/ANYFCM7#description","content":"Opensource (CC BY-SA 3.0) STM32F7 based flightcontroller designed for BetaFlight and InavFlight usage. Source: https://github.com/sambas/hw/tree/master/AnyFCM7 "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"ANYFCM7","url":"/betaflight.com/docs/wiki/boards/ANYFCM7#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"ANYFCM7","url":"/betaflight.com/docs/wiki/boards/ANYFCM7#hardware","content":"Size: 36x36mm (30.5x30.5 mounting holes)MCU: STM32F722RET6 64lqfp 216MHzIMU: MPU6000 SPIIMU Interrupt: YesBaro: MS5611VCP: YesHardware UARTS: 410-pwm outputs6-pwm inputs (PPM on input 1 and UART6 on input 3/4)Blackbox: 128MB DataFlashBattery Voltage Sensor: Yes, 10k/1k dividerSolder pads for DFU bootExternal I2C for compass, pitot etc.External SPI shared on UART4/5 connector for future upgrades (osd, imu) "},{"title":"Features​","type":1,"pageTitle":"ANYFCM7","url":"/betaflight.com/docs/wiki/boards/ANYFCM7#features","content":"BlHeli passthrough: YesWS2811 Led Strip: Yes (mapped to output 4) "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"ANYFCM7","url":"/betaflight.com/docs/wiki/boards/ANYFCM7#manufacturers-and-distributors","content":""},{"title":"Designers​","type":1,"pageTitle":"ANYFCM7","url":"/betaflight.com/docs/wiki/boards/ANYFCM7#designers","content":"Sambas "},{"title":"Maintainers​","type":1,"pageTitle":"ANYFCM7","url":"/betaflight.com/docs/wiki/boards/ANYFCM7#maintainers","content":"Sambas "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"ANYFCM7","url":"/betaflight.com/docs/wiki/boards/ANYFCM7#faq--known-issues","content":""},{"title":"Other Resources​","type":1,"pageTitle":"ANYFCM7","url":"/betaflight.com/docs/wiki/boards/ANYFCM7#other-resources","content":"RC Groups Thread: https://www.rcgroups.com/forums/showpost.php?p=37189186&amp;postcount=2 "},{"title":"ApexF7","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/APEXF7","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"ApexF7","url":"/betaflight.com/docs/wiki/boards/APEXF7#features","content":"STM32F722 16 MB of Flash USB-C Dual Gyro via SPI (MPU6000 + ICM20602) Barometer BMP280 via I2C VTX Power Switch 10V BEC for VTX and Camera CamControl OSD Bluetooth Connectivity via soldered module (active, when board isnt armed) WS2812 LED Output SmartAudio/Tramp Up to 6s Input "},{"title":"Connections​","type":1,"pageTitle":"ApexF7","url":"/betaflight.com/docs/wiki/boards/APEXF7#connections","content":"Function\tSolderPad/SilkScreen\tRescource\tMCU Pin\tNotesSBUS\tSBUS\tRX1\tPA10\tNo Inverter DSM2\tTX1\tTX1\tPA9\tCLI serial_halfduplex = ON SmartAudio\tS/A\tTX5\tPC12 F.PORT/S.PORT\tF.P\tTX3\tPC10\tNo Inverter ESC Telemetry\tTLM\tTX2\tPA2\tHalfduplex by default / on bottom side Cam Control\tCC PA8 Video Output\tVTX\t-\t- Cam Input\tCAM\t-\t- WS2812\tLED\tLED_STRIP\tPA15 BUZZER\tBZ-/BZ+\tBEEPER\tPB0 S1-S4\tM1-M4 PC8/B6/C9/B7\tMotor Outputs on bottom UART4\tTX4/RX4\tTX4/RX4\tPA0/PA1 UART6\tTX6/RX6\tTX6/RX6\tPC6/PC7 VBAT in\tBAT\t-\t-\t3S-6S input Current\tCURR\t-\tPC1\ton bottom SDA\tSDA\tI2C1_SDA\tPB9 SCL\tSCL\tI2C1_SCL\tPB8\t "},{"title":"Picture​","type":1,"pageTitle":"ApexF7","url":"/betaflight.com/docs/wiki/boards/APEXF7#picture","content":"  "},{"title":"ASGARD","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ASGARD","content":"","keywords":""},{"title":"Inverter Configuration on ASGARD (2017-06-10)​","type":1,"pageTitle":"ASGARD","url":"/betaflight.com/docs/wiki/boards/ASGARD#inverter-configuration-on-asgard-2017-06-10","content":"Firmware​ ASGARD V1 and V2 do have a programmable inverter on RX6, and the firmware supporting this should be used to stably operate anything on RX6. The firmware is OMNIBUSF4SD target release 3.2, or post-3.1.7 dev builds. TX6 has another inverter in place, but it is not used as an inverter, but an (unstable) uni-directional buffer. The uni-directional nature of the buffer prevents half-duplex (bi-directional) protocol such as SmartPort, SmartAudio and Tramp from working. Inverter Pin Configuration​ V1 and V2 have different inverter configuration. V2's inverter control is PC8, which is different from that of V1, which is PC9. As a matter of fact, PC8 is same as the pin used by OMNIBUS F4 V3. This derives following instruction regarding inverter configuration for RX6, for BF post-3.1.7 (3.2). ASGARD V1​ Use OMNIBUSF4SD target. Since default value for the inverter is PC8, users must explicitly change this to PC9 using the following CLI command. resource inverter 6 c9  ASGARD V2​ Use OMNIBUSF4SD target. Since default value for the inverter is PC8, it works with this version of the board without any reassignment. Inversion control will be handled correctly by each protocol handler for V1 and V2 once the pin is configured correctly. "},{"title":"For other related information, please refer to OMNIBUS F4 board wiki​","type":1,"pageTitle":"ASGARD","url":"/betaflight.com/docs/wiki/boards/ASGARD#for-other-related-information-please-refer-to-omnibus-f4-board-wiki","content":"Board---OMNIBUSF4 "},{"title":"ASGARD32","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ASGARD32","content":"","keywords":""},{"title":"Firmware targets​","type":1,"pageTitle":"ASGARD32","url":"/betaflight.com/docs/wiki/boards/ASGARD32#firmware-targets","content":"For Asgard32 F4, use AG3XF4.For Asgard32 F7, use AG3XF7. "},{"title":"Known problems and workarounds of Asgard32 F4 and Asgard32 F7.​","type":1,"pageTitle":"ASGARD32","url":"/betaflight.com/docs/wiki/boards/ASGARD32#known-problems-and-workarounds-of-asgard32-f4-and-asgard32-f7","content":"The pad for LED strip (PB6) does not work due to timer collision with Motor 4. There is a very little choice of pads for workaround; PA2 (TX2, labelled S/A for SmartAudio) is a descent choice. SmartAudio can be moved to one of available timer channels. This workaround configuration is implemented in official releases. The buzzer function is overloaded with status LED function, and there is no dedicated pad for buzzers. (The BUZ- pad is switched to ground by the status LED signal.) If a buzzer is connected the BUZ-, then beeper beeps on events that normal beeper doesn't beep (like attitude on ground). Workaround is described below (Adding a (real) beeper function). "},{"title":"Pad/Pin function map for Asgard32 F4​","type":1,"pageTitle":"ASGARD32","url":"/betaflight.com/docs/wiki/boards/ASGARD32#padpin-function-map-for-asgard32-f4","content":"![https://user-images.githubusercontent.com/14850998/43266681-f9381526-9126-11e8-974e-eaa5d4129487.png] [https://github.com/betaflight/betaflight/files/2232258/AG3XF4-function_map-20180626.pdf] "},{"title":"Adding a (real) beeper function​","type":1,"pageTitle":"ASGARD32","url":"/betaflight.com/docs/wiki/boards/ASGARD32#adding-a-real-beeper-function","content":"The beeper feature is configured but no pin is assigned by default for v3.4.1 and later. To use this facility to drive an actual beeper, you will need one of the followings. External MOSFET switch for self activating beeper/buzzer (the one that beeps only by applying an appropriate voltage at + and -. A buzzer unit, such as http://www.mateksys.com/?portfolio=dbuz5v or similar level triggered buzzer. To activate it as a level I/O, pick a pin and assign it as a beeper resource. For example, M7 pad (PB14) is a good candidate. resource beeper b14  Connect selected pad to buzzer's signal pad. For Mateksys unit mentioned above, &quot;B-&quot; is the signal pad. You may need to adjust the polarity of the signal. set beeper_inversion = OFF # if your beeper beeps when it supposed to be silent set beeper_inversion = ON # default  This is the circuit used for testing. ![https://user-images.githubusercontent.com/14850998/36553159-f7805d12-183e-11e8-8e22-8cd2740a53b8.png] "},{"title":"BeeRotor F4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/BEEROTORF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"BeeRotor F4","url":"/betaflight.com/docs/wiki/boards/BEEROTORF4#description","content":"F4 board with integrated Betaflight OSD. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"BeeRotor F4","url":"/betaflight.com/docs/wiki/boards/BEEROTORF4#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"BeeRotor F4","url":"/betaflight.com/docs/wiki/boards/BEEROTORF4#hardware","content":"MCU: STM32F405IMU: MPU6050A (SPI)IMU Interrupt: yesBARO: BMP280 (I2C)VCP: yesHardware UARTS: 1, 2, 3OSD: Betaflight OSDBlackbox: serial / SD CardPPM/UART Shared: UART2Battery Voltage Sensor: yesIntegrated Voltage Regulator: noBrushed Motor Mosfets: noButtons: BOOT8 PWM / DShot outputs (up to 6 useable for DShot)LED strip outputIR transmitter outputswitchable inverters for UART2 (SBus RX) and UART3 (SmartPort telemetry)SPI connector "},{"title":"Features​","type":1,"pageTitle":"BeeRotor F4","url":"/betaflight.com/docs/wiki/boards/BEEROTORF4#features","content":"8 motor outputs (6 useable for DShot)integrated Betaflight OSDblackbox logging to SD Card "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"BeeRotor F4","url":"/betaflight.com/docs/wiki/boards/BEEROTORF4#manufacturers-and-distributors","content":"RCTimer: http://rctimer.com/product-1730.html "},{"title":"Designers​","type":1,"pageTitle":"BeeRotor F4","url":"/betaflight.com/docs/wiki/boards/BEEROTORF4#designers","content":"RCTimer: http://rctimer.com/ "},{"title":"Maintainers​","type":1,"pageTitle":"BeeRotor F4","url":"/betaflight.com/docs/wiki/boards/BEEROTORF4#maintainers","content":"Hardware: Eric LiangSoftware: Michael Keller "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"BeeRotor F4","url":"/betaflight.com/docs/wiki/boards/BEEROTORF4#faq--known-issues","content":"Enabling DShot for motor 6: InstructionsThe SI pin on the PDB connector does not have a voltage divider. If the PDB connector is used as input for the battery voltag measurement, the PDB has to have a voltage divider, or the MCU on the board will be immediately and permanently destroyed by the battery voltage!(The SI pad on the board does have a voltage divider. Use this if your PDB does not have a voltage divider.) "},{"title":"BLUEJAYF4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"BLUEJAYF4","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4#description","content":"Beautifully simple STM32F4 based flightcontroller. An F4 replacement for the Naze.  Two variants (in multiple revisions). The full size, 36x36mm (30.5x30.5 mounting holes) and a 25x25mm (20x20 mounting holes) mini version. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"BLUEJAYF4","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"BLUEJAYF4","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4#hardware","content":"MCU: STM32F405RTG6IMU: ICM-20602 (SPI) rev4, ICM-20608-G (SPI) rev3 (and mini), and MPU9250 (SPI) rev1 and rev2IMU Interrupt: YesBARO: Optional on full size, not available on mini.VCP: YesHardware UARTS: 3 (4 on full size with Quad motor remapping)OSD: Compatible pinouts for MinimOSD on UART3 (stackable) on full size boardBlackbox: Yes (16mb rev3, 2mb rev1), SD card for rev2 and rev3 full size (no SD card on mini)PPM/UART Shared: UART6Battery Voltage Sensor: Yes, directly connected, no wiring necessary (if using pololu on full size), wiring required to vbat supply on PDB if using miniIntegrated Voltage Regulator: Pololu piggy back option on full size rev3 and rev4Button for putting board into DFU mode "},{"title":"Features​","type":1,"pageTitle":"BLUEJAYF4","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4#features","content":"Current Sensor: available as ADC input, but requires shunt circuit on PDB or battery cable.BlHeli passthrough: YesWS2811 Led Strip: Yes (on motor output Pin 5)Transponder: No "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"BLUEJAYF4","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4#manufacturers-and-distributors","content":"These boards (full and mini) are available at some online RC stores, and directly from the manufacturer BlueJayRC. Available here: BlueJayRC.com "},{"title":"Hardware Designs (if available)​","type":1,"pageTitle":"BLUEJAYF4","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4#hardware-designs-if-available","content":"The hardware is currently closed source. It may be in the future that older revisions will be made publicly available. "},{"title":"Variants​","type":1,"pageTitle":"BLUEJAYF4","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4#variants","content":"BlueJayF4 rev1, 2 and 3 - including mini. Rev3 (mini) (there is also a PDB available) Rev3 (Full Size)  Rev2 (Full Size) "},{"title":"Configuration Information​","type":1,"pageTitle":"BLUEJAYF4","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4#configuration-information","content":""},{"title":"Wiring Diagrams​","type":1,"pageTitle":"BLUEJAYF4","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4#wiring-diagrams","content":"  "},{"title":"Frsky Smartport​","type":1,"pageTitle":"BLUEJAYF4","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4#frsky-smartport","content":"Frysky smartport (or s-port) is inverted, and half duplex. You can modify your X4R or XSR by following the procedure here https://blck.mn/2016/06/smartport-the-frsky-x4rs-and-betaflight/ and here (for a cleaner modification thats easily switchable between inverted and non-inverted) https://blck.mn/2016/12/smartport-frsky-x4rs-and-betaflight-part-2/ For rev3 users, the addition of a diode on UART1, and the use of the builds in BF3.1 or later allow direct connection of s-port without modifying your RX unit.  You will need to run the following in the CLI: set sport_halfduplex=OFF "},{"title":"Serial Wire Debug​","type":1,"pageTitle":"BLUEJAYF4","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4#serial-wire-debug","content":"Serial Wire Debug output is located on the bottom of the board, and provides a pin out compatible with STM32Fx discovery boards to be used as a SWD adapter:   Known Issues: The rev2 requires a resistor mod to prevent the issue of crashing on power up. The rev3 does not have this issue. Following the picture below to perform the Rev2 resistor modification: The rev2 onboard regulator is limited in current capacity, and has been replaced with a pololu piggy back option for greater flexibility. Other Resources Rcgroups Thread: http://www.rcgroups.com/forums/showthread.php?t=2593106 Configuring 4th UART (3.2 and later) 4th hardware UART (UART4) is supported on motor outputs 1 and 2, but it is hidden until explicitly turned on by resource commands.Motor outputs 1 and 2 must be remapped to avoid collision with UART4. "},{"title":"Example​","type":1,"pageTitle":"BLUEJAYF4","url":"/betaflight.com/docs/wiki/boards/BLUEJAYF4#example","content":"Below is a sequence of resource commands to configure UART4, shift motor outputs by two (Motor 1 to motor output 3, motor 2 to motor output 4 and so on) and use DEBUG pad for LED strip. # Disable functions on motor outputs 5 and 6 so motors can be shifted by two resource SERIAL_TX 11 NONE resource SERIAL_RX 11 NONE resource MOTOR 5 NONE resource MOTOR 6 NONE # Remap LED resource LED_STRIP 1 B03 # Remap motors resource MOTOR 3 B00 resource MOTOR 4 B01 resource MOTOR 1 A02 resource MOTOR 2 A03 # Configure UART4 resource SERIAL_TX 4 A00 resource SERIAL_RX 4 A01  "},{"title":"AIO Betaflight F3 Flight controller","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3","content":"","keywords":""},{"title":"Updates​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#updates","content":""},{"title":"Timer mapping is modified (3.2) 2017-07-16​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#timer-mapping-is-modified-32-2017-07-16","content":"Software serial no longer interfere with motors 1-4.Software serial pads/TH can be used for motors 5-6 (dshot enabled; hexa-dshot).In the hexa-dshot configuration, LED strip has DMA conflict with motor 5. Use of other timer resource, presumably PPM, is advised. "},{"title":"Description​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#description","content":"OSD + PDB + SD card adapter "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#hardware","content":"(Fill in hardware specs and add any not listed) MCU: STM32F303CCT6IMU: MPU-6000IMU Interrupt:BARO: noUSB: STM32 VCPHardware UARTS: 3OSD: uses a AB7456 chipBlackbox: SD CardPPM/UART Shared:Battery Voltage Sensor: YesCurrent sensor: 0.5 mOhmIntegrated Voltage Regulator: 3A, 5V or 3V for RX and VBAT or 5V for VTX/camera with filtered AGNDButtons: BOOT buttonSoftware Serial broken outWeight: 5.4 grams "},{"title":"Features​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#features","content":"(add list of features) "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#manufacturers-and-distributors","content":"http://www.fpvmodel.com/-pre-order-betaflight-f3-flight-controller_g1231.htmlhttps://strictlyracingdrones.com/shop/electronics/betaflightf3-flight-controller/ "},{"title":"Designers​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#designers","content":"FPVModelBoris B "},{"title":"Maintainers​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#maintainers","content":"(add your name here if you help test or contribute code for this board) "},{"title":"Similar Targets​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) "},{"title":"Variants​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#variants","content":""},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#faq--known-issues","content":"(add FAQs, known issues and workarounds specifically related to this board. please link work in progress issues to the related github issue or pull request) format is reporter [name], (status): issue contents The DSM2/SBUS pad is connected to RX2LED_STRIP conflicts with motor 2 in Betaflight 3.1.0. Upgrade to version 3.1.6+ to fix it.The ground plane acts as a heatsink, making the ground (-) pads difficult to solder to. Preheat the area you're working on with a hot air station at 100°C - 150°C (200°F - 300°F) to make soldering faster and easierSD card needs to be formatted to specific parametersCurrent sensor needs to be calibrated in BF softwareFiltered power rail(RAM) is weakosd and 16/9 cameras do produce flickers in the osdUSB 5V power is connected to main 5V rail. If you have a lot of devices connected, e.g. buzzer, LED strip, Rx etc, USB might shut down. Power up on battery before connecting to USB in such cases.Status LED is inverted and connected in parallel with the beeper (PC15). So the light is on when beeper is quiet, and visa verse. A bit odd. "},{"title":"Other Resources​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#other-resources","content":""},{"title":"Issue fixes​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#issue-fixes","content":""},{"title":"SD card:​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#sd-card","content":"Samsung Evo class 10 series, 16GB or 32GB seem to work better than others (this may or may not work) Format card in SDcardformatter v4Insert card, flash BF 3.1.3 (on usb only no extra power)Straight to CLI and set sdcard_dma=onCard should initialize and the icon in the blackbox tab under the BF GUI should show it greenback to CLI and set sdcard_dma=off "},{"title":"Current sensor:​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#current-sensor","content":"There is a resistor that can be measured and scaling number can be calculated from that value. picture of resistor in link below it may be in a different place but should be around therehttps://static.rcgroups.net/forums/attachments/5/9/3/2/6/3/a9650746-128-EDB2C10E-33D3-40BA-988A-6029EA696B4F.jpg here is the procedure for calculating the valuehttps://www.rcgroups.com/forums/showthread.php?2798055-Understanding-Current-Meters "},{"title":"Driver related problems​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#driver-related-problems","content":"Some people have been complaining about computer(windows pc's) not being able to see the board. In boot loader mode, the default STM USB-dfu driver needs to be replaced with the generic WinUSB driver the Firmware Flasher in configurator can use. Zadig or IRCDF does this job for you. Zadig http://zadig.akeo.ie/impulserc driver fixer https://impulserc.blob.core.windows.net/utilities/ImpulseRC_Driver_Fixer.exe (link to official irc site) In normal mode, the STM VCP driver needs to be installed. http://www.st.com/en/development-tools/stsw-stm32102.html This is in no way special or specific for this board. All FC's with a STM USB-VCP port behave like this. Read Installing-Betaflight "},{"title":"remapping for motors​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#remapping-for-motors","content":"http://i.imgur.com/Mh41SmG.jpg "},{"title":"Setup Guide:​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#setup-guide","content":"Example: Tramp HV or Unify Pro HV: Telemitry to UART 3 TX pin Video to video out Power from VBAT and AGND Camera: Video to video in power from VBAT and AGND X4R-SB: Smartport telemitry to UART 1 TX pin SBUS to UART 2 Power from 5v rail Rcgroups Thread: https://www.rcgroups.com/forums/showthread.php?2795213-NEW-Betaflight-F3-Flight-Controller-OSD-PDB-SD-card-BEC-current-sensor Probably the first video about the BFF3: https://www.youtube.com/watch?v=kr16b45Lhw4 helpful for someone who is starting a build with the Betaflight F3 FC...(Note: this is a ARMATTAN CHAMELEON Build using the BFF3 FC). https://www.youtube.com/watch?v=wmbRVg3stoE https://www.rcgroups.com/forums/showthread.php?2795213-NEW-Betaflight-F3-Flight-Controller-OSD-PDB-SD-card-BEC-current-sensor "},{"title":"Image​","type":1,"pageTitle":"AIO Betaflight F3 Flight controller","url":"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3#image","content":"http://www.fpvmodel.com/-pre-order-betaflight-f3-flight-controller_g1231.html "},{"title":"CC3D","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/CC3D","content":"","keywords":""},{"title":"Flashing Cleanflight/BetaFlight to CC3D with Mainport and FTDI Video:​","type":1,"pageTitle":"CC3D","url":"/betaflight.com/docs/wiki/boards/CC3D#flashing-cleanflightbetaflight-to-cc3d-with-mainport-and-ftdi-video","content":"https://www.youtube.com/watch?v=5wjvJAMEMz0 "},{"title":"Beeper setup​","type":1,"pageTitle":"CC3D","url":"/betaflight.com/docs/wiki/boards/CC3D#beeper-setup","content":"Posted by handsomejackuk: so i have figured out that I need to configure resources separately in betaflight 3.16 and so far on cc3d have setup my buzzer on pin 6 as confirmed working with older versions of betaflight... # resourceresource BEEPER 1 A02resource MOTOR 1 B09resource MOTOR 2 B08resource MOTOR 3 B07resource MOTOR 4 A08resource MOTOR 5 B04resource PPM 1 A01resource PWM 2 B05resource PWM 3 B00resource PWM 4 B01resource PWM 5 A00resource PWM 6 A01resource SERIAL_TX 3 B10resource SERIAL_TX 11 B05resource SERIAL_RX 3 B11resource SERIAL_RX 11 B00 "},{"title":"Board - ChebuzzF3","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/CHEBUZZF3","content":"","keywords":""},{"title":"Connections​","type":1,"pageTitle":"Board - ChebuzzF3","url":"/betaflight.com/docs/wiki/boards/CHEBUZZF3#connections","content":"Board orientation. These notes assume that when the board is placed with the header pins facing up, the bottom right of the board is next to the 8 sets of INPUT pin headers. Inner means between the two rows of header sockets, outer means between the left/right board edges and the header sockets. "},{"title":"SPI2 / External SPI​","type":1,"pageTitle":"Board - ChebuzzF3","url":"/betaflight.com/docs/wiki/boards/CHEBUZZF3#spi2--external-spi","content":"sclk GPIOB 13 miso GPIOB 14 mosi GPIOB 15 There are 4 pins, labelled CS1-4 next to a label that reads Ext SPI. The 3rd pin is connected to the flash chip on the bottom right inner of the board. The other pins on the flash chip are wired up to PB3/4/5 "},{"title":"SPI3 / SPI​","type":1,"pageTitle":"Board - ChebuzzF3","url":"/betaflight.com/docs/wiki/boards/CHEBUZZF3#spi3--spi","content":"sclk GPIOB 3 miso GPIOB 4 mosi GPIOB 5 ssel 1 GPIOB 10 / Ext SPI CS1 ssel 2 GPIOB 11 / Ext SPI CS2 ssel 3 GPIOB 12 / Ext SPI CS3 - wired up to Slave Select of M25P16 15MBitFlash chip ssel 4 GPIOB 13 / Ext SPI CS4 - not usable since it is used for SPI2 sclk "},{"title":"RC Input​","type":1,"pageTitle":"Board - ChebuzzF3","url":"/betaflight.com/docs/wiki/boards/CHEBUZZF3#rc-input","content":"INPUT PA8 / CH1 - TIM1_CH1 PB8 / CH2 - TIM16_CH1 PB9 / CH3 - TIM17_CH1 PC6 / CH4 - TIM8_CH1 PC7 / CH5 - TIM8_CH2 PC8 / CH6 - TIM8_CH3 PF9 / CH7 - TIM15_CH1 PF10 / CH8 - TIM15_CH2 "},{"title":"PWM Outputs​","type":1,"pageTitle":"Board - ChebuzzF3","url":"/betaflight.com/docs/wiki/boards/CHEBUZZF3#pwm-outputs","content":"OUTPUT PD12 / CH1 - TIM4_CH1 PD13 / CH2 - TIM4_CH2 PD14 / CH3 - TIM4_CH3 PD15 / CH4 - TIM4_CH4 PA1 / CH5 - TIM2_CH2 PA2 / CH6 - TIM2_CH3 PA3 / CH7 - TIM2_CH4 PB0 / CH8 - TIM3_CH3 PB1 / CH9 - TIM3_CH4 PA4 / CH10 - TIM3_CH2 "},{"title":"Other ports​","type":1,"pageTitle":"Board - ChebuzzF3","url":"/betaflight.com/docs/wiki/boards/CHEBUZZF3#other-ports","content":"There is space for a MS5611 pressure sensor at the top left inner of the board. There is an I2C socket on the left outer of the board which connects to a PCA9306 I2C level shifter directly opposite (inner). The PCA9306 is not populated on some boards and thus the I2C socket is unusable. There is a CAN socket on the top right outer of the board which connects to a MAX3015 CAN Tranceiver. The MAX3015 is not populated on some boards and thus the CAN socket is unusable. There are some solder pads labelled Ext 1-4 at the top right inner of the board. GPIOE 6 / PE6 / Ext 1 GPIOD 3 / PD3 / Ext 2 GPIOD 4 / PD4 / Ext 3 GPIOB 3 / PB3 / Ext 4 There are some solder pads labelled ADC0-3 &amp; Diff Press at the top left inner of the board They are connected to the ADC socket at the top left outer of the board PC3 / Diff Press - ADC12_IN9 (Differential Pressure) PC2 / ADC2 - ADC12_IN8 PC1 / ADC1 - ADC12_IN7 PC0 / ADC0 - ADC12_IN6 There is space for a MPXV5004/MPVZ5004 differential pressure sensor, if populated it's analog pin connects to PC3. There are sockets for 5 UARTs labelled USART1-5. There is a socket labelled RX_IN. GPIOD 2 / PD2 / RX_IN "},{"title":"Board - CJMCU","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/CJMCU","content":"","keywords":""},{"title":"RX Connections​","type":1,"pageTitle":"Board - CJMCU","url":"/betaflight.com/docs/wiki/boards/CJMCU#rx-connections","content":"Pin Label\tDescriptionPA0\tRC Channel 1 PA1\tRC Channel 2 PA2\tRC Channel 3 / USART2 TX PA3\tRC Channel 4 / USART2 RX VCC\tPower (See note) GND\tGround NOTE: The VCC RX Pin is not regulated and will supply what ever voltage is provided to the board, this will mean it'll provide 5v if a 5v serial connection is used. Be careful if you are using a voltage sensitive RX. A regulated 3.3v supply can be found on the top pin of column 1, just below the RX GND pin. "},{"title":"Serial Connections​","type":1,"pageTitle":"Board - CJMCU","url":"/betaflight.com/docs/wiki/boards/CJMCU#serial-connections","content":"USART1 (along with power) is on the following pins. Pin Label\tDescriptionTX1\tUART1 TX RX1\tUART2 RX GND\tGround 3V3\tPower +3.3v 5V\tPower +5v USART2 is the following pins. Pin Label\tDescriptionPA2\tUSART2 TX PA3\tUSART2 RX "},{"title":"Power Connections​","type":1,"pageTitle":"Board - CJMCU","url":"/betaflight.com/docs/wiki/boards/CJMCU#power-connections","content":"Pin Label\tDescriptionPower +\tPower - 1 Cell 3.7v Max Power -\tGround "},{"title":"Motor Connections​","type":1,"pageTitle":"Board - CJMCU","url":"/betaflight.com/docs/wiki/boards/CJMCU#motor-connections","content":"In standard QUADX configuration, the motors are mapped: Cleanflight\tCJMCUMotor 1\tMotor3 Motor 2\tMotor2 Motor 3\tMotor4 Motor 4\tMotor1 It is therefore simplest to wire the motors: Motor 1 -&gt; ClockwiseMotor 2 -&gt; Anti-ClockwiseMotor 3 -&gt; ClockwiseMotor 4 -&gt; Anti-Clockwise If you are using the Hubsan x4/Ladybird motors, clockwise are Blue (GND) / Red (VCC) wires, anticlockwise are Black (GND) / White (VCC). i.e. there is one wire on each motor out of the standard RED/BLACK VCC/GND polarity colors that can be used to identify polarity. If you have wired as above, Motor1/Motor2 on the board will be forward. Connecting a Serial-USB Adapter You will need a USB -&gt; Serial UART adapter. Connect: Adapter\tCJMCUEither 3.3v OR 5v\tThe correct 3.3v OR 5v pin RX\tTX TX\tRX When first connected this should power up the board, and will be in bootloader mode. If this does not happen, check the charge switch is set to POW. After the flashing process has been completed, this will allow access via the cleanflight configurator to change settings or flash a new firmware. WARNING: If the motors are connected and the board boots into the bootloader, they will start to spin after around 20 seconds, it is recommended not to connect the motors until the board is flashed. Flashing To flash the board: Open Cleanflight ConfiguratorChoose the latest CJMCU firmware from the list.Select &quot;Load Firmware [Online]&quot; and wait for the firmware to download.Tick &quot;No Reboot Sequence&quot; and &quot;Full Chip Erase&quot;Connect the USB-&gt;Serial adapter to the boardSelect the USB-UART adapter from the top left boxClick &quot;Flash Firmware&quot;You should see &quot;Programming: SUCCESSFUL&quot; in the log boxClick &quot;Connect&quot; -&gt; This should open the &quot;Initial Setup&quot; tab and you should see sensor data from the quad shownUnplug the quad and short the 2 &quot;BOOT0&quot; pins. Revision 1 boards require this to be soldered, revision 2 boards can connect the included jumper to the two pre-soldered pins - This prevents the board from going into bootloader mode on next boot, if anything goes wrong, simply disconnect these two pins and the bootloader will start, allowing you to reflash. You cannot overwrite the bootloader. Charging The CJMCU has on it a TP4056 Lithium battery charging IC that can charge a 1S battery at 1A using a provided 5v supply attached to the 5v serial pin. To charge an attached battery: Set the power switch to OFFSet the charge switch to CHGPlug in a 1S battery to the battery pinsPlug in a 5v supply to the 5v serial pins The charger will finish when either the battery reaches 4.2v, or the battery's voltage is greater than the charger's input voltage. The two nearby LEDs will show the status of charging: Status\tGreen LED\tRed LEDCharging\tOn\tOff Finished\tOff\tOn 5v not connected\tOff\tOff Batt not connected\tFlashing\tOn Helpful Hints If you are only using a 4 channel RX, in the auxiliary configuration tab, you can add a &quot;Horizon&quot; mode range around 1500 for one of the the AUX channels which will result in it being always onEnabling the feature MOTOR_STOP helps with crashes so it doesn't try to keep spinning on its backWhen the power runs low, the quad will start jumping around a bit, if the flight behaviour seems strange, check your batteries charge "},{"title":"CL_RACING AIO F4 Flight controller","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/CLRACINGF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"CL_RACING AIO F4 Flight controller","url":"/betaflight.com/docs/wiki/boards/CLRACINGF4#description","content":"F4 chip+ OSD + PDB + SD card adapter "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"CL_RACING AIO F4 Flight controller","url":"/betaflight.com/docs/wiki/boards/CLRACINGF4#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"CL_RACING AIO F4 Flight controller","url":"/betaflight.com/docs/wiki/boards/CLRACINGF4#hardware","content":"(Fill in hardware specs and add any not listed) MCU: STM32F4IMU: MPU-6000IMU Interrupt:YESBARO: NOVCP: YESHardware UARTS: 4OSD: uses a AB7456 chipBlackbox: SD CardPPM/UART NOT Shared: YesBattery Voltage Sensor: 10:1Current sensor: 0.5 mOhm, 250 Current scale in the settingIntegrated Voltage Regulator: 1.2A 5vbuild_in filterd 7.86v BEC FOR video tx (800mw MAX)and camera "},{"title":"Features​","type":1,"pageTitle":"CL_RACING AIO F4 Flight controller","url":"/betaflight.com/docs/wiki/boards/CLRACINGF4#features","content":"CL_RACING F4 AIO borad hasonboard BECLC filter for camera and vtx.All pads design no through hole pin header.Betaflight OSD build in.Current sensorBuild in Sbus inverter120A Continues current rated PDB. 160A burst for 10s "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"CL_RACING AIO F4 Flight controller","url":"/betaflight.com/docs/wiki/boards/CLRACINGF4#manufacturers-and-distributors","content":"www.clrpowered.com (website under construction at this moment) "},{"title":"Designers​","type":1,"pageTitle":"CL_RACING AIO F4 Flight controller","url":"/betaflight.com/docs/wiki/boards/CLRACINGF4#designers","content":"bnn1044 "},{"title":"Maintainers​","type":1,"pageTitle":"CL_RACING AIO F4 Flight controller","url":"/betaflight.com/docs/wiki/boards/CLRACINGF4#maintainers","content":"bnn1044 "},{"title":"Similar Targets​","type":1,"pageTitle":"CL_RACING AIO F4 Flight controller","url":"/betaflight.com/docs/wiki/boards/CLRACINGF4#similar-targets","content":"99% identical to OmnibusF4SD, Same input and output, but in PDB style motor layoutFunction and features are the same as OmnibusF4SD, added more uarts and sepreate PPM from the uart "},{"title":"Variants​","type":1,"pageTitle":"CL_RACING AIO F4 Flight controller","url":"/betaflight.com/docs/wiki/boards/CLRACINGF4#variants","content":""},{"title":"Other Resources​","type":1,"pageTitle":"CL_RACING AIO F4 Flight controller","url":"/betaflight.com/docs/wiki/boards/CLRACINGF4#other-resources","content":"Setup Guide: "},{"title":"Image​","type":1,"pageTitle":"CL_RACING AIO F4 Flight controller","url":"/betaflight.com/docs/wiki/boards/CLRACINGF4#image","content":""},{"title":"CLRACINGF7","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7","content":"","keywords":""},{"title":"CONTENT MIGRATED FROM SAME FILE IN ANOTHER FOLDER​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#content-migrated-from-same-file-in-another-folder","content":"CLRACINGF7 "},{"title":"Description​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#description","content":""},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#hardware","content":"MCU: STM32F722REIMU: MPU-6000IMU Interrupt: YESBARO: NOVCP: YESHardware UARTS:OSD: uses a AT7456 chipBlackbox: SD CardPPM/UART NOT Shared: YESBattery Voltage Sensor: 10:1Current sensor: 0.5 mOhm, 250 Current scale in the settingIntegrated Voltage Regulator: 1.2 A 5v120A Current sensing PDB and 150A burst current for 10S on the current sensing ResistorSbus/Sat/etc (UART 6)Telemetry ( UART 1 ) "},{"title":"Software​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#software","content":"Firmware target: CLRACINGF7 "},{"title":"Features​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#features","content":"betaflight osdbuild in PDBbuild in Filter for camera and VTX "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#manufacturers-and-distributors","content":"www.clrpowered.com "},{"title":"Designers​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#designers","content":"bnn1044 "},{"title":"Maintainers​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#maintainers","content":"bnn1044 "},{"title":"Similar Targets​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) "},{"title":"Variants​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#variants","content":"Differences: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#faq--known-issues","content":""},{"title":"Other Resources​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#other-resources","content":"Setup Guides: "},{"title":"Image​","type":1,"pageTitle":"CLRACINGF7","url":"/betaflight.com/docs/wiki/boards/CLRACINGF7#image","content":""},{"title":"Board - TBS Colibri RACE","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE","content":"","keywords":""},{"title":"Hardware Features:​","type":1,"pageTitle":"Board - TBS Colibri RACE","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE#hardware-features","content":"STM32F303 based chipset for ultimate performance PPM, SBUS, DSM, DSMX input (5V and 3.3V provided over internal BUS). No inverters or hacks needed. 6 PWM ESC output channels (autoconnect, internal BUS) RGB LED strip support incl. power managementExtension port for GPS / external compass / pressure sensorUART port for peripherals (Blackbox, FrSky telemetry etc.)Choose between plug &amp; play sockets or solder pads for R/C and buzzer5V buzzer outputMPU6500 new generation accelerometer/gyro3x status LED (DCDC pwr/ 3.3V pwr/ status)Battery monitoring for 12V, 5V and VBat supplySize: 36mmx36mm (30.5mm standard raster)Weight: 4.4g For more details please visit:http://www.team-blacksheep.com/powercube "},{"title":"Serial Ports​","type":1,"pageTitle":"Board - TBS Colibri RACE","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE#serial-ports","content":"| Value | Identifier | Board Markings | Notes | | ----- | ------------ | -------------- | ------------------------------------------| | 1 | VCP | USB PORT | Main Port For MSP | | 2 | USART1 | FREE PORT | PC4 and PC5(Tx and Rx respectively) | | 3 | USART2 | PPM Serial | PA15 | | 4 | USART3 | GPS PORT | PB10 and PB11(Tx and Rx respectively) |  "},{"title":"Pinouts​","type":1,"pageTitle":"Board - TBS Colibri RACE","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE#pinouts","content":"Full pinout details are available in the manual, here: http://www.team-blacksheep.com/colibri_race  "},{"title":"SWD - ICSP​","type":1,"pageTitle":"Board - TBS Colibri RACE","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE#swd---icsp","content":"| Pin | Function | Notes | | --- | -------------- | -------------------------------------------- | | 1 | VCC_IN | 3.3 Volt | | 2 | SWDIO | | | 3 | nRESET | | | 4 | SWCLK | | | 5 | Ground | | | 6 | SWO/TDO | |  "},{"title":"Internal Bus​","type":1,"pageTitle":"Board - TBS Colibri RACE","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE#internal-bus","content":"| Pin | Function | Notes | | --- | -------------- | -------------------------------------------- | | 1 | PWM1 | MOTOR 1 | | 2 | PWM2 | MOTOR 2 | | 3 | PWM3 | MOTOR 3 | | 4 | PWM4 | MOTOR 4 | | 5 | PWM5 | MOTOR 5 (For Y6 or Hex X) | | 6 | PWM6 | MOTOR 6 (For Y6 or Hex X) | | 7 | BST SDA | Use For TBS CorePro Control Device | | 8 | BST SCL | Use For TBS CorePro Control Device | | 9 | PWM7 | Can be a normal GPIO (PA1) or PWM | | 10 | PWM8 | Can be a normal GPIO (PA2) or PWM | | 11 | 12.2V DCDC | If 12v is detected, the Blue LED will turn on| | 12 | 5.1V DCDC | Voltage for MCU |  "},{"title":"Servo​","type":1,"pageTitle":"Board - TBS Colibri RACE","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE#servo","content":"| Pin | Function | Notes | | --- | -------------- | -------------------------------------------- | | 1 | Ground | | | 2 | VCC_OUT | 5.1 Volt output to LCD Strip | | 3 | PWM Servo | PB14 - PWM10 |  "},{"title":"IO_1 - LED Strip​","type":1,"pageTitle":"Board - TBS Colibri RACE","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE#io_1---led-strip","content":"| Pin | Function | Notes | | --- | ----------------- | -------------------------------------------- | | 1 | LED_STRIP | Enable `feature LED_STRIP` | | 2 | VCC_OUT | 5.1 Volt output to LCD Strip | | 3 | Ground | |  "},{"title":"IO_2 - Sensor Interface​","type":1,"pageTitle":"Board - TBS Colibri RACE","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE#io_2---sensor-interface","content":"| Pin | Function | Notes | | --- | ----------------- | -------------------------------------------- | | 1 | VCC_OUT | 4.7 Volt output to the device | | 2 | Ground | | | 3 | UART3 TX | GPS | | 4 | UART3 RX | GPS | | 5 | SDA | mag, pressure, or other i2c device | | 6 | SCL | mag, pressure, or other i2c device |  "},{"title":"IO_3 - RC input​","type":1,"pageTitle":"Board - TBS Colibri RACE","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE#io_3---rc-input","content":"IO_3 is used for RX_PPM/RX_SERIAL. Under the `PORT` tab, set RX_SERIAL to UART2 when using RX_SERIAL. | Pin | Function | Notes | | --- | ----------------- | -------------------------------------------- | | 1 | PPM/Serial | Can PPM or Serial input | | 2 | VCC_OUT | 3.3 Volt output to the device | | 3 | Ground | | | 4 | VCC_OUT | 5.1 Volt output to the device |  "},{"title":"IO_4 - Buzzer​","type":1,"pageTitle":"Board - TBS Colibri RACE","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE#io_4---buzzer","content":"| Pin | Function | Notes | | --- | ----------------- | -------------------------------------------- | | 1 | BUZZER | Normal high (5.1v) | | 2 | VCC_OUT | 5.1 Volt output to the device |  "},{"title":"IO_5 - Free UART​","type":1,"pageTitle":"Board - TBS Colibri RACE","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE#io_5---free-uart","content":"| Pin | Function | Notes | | --- | ----------------- | -------------------------------------------- | | 1 | UART1 TX | Free UART | | 2 | UART1 RX | Free UART | | 3 | Ground | | | 4 | VCC_OUT | 4.7 Volt output to the device |  "},{"title":"IO_6 - IR TX (extension)​","type":1,"pageTitle":"Board - TBS Colibri RACE","url":"/betaflight.com/docs/wiki/boards/COLIBRIRACE#io_6---ir-tx-extension","content":"| Pin | Function | Notes | | --- | ----------------- | -------------------------------------------- | | 1 | IR TX | | | 2 | Ground | |  "},{"title":"CrazyBee F3 FR","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FR","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"CrazyBee F3 FR","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FR#description","content":"CrazyBee F3 flight controller is a Highly integrated board for 1S Whoop brushless racing drone. It might be the world first Tiny whoop size brushless flight controller which integrated Receiver/4in1 ESC/OSD/Current Meter. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"CrazyBee F3 FR","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FR#mcu-sensors-and-features","content":""},{"title":"Hardware and Features​","type":1,"pageTitle":"CrazyBee F3 FR","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FR#hardware-and-features","content":"MCU: STM32F303CCT6IMU: MPU6000 (SPI)IMU Interrupt: yesVCP: yesOSD: Betaflight OSDBattery Voltage Sensor: yesIntegrated Voltage Regulator: yes, booster, 5V/800mAIntegrated Current sensor：Max 14A, could be modified to 28A by replace resistorIntegrated Frsky compatible receiver: Frsky_D(D8) and Frsky_X(D16) switchable modeButtons: 1 (Receiver bind button)Integrated 4x Blheli_s ESC: Max 5A per ESCESC Connector: 3-pin, PicoBlade 1.25mm pitchBeeper output: 2-pin, soldering pad4 Rx Indicating LEDs: 2 x red and 2 x white "},{"title":"Resource mapping​","type":1,"pageTitle":"CrazyBee F3 FR","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FR#resource-mapping","content":"Label\tPin\tTimer\tDMA\tDefault\tNoteMPU6000_INT_EXTI\tPC13 MPU6000_CS_PIN\tPA4 SPI1 MPU6000_SCK_PIN\tPA5 SPI1 MPU6000_MISO_PIN\tPA6 SPI1 MPU6000_MOSI_PIN\tPA7 SPI1 OSD_CS_PIN\tPB1 SPI1 OSD_SCK_PIN\tPA5 SPI1 OSD_MISO_PIN\tPA6 SPI1 OSD_MOSI_PIN\tPA7 SPI1 RX_CS_PIN\tPB12 SPI2 RX_SCK_PIN\tPB13 SPI2 RX_MISO_PIN\tPB14 SPI2 RX_MOSI_PIN\tPB15 SPI2 RX_GDO0_PIN\tPA8 RX_BIND_PIN\tPA9 RX_LED_PIN\tPA10 PWM1\tPB8\tTIM8, CH2 PWM2\tPB9\tTIM8, CH3 PWM3\tPA3\tTIM2, CH4 PWM4\tPA2\tTIM15,CH1 VBAT_ADC_PIN\tPA0 ADC1 RSSI_ADC_PIN\tPA1 ADC1 BEEPER\tPC15 UART3 TX\tPB10 will add pinout soon UART3 RX\tPB11 will add pinout soon "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"CrazyBee F3 FR","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FR#manufacturers-and-distributors","content":"https://www.banggood.com/Racerstar-Crazybee-F3-Flight-Controller-4-IN-1-5A-1S-Blheli_S-ESC-Compatible-Frsky-D8-Receiver-p-1262972.html "},{"title":"Designers​","type":1,"pageTitle":"CrazyBee F3 FR","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FR#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"CrazyBee F3 FR","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FR#maintainers","content":""},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"CrazyBee F3 FR","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FR#faq--known-issues","content":"The board specifications claim DSHOT600-ready, but due to the use of a type L (BB1 24MHz) ESC, only DSHOT300 is reliably supported, although DSHOT600 seems to be working for quite a few people. But just how clean that ESC control signal is when using DSHOT600, is untested. For a discussion on this, see https://www.rcgroups.com/forums/showthread.php?3036325-Racerstar-Crazybee-F3-Ultimate-Micro-AIO-FC%21-1S-5A-BlheliS-Frsky-Flysky-OSD/page3 .The factory default GYRO / PID config is 8KHz / 2KHz . There are reports that this may lead to possible instability and 4KHz / 4KHz is recommended. Specific information for the factory supplied Betaflight 3.3.0 version: The DSHOT beeper function does not work.When turtle mode (&quot;Flip over after Crash&quot;) is activated, the FC will only arm if the failsafe timeout is 1s (10 * 0.1s) or more. If the timeout is set lower than that, you may see the motors shortly try to spin up and then stop, and then the quad will not be armed. Rumour has it that this is fixed in BF 3.4 . FRSKY Version: To bind to your Taranis, you need to be running the non-eu OpenTX version, which allows you to use the required D8 setting to bind to the RX. The factory default BF receiver mode is FRSKY_X, so remember to configure this if needed.FrSky X (8 / 16 channels) and FrSky D (8 channels) work both reliably, including in combination with crash flip / Dshot beacon, as long as the TELEMETRY feature is disabled; Basic telemetry information like RSSI and battery voltage will be sent even when the TELEMETRY feature is disabled;On FrSky D, the TELEMETRY feature causes occasional dropouts, depending on how many sensors (BARO, GPS, ...) are enabled, probably due to a timing overrun;On FrSky X, the TELEMETRY feature causes hard lockups due to a bug in the telemetry generation code. "},{"title":"Other Resources​","type":1,"pageTitle":"CrazyBee F3 FR","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FR#other-resources","content":"User Manual: http://img.banggood.com/file/products/20180209021414Crazybeef3.pdf "},{"title":"CrazyBee F3 FS","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FS","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"CrazyBee F3 FS","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FS#description","content":"CrazyBee F3 FS flight controller is a Highly integrated board for 1S Whoop brushless racing drone. It might be the world first Tiny whoop size brushless flight controller which integrated Receiver/4in1 ESC/OSD/Current Meter. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"CrazyBee F3 FS","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FS#mcu-sensors-and-features","content":""},{"title":"Hardware and Features​","type":1,"pageTitle":"CrazyBee F3 FS","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FS#hardware-and-features","content":"MCU: STM32F303CCT6IMU: MPU6000 (SPI)IMU Interrupt: yesVCP: yesOSD: Betaflight OSDBattery Voltage Sensor: yesIntegrated Voltage Regulator: yes, booster, 5V/800mAIntegrated Current sensor：Max 14A, could be modified to 28A by replace resistorIntegrated Flysky compatible receiverButtons: 1 (Receiver bind button)Integrated 4x Blheli_s ESC: Max 5A per ESCESC Connector: 3-pin, PicoBlade 1.25mm pitchBeeper output: 2-pin, soldering pad4 Rx Indicating LEDs: 2 x red and 2 x white "},{"title":"Resource mapping​","type":1,"pageTitle":"CrazyBee F3 FS","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FS#resource-mapping","content":"Label\tPin\tTimer\tDMA\tDefault\tNoteMPU6000_INT_EXTI\tPC13 MPU6000_CS_PIN\tPA4 SPI1 MPU6000_SCK_PIN\tPA5 SPI1 MPU6000_MISO_PIN\tPA6 SPI1 MPU6000_MOSI_PIN\tPA7 SPI1 OSD_CS_PIN\tPB1 SPI1 OSD_SCK_PIN\tPA5 SPI1 OSD_MISO_PIN\tPA6 SPI1 OSD_MOSI_PIN\tPA7 SPI1 RX_CS_PIN\tPB12 SPI2 RX_SCK_PIN\tPB13 SPI2 RX_MISO_PIN\tPB14 SPI2 RX_MOSI_PIN\tPB15 SPI2 RX_IRQ_PIN\tPA8 RX_BIND_PIN\tPA9 RX_LED_PIN\tPA10 PWM1\tPB8\tTIM8, CH2 PWM2\tPB9\tTIM8, CH3 PWM3\tPA3\tTIM2, CH4 PWM4\tPA2\tTIM15,CH1 VBAT_ADC_PIN\tPA0 ADC1 RSSI_ADC_PIN\tPA1 ADC1 BEEPER\tPC15 UART3 TX\tPB10 will add pinout soon UART3 RX\tPB11 will add pinout soon "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"CrazyBee F3 FS","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FS#manufacturers-and-distributors","content":"https://www.banggood.com/Racerstar-Crazybee-F3-Flight-Controller-4-IN-1-5A-1S-Blheli_S-ESC-Compatible-Flysky-AFHDS-Receiver-p-1271331.html "},{"title":"Designers​","type":1,"pageTitle":"CrazyBee F3 FS","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FS#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"CrazyBee F3 FS","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FS#maintainers","content":""},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"CrazyBee F3 FS","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FS#faq--known-issues","content":"See the same item for CrazyBeeF3FR "},{"title":"Other Resources​","type":1,"pageTitle":"CrazyBee F3 FS","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF3FS#other-resources","content":"User Manual: http://img.banggood.com/file/products/20180225215703Crazybeef3flysky.pdf "},{"title":"CrazyBee F4 DX Pro","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4DXPRO","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"CrazyBee F4 DX Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4DXPRO#description","content":"CrazyBee F4 DX Pro flight controller is a Highly integrated board(Receiver/4in1 ESC/OSD/Current Sensor) for 1~2S Whoop brushless racing drone. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"CrazyBee F4 DX Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4DXPRO#mcu-sensors-and-features","content":""},{"title":"Hardware and Features​","type":1,"pageTitle":"CrazyBee F4 DX Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4DXPRO#hardware-and-features","content":"MCU: STM32F411CEU6 (100MHZ, 512K FLASH)IMU: MPU6000 (SPI)OSD: Betaflight OSDBattery Voltage Sensor: yesPower supply: 1-2S battery input (DC 3.5-8.7V) -Built-in 5V 1A Buck / Boost with LC filterIntegrated Current sensor：Max 28A,Current meter scale set to 1175Built-in Serial-based DSM2/DSMX compatible satellite receiver(UART2 RX)Integrated inverter for sbus(when use external rx) in UART1 RXIntegrated 4x Blheli_s ESC: Max 5A per ESC(EMF8BB21F16G)ESC Connector: 3-pin, PicoBlade 1.25mm pitchBeeper output: 2-pin, soldering pad4 Rx Indicating LEDs: 2 x red and 2 x whiteBoard size: 28.5 * 28.5mm "},{"title":"Resource mapping​","type":1,"pageTitle":"CrazyBee F4 DX Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4DXPRO#resource-mapping","content":"Label\tPin\tTimer\tDMA\tDefault\tNoteMPU6000_INT_EXTI\tPA1 MPU6000_CS_PIN\tPA4 SPI1 MPU6000_SCK_PIN\tPA5 SPI1 MPU6000_MISO_PIN\tPA6 SPI1 MPU6000_MOSI_PIN\tPA7 SPI1 OSD_CS_PIN\tPB12 SPI2 OSD_SCK_PIN\tPB13 SPI2 OSD_MISO_PIN\tPB14 SPI2 OSD_MOSI_PIN\tPB15 SPI2 PWM1\tPB8\tTIM2, CH3 PWM2\tPB9\tTIM4, CH1 PWM3\tPA3\tTIM4, CH2 PWM4\tPA2\tTIM4, CH3 VBAT_ADC_PIN\tPB0 ADC1 CURRENT_ADC_PIN\tPB1 ADC1 BEEPER\tPC15 UART1 TX\tPA9 UART1 RX\tPA10 UART2 TX\tPA2 UART2 RX\tPA3 connect to built-in DSMX receiver "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"CrazyBee F4 DX Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4DXPRO#manufacturers-and-distributors","content":"Manufacturers: http://www.happymodel.cn/Distributors: Will add soon... "},{"title":"Designers​","type":1,"pageTitle":"CrazyBee F4 DX Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4DXPRO#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"CrazyBee F4 DX Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4DXPRO#maintainers","content":""},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"CrazyBee F4 DX Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4DXPRO#faq--known-issues","content":""},{"title":"Other Resources​","type":1,"pageTitle":"CrazyBee F4 DX Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4DXPRO#other-resources","content":"User Manual: Will add soon... "},{"title":"CrazyBee F4 FR Pro","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FRPRO","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"CrazyBee F4 FR Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FRPRO#description","content":"CrazyBee F4 FR Pro flight controller is a Highly integrated board(Receiver/4in1 ESC/OSD/Current Sensor) for 1~2S Whoop brushless racing drone. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"CrazyBee F4 FR Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FRPRO#mcu-sensors-and-features","content":""},{"title":"Hardware and Features​","type":1,"pageTitle":"CrazyBee F4 FR Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FRPRO#hardware-and-features","content":"MCU: STM32F411CEU6 (100MHZ, 512K FLASH)IMU: MPU6000 (SPI)OSD: Betaflight OSDBattery Voltage Sensor: yesPower supply: 1-2S battery input (DC 3.5-8.7V)Built-in 5V 1A Buck / Boost with LC filterIntegrated Current sensor：Max 28A,Current meter scale set to 1175Built-in SPI Frsky receiver with telemetry(D8/D16 switchable)Integrated inverter for sbus(when use external rx) in UART1 RXIntegrated 4x Blheli_s ESC: Max 5A per ESC(EMF8BB21F16G)ESC Connector: 3-pin, PicoBlade 1.25mm pitchBeeper output: 2-pin, soldering pad4 Rx Indicating LEDs: 2 x red and 2 x whiteBoard size: 28.5 * 28.5mm "},{"title":"Resource mapping​","type":1,"pageTitle":"CrazyBee F4 FR Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FRPRO#resource-mapping","content":"Label\tPin\tTimer\tDMA\tDefault\tNoteMPU6000_INT_EXTI\tPA1 MPU6000_CS_PIN\tPA4 SPI1 MPU6000_SCK_PIN\tPA5 SPI1 MPU6000_MISO_PIN\tPA6 SPI1 MPU6000_MOSI_PIN\tPA7 SPI1 OSD_CS_PIN\tPB12 SPI2 OSD_SCK_PIN\tPB13 SPI2 OSD_MISO_PIN\tPB14 SPI2 OSD_MOSI_PIN\tPB15 SPI2 RX_CS_PIN\tPA15 SPI3 RX_SCK_PIN\tPB3 SPI3 RX_MISO_PIN\tPB4 SPI3 RX_MOSI_PIN\tPB5 SPI3 RX_GDO0_PIN\tPC14 BIND_PLUG_PIN\tPB2 RX_LED_PIN\tPB9 PWM1\tPB8\tTIM2, CH3 PWM2\tPB9\tTIM4, CH1 PWM3\tPA3\tTIM4, CH2 PWM4\tPA2\tTIM4, CH3 VBAT_ADC_PIN\tPB0 ADC1 CURRENT_ADC_PIN\tPB1 ADC1 BEEPER\tPC15 UART1 TX\tPA9 UART1 RX\tPA10 UART2 TX\tPA2 UART2 RX\tPA3  "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"CrazyBee F4 FR Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FRPRO#manufacturers-and-distributors","content":"Manufacturers: http://www.happymodel.cn/Distributors: Will add soon... "},{"title":"Designers​","type":1,"pageTitle":"CrazyBee F4 FR Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FRPRO#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"CrazyBee F4 FR Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FRPRO#maintainers","content":""},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"CrazyBee F4 FR Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FRPRO#faq--known-issues","content":"FRSKY Version: To bind to your Taranis, you need to be running the non-eu OpenTX version, which allows you to use the required D8 setting to bind to the RX. The factory default BF receiver mode is FRSKY_X, so remember to configure this if needed.FrSky X (8 / 16 channels) and FrSky D (8 channels) work both reliably, including in combination with crash flip / Dshot beacon, as long as the TELEMETRY feature is disabled; Basic telemetry information like RSSI and battery voltage will be sent even when the TELEMETRY feature is disabled;On FrSky D, the TELEMETRY feature causes occasional dropouts, depending on how many sensors (BARO, GPS, ...) are enabled, probably due to a timing overrun;On FrSky X, the TELEMETRY feature causes hard lockups due to a bug in the telemetry generation code. "},{"title":"Other Resources​","type":1,"pageTitle":"CrazyBee F4 FR Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FRPRO#other-resources","content":"User Manual: http://www.happymodel.cn/wp-content/uploads/2019/01/CrazyBee-F4FR-Pro-Frsky-version-Manual-.pdf "},{"title":"CrazyBee F4 FS Pro","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FSPRO","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"CrazyBee F4 FS Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FSPRO#description","content":"CrazyBee F4 FS Pro flight controller is a Highly integrated board(Receiver/4in1 ESC/OSD/Current Sensor) for 1~2S Whoop brushless racing drone. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"CrazyBee F4 FS Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FSPRO#mcu-sensors-and-features","content":""},{"title":"Hardware and Features​","type":1,"pageTitle":"CrazyBee F4 FS Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FSPRO#hardware-and-features","content":"MCU: STM32F411CEU6 (100MHZ, 512K FLASH)IMU: MPU6000 (SPI)OSD: Betaflight OSDBattery Voltage Sensor: yesPower supply: 1-2S battery input (DC 3.5-8.7V)Built-in 5V 1A Buck / Boost with LC filterIntegrated Current sensor：Max 28A,Current meter scale set to 1175Built-in SPI Flysky receiver with telemetry(AFHDS/AFHDS2A switchable)Integrated inverter for sbus(when use external rx) in UART1 RXIntegrated 4x Blheli_s ESC: Max 5A per ESC(EMF8BB21F16G)ESC Connector: 3-pin, PicoBlade 1.25mm pitchBeeper output: 2-pin, soldering pad4 Rx Indicating LEDs: 2 x red and 2 x whiteBoard size: 28.5 * 28.5mm "},{"title":"Resource mapping​","type":1,"pageTitle":"CrazyBee F4 FS Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FSPRO#resource-mapping","content":"Label\tPin\tTimer\tDMA\tDefault\tNoteMPU6000_INT_EXTI\tPA1 MPU6000_CS_PIN\tPA4 SPI1 MPU6000_SCK_PIN\tPA5 SPI1 MPU6000_MISO_PIN\tPA6 SPI1 MPU6000_MOSI_PIN\tPA7 SPI1 OSD_CS_PIN\tPB12 SPI2 OSD_SCK_PIN\tPB13 SPI2 OSD_MISO_PIN\tPB14 SPI2 OSD_MOSI_PIN\tPB15 SPI2 RX_CS_PIN\tPA15 SPI3 RX_SCK_PIN\tPB3 SPI3 RX_MISO_PIN\tPB4 SPI3 RX_MOSI_PIN\tPB5 SPI3 RX_IRQ_PIN\tPA14 BIND_PLUG_PIN\tPB2 RX_LED_PIN\tPB9 PWM1\tPB8\tTIM2, CH3 PWM2\tPB9\tTIM4, CH1 PWM3\tPA3\tTIM4, CH2 PWM4\tPA2\tTIM4, CH3 VBAT_ADC_PIN\tPB0 ADC1 CURRENT_ADC_PIN\tPB1 ADC1 BEEPER\tPC15 UART1 TX\tPA9 UART1 RX\tPA10 UART2 TX\tPA2 UART2 RX\tPA3  "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"CrazyBee F4 FS Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FSPRO#manufacturers-and-distributors","content":"Manufacturers: http://www.happymodel.cn/Distributors: Will add soon... "},{"title":"Designers​","type":1,"pageTitle":"CrazyBee F4 FS Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FSPRO#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"CrazyBee F4 FS Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FSPRO#maintainers","content":""},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"CrazyBee F4 FS Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FSPRO#faq--known-issues","content":""},{"title":"Other Resources​","type":1,"pageTitle":"CrazyBee F4 FS Pro","url":"/betaflight.com/docs/wiki/boards/CRAZYBEEF4FSPRO#other-resources","content":"User Manual: Will add soon... "},{"title":"CRAZYFLIE2","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"CRAZYFLIE2","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2#description","content":"The Crazyflie 2.0 is a brushed nanocopter development kit sold by Bitcraze AB out of Sweden. The flight controller board is the copter itself - the PCB is X-Shaped and plastic motor mounts slide on to the arms. It features an integrated NRF51822 SoC for Rx. The Crazyflie 2.0 has an extensive expansion deck system with various decks that plug in to the expansion headers to enable various additional functions like buzzers, LEDs, indoor localization, and even an ESC breakout designed for mounting the board on a larger brushless build. The board has its own operating system and set of client side tools which enable all the functionality of these decks and the copter. This Betaflight/Cleanflight port is designed to enable the core flying scenarios, and is not necessarily intended to enable the features of all the various decks. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"CRAZYFLIE2","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"CRAZYFLIE2","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2#hardware","content":"MCU: STM32F405RG (flight control) + NRF51822 (Bluetooth and Nordic ESB Rx)IMU: Invensense MPU9250IMU Interrupt: YesBARO: STM LPS25H (no driver in betaflight yet)Compass: Onboard in MPU9250USB: STM32 VCPHardware UARTS: 0 (1 internal bridge from the NRF51822 to the STM32)Software UARTS: 0OSD: NoRC Rx: NRF51822 - Bluetooth or Nordic ESB. Custom defined Rx protocol.FPV Tx: NoBlackbox: NoPPM/UART Shared: NoBattery Voltage Sensor: NoBrushed Motor Mosfets: YesButtons: Power button connected to NRF51822. Can be used to Boot into DFU modeNumber of ESC/Motor outputs: 4 Brushed motorsUnbuffered Bidirectional ESC out/in-puts: NoStatus LEDs: LED0/LED1/LED2Active Beeper output: NoPassive Beeper output: NoLED-strip output:NoSbus inverter: NoPDB: Yes, accepts 1S batteryVoltage regulator: Yes max 1S input.Filtered power output: No "},{"title":"Software​","type":1,"pageTitle":"CRAZYFLIE2","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2#software","content":"Firmware target: CRAZYFLIE2 "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"CRAZYFLIE2","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2#manufacturers-and-distributors","content":"Bitcraze AB Online Store SeeedStudio "},{"title":"Designers​","type":1,"pageTitle":"CRAZYFLIE2","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2#designers","content":"Arnaud Taffanel, Marcus Eliasson, Tobias Antonsson "},{"title":"Maintainers​","type":1,"pageTitle":"CRAZYFLIE2","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2#maintainers","content":"Sean Kelly, @theseankelly "},{"title":"Similar Targets​","type":1,"pageTitle":"CRAZYFLIE2","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) "},{"title":"Variants​","type":1,"pageTitle":"CRAZYFLIE2","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2#variants","content":"Differences: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"CRAZYFLIE2","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2#faq--known-issues","content":""},{"title":"Other Resources​","type":1,"pageTitle":"CRAZYFLIE2","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2#other-resources","content":"Schematics Setup Guide on Bitcraze Wiki "},{"title":"Image​","type":1,"pageTitle":"CRAZYFLIE2","url":"/betaflight.com/docs/wiki/boards/CRAZYFLIE2#image","content":""},{"title":"Board - DALRCF405","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/DALRCF405","content":"","keywords":""},{"title":"All uarts have pad on board​","type":1,"pageTitle":"Board - DALRCF405","url":"/betaflight.com/docs/wiki/boards/DALRCF405#all-uarts-have-pad-on-board","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPB7\tPA9\tPB7 FOR SBUS IN(inverter build in) 2\tUSART2\tPA3\tPA2\tPAD USE FOR TRAMP/smart audio 3\tUSART3\tPB11\tPB10\tUSE FOR GPS 4\tUSART4\tPA1\tPA0\tPA0 FOR RSSI/FPORT/TEL etc 5\tUSART5\tPD2\tPC12\tPAD "},{"title":"I2C with GPS port together.Use for BARO or compass etc​","type":1,"pageTitle":"Board - DALRCF405","url":"/betaflight.com/docs/wiki/boards/DALRCF405#i2c-with-gps-port-togetheruse-for-baro-or-compass-etc","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tI2C1\tSDA\tPB9\twith GPS outlet 2\tI2C1\tSCL\tPB8\twith GPS outlet "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - DALRCF405","url":"/betaflight.com/docs/wiki/boards/DALRCF405#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPC14 2\tBEEPER\tBEE\tPC13\t "},{"title":"VBAT input with 1/10 divider ratio,Current signal input,Analog/digit RSSI input​","type":1,"pageTitle":"Board - DALRCF405","url":"/betaflight.com/docs/wiki/boards/DALRCF405#vbat-input-with-110-divider-ratiocurrent-signal-inputanalogdigit-rssi-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tADC1\tVBAT\tPC2\tDMA2_Stream0 2\tADC1\tCURR\tPC1\tDMA2_Stream0 3\tADC1\tRSSI\tPA0\tDMA2_Stream0 4\tADC1\textend\tPC0\tDMA2_Stream0 extend for other senser(PAD) "},{"title":"8 Outputs, 1 PPM input​","type":1,"pageTitle":"Board - DALRCF405","url":"/betaflight.com/docs/wiki/boards/DALRCF405#8-outputs-1-ppm-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM12_CH2\tPPM\tPB15\tPPM 2\tTIM3_CH3\tOUPUT1\tPB0\tDMA1_Stream7 3\tTIM8_CH1\tOUPUT2\tPC6\tDMA2_Stream2 4\tTIM1_CH3\tOUPUT3\tPA10\tDMA2_Stream6 5\tTIM1_CH1\tOUPUT4\tPA8\tDMA2_Stream1 6\tTIM8_CH3\tOUPUT5\tPC8\tDMA2_Stream4 7\tTIM3_CH4\tOUPUT6\tPB1\tDMA1_Stream2 8\tTIM3_CH2\tOUPUT7\tPC7\tDMA1_Stream5 NO PAD 9\tTIM8_CH4\tOUPUT8\tPC9\tDMA2_Stream7 NO PAD 10\tTIM4_CH1\tPWM\tPB6\tDMA1_Stream0 LED_STRIP 11\tTIM2_CH1\tPWM\tPA5\tFPV Camera Control(FCAM) "},{"title":"Gyro & ACC ,suppose ICM20689/MPU6000​","type":1,"pageTitle":"Board - DALRCF405","url":"/betaflight.com/docs/wiki/boards/DALRCF405#gyro--acc-suppose-icm20689mpu6000","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPB3 2\tSPI1\tMISO\tPA6 3\tSPI1\tMOSI\tPA7 4\tSPI1\tCS\tPC4\t "},{"title":"OSD MAX7456​","type":1,"pageTitle":"Board - DALRCF405","url":"/betaflight.com/docs/wiki/boards/DALRCF405#osd-max7456","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPC10 2\tSPI3\tMISO\tPC11 3\tSPI3\tMOSI\tPB5 4\tSPI3\tCS\tPA15\t "},{"title":"16Mbyte flash​","type":1,"pageTitle":"Board - DALRCF405","url":"/betaflight.com/docs/wiki/boards/DALRCF405#16mbyte-flash","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI2\tSCK\tPB13 2\tSPI2\tMISO\tPB14 3\tSPI2\tMOSI\tPC3 4\tSPI2\tCS\tPB12\t "},{"title":"SWD​","type":1,"pageTitle":"Board - DALRCF405","url":"/betaflight.com/docs/wiki/boards/DALRCF405#swd","content":"Pin\tFunction\tNotes1\tSWCLK\tPAD 2\tGround\tPAD 3\tSWDIO\tPAD 4\t3V3\tPAD ###Designers nyway &amp;DALRC "},{"title":"Board - DALRCF722DUAL","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/DALRCF722DUAL","content":"","keywords":""},{"title":"All uarts have pad on board​","type":1,"pageTitle":"Board - DALRCF722DUAL","url":"/betaflight.com/docs/wiki/boards/DALRCF722DUAL#all-uarts-have-pad-on-board","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPB7\tPB6\tPB7 FOR SBUS IN(inverter build in)/PPM 2\tUSART2\tPA3\tPA2\tPAD USE FOR TRAMP/smart audio 3\tUSART3\tPC11\tPC10\tUSE FOR GPS 4\tUSART4\tPA1\tPA0\tPA0 FOR RSSI/FPORT/TEL etc 5\tUSART5\tPD2\tPC12\tPAD "},{"title":"I2C with GPS port together.Use for BARO or compass etc​","type":1,"pageTitle":"Board - DALRCF722DUAL","url":"/betaflight.com/docs/wiki/boards/DALRCF722DUAL#i2c-with-gps-port-togetheruse-for-baro-or-compass-etc","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tI2C1\tSDA\tPB9 2\tI2C1\tSCL\tPB8\t "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - DALRCF722DUAL","url":"/betaflight.com/docs/wiki/boards/DALRCF722DUAL#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPC14\tOn board 2\tBEEPER\tBEE\tPC13\tPad "},{"title":"VBAT input with 1/10 divider ratio,Current signal input,Analog/digit RSSI input​","type":1,"pageTitle":"Board - DALRCF722DUAL","url":"/betaflight.com/docs/wiki/boards/DALRCF722DUAL#vbat-input-with-110-divider-ratiocurrent-signal-inputanalogdigit-rssi-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tADC1\tVBAT\tPC1 2\tADC1\tCURR\tPC0 3\tADC1\tRSSI\tPA0\t "},{"title":"8 Outputs​","type":1,"pageTitle":"Board - DALRCF722DUAL","url":"/betaflight.com/docs/wiki/boards/DALRCF722DUAL#8-outputs","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM4_CH2\tPPM\tPB7\tPPM 2\tTIM8_CH1\tOUPUT1\tPC6\tDMA 3\tTIM8_CH2\tOUPUT2\tPC7\tDMA 4\tTIM8_CH3\tOUPUT3\tPC8\tDMA 5\tTIM8_CH4\tOUPUT4\tPC9\tDMA 6\tTIM1_CH1\tOUPUT5\tPA8\tDMA 7\tTIM1_CH2\tOUPUT6\tPA9\tDMA 8\tTIM1_CH3\tOUPUT7\tPA10\tDMA NO PAD 9\tTIM2_CH4\tOUPUT8\tPB11\tNO PAD 10\tTIM2_CH1\tPWM\tPA15\tDMA LED_STRIP 11\tTIM3_CH4\tPWM\tPB1\tFPV Camera Control(FCAM) "},{"title":"Gyro & ACC ,support ICM20602 and MPU6000​","type":1,"pageTitle":"Board - DALRCF722DUAL","url":"/betaflight.com/docs/wiki/boards/DALRCF722DUAL#gyro--acc-support-icm20602-and-mpu6000","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPA5\tMPU6000 &amp; ICM20602 2\tSPI1\tMISO\tPA6\tMPU6000 &amp; ICM20602 3\tSPI1\tMOSI\tPA7\tMPU6000 &amp; ICM20602 4\tSPI1\tCS1\tPB0\tMPU6000 5\tSPI1\tCS2\tPA4\tICM20602 6\tSPI1\tINT1\tPB10\tMPU6000 7\tSPI1\tINT2\tPC4\tICM20602 "},{"title":"OSD MAX7456​","type":1,"pageTitle":"Board - DALRCF722DUAL","url":"/betaflight.com/docs/wiki/boards/DALRCF722DUAL#osd-max7456","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI2\tSCK\tPB13 2\tSPI2\tMISO\tPB14 3\tSPI2\tMOSI\tPB15 4\tSPI2\tCS\tPB12\t "},{"title":"16Mbyte flash​","type":1,"pageTitle":"Board - DALRCF722DUAL","url":"/betaflight.com/docs/wiki/boards/DALRCF722DUAL#16mbyte-flash","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPB3 2\tSPI3\tMISO\tPB4 3\tSPI3\tMOSI\tPB4 4\tSPI3\tCS\tPB2\t "},{"title":"SWD​","type":1,"pageTitle":"Board - DALRCF722DUAL","url":"/betaflight.com/docs/wiki/boards/DALRCF722DUAL#swd","content":"Pin\tFunction\tNotes1\tSWCLK\tPAD 2\tGround\tPAD 3\tSWDIO\tPAD 4\t3V3\tPAD  ###Designers ZhengNyway(nyway@vip.qq.com) "},{"title":"Board - Elin F405","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ELINF405","content":"","keywords":""},{"title":"Hardware Features​","type":1,"pageTitle":"Board - Elin F405","url":"/betaflight.com/docs/wiki/boards/ELINF405#hardware-features","content":"MCU STM32F405 IMU ICM-20602 Motor Outputs 4 outputs OSDVCPHardware UARTS : UART1 - Serial RX,UART3 - Inverted Smart Port,UART4 - General useUART6 - General useSoft Serial 1 - Smart PortSoft Serial 2 - ESC Telemetry Black box SPI 16MB LED StripIntegrated Voltage Regulator 5V , 3A Include Load Switch (VTX Real Pit Mode) -30V , -30A (VTX or LED On / Off) Include Low Pass LC filterButtons Boot "},{"title":"Pinouts​","type":1,"pageTitle":"Board - Elin F405","url":"/betaflight.com/docs/wiki/boards/ELINF405#pinouts","content":" "},{"title":"Board - Elin F722","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ELINF722","content":"","keywords":""},{"title":"Hardware Features​","type":1,"pageTitle":"Board - Elin F722","url":"/betaflight.com/docs/wiki/boards/ELINF722#hardware-features","content":"MCU STM32F722 IMU ICM-20602 Motor Outputs 4 outputs OSDVCPHardware UARTS : UART1 - Serial RX,UART3 - Inverted Smart Port,UART4 - General useUART6 - General useSoft Serial 1 - Smart PortSoft Serial 2 - ESC Telemetry Black box SPI 16MB LED StripIntegrated Voltage Regulator 5V , 3A Include Load Switch (VTX Real Pit Mode) -30V , -30A (VTX or LED On / Off) Include Low Pass LC filterButtons Boot "},{"title":"Pinouts​","type":1,"pageTitle":"Board - Elin F722","url":"/betaflight.com/docs/wiki/boards/ELINF722#pinouts","content":" "},{"title":"Board - EXF405DUAL","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/EXF405DUAL","content":"","keywords":""},{"title":"Hardware​","type":1,"pageTitle":"Board - EXF405DUAL","url":"/betaflight.com/docs/wiki/boards/EXF405DUAL#hardware","content":"MCU: STM32F405RGT6IMU1: ICM20608 (SPI1)IMU2: MPU6000 (SPI1)OSD: AT7456E (SPI2)Blackbox: Micron M25P16VP (SPI3) "},{"title":"Feature​","type":1,"pageTitle":"Board - EXF405DUAL","url":"/betaflight.com/docs/wiki/boards/EXF405DUAL#feature","content":"High-performance and DSP with FPU, ARM Cortex-M7 MCU with 512 Kbytes Flash.DUAL gyro MPU6000 and ICM20608, could choose mpu6000, more stable and smooth. Or choose ICM20608, higher rate(32K/32K). Choose on CLI mode,experience different feature gyro on same boardThe 16M byte SPI flash for data loggingUSB VCP and boot select button on board(for DFU)Serial LED interface(LED_STRIP)VBAT/CURR/RSSI sensors inputSuppose IRC Tramp/smart audio/FPV Camera Control/FPORT/telemetry. "},{"title":"Photos​","type":1,"pageTitle":"Board - EXF405DUAL","url":"/betaflight.com/docs/wiki/boards/EXF405DUAL#photos","content":"  "},{"title":"Manufacturer​","type":1,"pageTitle":"Board - EXF405DUAL","url":"/betaflight.com/docs/wiki/boards/EXF405DUAL#manufacturer","content":"EXUAV FPVFaceBook: https://www.facebook.com/profile.php?id=100013651722728 "},{"title":"The mass production version will be available soon.......​","type":1,"pageTitle":"Board - EXF405DUAL","url":"/betaflight.com/docs/wiki/boards/EXF405DUAL#the-mass-production-version-will-be-available-soon","content":""},{"title":"Board - EXF722AIO","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/EXF722AIO","content":"","keywords":""},{"title":"Hardware​","type":1,"pageTitle":"Board - EXF722AIO","url":"/betaflight.com/docs/wiki/boards/EXF722AIO#hardware","content":"MCU: STM32F722RET6IMU: ICM20689 or MPU6000OSD: AT7456E (SPI2)Blackbox: Micron M25P16VP (SPI3) "},{"title":"Feature​","type":1,"pageTitle":"Board - EXF722AIO","url":"/betaflight.com/docs/wiki/boards/EXF722AIO#feature","content":"High-performance and DSP with FPU, ARM Cortex-M7 MCU with 512 Kbytes Flash.The 16M byte SPI flash for data loggingUSB VCP and boot select button on board(for DFU)Serial LED interface(LED_STRIP)VBAT/CURR/RSSI sensors inputSuppose IRC Tramp/smart audio/FPV Camera Control/FPORT/telemetry. "},{"title":"Photos​","type":1,"pageTitle":"Board - EXF722AIO","url":"/betaflight.com/docs/wiki/boards/EXF722AIO#photos","content":"  "},{"title":"Manufacturer​","type":1,"pageTitle":"Board - EXF722AIO","url":"/betaflight.com/docs/wiki/boards/EXF722AIO#manufacturer","content":"EXUAV FPVFaceBook: https://www.facebook.com/profile.php?id=100013651722728 "},{"title":"The mass production version will be available soon.......​","type":1,"pageTitle":"Board - EXF722AIO","url":"/betaflight.com/docs/wiki/boards/EXF722AIO#the-mass-production-version-will-be-available-soon","content":""},{"title":"EXF722DUAL","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/EXF722DUAL","content":"","keywords":""},{"title":"Hardware​","type":1,"pageTitle":"EXF722DUAL","url":"/betaflight.com/docs/wiki/boards/EXF722DUAL#hardware","content":"MCU: STM32F722RET6IMU1: ICM20689_A (SPI1)IMU2: ICM20689_B (SPI1)OSD: AT7456E (SPI2)Barometer: BMP280 (SPI3)Blackbox: Micron M25P16VP (SPI3) "},{"title":"Feature​","type":1,"pageTitle":"EXF722DUAL","url":"/betaflight.com/docs/wiki/boards/EXF722DUAL#feature","content":"High-performance and DSP with FPU, ARM Cortex-M7 MCU with 512 Kbytes Flash.DUAL gyro ICM20689_A and ICM20689_B, they can work together to show you better performance.The 16M byte SPI flash for data loggingUSB VCP and boot select button on board(for DFU)Serial LED interface(LED_STRIP)VBAT/CURR/RSSI sensors inputSuppose IRC Tramp/smart audio/FPV Camera Control/FPORT/telemetrySupports SBus, Spektrum1024/2048, PPM. No external inverters required (built-in).Supports I2C device extend(baro/compass/OLED etc)(socket)Supports GPS (socket) "},{"title":"Photos​","type":1,"pageTitle":"EXF722DUAL","url":"/betaflight.com/docs/wiki/boards/EXF722DUAL#photos","content":"  "},{"title":"Manufacturer​","type":1,"pageTitle":"EXF722DUAL","url":"/betaflight.com/docs/wiki/boards/EXF722DUAL#manufacturer","content":"EXUAV FPVFaceBook: https://www.facebook.com/profile.php?id=100013651722728 "},{"title":"The mass production version will be available soon.......​","type":1,"pageTitle":"EXF722DUAL","url":"/betaflight.com/docs/wiki/boards/EXF722DUAL#the-mass-production-version-will-be-available-soon","content":""},{"title":"Board - F3FC Racing","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/F3FCRACING","content":"","keywords":""},{"title":"Hardware Features​","type":1,"pageTitle":"Board - F3FC Racing","url":"/betaflight.com/docs/wiki/boards/F3FCRACING#hardware-features","content":"STM32F303CC ProcessorMPU6000 connected via SPI (With interrupt pin connected)3 UARTsVCP USB6 PWM channels (PWM 6 used as PPM input when selected)Supports SBus, SumH, SumD, Spektrum1024/2048, XBus and PPM receivers. No external inverters required.Dedicated RGB LED control pin.Dedicated I2C portIntegrated battery monitoringCurrent sensor input pinBuzzer/Beeper portBuilt in 5V BEC (500mA)Push button for entering DFU mode3.3V pad available for spectrum satellite receivers. "},{"title":"Serial Ports​","type":1,"pageTitle":"Board - F3FC Racing","url":"/betaflight.com/docs/wiki/boards/F3FCRACING#serial-ports","content":"Value\tIdentifier\tRX\tTX\tNotes1\tVCP\tPA11\tPA12\tMini USB connector 2\tUSART1\tPB7\tPB6\tMarked as R1 and T1 on the board 3\tUSART2\tPA3\tPA2\tMarked as R2 and T2 on the board 4\tUSART3\tPB11\tPB10\tMarked as R3 and T3 on the board "},{"title":"Pinouts​","type":1,"pageTitle":"Board - F3FC Racing","url":"/betaflight.com/docs/wiki/boards/F3FCRACING#pinouts","content":"Full pinout details are available in the manual, here: http://rcexplorer.se/product/f3fc-racing/ "},{"title":"IOs​","type":1,"pageTitle":"Board - F3FC Racing","url":"/betaflight.com/docs/wiki/boards/F3FCRACING#ios","content":"Pad\tSignal\tNotesIsense\tPB2\tAnalog sensor Vbat\tPA5\tVoltage supplied to the built in BEC LED\tPB8\tRGB LED control FB\tPA6\tServo position FeedBack / RSSI input BZ-\tPA0\tBuzzer output 6\tPA1\tUsed as PPM input when selected SCLK\tPA9\tSCLK I2C SDA\tPA10\tSDA I2C PWM’s are marked as 1-6 "},{"title":"Voltage and current monitoring​","type":1,"pageTitle":"Board - F3FC Racing","url":"/betaflight.com/docs/wiki/boards/F3FCRACING#voltage-and-current-monitoring","content":"Voltage is measured on the “Vbat” (which also powers the built in BEC) pads through a voltage divider of 10k/1k connected to PA5. Isense pad is connected straight to PB2 and expects an analog voltage between 0-3.3V "},{"title":"F4BY","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/F4BY","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"F4BY","url":"/betaflight.com/docs/wiki/boards/F4BY#description","content":""},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"F4BY","url":"/betaflight.com/docs/wiki/boards/F4BY#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"F4BY","url":"/betaflight.com/docs/wiki/boards/F4BY#hardware","content":"MCU:IMU:IMU Interrupt:BARO:VCP:Hardware UARTS:OSD:Blackbox:PPM/UART Shared:Battery Voltage Sensor:Integrated Voltage Regulator:Brushed Motor Mosfets:Buttons: None. Solder BOOT pads "},{"title":"Features​","type":1,"pageTitle":"F4BY","url":"/betaflight.com/docs/wiki/boards/F4BY#features","content":"(add list of features) "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"F4BY","url":"/betaflight.com/docs/wiki/boards/F4BY#manufacturers-and-distributors","content":"(add links to Manufacturers and Distributors) "},{"title":"Designers​","type":1,"pageTitle":"F4BY","url":"/betaflight.com/docs/wiki/boards/F4BY#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"F4BY","url":"/betaflight.com/docs/wiki/boards/F4BY#maintainers","content":"(add your name here if you help test or contribute code for this board) "},{"title":"Similar Targets​","type":1,"pageTitle":"F4BY","url":"/betaflight.com/docs/wiki/boards/F4BY#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) "},{"title":"Variants​","type":1,"pageTitle":"F4BY","url":"/betaflight.com/docs/wiki/boards/F4BY#variants","content":"Differences: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"F4BY","url":"/betaflight.com/docs/wiki/boards/F4BY#faq--known-issues","content":""},{"title":"Other Resources​","type":1,"pageTitle":"F4BY","url":"/betaflight.com/docs/wiki/boards/F4BY#other-resources","content":"Setup Guides: "},{"title":"Image​","type":1,"pageTitle":"F4BY","url":"/betaflight.com/docs/wiki/boards/F4BY#image","content":""},{"title":"FuriusFPV RacePIT (v1.x) and RacePIT mini (V2.x)","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FF_RACEPIT","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"FuriusFPV RacePIT (v1.x) and RacePIT mini (V2.x)","url":"/betaflight.com/docs/wiki/boards/FF_RACEPIT#features","content":"Built-in RealPIT for VTX power.More UARTS (Full 6 Uart) for Simultaneous Connections of USB, Runcam Device, GPS, CRFS Rx, Black-box, BluetoothSelecting Internal 5V or External 5V ESC2 Port Camera Control and LED Strip for Simultaneous Connections (RacePIT only)Built-in ESC connector - Clean and Easy to Connect 4-in-1 ESCUse MPU6000 accelerometers and gyroscopesUltra Simplified OSD Interface w/ No PC NecessaryUARTS Connection Options for TBS Smart Audio or Immersion RC TrampIntegrated Soft Mount Silicone Damping for Maximum FC FunctionalityInrush Voltage Protection Input &amp; Output via Transient Voltage SuppressorHigh Quality 5V 1.5A BEC w/ 2S - 6S Voltage Input RangeBuilt In Driver Inverter for SBUS ConnectionSeparate Power Supply for Gyro w/ LDO for Low Noise &amp; High AccuracyClean and easy to connect VTX have telemetry (Stealth race, Tramp, Unify) "},{"title":"Hardware​","type":1,"pageTitle":"FuriusFPV RacePIT (v1.x) and RacePIT mini (V2.x)","url":"/betaflight.com/docs/wiki/boards/FF_RACEPIT#hardware","content":"STM32F405 main chipBuilt-in REALPIT for VTX power supply6 UARTsCamera control, support foxxer (built-in capacitor) and another camera (without capacitor) (RacePIT only)LED strip controlMPU6000BEC 5V 1.5A 2-6SSbus inverter signalBuilt-in OSD AT7456Current sensor support4 ESCs signal "},{"title":"BoardLayout RacePIT​","type":1,"pageTitle":"FuriusFPV RacePIT (v1.x) and RacePIT mini (V2.x)","url":"/betaflight.com/docs/wiki/boards/FF_RACEPIT#boardlayout-racepit","content":" "},{"title":"BoardLayout RacePIT mini​","type":1,"pageTitle":"FuriusFPV RacePIT (v1.x) and RacePIT mini (V2.x)","url":"/betaflight.com/docs/wiki/boards/FF_RACEPIT#boardlayout-racepit-mini","content":" "},{"title":"FF_PIKOBLX","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FF_PIKOBLX","content":"","keywords":""},{"title":"Note for Serial RX configuration (v3.3.0 and later)​","type":1,"pageTitle":"FF_PIKOBLX","url":"/betaflight.com/docs/wiki/boards/FF_PIKOBLX#note-for-serial-rx-configuration-v330-and-later","content":"FFPIKOBLX target explicitly sets serialrx_inverted to ON as target default value to accommodate Furious FPV's non-standard non-inverting SBUS receiver. This setting _inverts the protocol standard of inverted signal and bring it to non-inverting state. Caveats with this arrangements For standard SBUS receivers, serialrx_inverted must be set to OFF. For all other serial RX, serialrx_inverted must also be set to OFF explicitly, as this setting does persist even when serialrx_provider is changed. This phenomenon started with v3.3.0, when old setting of sbus_inversion was changed to protocol independent serialrx_inverted. The former only affected SBUS and not other protocols. "},{"title":"Flip32 F3 OSD","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FLIP32-F3-OSD","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Flip32 F3 OSD","url":"/betaflight.com/docs/wiki/boards/FLIP32-F3-OSD#description","content":""},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"Flip32 F3 OSD","url":"/betaflight.com/docs/wiki/boards/FLIP32-F3-OSD#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"Flip32 F3 OSD","url":"/betaflight.com/docs/wiki/boards/FLIP32-F3-OSD#hardware","content":"MCU: F3IMU: MPU6500BARO: BMP280Hardware UARTS: 1 (USB), 2, 3OSD: MWOSDBlackbox:Battery Voltage Sensor:Integrated Voltage Regulator: "},{"title":"Features​","type":1,"pageTitle":"Flip32 F3 OSD","url":"/betaflight.com/docs/wiki/boards/FLIP32-F3-OSD#features","content":"Flip 32 F3 OSD Flight controller is built with the next generation F3 processor, great for multirotors FPV racing and allows more configuration options. Build in OSD! Default shipping firmware: OSD: scarab-osd-1.5.2.4 FC:CleanFlight 1.12.0 Features: Build in OSD RSSI port F3 processor Normal header pins Built-in inverter for SBUS Voltage (VBAT) and Buzzer ports Spectrum Sat. port installed RGB LED Port! Flash memory for Blackbox! ( 128Mb) Built-in inverter for SBUS easy bootloader pins compact size "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"Flip32 F3 OSD","url":"/betaflight.com/docs/wiki/boards/FLIP32-F3-OSD#manufacturers-and-distributors","content":"http://www.readytoflyquads.com/flip-32-f3-osd "},{"title":"Designers​","type":1,"pageTitle":"Flip32 F3 OSD","url":"/betaflight.com/docs/wiki/boards/FLIP32-F3-OSD#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"Flip32 F3 OSD","url":"/betaflight.com/docs/wiki/boards/FLIP32-F3-OSD#maintainers","content":"Michael Keller "},{"title":"Similar Targets​","type":1,"pageTitle":"Flip32 F3 OSD","url":"/betaflight.com/docs/wiki/boards/FLIP32-F3-OSD#similar-targets","content":"95 % identical to SPRACINGF3 "},{"title":"FISHDRONEF4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FISHDRONEF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"FISHDRONEF4","url":"/betaflight.com/docs/wiki/boards/FISHDRONEF4#description","content":"The FishDroneTeam F4 Tower Flight Controller is an integrated flight controller and OSD and VTX specifically designed for ease of use and outstanding flight performance. The SPI-connected ICM20602 inertial motion sensor was chosen for it's high reliability, accuracy and update speed. This board has no problem running fast loop times and ESC protocols. There is an onboard barometer for altitude sensing along with an On Screen Display (OSD) chip directly connected to the main processor (MCU). This tight integration between the MCU and the OSD enables fast updates to the display and easy configuration of the OSD, which is managed straight from the BetaFlight configuration tool. You no longer need to worry about the extra hassle of configuring your OSD with a USB/UART adapter and 3rd party configuration tool, it's all built into the flight control software.  "},{"title":"Hardware​","type":1,"pageTitle":"FISHDRONEF4","url":"/betaflight.com/docs/wiki/boards/FISHDRONEF4#hardware","content":"MCU : STM32F405RGT6IMU : ICM-20602 (SPI)IMU Interrupt : YesCompass &amp; Baro : no support it (only designed for fpv)VCP : YesOSD : Yes, BetaFlight OSD (BFOSD)VTX : YesBlackbox : Yes ( 16MB Flash or TF support )Battery Voltage Sensor: Yes, directly connected, no wiring necessaryIntegrated Voltage Regulator: Yes, support for 2S-6S batteryButtons : 1 - DFUBrushed Motor Mosfets : NoUART : UART1 &amp; UART3 &amp; UART6  "},{"title":"Features​","type":1,"pageTitle":"FISHDRONEF4","url":"/betaflight.com/docs/wiki/boards/FISHDRONEF4#features","content":"All in one designSTM32F405 32-bit processor at 168MHz, 1Mb flash, 192kb ramICM-20602 MPU connected via SPIMicro USB connectivity using STM Virtual Communications PortSerial or PPM input (does not support individual PWM channel input)Has outputs for up to 4 ESCsTactile button for booting to STM boot loaderBuilt in inverter for SmartPort (UART3)Built in inverter for SBUS input (UART6)Onboard 16mb FlashCurrent Sensor : Not implementedBlHeli passthrough : YesWS2811 Led Strip : YesBeeper : YesTransponder: No  "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"FISHDRONEF4","url":"/betaflight.com/docs/wiki/boards/FISHDRONEF4#manufacturers-and-distributors","content":" "},{"title":"Hardware Designs​","type":1,"pageTitle":"FISHDRONEF4","url":"/betaflight.com/docs/wiki/boards/FISHDRONEF4#hardware-designs","content":"The hardware is currently closed source. It may be in the future that older revisions will be made publicly available.  "},{"title":"Other Resources​","type":1,"pageTitle":"FISHDRONEF4","url":"/betaflight.com/docs/wiki/boards/FISHDRONEF4#other-resources","content":"Rcgroups Thread :  "},{"title":"FAQ​","type":1,"pageTitle":"FISHDRONEF4","url":"/betaflight.com/docs/wiki/boards/FISHDRONEF4#faq","content":" "},{"title":"Images​","type":1,"pageTitle":"FISHDRONEF4","url":"/betaflight.com/docs/wiki/boards/FISHDRONEF4#images","content":"(This is a test version, the official version is coming soon.)​  "},{"title":"Flytower F4 v2","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Flytower F4 v2","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2#description","content":"All in one created by Exuav (https://www.facebook.com/EXUAV/), includes: FC (F4), VTX (25mw - 400mW), OSD (Betaflight), PDB, Dshot ESC (40A), BlackBox (SD). "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"Flytower F4 v2","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"Flytower F4 v2","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2#hardware","content":"MCU: STM32F405IMU: ICM-20608IMU Interrupt: SPIVCP: YESHardware UARTS: 1OSD: YES, BetaFlight OSD (STM32 controls OSD chip over SPI in DMA mode).Blackbox: Yes (32GB SD Card Support)PPM/UART Shared: UART1, UART3, UART6, SOFTSERIAL x 2Battery Voltage Sensor: YesIntegrated Voltage Regulator: YesButtons: F4 Boot modeSize: 36x36mm board with 30.5mm mounting holes. "},{"title":"Features​","type":1,"pageTitle":"Flytower F4 v2","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2#features","content":"★Practical -Easy to access connectors ★Configurable -Choose to use connectors ★Stackable -Mount our 4 in 1 ESC ★Compact -Only 36x36x15mm.(Add air-cooling finMAX 363620MM) ★Weight -26.3grams and 2 stack boards ★Professional -Symmetrical, Neat and Tidy and Easy to install in any racing drone ★36x36mm board with 30.5mm mounting holes ★STM32 F405MCU, Runs Betaflight firmware(supported from v3.1) ★SD card slot ★Use ICM-20608as Acc &amp; gyroover SPI Bus ★STM32 controls OSD chip over SPI in DMA mode, less CPU using, faster rate ★Micro USB socket ★1x 6pins JST-SH sockets (PPM, PWM, SERIAL RX, GPIO, ADC, 3V, 5V, GND) ★The on-board pins areeasily connected to ournext 4 in 1 ESC &amp;PDB board ★Internal VTX (40CH)(25/400MW adjustable power video transmission) ★Flight Control canadjustmentVTXdirectlythroughOSD（power, frequency） ★1x 4pins JST-SH sockets with BUZZER &amp; WS2811 RGB LED ★1x 4pins JST-SH socket for Video &amp; Audio transmission ★1 IPX sockets easy connect the external antenna ★4x 3 Pads for motor output ★1x2 Pads for batter in easy solde "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"Flytower F4 v2","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2#manufacturers-and-distributors","content":"www.exuavrc.comhttp://www.banggood.com/F4-Tower-Flight-Controller-Build-In-Accelerometer-Gyroscope-with-PDB-Buzzer-For-RC-Racer-p-1108717.html "},{"title":"Designers​","type":1,"pageTitle":"Flytower F4 v2","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2#designers","content":"Exuav "},{"title":"Maintainers​","type":1,"pageTitle":"Flytower F4 v2","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2#maintainers","content":"Exuav Francisco Perea (fncisco) "},{"title":"Similar Targets​","type":1,"pageTitle":"Flytower F4 v2","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2#similar-targets","content":"Board---FishDroneF4 "},{"title":"Variants​","type":1,"pageTitle":"Flytower F4 v2","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2#variants","content":"Differences: Esc 4 in 1More options to adjust VTX. "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"Flytower F4 v2","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2#faq--known-issues","content":"None. "},{"title":"Other Resources​","type":1,"pageTitle":"Flytower F4 v2","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2#other-resources","content":"Setup Guide:https://www.dropbox.com/s/0jjxp2tivvswze1/Fly%20FishTower%20F4%20Instructions%20V1.2.pdf?dl=0 Rcgroups Thread: https://www.rcgroups.com/forums/showthread.php?2813391-Flytower-F4-Flight-Controller-25-200-400mW-Switchable-FPV-VTX-OSD-Dshot-40A-4in1-ESC "},{"title":"Image​","type":1,"pageTitle":"Flytower F4 v2","url":"/betaflight.com/docs/wiki/boards/FLYTOWERF4V2#image","content":"http://www.banggood.com/F4-Tower-Flight-Controller-Build-In-Accelerometer-Gyroscope-with-PDB-Buzzer-For-RC-Racer-p-1108717.html?p=3T212374947582016110 "},{"title":"Board - FLYWOOF405","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FLYWOOF405","content":"","keywords":""},{"title":"All uarts have pad on board​","type":1,"pageTitle":"Board - FLYWOOF405","url":"/betaflight.com/docs/wiki/boards/FLYWOOF405#all-uarts-have-pad-on-board","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPA10\tPB6\tUSE smartport/FPORT/TEL etc 2\tUSART3\tPB11\tPB10\tFOR SBUS IN(inverter build in) 3\tUSART4\tPA1\tPA0\tPAD USE FOR TRAMP/smart audio 4\tUSART5\tPD2\t/\tPAD ESC sensor 5\tUSART6\tPC7\tPC6\tPAD USE FOR GPS/BLE etc "},{"title":"I2C with GPS port together.Use for BARO or compass etc​","type":1,"pageTitle":"Board - FLYWOOF405","url":"/betaflight.com/docs/wiki/boards/FLYWOOF405#i2c-with-gps-port-togetheruse-for-baro-or-compass-etc","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tI2C1\tSDA\tPB9\twith GPS outlet 2\tI2C1\tSCL\tPB8\twith GPS outlet "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - FLYWOOF405","url":"/betaflight.com/docs/wiki/boards/FLYWOOF405#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPC14 2\tBEEPER\tBEE\tPC13\t "},{"title":"VBAT input with 1/10 divider ratio,Current signal input,Analog/digit RSSI input​","type":1,"pageTitle":"Board - FLYWOOF405","url":"/betaflight.com/docs/wiki/boards/FLYWOOF405#vbat-input-with-110-divider-ratiocurrent-signal-inputanalogdigit-rssi-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tADC1\tVBAT\tPC3\tDMA2_Stream0 2\tADC1\tCURR\tPC2\tDMA2_Stream0 3\tADC1\tRSSI\tPC1\tDMA2_Stream0 "},{"title":"8 Outputs, 1 PPM input​","type":1,"pageTitle":"Board - FLYWOOF405","url":"/betaflight.com/docs/wiki/boards/FLYWOOF405#8-outputs-1-ppm-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM10_CH1\tPPM\tPB7\tPPM 2\tTIM3_CH3\tOUPUT1\tPB0\tDMA1_Stream7 3\tTIM3_CH4\tOUPUT2\tPB1\tDMA1_Stream2 4\tTIM2_CH4\tOUPUT3\tPA3\tDMA1_Stream6 5\tTIM2_CH3\tOUPUT4\tPA2\tDMA1_Stream1 6\tTIM3_CH2\tOUPUT5\tPB5\tDMA1_Stream5 7\tTIM4_CH2\tOUPUT6\tPB7\tDMA1_Stream3 8\tTIM8_CH4\tOUPUT7\tPC9\tDMA2_Stream7 9\tTIM3_CH1\tOUPUT8\tPB4\tDMA1_Stream4 10\tTIM8_CH3\tLED\tPC8\tDMA2_Stream2 LED_STRIP 11\tTIM1_CH2\tPWM\tPA9\tFPV Camera Control(FCAM) "},{"title":"Gyro & ACC ICM20689​","type":1,"pageTitle":"Board - FLYWOOF405","url":"/betaflight.com/docs/wiki/boards/FLYWOOF405#gyro--acc-icm20689","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPA5 2\tSPI1\tMISO\tPA6 3\tSPI1\tMOSI\tPA7 4\tSPI1\tCS\tPC4\t "},{"title":"OSD MAX7456​","type":1,"pageTitle":"Board - FLYWOOF405","url":"/betaflight.com/docs/wiki/boards/FLYWOOF405#osd-max7456","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPC10 2\tSPI3\tMISO\tPC11 3\tSPI3\tMOSI\tPC12 4\tSPI3\tCS\tPB14\t "},{"title":"16Mbyte flash​","type":1,"pageTitle":"Board - FLYWOOF405","url":"/betaflight.com/docs/wiki/boards/FLYWOOF405#16mbyte-flash","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPC10 2\tSPI3\tMISO\tPC11 3\tSPI3\tMOSI\tPC12 4\tSPI3\tCS\tPB3\t "},{"title":"SWD​","type":1,"pageTitle":"Board - FLYWOOF405","url":"/betaflight.com/docs/wiki/boards/FLYWOOF405#swd","content":"Pin\tFunction\tNotes1\tSWCLK\tPAD 2\tGround\tPAD 3\tSWDIO\tPAD 4\t3V3\tPAD FLYWOO TECH "},{"title":"Board - FLYWOOF411","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FLYWOOF411","content":"","keywords":""},{"title":"All uarts have pad on board​","type":1,"pageTitle":"Board - FLYWOOF411","url":"/betaflight.com/docs/wiki/boards/FLYWOOF411#all-uarts-have-pad-on-board","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPB7\tPB6\tFOR SBUS IN(inverter build in) 2\tUSART2\tPA3\tPA2\tFOR VTX SM/IRC ETC "},{"title":"I2C with GPS port together.Use for BARO or compass etc​","type":1,"pageTitle":"Board - FLYWOOF411","url":"/betaflight.com/docs/wiki/boards/FLYWOOF411#i2c-with-gps-port-togetheruse-for-baro-or-compass-etc","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tI2C1\tSDA\tPB9\twith GPS outlet 2\tI2C1\tSCL\tPB8\twith GPS outlet "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - FLYWOOF411","url":"/betaflight.com/docs/wiki/boards/FLYWOOF411#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPC13 2\tBEEPER\tBEE\tPC14\t "},{"title":"VBAT input with 1/10 divider ratio,Current signal input,Analog/digit RSSI input​","type":1,"pageTitle":"Board - FLYWOOF411","url":"/betaflight.com/docs/wiki/boards/FLYWOOF411#vbat-input-with-110-divider-ratiocurrent-signal-inputanalogdigit-rssi-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tADC1\tVBAT\tPA0\tDMA2_Stream0 2\tADC1\tCURR\tPA1\tDMA2_Stream0 3\tADC1\tRSSI\tPB1\tDMA2_Stream0 "},{"title":"8 Outputs, 1 PPM input​","type":1,"pageTitle":"Board - FLYWOOF411","url":"/betaflight.com/docs/wiki/boards/FLYWOOF411#8-outputs-1-ppm-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM9_CH1\tPPM\tPA2\tPPM 2\tTIM1_CH1\tOUPUT1\tPA8\tDMA2_Stream1 3\tTIM1_CH2\tOUPUT2\tPA9\tDMA2_Stream2 4\tTIM1_CH3\tOUPUT3\tPA10\tDMA2_Stream6 5\tTIM3_CH3\tOUPUT4\tPB0\tDMA1_Stream7 6\tTIM3_CH1\tOUPUT5\tPB4\tDMA1_Stream4 7\tTIM3_CH4\tANY\tPB1\tDMA1_Stream2 8\tTIM5_CH4\tANY\tPA3\tDMA1_Stream3 9\tTIM2_CH3\tCAM_C\tPB10\tDMA1_Stream1 10\tTIM2_CH4\tLED\tPB11\tDMA1_Stream6 "},{"title":"Gyro & ACC ICM20689​","type":1,"pageTitle":"Board - FLYWOOF411","url":"/betaflight.com/docs/wiki/boards/FLYWOOF411#gyro--acc-icm20689","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPA5 2\tSPI1\tMISO\tPA6 3\tSPI1\tMOSI\tPA7 4\tSPI1\tCS\tPA4\t "},{"title":"OSD MAX7456​","type":1,"pageTitle":"Board - FLYWOOF411","url":"/betaflight.com/docs/wiki/boards/FLYWOOF411#osd-max7456","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPB13 2\tSPI3\tMISO\tPB14 3\tSPI3\tMOSI\tPB15 4\tSPI3\tCS\tPB12\t "},{"title":"16Mbyte flash​","type":1,"pageTitle":"Board - FLYWOOF411","url":"/betaflight.com/docs/wiki/boards/FLYWOOF411#16mbyte-flash","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPB13 2\tSPI3\tMISO\tPB14 3\tSPI3\tMOSI\tPB15 4\tSPI3\tCS\tPB2\t "},{"title":"SWD​","type":1,"pageTitle":"Board - FLYWOOF411","url":"/betaflight.com/docs/wiki/boards/FLYWOOF411#swd","content":"Pin\tFunction\tNotes1\tSWCLK\tPAD 2\tGround\tPAD 3\tSWDIO\tPAD 4\t3V3\tPAD FLYWOO TECH "},{"title":"Board - FLYWOOF7DUAL","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FLYWOOF7DUAL","content":"","keywords":""},{"title":"All uarts have pad on board​","type":1,"pageTitle":"Board - FLYWOOF7DUAL","url":"/betaflight.com/docs/wiki/boards/FLYWOOF7DUAL#all-uarts-have-pad-on-board","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPA10\tPA9\tFOR SBUS IN(inverter build in) 2\tUSART2\tPA3\tPA2\tUSE FOR TRAMP/smart audio 3\tUSART3\tPB11\tPB10\tUSE FOR GPS 4\tUSART4\tPA1\tPA0\tPAD USE FOR TRAMP/smart audio 5\tUSART5\tPD2\tPC12\tPAD ESC sensor 6\tUSART6\tPC7\tPC6\tPAD "},{"title":"I2C with GPS port together.Use for BARO or compass etc​","type":1,"pageTitle":"Board - FLYWOOF7DUAL","url":"/betaflight.com/docs/wiki/boards/FLYWOOF7DUAL#i2c-with-gps-port-togetheruse-for-baro-or-compass-etc","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tI2C1\tSDA\tPB7\twith GPS outlet 2\tI2C1\tSCL\tPB6\twith GPS outlet "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - FLYWOOF7DUAL","url":"/betaflight.com/docs/wiki/boards/FLYWOOF7DUAL#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPC15 2\tBEEPER\tBEE\tPC14\t "},{"title":"VBAT input with 1/10 divider ratio,Current signal input,Analog/digit RSSI input​","type":1,"pageTitle":"Board - FLYWOOF7DUAL","url":"/betaflight.com/docs/wiki/boards/FLYWOOF7DUAL#vbat-input-with-110-divider-ratiocurrent-signal-inputanalogdigit-rssi-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tADC1\tVBAT\tPC1\tDMA2_Stream0 2\tADC1\tCURR\tPC0\tDMA2_Stream0 3\tADC1\tRSSI\tPC2\tDMA2_Stream0 "},{"title":"6 Outputs, 1 PPM input​","type":1,"pageTitle":"Board - FLYWOOF7DUAL","url":"/betaflight.com/docs/wiki/boards/FLYWOOF7DUAL#6-outputs-1-ppm-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM11_CH1\tPPM\tPB9\tPPM 2\tTIM3_CH4\tOUPUT1\tPB1\tDMA1_Stream2 3\tTIM3_CH1\tOUPUT2\tPB4\tDMA1_Stream4 4\tTIM2_CH2\tOUPUT3\tPB3\tDMA1_Stream6 5\tTIM2_CH1\tOUPUT4\tPA15\tDMA1_Stream5 6\tTIM8_CH3\tOUPUT5\tPC8\tDMA2_Stream4 7\tTIM8_CH4\tOUPUT6\tPC9\tDMA2_Stream1 8\tTIM1_CH1\tLED\tPA8\tLED STRIP 9\tTIM4_CH3\tPWM\tPB8\tFC CAM | 10 | TIM8_CH3 | LED | PC8 | DMA2_Stream2 LED_STRIP | 11 | TIM1_CH2 | PWM | PA9 | FPV Camera Control(FCAM) "},{"title":"Gyro & ACC ICM20689​","type":1,"pageTitle":"Board - FLYWOOF7DUAL","url":"/betaflight.com/docs/wiki/boards/FLYWOOF7DUAL#gyro--acc-icm20689","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPA5\tMPU6000 &amp; ICM20689 2\tSPI1\tMISO\tPA6\tMPU6000 &amp; ICM20689 3\tSPI1\tMOSI\tPA7\tMPU6000 &amp; ICM20689 4\tSPI1\tCS1\tPA4\tMPU6000 5\tSPI1\tCS2\tPB2\tICM20689 6\tSPI1\tINT1\tPC3\tMPU6000 7\tSPI1\tINT2\tPC4\tICM20689 "},{"title":"OSD MAX7456​","type":1,"pageTitle":"Board - FLYWOOF7DUAL","url":"/betaflight.com/docs/wiki/boards/FLYWOOF7DUAL#osd-max7456","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI2\tSCK\tPB13 2\tSPI2\tMISO\tPB14 3\tSPI2\tMOSI\tPB15 4\tSPI2\tCS\tPB12\t "},{"title":"16Mbyte flash​","type":1,"pageTitle":"Board - FLYWOOF7DUAL","url":"/betaflight.com/docs/wiki/boards/FLYWOOF7DUAL#16mbyte-flash","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPC10 2\tSPI3\tMISO\tPC11 3\tSPI3\tMOSI\tPB5 4\tSPI3\tCS\tPC13\t "},{"title":"SWD​","type":1,"pageTitle":"Board - FLYWOOF7DUAL","url":"/betaflight.com/docs/wiki/boards/FLYWOOF7DUAL#swd","content":"Pin\tFunction\tNotes1\tSWCLK\tPAD 2\tGround\tPAD 3\tSWDIO\tPAD 4\t3V3\tPAD FLYWOO TECHwww.flywoo.net "},{"title":"Board - FOXEERF405","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FOXEERF405","content":"Board - FOXEERF405 The FOXEERF405 described here: This board use the STM32F405RGT6 microcontroller and have the following features: 1024K bytes of flash memory,192K bytes RAM,168 MHz CPU/210 DMIPSThe 16M byte SPI flash for data loggingUSB VCP and boot select button on board(for DFU)Stable voltage regulation,9V/2A DCDC BEC for VTX/camera etc.And could select 5v/9v with padSerial LED interface(LED_STRIP)VBAT/CURR/RSSI sensors inputSuppose IRC Tramp/smart audio/FPV Camera Control/FPORT/telemetrySupports SBus, Spektrum1024/2048, PPM. No external inverters required (built-in).Supports I2C device extend(baro/compass/OLED etc)Supports GPSSupports MPU6000 or ICM20689","keywords":""},{"title":"Board - FOXEERF722DUAL","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FOXEERF722DUAL","content":"","keywords":""},{"title":"All uarts have pad on board​","type":1,"pageTitle":"Board - FOXEERF722DUAL","url":"/betaflight.com/docs/wiki/boards/FOXEERF722DUAL#all-uarts-have-pad-on-board","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPB7\tPB6\tPB7 FOR SBUS IN(inverter build in)/PPM 2\tUSART2\tPA3\tPA2\tPAD USE FOR TRAMP/smart audio 3\tUSART3\tPB11\tPB10\tUSE FOR GPS 4\tUSART4\tPA1\tPA0\tPA0 FOR RSSI/FPORT/TEL etc 5\tUSART5\tPD2\tPC12\tPAD "},{"title":"I2C with GPS port together.Use for BARO or compass etc​","type":1,"pageTitle":"Board - FOXEERF722DUAL","url":"/betaflight.com/docs/wiki/boards/FOXEERF722DUAL#i2c-with-gps-port-togetheruse-for-baro-or-compass-etc","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tI2C1\tSDA\tPB9\toutlet 2\tI2C1\tSCL\tPB8\toutlet "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - FOXEERF722DUAL","url":"/betaflight.com/docs/wiki/boards/FOXEERF722DUAL#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPC15\tOn board 2\tBEEPER\tBEE\tPA4\tPad "},{"title":"VBAT input with 1/10 divider ratio,Current signal input,Analog/digit RSSI input​","type":1,"pageTitle":"Board - FOXEERF722DUAL","url":"/betaflight.com/docs/wiki/boards/FOXEERF722DUAL#vbat-input-with-110-divider-ratiocurrent-signal-inputanalogdigit-rssi-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tADC1\tVBAT\tPC0\tOn board 2\tADC1\tCURR\tPC2 3\tADC1\tRSSI\tPA0\t "},{"title":"8 Outputs​","type":1,"pageTitle":"Board - FOXEERF722DUAL","url":"/betaflight.com/docs/wiki/boards/FOXEERF722DUAL#8-outputs","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM4_CH2\tPPM\tPB7\tPPM 2\tTIM1_CH2\tOUPUT1\tPA9\tDMA 3\tTIM1_CH1\tOUPUT2\tPA8\tDMA 4\tTIM8_CH4\tOUPUT3\tPC9\tDMA 5\tTIM8_CH3\tOUPUT4\tPC8\tDMA 6\tTIM8_CH1\tOUPUT5\tPC6\tDMA 7\tTIM8_CH2\tOUPUT6\tPC7\tDMA 8\tTIM2_CH1\tPWM\tPA15\tDMA LED_STRIP 9\tTIM2_CH2\tPWM\tPB3\tFPV Camera Control(FCAM) "},{"title":"Gyro & ACC ,support ICM20602 and MPU6000​","type":1,"pageTitle":"Board - FOXEERF722DUAL","url":"/betaflight.com/docs/wiki/boards/FOXEERF722DUAL#gyro--acc-support-icm20602-and-mpu6000","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPA5\tMPU6000 &amp; ICM20602 2\tSPI1\tMISO\tPA6\tMPU6000 &amp; ICM20602 3\tSPI1\tMOSI\tPA7\tMPU6000 &amp; ICM20602 4\tSPI1\tCS1\tPB2\tMPU6000 5\tSPI1\tCS2\tPB1\tICM20602 6\tSPI1\tINT1\tPC4\tMPU6000 7\tSPI1\tINT2\tPB0\tICM20602 "},{"title":"OSD MAX7456​","type":1,"pageTitle":"Board - FOXEERF722DUAL","url":"/betaflight.com/docs/wiki/boards/FOXEERF722DUAL#osd-max7456","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPC10 2\tSPI3\tMISO\tPC11 3\tSPI3\tMOSI\tPB5 4\tSPI3\tCS\tPC3\t "},{"title":"16Mbyte flash​","type":1,"pageTitle":"Board - FOXEERF722DUAL","url":"/betaflight.com/docs/wiki/boards/FOXEERF722DUAL#16mbyte-flash","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI2\tSCK\tPB13 2\tSPI2\tMISO\tPB14 3\tSPI2\tMOSI\tPB15 4\tSPI2\tCS\tPB12\t "},{"title":"SWD​","type":1,"pageTitle":"Board - FOXEERF722DUAL","url":"/betaflight.com/docs/wiki/boards/FOXEERF722DUAL#swd","content":"Pin\tFunction\tNotes1\tSWCLK\tPAD 2\tGround\tPAD 3\tSWDIO\tPAD 4\t3V3\tPAD ###Designers NywayZheng(nyway@vip.qq.com) "},{"title":"FRSKYF3","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FRSKYF3","content":"","keywords":""},{"title":"FRSKYF3 Board​","type":1,"pageTitle":"FRSKYF3","url":"/betaflight.com/docs/wiki/boards/FRSKYF3#frskyf3-board","content":"The Frsky F3 flight controller integrated Frsky's X8R Receiver,OSD and SD Card in one board. This board can select to use MPU6050 or MPU6000(Now the board is mounted with MPU6050).This board has no problem running fast loop times and ESC protocols. There is an On Screen Display (OSD) chip directly connected to the main processor (MCU). And the FC connect to the Receiver with SBUS and S.Port inner. You no longer need to mount another Reciver,and you can transimit FC's messages to Remote by Betaflight. For maximum ease of use, some FrskyF3's board has an onboard PDB up to 6s with a battery XT60 JACK.Just plug your battery straight into the flight controller and you're ready to go! "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"FRSKYF3","url":"/betaflight.com/docs/wiki/boards/FRSKYF3#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"FRSKYF3","url":"/betaflight.com/docs/wiki/boards/FRSKYF3#hardware","content":"MCU: STM32F3 IMU: MPU6050(I2C) [--MPU6000 (SPI)]IMU Interrupt: Yes VCP: Yes Hardware UARTS: 3(UART2--&gt;SBUS UART3--&gt;S.PORT) OSD: BFOSD Blackbox: SD Card Battery Voltage Sensor: yes Integrated Voltage Regulator: Yes, supports up to 6S, 1AMP Brushed Motor Mosfets: No Buttons: 2 (1: DFU, 2:Receiver Bind) "},{"title":"Features​","type":1,"pageTitle":"FRSKYF3","url":"/betaflight.com/docs/wiki/boards/FRSKYF3#features","content":"Current Sensor: PB2 BlHeli passthrough: Yes WS2811 Led Strip: Yes Transponder: Yes Beeper: Inverted Receiver: Frsky X8R RSSI:SBUS channel 8 "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"FRSKYF3","url":"/betaflight.com/docs/wiki/boards/FRSKYF3#manufacturers-and-distributors","content":"Frsky(Manufacturers) Available here soon:http://www.frsky-rc.com "},{"title":"Designers​","type":1,"pageTitle":"FRSKYF3","url":"/betaflight.com/docs/wiki/boards/FRSKYF3#designers","content":"Frsky Co.Lt "},{"title":"Maintainers​","type":1,"pageTitle":"FRSKYF3","url":"/betaflight.com/docs/wiki/boards/FRSKYF3#maintainers","content":"shang2017 "},{"title":"Differences:​","type":1,"pageTitle":"FRSKYF3","url":"/betaflight.com/docs/wiki/boards/FRSKYF3#differences","content":"add Receiver with FC on one board "},{"title":"FRSKYF4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FRSKYF4","content":"","keywords":""},{"title":"FRSKYF4 Board​","type":1,"pageTitle":"FRSKYF4","url":"/betaflight.com/docs/wiki/boards/FRSKYF4#frskyf4-board","content":"The Frsky F4 flight controller integrated Frsky's X8R Receiver,OSD and SD Card in one board. This board use MPU6050.This board has no problem running fast loop times and ESC protocols. There is an On Screen Display (OSD) chip directly connected to the main processor (MCU). And the FC connect to the Receiver with SBUS and S.Port inner. You no longer need to mount another Reciver,and you can transimit FC's messages to Remote by Betaflight. For maximum ease of use, some FrskyF4's board has an onboard PDB up to 6s with a battery XT60 JACK.Just plug your battery straight into the flight controller and you're ready to go! "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"FRSKYF4","url":"/betaflight.com/docs/wiki/boards/FRSKYF4#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"FRSKYF4","url":"/betaflight.com/docs/wiki/boards/FRSKYF4#hardware","content":"MCU: STM32F4IMU: MPU6000 (SPI)IMU Interrupt: YesVCP: YesHardware UARTS: 3(UART1--&gt;SBUS UART6--&gt;S.PORT)OSD: BFOSDBlackbox: SD CardBattery Voltage Sensor: yesIntegrated Voltage Regulator: Yes, supports up to 6S, 1AMPBrushed Motor Mosfets: NoButtons: 2 (1: DFU, 2:Receiver Bind) "},{"title":"Features​","type":1,"pageTitle":"FRSKYF4","url":"/betaflight.com/docs/wiki/boards/FRSKYF4#features","content":"Current Sensor: PC1BlHeli passthrough: YesWS2811 Led Strip: YesTransponder: YesBeeper: InvertedReceiver: Frsky X8RRSSI: SBUS CHANNEL 8 "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"FRSKYF4","url":"/betaflight.com/docs/wiki/boards/FRSKYF4#manufacturers-and-distributors","content":"Frsky(Manufacturers) Available here soon:http://www.frsky-rc.com "},{"title":"Designers​","type":1,"pageTitle":"FRSKYF4","url":"/betaflight.com/docs/wiki/boards/FRSKYF4#designers","content":"Frsky Co.Lt "},{"title":"Maintainers​","type":1,"pageTitle":"FRSKYF4","url":"/betaflight.com/docs/wiki/boards/FRSKYF4#maintainers","content":"shang2017 "},{"title":"Differences:​","type":1,"pageTitle":"FRSKYF4","url":"/betaflight.com/docs/wiki/boards/FRSKYF4#differences","content":"add Receiver with FC on one board "},{"title":"Overview","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FURYF3","content":"Overview The Fury F3 Flight controller has been designed from the ground up by quad pilots &amp; builders who want a better flight controller. We have taken into account all of the things that we like about other flight controller hardware and wish that other flight controllers featured and combined them into a board that is well designed for ease of installation and use. Good soldering skills are required to use the Fury F3 Flight controller. We recommend that if you do not have proficient soldering skills that you find someone in your area to help you with your build. MultiGP is a good place to find like-minded quad builders. Go to MultiGP.com for more info Available here: http://www.2dogrc.com/furyf3-board.html RCGroups Thread: https://www.rcgroups.com/forums/showthread.php?t=2628430 Facebook Group: https://www.facebook.com/groups/1391468950869052/ Website: http://www.furyflightcontrol.com/ Board Features F3 processor (allows you to run high loop times and gives you 3x dedicated UART outputs for things such as GPS, OSDs, Telemetry, etc.)MPU6000 gyro- This is a favorite gyro amongst many FPV pilots at the time of writing. It’s low noise floor and high reliability rate makes it a top choice which is why it is on this flight controller.Large Solder Pads on edge of boardUSB connectorSpektrum Receiver connector port (additional connector is recommended but not required if using Spektrum Hardware.3v3 output for I2C connectionsBuzzer connection availabilityLed connection availabilityCurrent sensor connections av Board Specifications: 5V inputStandard 36x36 Board (30.5x30.5 mounting)STM32F303CCT6: 32-Bit, 72MHz, 256K Processor (floating point arithmetic, lots of I/O)3 hardware serial ports.USB VCP (can be used at the same time as the serial ports).4 PWM outputs (dedicated for quads).Dedicated 3.3v regulator for external devices/Spektrum (up to 500mA)Dedicated PPM/SerialRX input header pins.Dedicated SPEKTRUM adapter port.Dedicated I2C headers.MPU6000 Mems Gyro/Accelerometer (the 6000 gyro is less sensitive to noise then the 9250 or 6500. There is no need to soft mount the controller, and it is known as the “gold standard”SPI Gyro connection (this is a faster communication protocol then SP (which most other F3 boards have)Optional MS561 Barometer on bottom of board for easy foam covering isolation.On-Board MicroSD Card Support for blackbox data logging (no fuss easy Data logging so that you can get the perfect tune.Voltage monitoring (built in Voltage divider)Current monitoring (with external current sensor)RSSI monitoring (if your receiver of choice has an output)Buzzer ConnectorLED Strip ConnectorSWD PortDirect mounting option for a Pololu switching regulator for up to 6S lipo operation.Thoughtful, easy-to-build layoutEdge launch pins for a low profile build, also better for direct soldering. Manual https://quadquestions.com/uploads/furyf3manual.pdf Board Layout","keywords":""},{"title":"Overview","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/FURYF4","content":"Overview The FuryF4 is the next iteration in the Fury line of flight controllers. Designed around the STM32F4 MCU, it features a simple layout that makes connecting components convenient and easy to accomplish. The FuryF4 utilizes an SPI gyro (MPU-6000 or ICM-20689) for super fast communication with the MCU. Flight logging can be easily done by writing to the onboard data flash or SDCard slot. RCGroups Thread: https://www.rcgroups.com/forums/showthread.php?t=2628430 Board Features F4 processor (allows you to run high loop times and gives you 3x dedicated UART outputs for things such as GPS, OSDs, Telemetry, etc.)MPU6000 or ICM20689 gyro- The MPU-6000 is a favorite gyro amongst many FPV pilots at the time of writing. It’s low noise floor and high reliability rate makes it a top choice which is why it is on this flight controller. The ICM20689 is the new gyro designed by Invensense to replace the MPU-6000.Large Solder Pads on edge of boardUSB connectorSpektrum Receiver connector port (additional connector is recommended but not required if using Spektrum Hardware.3v3 output for I2C connectionsBuzzer connection availabilityLed connection availabilityCurrent sensor connections available Board Specifications: 5V input or On-board 5v, 2A Switching RegulatorStandard 36x36 Board (30.5x30.5 mounting)STM32F4: 32-Bit, 168MHz, 1MB Processor (floating point arithmetic, lots of I/O)3 hardware serial ports.USB VCP (can be used at the same time as the serial ports).4 PWM outputs (dedicated for quads).3.3v regulator output for external devices/Spektrum (up to 500mA)Dedicated PPM/SerialRX input header pins.Dedicated SPEKTRUM adapter port.Dedicated I2C headers.MPU6000 or ICM20689 Mems Gyro/Accelerometer (these gyros are less sensitive to noise then the 9250 or 6500. There is no need to soft mount the controller, and it is known as the “gold standard”SPI Gyro connection (this is a faster communication protocol then SPOptional MS561 Barometer on bottom of board for easy foam covering isolation.On-Board MicroSD Card Support for blackbox data logging (no fuss easy Data logging so that you can get the perfect tune.On-Board 16MB Flash for blackbox data loggingVoltage monitoring (built in Voltage divider)Current monitoring (with external current sensor)RSSI monitoring (if your receiver of choice has an output)Buzzer ConnectorLED Strip ConnectorSWD PortDirect mounting option for a Pololu switching regulator for up to 6S lipo operation (if no onboard 5v Regulator).Thoughtful, easy-to-build layoutEdge launch pins for a low profile build, also better for direct soldering. Board Layout","keywords":""},{"title":"Board - HAKRCF405","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/HAKRCF405","content":"","keywords":""},{"title":"Hardware and Features​","type":1,"pageTitle":"Board - HAKRCF405","url":"/betaflight.com/docs/wiki/boards/HAKRCF405#hardware-and-features","content":"STM32CubeMXMCU STM32F405RGT6IMU: MPU6000 (SPI)VCP: yesOSD: Betaflight OSDBattery Voltage Sensor: yesStable voltage regulation,9V/2A DCDC BEC for VTX/camera etc.And could select 5v/9v with padSerial LED interface(LED_STRIP)5 UARTBARO: QMP6988/BMP280(I2C_1)GPS PERIPHERALS MODES FUNCTIONS PINS ADC1 IN10 ADC1_IN10 PC0 ADC1 IN11 ADC1_IN11 PC1 ADC1 IN12 ADC1_IN12 PC2 I2C1 SMBus-two-wire-Interface I2C1_SCL PB8 I2C1 SMBus-two-wire-Interface I2C1_SDA PB9 RCC Crystal/Ceramic Resonator RCC_OSC_IN PH0-OSC_IN RCC Crystal/Ceramic Resonator RCC_OSC_OUT PH1-OSC_OUT SPI1 Full-Duplex Master SPI1_MISO PA6 SPI1 Full-Duplex Master SPI1_MOSI PA7 SPI1 Full-Duplex Master SPI1_SCK PB3 SPI1 Hardware NSS Input Signal SPI1_NSS PA4 SPI2 Full-Duplex Master SPI2_MISO PB14 SPI2 Full-Duplex Master SPI2_MOSI PC3 SPI2 Full-Duplex Master SPI2_SCK PB13 SPI2 Hardware NSS Output Signal SPI2_NSS PB12 SPI3 Full-Duplex Master SPI3_MISO PC11 SPI3 Full-Duplex Master SPI3_MOSI PB5 SPI3 Full-Duplex Master SPI3_SCK PC10 SYS SysTick SYS_VS_Systick VP_SYS_VS_Systick TIM1 Output Compare CH1 TIM1_CH1 PA8 TIM1 Output Compare CH3 TIM1_CH3 PA10 TIM2 Output Compare CH1 TIM2_CH1 PA5 TIM3 Output Compare CH2 TIM3_CH2 PC7 TIM3 Output Compare CH3 TIM3_CH3 PB0 TIM3 Output Compare CH4 TIM3_CH4 PB1 TIM4 Output Compare CH1 TIM4_CH1 PB6 TIM8 Output Compare CH1 TIM8_CH1 PC6 TIM8 Output Compare CH3 TIM8_CH3 PC8 TIM8 Output Compare CH4 TIM8_CH4 PC9 TIM12 Input Capture direct mode TIM12_CH2 PB15 UART4 Multiprocessor Communication UART4_RX PA1 UART4 Multiprocessor Communication UART4_TX PA0-WKUP UART5 Multiprocessor Communication UART5_RX PD2 UART5 Multiprocessor Communication UART5_TX PC12 USART1 Multiprocessor Communication USART1_RX PB7 USART1 Multiprocessor Communication USART1_TX PA9 USART2 Multiprocessor Communication USART2_RX PA3 USART2 Multiprocessor Communication USART2_TX PA2 USART3 Multiprocessor Communication USART3_RX PB11 USART3 Multiprocessor Communication USART3_TX PB10 Pin Nb PINs FUNCTIONs LABELs 2 PC13-ANTI_TAMP GPIO_Output LED0 3 PC14-OSC32_IN GPIO_Output Beep 5 PH0-OSC_IN RCC_OSC_IN 6 PH1-OSC_OUT RCC_OSC_OUT 8 PC0 ADC1_IN10 RSSI 9 PC1 ADC1_IN11 VBAT 10 PC2 ADC1_IN12 CURR 11 PC3 SPI2_MOSI 14 PA0-WKUP UART4_TX extend/UART4_TX 15 PA1 UART4_RX 16 PA2 USART2_TX 17 PA3 USART2_RX 20 PA4 SPI1_NSS 21 PA5 TIM2_CH1 22 PA6 SPI1_MISO 23 PA7 SPI1_MOSI 24 PC4 GPIO_Output SPI1_CS 26 PB0 TIM3_CH3 OUPUT1 27 PB1 TIM3_CH4 OUPUT6 29 PB10 USART3_TX 30 PB11 USART3_RX 33 PB12 SPI2_NSS 34 PB13 SPI2_SCK 35 PB14 SPI2_MISO 36 PB15 TIM12_CH2 PPM 37 PC6 TIM8_CH1 OUPUT2 38 PC7 TIM3_CH2 OUPUT7 39 PC8 TIM8_CH3 OUPUT5 40 PC9 TIM8_CH4 OUPUT8 41 PA8 TIM1_CH1 OUPUT4 42 PA9 USART1_TX 43 PA10 TIM1_CH3 OUPUT3 46 PA13 SYS_JTMS-SWDIO 49 PA14 SYS_JTCK-SWCLK 50 PA15* SPI3_NSS 51 PC10 SPI3_SCK 52 PC11 SPI3_MISO 53 PC12 UART5_TX 54 PD2 UART5_RX 55 PB3 SPI1_SCK 56 PB4 GPIO_Output Inverter 57 PB5 SPI3_MOSI 58 PB6 TIM4_CH1 LED1 59 PB7 USART1_RX USART1_RX 61 PB8 I2C1_SCL 62 PB9 I2C1_SDA "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"Board - HAKRCF405","url":"/betaflight.com/docs/wiki/boards/HAKRCF405#manufacturers-and-distributors","content":"HAKRC Loopur "},{"title":"Designers​","type":1,"pageTitle":"Board - HAKRCF405","url":"/betaflight.com/docs/wiki/boards/HAKRCF405#designers","content":"HAKRC Loopur "},{"title":"Board - HAKRCF722","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/HAKRCF722","content":"","keywords":""},{"title":"Hardware and Features​","type":1,"pageTitle":"Board - HAKRCF722","url":"/betaflight.com/docs/wiki/boards/HAKRCF722#hardware-and-features","content":"STM32CubeMXMCU STM32F722RET6IMU: MPU6000 (SPI)VCP: yesOSD: Betaflight OSDBattery Voltage Sensor: yesStable voltage regulation,9V/2A DCDC BEC for VTX/camera etc.And could select 5v/9v with padSerial LED interface(LED_STRIP)5 UARTBARO: QMP6988/BMP280(I2C_1)GPS PERIPHERALS MODES FUNCTIONS PINS ADC1 IN10 ADC1_IN10 PC0 ADC1 IN11 ADC1_IN11 PC1 ADC1 IN12 ADC1_IN12 PC2 I2C1 SMBus-two-wire-Interface I2C1_SCL PB8 I2C1 SMBus-two-wire-Interface I2C1_SDA PB9 RCC Crystal/Ceramic Resonator RCC_OSC_IN PH0-OSC_IN RCC Crystal/Ceramic Resonator RCC_OSC_OUT PH1-OSC_OUT SPI1 Full-Duplex Master SPI1_MISO PA6 SPI1 Full-Duplex Master SPI1_MOSI PA7 SPI1 Full-Duplex Master SPI1_SCK PB3 SPI1 Hardware NSS Input Signal SPI1_NSS PA4 SPI2 Full-Duplex Master SPI2_MISO PB14 SPI2 Full-Duplex Master SPI2_MOSI PC3 SPI2 Full-Duplex Master SPI2_SCK PB13 SPI2 Hardware NSS Output Signal SPI2_NSS PB12 SPI3 Full-Duplex Master SPI3_MISO PC11 SPI3 Full-Duplex Master SPI3_MOSI PB5 SPI3 Full-Duplex Master SPI3_SCK PC10 SYS SysTick SYS_VS_Systick VP_SYS_VS_Systick TIM1 Output Compare CH1 TIM1_CH1 PA8 TIM1 Output Compare CH3 TIM1_CH3 PA10 TIM2 Output Compare CH1 TIM2_CH1 PA5 TIM3 Output Compare CH2 TIM3_CH2 PC7 TIM3 Output Compare CH3 TIM3_CH3 PB0 TIM3 Output Compare CH4 TIM3_CH4 PB1 TIM4 Output Compare CH1 TIM4_CH1 PB6 TIM8 Output Compare CH1 TIM8_CH1 PC6 TIM8 Output Compare CH3 TIM8_CH3 PC8 TIM8 Output Compare CH4 TIM8_CH4 PC9 TIM12 Input Capture direct mode TIM12_CH2 PB15 UART4 Multiprocessor Communication UART4_RX PA1 UART4 Multiprocessor Communication UART4_TX PA0-WKUP UART5 Multiprocessor Communication UART5_RX PD2 UART5 Multiprocessor Communication UART5_TX PC12 USART1 Multiprocessor Communication USART1_RX PB7 USART1 Multiprocessor Communication USART1_TX PA9 USART2 Multiprocessor Communication USART2_RX PA3 USART2 Multiprocessor Communication USART2_TX PA2 USART3 Multiprocessor Communication USART3_RX PB11 USART3 Multiprocessor Communication USART3_TX PB10 Pin Nb PINs FUNCTIONs LABELs 2 PC13-ANTI_TAMP GPIO_Output LED0 3 PC14-OSC32_IN GPIO_Output Beep 5 PH0-OSC_IN RCC_OSC_IN 6 PH1-OSC_OUT RCC_OSC_OUT 8 PC0 ADC1_IN10 RSSI 9 PC1 ADC1_IN11 VBAT 10 PC2 ADC1_IN12 CURR 11 PC3 SPI2_MOSI 14 PA0-WKUP UART4_TX extend/UART4_TX 15 PA1 UART4_RX 16 PA2 USART2_TX 17 PA3 USART2_RX 20 PA4 SPI1_NSS 21 PA5 TIM2_CH1 22 PA6 SPI1_MISO 23 PA7 SPI1_MOSI 24 PC4 GPIO_Output SPI1_CS 26 PB0 TIM3_CH3 OUPUT1 27 PB1 TIM3_CH4 OUPUT6 29 PB10 USART3_TX 30 PB11 USART3_RX 33 PB12 SPI2_NSS 34 PB13 SPI2_SCK 35 PB14 SPI2_MISO 36 PB15 TIM12_CH2 PPM 37 PC6 TIM8_CH1 OUPUT2 38 PC7 TIM3_CH2 OUPUT7 39 PC8 TIM8_CH3 OUPUT5 40 PC9 TIM8_CH4 OUPUT8 41 PA8 TIM1_CH1 OUPUT4 42 PA9 USART1_TX 43 PA10 TIM1_CH3 OUPUT3 46 PA13 SYS_JTMS-SWDIO 49 PA14 SYS_JTCK-SWCLK 50 PA15* SPI3_NSS 51 PC10 SPI3_SCK 52 PC11 SPI3_MISO 53 PC12 UART5_TX 54 PD2 UART5_RX 55 PB3 SPI1_SCK 56 PB4 GPIO_Output Inverter 57 PB5 SPI3_MOSI 58 PB6 TIM4_CH1 LED1 59 PB7 USART1_RX USART1_RX 61 PB8 I2C1_SCL 62 PB9 I2C1_SDA "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"Board - HAKRCF722","url":"/betaflight.com/docs/wiki/boards/HAKRCF722#manufacturers-and-distributors","content":"HAKRC Loopur "},{"title":"Designers​","type":1,"pageTitle":"Board - HAKRCF722","url":"/betaflight.com/docs/wiki/boards/HAKRCF722#designers","content":"HAKRC Loopur "},{"title":"Board - IFlightF4_TWIN_G","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/IFLIGHTF4_TWIN_G","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"Board - IFlightF4_TWIN_G","url":"/betaflight.com/docs/wiki/boards/IFLIGHTF4_TWIN_G#features","content":"Processors and Sensors MCU: STM32F405RGT6IMU_1: ICM20689(0 deg)IMU_2: ICM20689(90 deg)OSD: BetaFlight OSD (AT7456E connected via SPI2)Blackbox: FLASH M25Q256 (connected via SPI3) 4 Dshot outputs USB VCP and boot select button on board (for DFU) Serial LED interface(LED_STRIP) VBAT / CURR sensors input Suppose IRC Tramp / Smart audio / FPV Camera Control / FPORT/telemetry Supports SBus, Spektrum1024/2048, PPM. No external inverters required (built-in). "},{"title":"Photos​","type":1,"pageTitle":"Board - IFlightF4_TWIN_G","url":"/betaflight.com/docs/wiki/boards/IFLIGHTF4_TWIN_G#photos","content":"   "},{"title":"Pinout​","type":1,"pageTitle":"Board - IFlightF4_TWIN_G","url":"/betaflight.com/docs/wiki/boards/IFLIGHTF4_TWIN_G#pinout","content":""},{"title":"All uarts have pad on board​","type":1,"pageTitle":"Board - IFlightF4_TWIN_G","url":"/betaflight.com/docs/wiki/boards/IFLIGHTF4_TWIN_G#all-uarts-have-pad-on-board","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPA10\tPA9 2\tUSART2\tPA3\tPA2\tRx input 3\tUSART3\tPB11\tPB10 6\tUSART6\tPC7\tPC6\t "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - IFlightF4_TWIN_G","url":"/betaflight.com/docs/wiki/boards/IFLIGHTF4_TWIN_G#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPB5 2\tBEEPER\tBEEP\tPB4\t "},{"title":"VBAT input, Current input, Analog RSSI input​","type":1,"pageTitle":"Board - IFlightF4_TWIN_G","url":"/betaflight.com/docs/wiki/boards/IFLIGHTF4_TWIN_G#vbat-input-current-input-analog-rssi-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tADC1\tVBAT\tPC2 2\tADC1\tCURRENT\tPC1\t "},{"title":"PWM Input & PWM Output​","type":1,"pageTitle":"Board - IFlightF4_TWIN_G","url":"/betaflight.com/docs/wiki/boards/IFLIGHTF4_TWIN_G#pwm-input--pwm-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM9_CH2\tPPM\tPA3 2\tTIM3_CH3\tMotor1\tPB0 3\tTIM3_CH4\tMotor2\tPB1 4\tTIM8_CH4\tMotor5\tPC9 5\tTIM8_CH3\tMotor6\tPC8 6\tTIM4_CH1\tLED STRIP\tPB6 7\tTIM5_CH1\tCAM Control\tPA0\t "},{"title":"Gyro & ACC ICM20689​","type":1,"pageTitle":"Board - IFlightF4_TWIN_G","url":"/betaflight.com/docs/wiki/boards/IFLIGHTF4_TWIN_G#gyro--acc-icm20689","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPA5\tICM20689 2\tSPI1\tMISO\tPA6\tICM20689 3\tSPI1\tMOSI\tPA7\tICM20689 4\tIO\tCS1\tPA4\tICM20689_A_CS 5\tIO\tCS2\tPC3\tICM20689_B_CS 6\tIO\tINT1\tPC4\tICM20689_A_INT 7\tIO\tINT2\tPA8\tICM20689_B_INT "},{"title":"OSD MAX7456​","type":1,"pageTitle":"Board - IFlightF4_TWIN_G","url":"/betaflight.com/docs/wiki/boards/IFLIGHTF4_TWIN_G#osd-max7456","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI2\tSCK\tPB13 2\tSPI2\tMISO\tPB14 3\tSPI2\tMOSI\tPB15 4\tSPI2\tCS\tPB12\t "},{"title":"FLash Blackbox​","type":1,"pageTitle":"Board - IFlightF4_TWIN_G","url":"/betaflight.com/docs/wiki/boards/IFLIGHTF4_TWIN_G#flash-blackbox","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPC10 2\tSPI3\tMISO\tPC11 3\tSPI3\tMOSI\tPC12 4\tSPI3\tCS\tPA15\t "},{"title":"SWD​","type":1,"pageTitle":"Board - IFlightF4_TWIN_G","url":"/betaflight.com/docs/wiki/boards/IFLIGHTF4_TWIN_G#swd","content":"Pin\tFunction\tNotes1\tSWCLK\tPAD 2\tGround\tPAD 3\tSWDIO\tPAD 4\t3V3\tPAD "},{"title":"Board - JHEF7DUAL","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"Board - JHEF7DUAL","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL#features","content":"Processors and Sensors MCU: STM32F722RET6IMU: ICM20689(Gyro1) &amp; MPU6000(Gyro2) connected via SPI1Baro: BMP280 (connected via I2C1)OSD: BetaFlight OSD (AT7456E connected via SPI2) Blackbox: FLASH M25P16 (connected via SPI3)6 UARTs (1,2,3,4,5,6)8 Dshot outputs2 PINIO (VTX power switcher/user1 and 2 camera switcher/user2)USB VCP and boot select button on board (for DFU)Serial LED interface(LED_STRIP)VBAT / CURR / RSSI sensors inputSuppose IRC Tramp / Smart audio / FPV Camera Control / FPORT/telemetrySupports SBus, Spektrum1024/2048, PPM. No external inverters required (built-in).Supports I2C device extend(Compass / OLED etc)Supports GPS "},{"title":"Pinout​","type":1,"pageTitle":"Board - JHEF7DUAL","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL#pinout","content":""},{"title":"All uarts have pad on board​","type":1,"pageTitle":"Board - JHEF7DUAL","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL#all-uarts-have-pad-on-board","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPA10\tPA9\tFOR SBUS IN(inverter build in) 2\tUSART2\tPA3\tPA2\tUSE FOR TRAMP/smart audio 3\tUSART3\tPB11\tPB10\tUSE FOR GPS 4\tUSART4\tPA1\tPA0\tPAD USE FOR TRAMP/smart audio 5\tUSART5\tPD2\tPC12\tPAD ESC sensor 6\tUSART6\tPC7\tPC6\tPAD "},{"title":"I2C with GPS port together.Use for BARO or compass etc​","type":1,"pageTitle":"Board - JHEF7DUAL","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL#i2c-with-gps-port-togetheruse-for-baro-or-compass-etc","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tI2C1\tSDA\tPB7 2\tI2C1\tSCL\tPB6\t "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - JHEF7DUAL","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPA15 2\tBEEPER\tBEE\tPC15\t "},{"title":"VBAT input, Current input, Analog RSSI input​","type":1,"pageTitle":"Board - JHEF7DUAL","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL#vbat-input-current-input-analog-rssi-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tADC1\tVBAT\tPC2\tDMA2_Stream0 2\tADC1\tCURR\tPC1\tDMA2_Stream0 3\tADC1\tRSSI\tPC0\tDMA2_Stream0 "},{"title":"PWM Input & PWM Output​","type":1,"pageTitle":"Board - JHEF7DUAL","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL#pwm-input--pwm-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM9_CH2\tPPM\tPA3\tPPM 2\tTIM3_CH3\tMotor1\tPB0\tDMA1_Stream2 3\tTIM3_CH4\tMotor2\tPB1\tDMA1_Stream2 4\tTIM3_CH1\tMotor3\tPB4\tDMA1_Stream4 5\tTIM2_CH2\tMotor4\tPB3\tDMA1_Stream6 7\tTIM8_CH4\tMotor5\tPC9\tDMA2_Stream1 8\tTIM8_CH3\tMotor6\tPC8\tDMA2_Stream4 9\tTIM1_CH1\tLED\tPA8\tLED STRIP 10\tTIM4_CH3\tANY\tPB8\tFC CAM "},{"title":"Gyro & ACC ICM20689​","type":1,"pageTitle":"Board - JHEF7DUAL","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL#gyro--acc-icm20689","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPA5\tMPU6000 &amp; ICM20689 2\tSPI1\tMISO\tPA6\tMPU6000 &amp; ICM20689 3\tSPI1\tMOSI\tPA7\tMPU6000 &amp; ICM20689 4\tSPI1\tCS2\tPA4\tMPU6000 5\tSPI1\tCS1\tPB2\tICM20689 6\tSPI1\tINT2\tPC3\tMPU6000 7\tSPI1\tINT1\tPC4\tICM20689 "},{"title":"OSD MAX7456​","type":1,"pageTitle":"Board - JHEF7DUAL","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL#osd-max7456","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI2\tSCK\tPB13 2\tSPI2\tMISO\tPB14 3\tSPI2\tMOSI\tPB15 4\tSPI2\tCS\tPB12\t "},{"title":"2MB FLash​","type":1,"pageTitle":"Board - JHEF7DUAL","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL#2mb-flash","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPC10 2\tSPI3\tMISO\tPC11 3\tSPI3\tMOSI\tPB5 4\tSPI3\tCS\tPC13\t "},{"title":"SWD​","type":1,"pageTitle":"Board - JHEF7DUAL","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL#swd","content":"Pin\tFunction\tNotes1\tSWCLK\tPAD 2\tGround\tPAD 3\tSWDIO\tPAD 4\t3V3\tPAD "},{"title":"Designers​","type":1,"pageTitle":"Board - JHEF7DUAL","url":"/betaflight.com/docs/wiki/boards/JHEF7DUAL#designers","content":"JHE_FPV "},{"title":"KAKUTE F3","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3","content":"","keywords":""},{"title":"Target Hex code: SPRACINGF3​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#target-hex-code-spracingf3","content":""},{"title":"Description​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#description","content":""},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#hardware","content":"STM32F303CCT6(256kB flash) 32-bit processorMPU6050 Gyro/AccelerometerHigh quality, gold plated PCBMicro USB connector for programmingDimensions: 36x36x6mm (includes USB in height)Mounting Holes: 30.5mm square to center of holesWeight: 4.2g "},{"title":"Features​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#features","content":"Recessed, sideways pin headers. Also enables soldering of all wires directly to pads without use of any pin headers.Dedicated Boot button for easy firmware flashing.Reinforced solder pads for trouble-free direct soldering.Extremely low profile design.Input voltage 7v to 42v. Power the board directly from flight pack up to 6S (on 'BAT' pad only!).VIN + VBAT merged -A single wire to power the board will provide voltage input and Telemetry/OSD voltage data.Filtered voltage output -output 5v 800mA (and 3.3v 150mA where applicable) to power peripherals such as GPS, RX, BLACKBOX, OSD. 5v/3.3v RX selectable.Cleanflight support (RACE target).BLHeli flashing supported by hardwareRaceflight readyBetaflight ready "},{"title":"Kakute FC Betaflight additional features pad assigments​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#kakute-fc-betaflight-additional-features-pad-assigments","content":"PAD ON Kakute FC\tFUNCTIONPPM\tSoftserial 1 LED\tSoftserial 2 Softserial pad assignment can be enabled with the resource command. You can use these pads to connect to smart audio on a unify or telemetry on a tramp.Note: you must be using Betaflight 3.1.6 or later.In cli type these commands: resource ppm none resource serial_tx 11 a00 resource led 1 none resource serial_tx 12 A08 save "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#manufacturers-and-distributors","content":"https://www.nextfpv.com.au/products/full-metal-racing-kakute-f3-flight-controller-v1-0 "},{"title":"Manual​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#manual","content":"https://cdn.shopify.com/s/files/1/0412/2761/files/FMR_Kakute_Flight_Controller_Manual_v2.pdf?2155904968756041300 "},{"title":"Maintainers​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#maintainers","content":""},{"title":"Similar Targets​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#similar-targets","content":""},{"title":"Variants​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#variants","content":"Differences: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#faq--known-issues","content":""},{"title":"Other Resources​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#other-resources","content":"Setup Guide: Rcgroups Thread: "},{"title":"Image​","type":1,"pageTitle":"KAKUTE F3","url":"/betaflight.com/docs/wiki/boards/KAKUTEF3#image","content":" "},{"title":"KakuteF4-AIO","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"KakuteF4-AIO","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4#description","content":"The Holybro Kakute F4 All-In-One flight controller makes it easy to build your multirotor. It integrates flight controller (FC), power distribution board (PDB), and on-screen display (OSD) in one. The Kakute F4 AIO’s layout makes it easy to wire up the other components of the multirotor while keeping the build neat and tidy.  "},{"title":"Features​","type":1,"pageTitle":"KakuteF4-AIO","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4#features","content":"•Supports Betaflight and Cleanflight. •Betaflight OSD. Change PIDs, adjust common configuration parameters, and change video transmitter channel and power level, all using your transmitter sticks and goggles. •Soft-mounting built in. The “gyro” chip on this board is mounted on vibration-isolating foam. This means that there is no need to soft-mount the board itself. •New high-performance / low-noise / high sensitivity IMU. ICM20689 with 6-axis gyro and accelerometer. Can run at up to 32 kHz. •2 oz copper PCB allows up to 120A maximum continuous current. •Dedicated bootloader button for easy firmware flashing. •Low-profile design fits into even very compact frames. •Input voltage 7v to 42v. Power the board directly from the flight pack, up to 6S (on “BAT” pad only). •Automatic voltage monitoring. No need to run a separate vBat wire for voltage monitoring; the Kakute F4 AIO monitors voltage directly from the battery power lead. •Filtered voltage output for clean, noise-free video. On-board regulators output 5v at up to 1.5 amps and 3.3v at up to 200 mA to power peripherals such as receiver, video transmitter, FPV camera, or LED strip. •Supports BLHeli passthrough for easy ESC upgrade and configuration. "},{"title":"Image​","type":1,"pageTitle":"KakuteF4-AIO","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4#image","content":"Top View Bottom View Size View Package "},{"title":"Specifications​","type":1,"pageTitle":"KakuteF4-AIO","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4#specifications","content":"•MCU: STM32F405RGT6 32-bit processor •IMU: ICM20689 (SPI) •Baro: BMP280 (Only V2 support) •USB VCP Driver (all UARTs usable simultaneously; USB does not take up a UART) •hardware UARTS (UART1/3/6 for V1, UART1/3/4/5/6 for V2) •128 Mbit Dataflash chip for Blackbox logging •Dimensions: 35x43x6mm (includes USB in height) •Mounting Holes: Standard 30.5mm square to center of holes  •Weight: 7g "},{"title":"Pinout Diagram​","type":1,"pageTitle":"KakuteF4-AIO","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4#pinout-diagram","content":" BUZ- : Piezo buzzer negative leg BUZ+ : Piezo buzzer positive leg LED : WS2182 addressable LED signal wire SmartPort : FrSky SmartPort Telemetry R3, T3 : UART3 RX(with sbus invertor) and TX R6, T6 : UART6 RX and TX RSSI : Analog (0-3.3v) RSSI input 3V3 : 3.3v output (200 mA max) 5V : 5v output (1.5 A max) M1 to M6 : Motor signal outputs VO : Video output to video transmitter VI : Video input from FPV camera Boot : Bootloader button G : Ground B+ : Battery positive voltage (2S-6S) + : Main battery lead positive - : Main battery lead negative "},{"title":"Target Code​","type":1,"pageTitle":"KakuteF4-AIO","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4#target-code","content":"KAKUTEF4 "},{"title":"Hardware Designs (if available)​","type":1,"pageTitle":"KakuteF4-AIO","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4#hardware-designs-if-available","content":"The hardware is currently closed source. "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"KakuteF4-AIO","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4#manufacturers-and-distributors","content":"www.holybro.com (Manufacturer &amp; Designer) Distributors: www.hobbyking.com; www.banggood.com; www.getfpv.com; www.unmannedtechshop.co.uk; www.gearbest.com; "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"KakuteF4-AIO","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4#faq--known-issues","content":"“Board Align” Feature Documentation https://www.youtube.com/watch?v=jSzWRnAqsSY How To Check For Continuity With Your Multimeter https://www.youtube.com/watch?v=MZ8YxBMQI5Q All About Betaflight Drivers, Including How To Install Them https://www.youtube.com/watch?v=m4ygG6Y5zXI SmartPort: Kakute F4's bidir inverter is designed with mosfet.We have tested the smartport of each board with XSR receiver and X9D in factory. But there are some special XSR receivers, who's input capacitance are higher than the normal, it may cause the smartport waveform distorted. The waveform don't drop to 0v during low period. See the following picture. Change a resistor on the KakuteF4 from 4.53K to 2.2K, the waveform looks good. That may be the reason.  If the SmartPort don't work stable, please try this way. If you don't have a SMD resistor, you can use a 5.1K plug-in resistor to bypass SmartPort signal to GND. It has the same effect. And we have changed this resistor from 4.53K to 2.2K at the secondary produce. "},{"title":"Other Resources​","type":1,"pageTitle":"KakuteF4-AIO","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4#other-resources","content":"Manual:http://www.holybro.com/manual/Holybro_Kakute_F4_AIO_Manual_v1.4.pdf Discussion:https://www.rcgroups.com/forums/showthread.php?2904475-Holybro-Kakute-F4-AIO-Flight-Controller Contact us at: •Email: productservice@holybro.com •Facebook Page: Holybro •Facebook Group: Holybro Hobby Official Group "},{"title":"KakuteF7","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/KAKUTEF7","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"KakuteF7","url":"/betaflight.com/docs/wiki/boards/KAKUTEF7#features","content":"The Holybro Kakute F7 flight controller integrates flight controller (FC) and on-screen display (OSD) in one. The Kakute F7’s layout makes it easy to wire up the other components of the multirotor while keeping the build neat and tidy. IMU updated to MPU6000,Re-designed and more reliable damping structure • Supports Betaflight. • Betaflight OSD. Change PIDs, adjust common configuration parameters, and change video transmitter channel and power level, all using your transmitter sticks and goggles. • Soft-mounting built in. The IMU (“gyro”) chip on this board is mounted on vibration-isolating foam. This means that there is no need to soft-mount the board itself. • High-performance / low-noise / high sensitivity IMU. MPU6000 with 6-axis gyro and accelerometer. • Ready for autonomous flight: Integrated BMP280 barometer and SCL/SDA pads for use with external GPS/magnetometer units. • Dedicated bootloader button for easy firmware flashing. • Low-profile design fits into even very compact frames. • Input voltage 7v to 42v. Power the board directly from the flight pack, up to 6S (on “B+” pad only). • Automatic voltage monitoring. No need to run a separate vBat wire for voltage monitoring; the Kakute F7 monitors voltage directly from the power supply. • Filtered voltage output for clean, noise-free video. On-board regulators output 5v at up to 2 amps and 3.3v at up to 200 mA to power peripherals such as receiver, video transmitter, FPV camera, or LED strip. • Supports BLHeli pass-through for easy ESC upgrade and configuration. "},{"title":"Image​","type":1,"pageTitle":"KakuteF7","url":"/betaflight.com/docs/wiki/boards/KAKUTEF7#image","content":"Top View Bottom View "},{"title":"Specifications​","type":1,"pageTitle":"KakuteF7","url":"/betaflight.com/docs/wiki/boards/KAKUTEF7#specifications","content":"• MCU: STM32F745 32-bit processor • IMU: MPU6000 (SPI) • Barometer: BMP280 • Current Sensor: Approximately 130 amps maximum measurable value • USB VCP Driver (all UARTs usable simultaneously; USB does not take up a UART) • 6 hardware UARTS (UART1,2,3,4,6,7) • All UARTS support hardware inversion. SBUS, SmartPort, and other inverted protocols work on any UART without “uninvert hack”. • Supports serial receivers (SBUS, iBus, Spektrum, Crossfire) only. PPM and PWM receivers are not supported. • TF card for Blackbox logging • Dimensions: 35x41x7mm (includes foam-mounted gyro board in height) • Mounting Holes: Standard 30.5mm square to center of holes • Weight: 8g "},{"title":"Pinout Diagram​","type":1,"pageTitle":"KakuteF7","url":"/betaflight.com/docs/wiki/boards/KAKUTEF7#pinout-diagram","content":"Top View "},{"title":"Target Code​","type":1,"pageTitle":"KakuteF7","url":"/betaflight.com/docs/wiki/boards/KAKUTEF7#target-code","content":"KAKUTEF7 "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"KakuteF7","url":"/betaflight.com/docs/wiki/boards/KAKUTEF7#manufacturers-and-distributors","content":"www.holybro.com (Manufacturer &amp; Designer) Distributors: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"KakuteF7","url":"/betaflight.com/docs/wiki/boards/KAKUTEF7#faq--known-issues","content":"“Board Align” Feature Documentation "},{"title":"Other Resources​","type":1,"pageTitle":"KakuteF7","url":"/betaflight.com/docs/wiki/boards/KAKUTEF7#other-resources","content":"Contact us at: •Email: productservice@holybro.com •Facebook Page: Holybro •Facebook Group: Holybro Hobby Official Group "},{"title":"KAKUTEF4V2","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4V2","content":"","keywords":""},{"title":"KAKUTE F4 FLIGHT CONTROLLER V2​","type":1,"pageTitle":"KAKUTEF4V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4V2#kakute-f4-flight-controller-v2","content":""},{"title":"Descriptions:​","type":1,"pageTitle":"KAKUTEF4V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4V2#descriptions","content":"The Holybro Kakute F4 flight controller supports important features of Betaflight/Cleanflight, such as OSD and Dshot. The faster F4 processor gives room for future feature development: run all features at the fast 8 kHz PID loop rate, at single-digit CPU utilization! Because of issues with serial inversion, other F4 boards struggle to support protocols such as FrSky SBUS and SmartPort at the same time. The Kakute F4 is designed to support all serial protocols at once. "},{"title":"New V2 Features​","type":1,"pageTitle":"KAKUTEF4V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4V2#new-v2-features","content":"Additional UART (UART 4) added to support serial camera communication such as to RunCam Split. Please note this is NOT the same as Betaflight Camera Control feature, which controls the menu of FPV cameras like Swift, Monster, etc.Additional UART (UART 5) added to support ESC telemetry such as from BLHeli_32 and KISS.Through-hole solder pads instead of flat pads for more secure soldering especially for beginners.Barometer sensor on board allows altitude hold mode.I2C pad available for certain external sensors. "},{"title":"Features​","type":1,"pageTitle":"KAKUTEF4V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4V2#features","content":"Supports Betaflight and Cleanflight.Betaflight OSD. Change PIDs, adjust common configuration parameters, and change video transmitter channel and power level, all using your transmitter sticks and goggles.Soft-mounting built in. The IMU (“gyro”) chip on this board is mounted on vibration-isolating foam. This means that there is no need to soft-mount the board itself.New high-performance / low-noise / high sensitivity IMU. ICM20689 with 6-axis gyro and accelerometer. Can run at up to 32 kHz.2 oz. copper PCB allows up to 120A maximum continuous current.Dedicated bootloader button for easy firmware flashing.Low-profile design fits into even very compact frames.Input voltage 7v to 42v. Power the board directly from the flight pack, up to 6S (on “B+” pad only).Automatic voltage monitoring. No need to run a separate vBat wire for voltage monitoring; the Kakute F4 AIO monitors voltage directly from the battery power lead.Filtered voltage output for clean, noise-free video. On-board regulators output 5v at up to 1.5 amps and 3.3v at up to 200 mA to power peripherals such as receiver, video transmitter, FPV camera, or LED strip.Supports BLHeli pass-through for easy ESC upgrade and configuration. "},{"title":"Specifications​","type":1,"pageTitle":"KAKUTEF4V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4V2#specifications","content":"MCU: STM32F405RGT6 32-bit processorIMU: ICM20689 (SPI)Barometer: BMP280USB VCP Driver (all UARTs usable simultaneously; USB does not take up a UART)5 hardware UARTS (UART1,3,4, 5, 6)Supports serial receivers (SBUS, iBus, Spektrum, Crossfire) only. PPM and PWM receivers are not supported.128 Mbit Dataflash chip for Blackbox loggingDimensions: 35x30x8mm (includes USB in height)Mounting Holes: Standard 30.5mm square to center of holesWeight: 7g "},{"title":"Image​","type":1,"pageTitle":"KAKUTEF4V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4V2#image","content":"KakuteF4 V2 KakuteF4 All-In-One V2 "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"KAKUTEF4V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4V2#manufacturers-and-distributors","content":"www.holybro.com (Manufacturer &amp; Designer)www.facebook.com/holybrohobby/ "},{"title":"Distributors:​","type":1,"pageTitle":"KAKUTEF4V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEF4V2#distributors","content":"www.banggood.comwww.getfpv.comwww.unmannedtechshop.co.ukwww.gearbest.comwww.hobbyking.com "},{"title":"KakuteH7V2","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7V2","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"KakuteH7V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7V2#description","content":"The Holybro Kakute H7 v2 Flight Controller is full of features including integrated Bluetooth, HD camera plug, dual plug-and-play 4in1 ESC ports, 9V VTX ON/OFF Pit Switch, barometer, OSD, 6x UARTs, 128MB Flash for Logging, 5V and 9V BEC, and bigger soldering pad with easy layout and much more. The Kakute H7 v2 builds upon the best features of its F7 predecessor and further improves on hardware components and layout. With the additional integrated Bluetooth chip onboard, you can perform configuration and tuning wirelessly on your phone with the SpeedyBee Android &amp; IOS App. The Kakute H7 is DJI HD ready. It has an easy plug-and-play port with an on-board 9V regulator designed to power your HD video transmitter such as the DJI/Caddx FPV Air Unit &amp; Caddx Vista while supporting analog system. It features an onboard “VTX ON/OFF Pit Switch” that allows you to completely power off the video transmitter using a switch on your RC transmitter. Great if you are working on your drone, waiting for the GPS to get a fix, getting ready for a race while preventing it from overheating or interfering with others flying. It has 6x dedicated UART ports with built-in inversion for peripherals (UART2 is used for Bluetooth telemetry), a 128 MB Flash for logging, Dual plug-and-play 4in1 ESC connectors, allowing easy plug-and-play support for x8 &amp; Octocopter configuration and keeping it simple and clean. The integrated BetaFlight OSD makes it easy to display important information on your FPV display like battery voltage, flight time, warnings, RSSI, smart audio features and more. It is also ready for autonomous flight with the on-board barometer. There are LED &amp; buzzer pad, I2C pad (SDA &amp; SCL) for external GPS/Magnetometers. The integrated BetaFlight OSD makes it easy to display important information on your FPV display like battery voltage, flight time, warnings, RSSI, smart audio features and more. It is also ready for autonomous flight with the on-board barometer. There are LED &amp; buzzer pad, I2C pad (SDA &amp; SCL) for external GPS/Magnetometers. "},{"title":"Benefits of KakuteH7v2 Compared to KakuteH7​","type":1,"pageTitle":"KakuteH7V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7V2#benefits-of-kakuteh7v2-compared-to-kakuteh7","content":"• Onboard flash • VTX ON/OFF Pit Switch "},{"title":"Image​","type":1,"pageTitle":"KakuteH7V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7V2#image","content":"Top View Bottom View "},{"title":"Specifications​","type":1,"pageTitle":"KakuteH7V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7V2#specifications","content":"• MCU - STM32H743 32-bit processor running at 480 MHz • IMU – BMI270 • Barometer - BMP280 • OSD - AT7456E • Onboard Bluetooth chip - ESP32-C3 • Note: The Bluetooth onboard is set to automatically turn off when the flight controller is unlocked (arm) and turn on automatically when the flight controller is locked (disarm). • VTX ON/OFF Pit Switch – Switch can be enable using USER1 in Betaflight Mode tab. (Warning: Do not enable this pit switch if you are using DJI FPV Remote Controller) • 6x UARTs (1,2,3,4,6,7; UART2 is used for Bluetooth telemetry) • 9x PWM Outputs (8 Motor Output, 1 LED) • Battery input voltage: 2S-8S • BEC 5V 2A Cont. • BEC 9V 1.5A Cont. • Mounting - 30.5 x 30.5mm/Φ4mm hole with Φ3mm Grommets • Dimension - 35x35mm • Weight - 8g • 2x JST-SH1.0_8pin port (4in1 ESCs, x8/Octocopter compatible) • 1x JST-GH1.5_6pin port (For HD System like Caddx Vista, Air Unit, or other VTX) "},{"title":"Pinout Diagram​","type":1,"pageTitle":"KakuteH7V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7V2#pinout-diagram","content":"Top View Pin "},{"title":"Target Code​","type":1,"pageTitle":"KakuteH7V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7V2#target-code","content":"KAKUTEH7V2 "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"KakuteH7V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7V2#manufacturers-and-distributors","content":"www.holybro.com (Manufacturer &amp; Designer) Distributors: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"KakuteH7V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7V2#faq--known-issues","content":"“Board Align” Feature Documentation "},{"title":"Other Resources​","type":1,"pageTitle":"KakuteH7V2","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7V2#other-resources","content":"Contact us at: •Email: productservice@holybro.com •Facebook Page: Holybro •Facebook Group: Holybro Hobby Official Group "},{"title":"KakuteH7","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"KakuteH7","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7#description","content":"The Holybro Kakute H7 Flight Controller is full of features including integrated Bluetooth, dual plug-and-play 4in1 ESC ports, HD camera plug, barometer, OSD, 6x UARTs, full Blackbox MicroSD card slot, 5V and 9V BEC, easy soldering layout and much more. The Kakute H7 builds upon the best features of its F7 predecessor and further improves on hardware components and layout. With the additional integrated Bluetooth chip onboard, you can perform Betaflight configuration and tuning wirelessly on your phone with the SpeedyBee Android &amp; IOS App. The Kakute H7 is DJI HD ready. It has an easy plug-and-play port with an on-board 9V regulator designed to power your HD video transmitter like DJI/Caddx FPV Air Unit &amp; Caddx Vista while supporting analog system. It has 6x dedicated UART ports with built-in inversion for peripherals (UART2 is used for Bluetooth telemetry), along with a full MicroSD Card slot for virtually unlimited Blackbox data logging. Dual plug-and-play 4in1 ESC connectors, allowing easy plug-and-play support for x8 Octocopter configuration and keeping it simple and clean. The integrated BetaFlight OSD makes it easy to display important information on your FPV display like battery voltage, flight time, warnings, RSSI, smart audio features and more. It is also ready for autonomous flight with the on-board barometer. There are LED &amp; buzzer pad, I2C pad (SDA &amp; SCL) for external GPS/Magnetometers "},{"title":"Benefits of KakuteH7 Compared to KakuteF7​","type":1,"pageTitle":"KakuteH7","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7#benefits-of-kakuteh7-compared-to-kakutef7","content":"•H7 is a faster processor (400Mhz vs 216MHz F7), the faster speed H7 processor allows for faster looptime •H7 offers Bluetooth onboard, given ability to configure with connected to pc •H7 offers more UART’s with built-in hardware inversion •H7 has superscalar pipeline and DSP capabilities – basically that means the H7 is a even better platform for future development that allows the developers to further optimize the flight controller algorithms •Onboard Baro BMP280, Support more flight mode •Support SD card for Blackbox logging •I2C1 Pads for external compass connection "},{"title":"Image​","type":1,"pageTitle":"KakuteH7","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7#image","content":"Top View Bottom View "},{"title":"Specifications​","type":1,"pageTitle":"KakuteH7","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7#specifications","content":"• MCU - STM32H743 32-bit processor running at 480 MHz • IMU - MPU6000 • Barometer - BMP280 • OSD - AT7456E • Onboard Bluetooth chip - ESP32-C3 o SpeedyBee IOS &amp; Android App Compatible o Note: The Bluetooth onboard is set to automatically turn off when the flight controller is unlocked (arm) and turn on automatically when the flight controller is locked (disarm). • 6x UARTs (1,2,3,4,6,7; UART2 is used for Bluetooth telemetry) • 9x PWM Outputs (8 Motor Output, 1 LED) • 2x JST-SH1.0_8pin port (4in1 ESCs, x8/Octocopter compatible) • 1x JST-GH1.25_6pin port (For HD System like Caddx Vista &amp; Air Unit) • Battery input voltage: 7V to 42V • BEC 5V 2A Cont. • BEC 9V 1.5A Cont. • Mounting - 30.5 x 30.5mm/Φ4mm hole with Φ3mm Grommets • Dimension - 35x35mm • Weight - 8g "},{"title":"Pinout Diagram​","type":1,"pageTitle":"KakuteH7","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7#pinout-diagram","content":"Top View "},{"title":"Target Code​","type":1,"pageTitle":"KakuteH7","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7#target-code","content":"KAKUTEH7 "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"KakuteH7","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7#manufacturers-and-distributors","content":"www.holybro.com (Manufacturer &amp; Designer) Distributors: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"KakuteH7","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7#faq--known-issues","content":"“Board Align” Feature Documentation "},{"title":"Other Resources​","type":1,"pageTitle":"KakuteH7","url":"/betaflight.com/docs/wiki/boards/KAKUTEH7#other-resources","content":"Contact us at: •Email: productservice@holybro.com •Facebook Page: Holybro •Facebook Group: Holybro Hobby Official Group "},{"title":"KISSFC","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/KISSFC","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#description","content":"KISSFC is a STM32F3 based flight controller with integrated voltage regulator, brushed motor drivers and a shared PPM/UART RX input pin. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#hardware","content":"MCU: STM32F3IMU: MPU6050IMU Interrupt: YesBARO: NoVCP: YesHardware UARTS: 3Soft-serials: 2OSD: NoBlackbox: Yes, External blackbox device connected to UART1 (use PORT2 connector or TX/RX pads)PPM/UART Shared: UART2Battery Voltage Sensor: Yes, directly connected, no wiring necessaryIntegrated Voltage Regulator: Yes, unknown voltage limitBrushed Motor Mosfets: YesButtons: 1 - DFU "},{"title":"Features​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#features","content":"Current Sensor: Yes (as of BF 3.1.6)BlHeli passthrough: No (due to buffered outputs)WS2811 Led Strip: Yes (as of BF 3.1)Transponder: No "},{"title":"KISS FC Betaflight additional features pad assigments​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#kiss-fc-betaflight-additional-features-pad-assigments","content":"PAD ON KISS FC\tPIN ON MCU\tBF FEATUREPITCH\tA02\tCurrent sensor PWM5 (Motor 5)\tA06\tLED strip AUX1\tA13\tSoftserial 1 ROLL\tA15\tSoftserial 2 Softserial pad assignment can be changed with the resource command. Current sensor and LED strip assignments are hard-coded and can not be changed runtime at the moment. By default the pads are assigned to their original function (see pad name) and need to be freed to be able to assign one of the alternate features shown in the table above. First free all (or some) resources: resource PWM 2 NONE resource PWM 3 NONE resource PWM 4 NONE resource PWM 5 NONE Assign resources for soft-serial: resource SERIAL_TX 11 A13 resource SERIAL_TX 12 A15 "},{"title":"Hardware Designs (if available)​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#hardware-designs-if-available","content":""},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#manufacturers-and-distributors","content":"Flyduino.net Available here: http://flyduino.net/KISS-FC-32bit-Flight-Controller-V103_1 "},{"title":"Designers​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#designers","content":"(add your name here if you conributed to the design of this board) fedorcomander "},{"title":"Maintainers​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#maintainers","content":"(add your name here if you help test or contribute code for this board) "},{"title":"Similar Targets​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) "},{"title":"Variants​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#variants","content":"(add links to boards here that are similar in features or function, but use this target when flashing) "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#faq--known-issues","content":"(add FAQs, known issues and workarounds specifically related to this board. please link work in progress issues to the related github issue or pull request) "},{"title":"Maximum gyro update / PID loop frequency​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#maximum-gyro-update--pid-loop-frequency","content":"The KISS FC features an onboard MPU6050 gyro that is connected with I2C and is thereby limited to 4kHz gyro update frequency and 4kHz PID loop frequency. "},{"title":"ESC Telemetry (ESC Sensor)​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#esc-telemetry-esc-sensor","content":"When using KISS 24RE ESCs, you use the ESC telemetry by connecting the ESC telemetry wire to the TLM pads on the KISS FC board. To get ESC telemetry working with the TLM pads when using pre-BF 3.2, you will need to solder-bridge the TX3/RX3 pads on the bottom of the KISS FC board. In BF 3.2 the solder-bridge is not needed any more, with CLI command is set esc_sensor_halfduplex = ON you can set the UART to except TX and RX signals on the same pad. How to enable/use ESC Telemetry: Create solder-brigde between TX3/RX3 on the bottom of the KISS FC board.Connect ESC telemetry wires to the TLM padsStart Betaflight ConfiguratorOpen Ports TabSelect ESC for Sensor Input on UART3.Hit Save &amp; Reboot.Open Configuration TabEnable VBAT_SENSOR feature. Select ESC Sensor for Voltage Meter TypeEnable CURRENT_SENSOR feature. Select ESC Sensor for Current Meter Type.Hit Save &amp; Reboot. "},{"title":"Motor order​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#motor-order","content":"KISS original firmware uses another motor layout pattern than Betaflight uses. There is no need to resolder the motors anymore. Betaflight has an build-in mixer to assign the right motor to the right pad, just solder the motors to the correspondig pads (Motor 1 -&gt; PWM1, Motor 2 -&gt; PWM2, ...). Betaflight will do the rest. "},{"title":"Other Resources​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#other-resources","content":"Pinouts, schematics and RX wiring: http://nathan.vertile.com/blog/2016/07/29/betaflight-kiss-flight-controller/#pinout Rcgroups Thread: http://www.rcgroups.com/forums/showthread.php?t=2555204 "},{"title":"Image​","type":1,"pageTitle":"KISSFC","url":"/betaflight.com/docs/wiki/boards/KISSFC#image","content":" "},{"title":"KIWI F4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/KIWIF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"KIWI F4","url":"/betaflight.com/docs/wiki/boards/KIWIF4#description","content":""},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"KIWI F4","url":"/betaflight.com/docs/wiki/boards/KIWIF4#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"KIWI F4","url":"/betaflight.com/docs/wiki/boards/KIWIF4#hardware","content":"(Fill in hardware specs and add any not listed) MCU: STM32F405RGT6IMU: MPU6000IMU Interrupt:BARO: noVCP: yesHardware UARTS: 4OSD: yesBlackbox: flash chipPPM/UART Shared:Battery Voltage Sensor: yesIntegrated Voltage Regulator: yesBrushed Motor Mosfets: noButtons: BOOT "},{"title":"Features​","type":1,"pageTitle":"KIWI F4","url":"/betaflight.com/docs/wiki/boards/KIWIF4#features","content":"(add list of features) "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"KIWI F4","url":"/betaflight.com/docs/wiki/boards/KIWIF4#manufacturers-and-distributors","content":"https://flyinglemon.eu/flight-controllers/39-kiwif4-flight-controller.htmlhttps://beaverfpv.com/collections/new-arrivals/products/kiwi-f4-flight-controller-kiwi-pdb "},{"title":"Designers​","type":1,"pageTitle":"KIWI F4","url":"/betaflight.com/docs/wiki/boards/KIWIF4#designers","content":"JohnLemonFlyinglemon "},{"title":"Maintainers​","type":1,"pageTitle":"KIWI F4","url":"/betaflight.com/docs/wiki/boards/KIWIF4#maintainers","content":"(add your name here if you help test or contribute code for this board) "},{"title":"Similar Targets​","type":1,"pageTitle":"KIWI F4","url":"/betaflight.com/docs/wiki/boards/KIWIF4#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) "},{"title":"Variants​","type":1,"pageTitle":"KIWI F4","url":"/betaflight.com/docs/wiki/boards/KIWIF4#variants","content":"Differences: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"KIWI F4","url":"/betaflight.com/docs/wiki/boards/KIWIF4#faq--known-issues","content":"(add FAQs, known issues and workarounds specifically related to this board. please link work in progress issues to the related github issue or pull request) format is reporter [name], (status): issue contents ###Telemetry to FrSky XSR: As far telemetry you have to do the &quot;un-inverted XSR hack&quot; which isn't a big deal at all.Link to the X4r/XSR hackThe telemetry works with this XSR hack on UART6 only (doesn't work on UART3) ###Blackbox logs download corruption fix for MAC users: If you have issues downloading blackbox logs (probably affects only BF3.1 and later), this will fix the problem :https://www.rcgroups.com/forums/showpost.php?p=36811734&amp;postcount=44503more details here :https://github.com/betaflight/betaflight-configurator/issues/411It's a temporary solution requiring you to manually install patched up version of BF configurator, next release of official BF configurator is going to fix that. ###LED signal wire This is undocumented in the wiring diagram but the RGB LED signal wire goes to the DATA pin on the reversed side of the FC, you need to take 5v and ground wire elsewhere on the board (ie. from the UART3/6 ports) but please keep in mind that PSU on KIWI is 600mA current capacity where FC and OSD need around 280mA. ###Troubles Entering Bootloader Mode (DFU): Some devices (e.g. receivers connected to SBUS/IBUS port or devices connected to one of the UARTS) can inhibit the FC from entering USB bootloader mode. In this case the FC will not be detected by Windows/MacOS. Windows detects the FC as &quot;Unknown Device&quot;, MacOS reports &quot;enumeration errors&quot;. If you see some of these errors unplug all devices from the FC and flash the FC standalone. ###Voltage and Current Scaling: Flying Lemon said to use the following for scale: voltage 57, current 320. If this reads reverse current at idle and reads way too high when flying try Voltage 57 current 444 offset 11. For KIWIF4V2 with PDB: set ibata_scale = 411 and set ibata_offset = -7 "},{"title":"Other Resources​","type":1,"pageTitle":"KIWI F4","url":"/betaflight.com/docs/wiki/boards/KIWIF4#other-resources","content":"Setup Guide: http://flyinglemon.eu/ext_images/kiwif4_wiring_s.pdf Rcgroups Thread: "},{"title":"Image​","type":1,"pageTitle":"KIWI F4","url":"/betaflight.com/docs/wiki/boards/KIWIF4#image","content":""},{"title":"KROOZX","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/KROOZX","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"KROOZX","url":"/betaflight.com/docs/wiki/boards/KROOZX#description","content":"The KroozX combo is a combination of flight controller and 4in1 Blheli_S(BB2) ESC boards with a lot of useful features, like onboard OSD with 2 video channel switch, micro-SD card slot, 2 powerful BECs, LC filter for clear picture transmission and many more. It utilizes powerful SMT32F4 processor and two inertial sensors: MPU6000 (SPI bus) and ICM20608 (I2C bus), which gives an opportunity to build a highly responsible quadcopter with redundand IMU for more safety in flight. Proper wiring and schematics decreases the GYRO and GPS noise level, increasing the flight performance. An optional onboard HM-TRP or HC-12 (2 different board versions) transceiver enables wireless setup and control during flight. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"KROOZX","url":"/betaflight.com/docs/wiki/boards/KROOZX#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"KROOZX","url":"/betaflight.com/docs/wiki/boards/KROOZX#hardware","content":"MCU: STM32F4RGT6IMU: MPU6000 (SPI bus), ICM20608 (I2C bus)BARO: MS5611VCP: YesHardware UARTS: 5 (RX6, RX1/TX1 with onboard inverter)PWM outputs: 10OSD: MAX7456 with a switch for 2 video channelBlackbox: MicroSD card slot (SD/SDHC, upto 64GB)PPM/SBUS: RX6 with onboard inverterWireless: optional HM-TRP or HC-12 onboard transceiverBattery Voltage Sensor: Yes, up to 6S inputCurrent Sensor: YesIntegrated Voltage Regulator: 5V 2000mA, 10V 2000mA with LC filterButtons: No (powering the board with plugged USB starts STM DFU bootloader)Buzzer driver: YesRSSI Analog/PWM port: YesSWD port: Yes (SWIO, SWCLK, RST pins) "},{"title":"Features​","type":1,"pageTitle":"KROOZX","url":"/betaflight.com/docs/wiki/boards/KROOZX#features","content":"STM32F4 flight controller stacked with 4in1 20A Blheli_S(BB2) ESC comboDouble gyro sensors2 powerful integrated BECs2 channel video switchUp to 6S inputDimension: 85x28x20mm / fixing hole spacing 32x18mm.Supports DShot (see this page for setup instructions). "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"KROOZX","url":"/betaflight.com/docs/wiki/boards/KROOZX#manufacturers-and-distributors","content":"softsr (softsr@yahoo.de) "},{"title":"Designers​","type":1,"pageTitle":"KROOZX","url":"/betaflight.com/docs/wiki/boards/KROOZX#designers","content":"softsr (softsr@yahoo.de) "},{"title":"Maintainers​","type":1,"pageTitle":"KROOZX","url":"/betaflight.com/docs/wiki/boards/KROOZX#maintainers","content":"softsr mikeller #Images: KroozX  "},{"title":"KIWI F4 V2","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#description","content":"MPU-6000 F4 flight controller with stackable PDB. Integrated 12V and 5V regulators. Built-in OSD, S.Port inverter, SD Card slot. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#hardware","content":"Hardware\tPart Number\tNotesMCU\tSTM32F405RGT6\t4 Hardware UARTS - Shared PPM/UART TBD IMU\tMPU-6000\tInterrupt TBD OSD\tMAX 7456 12V Regulator\tNCP1117 17-12G\tLDO Linear: 1A Max 5V Regulator\tLMR14206\tSwitching Freq: 1.25MHz Features\tYes/NoBarometer\tNo VCP\tYes OSD\tYes SD Card\tYes Voltage Sensor\tYes Current Sensor\tYes Boot Button\tYes "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#manufacturers-and-distributors","content":"Flying Lemon Beaver FPV "},{"title":"Contributors​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#contributors","content":"FlyingLemonFPV - Board DesignerMiddleMan5 - Documentation "},{"title":"Variants​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#variants","content":"Kiwi F4 V2 improved upon the Kiwi F4 by adding an SD Card slot, moving the IMU closer to the center of the board, and changing the through hole solder points to pads. Plum F4 A cheaper variant of the Kiwi F4 V2 that removes the PDB socket, the OSD, and the video line filters. "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#faq--known-issues","content":""},{"title":"Troubles Entering Bootloader Mode (DFU):​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#troubles-entering-bootloader-mode-dfu","content":"Some devices (e.g. receivers connected to SBUS/IBUS port or devices connected to one of the UARTS) can inhibit the FC from entering USB bootloader mode. In this case the FC will not be detected by Windows/MacOS. Windows detects the FC as &quot;Unknown Device&quot;, MacOS reports &quot;enumeration errors&quot;. If you see some of these errors unplug all devices from the FC and flash the FC standalone. "},{"title":"Voltage and Current Scaling:​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#voltage-and-current-scaling","content":"Flying Lemon said to use the following for scale: voltage 57, current 444 offset 11. "},{"title":"Resource mapping​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#resource-mapping","content":"BF 3.2.5 Label\tPin\tTimer\tDMA\tDefault\tNoteLED0_PIN\tPB4 BEEPER\tPA8 INVERTER_PIN_UART1\tPC0 MPU6000_INT_EXTI\tPC4 MPU6000_CS_PIN\tPA4 MAX7456_SPI_CS_PIN\tPA15 SDCARD_DETECT_PIN\tPB9 SDCARD_SPI_CS_PIN\tPB12 VBUS_SENSING_PIN\tPC5 UART1 TX\tPA9 UART1 RX\tPA10 UART3 TX\tPB10 UART3 RX\tPB11 UART6 TX\tPC6 UART6 RX\tPC7 VBAT_ADC_PIN\tPC1 RSSI_ADC_PIN\tPC2 CURRENT_METER_ADC_PIN\tPC3  "},{"title":"SPI3 (MAX7456)​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#spi3-max7456","content":"Label\tPin\tTimer\tDMA\tDefault\tNoteSPI3_NSS_PIN\tPA15 SPI3_SCK_PIN\tPC10 SPI3_MISO_PIN\tPC11 SPI3_MOSI_PIN\tPC12  "},{"title":"I2C (Disabled by Default)​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#i2c-disabled-by-default","content":"Label\tPin\tTimer\tDMA\tDefault\tNoteI2C_C1_SCL\tPB6 I2C_C1_SDA\tPB7  "},{"title":"Other Resources​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#other-resources","content":""},{"title":"Enable Camera Control:​","type":1,"pageTitle":"KIWI F4 V2","url":"/betaflight.com/docs/wiki/boards/KIWIF4V2#enable-camera-control","content":"See this page for setting up your camera.After configuring your hardware (RC Filter) solder your OSD control wire to the VTX.CLK pad (PIN B06).Enter the following commands: resource CAMERA_CONTROL 1 B06 set camera_control_mode = software_pwm set camera_control_ref_voltage = 330 set camera_control_key_delay = 180 set camera_control_internal_resistance = 470 save  You may have to set your reference voltage, key_delay, and/or internal resistance depending on your camera. For me ( MiddleMan5 ), I soldered a 1uF capacitor between OSD and ground directly on my Foxeer Monster V2 and added an inline resistor of 220 ohms to the OSD pad (VTX.CLK). My reference voltage and key delay were the same as listed above, my internal resistance was set to 107. NOTE the above configuration worked for me, it is not guaranteed to work for you, and you may have to play around with the configuration. The software PWM on VTX.CLK is probably not the best method either, but it does function perfectly well for my setup. ###Setup Guide:  Dimensions: FC: 36mm x 36mm x 6.8mm(H) "},{"title":"LUMBAF3","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/LUMBAF3","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"LUMBAF3","url":"/betaflight.com/docs/wiki/boards/LUMBAF3#description","content":"LUMBAF3 is a Flight Controller designed with basic necessity of a good flight controller for pilots that wants to experience awesome flight performance. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"LUMBAF3","url":"/betaflight.com/docs/wiki/boards/LUMBAF3#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"LUMBAF3","url":"/betaflight.com/docs/wiki/boards/LUMBAF3#hardware","content":"MCU: STM32F3IMU: MPU6000USB: STM32 VCPHardware UARTS: 2Software UARTS: 1Blackbox: On-board flash memoryPPM/UART Shared: NoBattery Voltage Sensor: YesButtons: Yes for bootNumber of ESC/Motor outputs: 5 (1 shared with LED)Unbuffered Bidirectional ESC out/in-puts: YesESC passthrough possible: YesLED-strip output: YesSbus inverter: Configurable, UARTx "},{"title":"Software​","type":1,"pageTitle":"LUMBAF3","url":"/betaflight.com/docs/wiki/boards/LUMBAF3#software","content":"Firmware target: Betaflight "},{"title":"Features​","type":1,"pageTitle":"LUMBAF3","url":"/betaflight.com/docs/wiki/boards/LUMBAF3#features","content":"PPM only: YesBuzzer: YesTelemetry port: YesSpektrum Satellite Receivers: YesBlHeli passthrough: YesWS2811 Led Strip: Yes** "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"LUMBAF3","url":"/betaflight.com/docs/wiki/boards/LUMBAF3#manufacturers-and-distributors","content":"EMCEE TECHNOLOGIES "},{"title":"Designers​","type":1,"pageTitle":"LUMBAF3","url":"/betaflight.com/docs/wiki/boards/LUMBAF3#designers","content":"Muzakkir aka miskol "},{"title":"Maintainers​","type":1,"pageTitle":"LUMBAF3","url":"/betaflight.com/docs/wiki/boards/LUMBAF3#maintainers","content":"Muzakkir aka miskol "},{"title":"Other Resources​","type":1,"pageTitle":"LUMBAF3","url":"/betaflight.com/docs/wiki/boards/LUMBAF3#other-resources","content":"Setup Guides:  "},{"title":"Image​","type":1,"pageTitle":"LUMBAF3","url":"/betaflight.com/docs/wiki/boards/LUMBAF3#image","content":" "},{"title":"LUX_RACE","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/LUX_RACE","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"LUX_RACE","url":"/betaflight.com/docs/wiki/boards/LUX_RACE#description","content":""},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"LUX_RACE","url":"/betaflight.com/docs/wiki/boards/LUX_RACE#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"LUX_RACE","url":"/betaflight.com/docs/wiki/boards/LUX_RACE#hardware","content":"MCU:IMU:IMU Interrupt:BARO:VCP:Hardware UARTS:OSD:Blackbox:PPM/UART Shared:Battery Voltage Sensor:Integrated Voltage Regulator:Brushed Motor Mosfets:Buttons: None. Solder BOOT pads "},{"title":"Features​","type":1,"pageTitle":"LUX_RACE","url":"/betaflight.com/docs/wiki/boards/LUX_RACE#features","content":"(add list of features) "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"LUX_RACE","url":"/betaflight.com/docs/wiki/boards/LUX_RACE#manufacturers-and-distributors","content":"(add links to Manufacturers and Distributors) "},{"title":"Designers​","type":1,"pageTitle":"LUX_RACE","url":"/betaflight.com/docs/wiki/boards/LUX_RACE#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"LUX_RACE","url":"/betaflight.com/docs/wiki/boards/LUX_RACE#maintainers","content":"(add your name here if you help test or contribute code for this board) "},{"title":"Similar Targets​","type":1,"pageTitle":"LUX_RACE","url":"/betaflight.com/docs/wiki/boards/LUX_RACE#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) "},{"title":"Variants​","type":1,"pageTitle":"LUX_RACE","url":"/betaflight.com/docs/wiki/boards/LUX_RACE#variants","content":"Differences: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"LUX_RACE","url":"/betaflight.com/docs/wiki/boards/LUX_RACE#faq--known-issues","content":""},{"title":"Other Resources​","type":1,"pageTitle":"LUX_RACE","url":"/betaflight.com/docs/wiki/boards/LUX_RACE#other-resources","content":"Setup Guides: "},{"title":"Image​","type":1,"pageTitle":"LUX_RACE","url":"/betaflight.com/docs/wiki/boards/LUX_RACE#image","content":""},{"title":"LUXF4OSD","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/LUXF4OSD","content":"","keywords":""},{"title":"iBus and SmartAudio​","type":1,"pageTitle":"LUXF4OSD","url":"/betaflight.com/docs/wiki/boards/LUXF4OSD#ibus-and-smartaudio","content":"As this FC has only one UART (UART6) provided as pins, it can be tricky to get iBus (that needs a UART RX) and SmartAudio working at the same time. Here is a solution to get this accomplished: Solder iBus to the Pad labled RX6 and SmartAudio to the Pad labeled TX6.Configure iBus in Betaflight as usual for Port 6Run the following commands in CLI: resource PWM 3 NONE resource SERIAL_TX 6 NONE resource SERIAL_TX 11 C06 feature SOFTSERIAL save Now you should find another soft-serial on your ports-tab that you can use to configure SmartAudio "},{"title":"Lux Mini F7","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/LUXMINIF7","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"Lux Mini F7","url":"/betaflight.com/docs/wiki/boards/LUXMINIF7#features","content":"ICM20602 Gyro connected via SPISTM32F7223-6s Lipo capableAB7456 chip for Betaflight OSD20x20mm mounting holesPowerSwitch via PinIO (User1) "},{"title":"Resources​","type":1,"pageTitle":"Lux Mini F7","url":"/betaflight.com/docs/wiki/boards/LUXMINIF7#resources","content":"Function\tSolderPad/SilkScreen\tResource\tMCU Pin\tNotesSBUS\tSBUS\tRX1\tPA10\tNo Inverter DSM2\tDSM\tTX1\tPA9\tCLI serialrx_halduplex = ON SmartAudio\tS/A\tTX5\tPC12 Smartport\tS.PORT\tTX6\tPC6\tNo Inverter ESC Telemetry\tTLM\tRX2\tPA3\ton bottom CamControl\tCC PA8 SDA\tSDA\tI2C1_SDA\tPB9 SCL\tSCL\tI2C1_SCL\tPB8 UART4\tRX4/TX4\tUART4\tPA1/0 WS2812B LED\tLED PA15 Buzzer\tBZ-/BZ+ PB0 UART3\tRX3/TX3 PC11/10 PowerSwitch\tPWR\tUSER1\tPB10 S1 - S4\tS1-S4\tM1-M4\tPB6/C8/B7/C9\tMotor Outputs on bottom Current\tCRNT PC1\ton bottom "},{"title":"Picture​","type":1,"pageTitle":"Lux Mini F7","url":"/betaflight.com/docs/wiki/boards/LUXMINIF7#picture","content":" "},{"title":"NAME","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MATEKF405","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF405#description","content":"F405+ICM20602, w/ Betaflight OSD &amp; SD Card Slot "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF405#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF405#hardware","content":"MCU: 168MHz STM32F405RGT6IMU: 32K ICM20602 gyro/accelerometer (SPI)Baro: BMP280 (I2C)OSD: BetaFlight OSD w/ AT7456E chipBlackbox: MicroSD card slot (SD/SDHC)VCP, UART1, UART2, UART3, UART4, UART5Built in inverter for SBUS input (UART2-RX)PPM/UART Shared: UART2-RXSoftSerial on TX2, S5 or S6 optionalCamera control on S6 or DAC optionalSmartaudio &amp; Tramp VTX protocol supportedBattery Voltage Sensor: 1:10Current Sensor: No (FCHUB-6S, FCHUB-VTX, FCHUB-W option)BEC 5V: No (FCHUB-6S, FCHUB-VTX, FCHUB-W option)LDO 3.3V: Max.300mAI2C1 SDA &amp; SCL: YesWS2812 Led Strip : YesBeeper : YesRSSI: Yes "},{"title":"Features​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF405#features","content":"3x LEDs for FC STATUS (Blue, Red) and 3.3V indicator(Red)6x PWM / DShot outputs without conflict2x 2812LED outputs option5x UARTs1x Group of 5V/G/S1/S2/S3/S4 pads for 4in1 ESC Signal/GND4x pairs of corner pads for ESC Signal/GND connections (DSHOT compatible)1x pair I2C1 pads1x Side-press button for BOOT(DFU) mode1x 16pin bottom mounted FFC Slot for FCHUB-6S, FCHUB-VTX or FCHUB-W connection36x36mm PCB with 30.5mm mounting holes w/ 2x 0.5mm*16Pin 5cm Flexible Flat Cable and 4pcs M3 Anti-vibration Standoffs "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF405#manufacturers-and-distributors","content":"Matek Systems F405-STD (NEW)F405-CTR Discontinued: F405-OSDF405-AIO BANGGOOD F405-STD (NEW)F405-CTR "},{"title":"Designers​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF405#designers","content":"Matek Systems www.mateksys.com "},{"title":"Maintainers​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF405#maintainers","content":"Hardware: Matek Systems "},{"title":"Tips​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF405#tips","content":"Included rubber anti-vibration standoffs are necessary to avoid vibration issues.2812LED_Strip share I2C1_SCL pad as default. Either enable LED_Strip, or enable Baro.2812LED can be resourced to S7 (PB8) if using Baro the same time.Put a piece of sponge on the barometer to reduce the impact of airflow. "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF405#faq--known-issues","content":"Setup Guide Matek F405-STD: http://www.mateksys.com/?portfolio=f405-std Rcgroups Thread Matek F405: https://www.rcgroups.com/forums/showthread.php?2889298-MATEKSYS-Flight-Controller-F405-OSD-32K-Gyro-5xUARTs-SD-Slot Matek FC Facebook Group: https://www.facebook.com/groups/1882519175321708/ "},{"title":"Board - Matek F405-CTR","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MATEKF405-CTR","content":"","keywords":""},{"title":"Hardware Specs​","type":1,"pageTitle":"Board - Matek F405-CTR","url":"/betaflight.com/docs/wiki/boards/MATEKF405-CTR#hardware-specs","content":"Mass: ~10gPCB Size: 36x46mm 30x30mm Hole pattern (M4 size, M3 size with rubber isolators) "},{"title":"FC Specs​","type":1,"pageTitle":"Board - Matek F405-CTR","url":"/betaflight.com/docs/wiki/boards/MATEKF405-CTR#fc-specs","content":"Processors and Sensors MCU: STM32F405RGT6IMU: MPU6000 (connected via SPI)Baro: BMP280 (connected via I2C)OSD: BetaFlight OSD (AT7456E IC) Blackbox: MicroSD card slot (SD/SDHC)5 UARTs "},{"title":"Integrated PDB Specs​","type":1,"pageTitle":"Board - Matek F405-CTR","url":"/betaflight.com/docs/wiki/boards/MATEKF405-CTR#integrated-pdb-specs","content":"Input: 6-30v (3-6S LiPo) w/TVS protectionESC Pads: Rated 4x30A per ESC pad set (4x46A burst)Voltage Regulators: 5v BEC: 2A continuous load (3A burst)3.3v LDO: max load: 300mA Power Sense: Current Sensor: Rated for 184A (Suggested scale value 179)Voltage Sensor: 1:10 signal output ratio (Suggested scale value 110) "},{"title":"Status LEDs​","type":1,"pageTitle":"Board - Matek F405-CTR","url":"/betaflight.com/docs/wiki/boards/MATEKF405-CTR#status-leds","content":"LED\tColor\tColor CodesFC Status\tBlue\tUnlit: USB disconnected and disarmed, Lit: USB disconnected and armed, Flashing: USB connected and disarmed, 5x Rapid Flash then Flashing: USB connected and arming command prevented Accelerometer\tRed\tAccelerometer status (Lit: active, Unlit: inactive) 3v3 Status\tRed\tRed: active, Unlit: inactive "},{"title":"Pinout​","type":1,"pageTitle":"Board - Matek F405-CTR","url":"/betaflight.com/docs/wiki/boards/MATEKF405-CTR#pinout","content":"Pads are organised into two large banks of pads on left and right sides of board with a couple sets of pads on the underside of the board and ESC related connections near the board corners.  __________ / U U \\ /-----------------------------\\ |oE Eo| |SC SC| | | | P P | | A A | | D D | | S S | | | |ES ES| |oC Co| \\------------[USB]------------/  NOTE: Pads TX2, S5 and S6 support softserial and may be configured as such NOTE: Under normal operation, the use of the Barometer I2C1 bus (internal) and the WS2812 LED signal pad are mutually exclusive due to a pad mapping conflict. However, the LED_STRIP feature may be remapped to the S5 (PA15) pad to avoid this conflict. I.e. Type resource LED_STRIP 1 A15 into the CLI. Pad Silkscreen Label\tFunction\tNotes+ / -\tBattery In\t6-30vDC LiPo Power input (Battery +/- and 4-in-1 ESC +/- pads) S1-S6\tESC Out\t(1-4 near ESC power connections, 5-6 on front) Supports PWM, Oneshot, Multishot, DSHOT 5V, GND, S1-S4\tESC Out\t(Rear of board) 4-in-1 ESC Out VBT, GND\tVBT Out\tVBAT power pad (marked for VTX, but could be used for whatever) CURR\tCurrent Sense\tCurrent Sensor I/O pin (output from onboard sensor or input from external sensor) 5V Out from internal 5v BEC (rated 2A continuous, 3A burst) 3V3 Out from 3v3 regulator (rated 300mA) 4V5 Out from 4v4~4v8 regulator (unknown rating, power is also supplied when connected via USB) G\tGND LED\tWS2812 Signal Bz-, 5V\tBuzzer Rssi\tRSSI\tFrSky RSSI input from RX G, 3V3, SDA, SLC\tI2C\t(Rear of board) I2C connection marked for a magnetometer but could be used for whatever VTX, Cam, DAC\tVTX/CAM\tVTX: Video out, Cam: Video in, DAC: Cam control pin (since BF3.3, may be resourced to S6) RX1, TX1\tUART1 TX2\tUART2-TX\tMay be reassigned to softserial1 for use as FrSky SmartPort pad RX2\tUART2-RX\tRX connection for Spektrum DSMX or DSM2, FlySky iBUS, or PPM (Disable UART2 for PPM) Sbus\tSBUS (UART2)\tDedicated pad for SBUS (duplicate pad of RX2 with signal inverter) RX3, TX3\tUART3 RX4, TX4\tUART4 RX5, TX5\tUART5 RX5\tUART5-RX\t(One per board corner) Duplicates of RX5 pad for ESC Telemetry "},{"title":"UARTs + VCP​","type":1,"pageTitle":"Board - Matek F405-CTR","url":"/betaflight.com/docs/wiki/boards/MATEKF405-CTR#uarts--vcp","content":"Port\tDefault Assigned RoleVCP\tmicroUSB Port UART1\tUnassigned UART2\tRX Connection UART3\tUnassigned UART4\tUnassigned UART5\tESC Telemetry "},{"title":"NAME","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MATEKF411","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF411#description","content":"F411+MPU6000, w/ BFOSD, No blackbox "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF411#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF411#hardware","content":"MCU: STM32F411CEU6IMU: MPU6000(SPI)OSD: BetaFlight OSD w/ AT7456E chipCompass &amp; Baro: noVCP: YesHardware UARTS: 1, 2Blackbox: noPPM/UART Shared: UART2-RXBattery Voltage Sensor: Yes 1:10Currsnt Sensor: No (FCHUB-A option)Integrated Voltage Regulator: 5V/2ABrushed Motor Mosfets: NoButtons: BOOT button6 PWM / DShot outputsWS2812 Led Strip : YesBeeper : Yes "},{"title":"Features​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF411#features","content":"Built in inverter for SBUS input (UART1-RX)6x DShot outputs without conflictVCP, UART1, UART2 "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF411#manufacturers-and-distributors","content":"Matek Systems F411-MINI "},{"title":"Designers​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF411#designers","content":"Matek Systems www.mateksys.com "},{"title":"Maintainers​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF411#maintainers","content":"Hardware: Matek Systems "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF411#faq--known-issues","content":"Setup Guide http://www.mateksys.com/?portfolio=f411-MINI Matek FC Facebook Group: https://www.facebook.com/groups/1882519175321708/  Example 5: Setup for Matek F411 mini for Tricopter in Betaflight 3.2.2 by Flashted​ If Firmware update is needed on F411, it is best done in the CLI. I have found these instructions work with the Betaflight 3.2.2, Something has changed in the higher versions that have made changes to how the tail servo outputs, and this method does not work with Betaflight 3.4.1, or higher. I have not tried between version 3.2.2 - 3.4.0 either. I am at the moment trying to figure out what has changed, and why, but, if you want to try with higher versions, try it, and try to figure it out. Betaflight 3.2.2 works with a minimum of effort to get your craft flying. In the future, I want to experiment with GPS rescue for tricopter, which Betaflight 3.2.2 does not support, so I am going to go foward to version 3.4.1 which supports GPS rescue, and start there. If you power down the board, press the bootloader button on the Matek F411 flight controller, and plug back in like a lot of other boards, it does not enter bootloader mode, and there is NO blinking led confirming bootloader mode, at least with my windows 10 laptop. It does not work. If computer can't detect it, reinstall DFU drivers with zadig or use this https://impulserc.blob.core.windows.net/utilities/ImpulseRC_Driver_Fixer.exe To enter bootloader mode in CLI: In CLI Type bl enter Then bootloader mode is enabled, and newer firmware can be flashed. Do a full CLI dump, to have a reference to the original file before making ANY changes. You may need a fixed starting point in case you have to start over. You must assign it to be a tricopter &quot;first&quot;, and then &quot;save and reboot&quot; it as a tricopter so that all resources, and their designations will show up in the CLI. Setup: The first servo output channel is used for tail servo The first motor output channel is used for tail motor The second motor output channel is used for right motor The third motor output channel is used for left motor. The 2 front motors face forward and (tail) rear motor / servo facing towards you. On the board: Motor 1 - (rear) to motor output pin S1 Motor 2 (right) to motor output pin S2 Motor 3 (left) to motor output pin S3 Motor 4 motor output pin S4 is free, as this is a Tricopter. Motor pin 4 will not work for tail servo due to timing issue. (Tail servo setup is explained below, keep reading) If you need more outputs for servos, or as I needed strobes, motor 4 (S4) can't be remapped to servo if motor 3 (S3) is assigned to a motor. If S5 is used for a servo, S6 can be remapped to a servo also. I used S5 for telemetry in Taranis. You can also use RSSI pad or LED pads for servo outputs. I chose to try to disable motor 4, and noticed that I lost motor 2 when I tried to calibrate the esc's due to some Betaflight strangeness. I re-asigned motor 4 back to the original assignment, and motor 2 worked again, no problems. Go figure... In the BetaFlight GUI in the Receiver Tab is a selection for how the connection to the model is setup. Betaflight Defaults to AETR1234 Aileron, Elevator, Throttle, Rudder(yaw) Aux 1 2 3 4. This is an accepted standard setup on Taranis. In the Configuration tab: feature SERVO_TILT feature CHANNEL_FOWARDING Need to be OFF. Selecting TRICOPTER sets yaw output to servo automaticly. How to set the tail servo: I chose to use pin 6 in my setup for tail servo, as pin 5 in my setup is used for telemetry, as I stated earlier. In the CLI: Type resource motor 6 none save Then the pin will be free. Pin on board is S6, and B10 is the location of the pin. Type: resource servo 1 B10. save Nothing needs to be changed in the Servos tab for movement. Do not draw power from the board with a servo especially on a tricopter. Positive, black negative are going to a pdb 5v output. The yellow or white wire, signal wire can be connected to motor pin 5, motor pin 6, 7 or 8, will work. IF you want to disable the tail servo when it`s not armed, go to the CLI. Type: set tri_unarmed_servo = OFF save Or if you want it on. Type: set tri_unarmed_servo = ON save Now check if your servo/motor are tilting in the correct direction. If you move your yaw stick to the left, the motor must tilt to the right. If not, there are 2 ways to fix this. In CLI: Type Set yaw_control_direction = -1 save If you quickly move your tail to the right the motor must tilt quickly to the left, and vice versa. You can just reverse the yaw direction on your Tx, but it is better to do it in the GUI, so the flight controller does not have to process the data. Set the endpoints in the GUI so you have 40 degrees deflection in both directions, and neutral at as level as you can get it. An analog servo works as will a digital one in most cases my directions were not reversed with an analog servo, but may be with a digital. Hopes this helps. Cheers!!!  "},{"title":"NAME","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MATEKF722","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722#description","content":"F722+ICM20602, w/ Betaflight OSD &amp; SD Card Slot "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722#hardware","content":"MCU: STM32F722IMU: ICM-20602(SPI)OSD: BetaFlight OSD w/ AT7456E chipCompass &amp; Baro: noVCP: YesHardware UARTS: 1, 2, 3, 4Blackbox: Micro SD CardPPM/UART Shared: UART2-RXBattery Voltage Sensor: Yes 1:10Currsnt Sensor: No (FCHUB-6S option)Integrated Voltage Regulator: No (FCHUB-6S option)Brushed Motor Mosfets: NoButtons: BOOT button6 PWM / DShot outputsWS2812 Led Strip : YesBeeper : Yes "},{"title":"Features​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722#features","content":"32K Gyro ICM-20602Support Gyro sample rate 32K &amp; PID Loop 32KSD Card SlotVCP, UART1, UART2, UART3 &amp; UART4w/ Anti-vibration Standoffs "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722#manufacturers-and-distributors","content":"Matek Systems http://www.mateksys.com/?portfolio=f722-osd "},{"title":"Designers​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722#designers","content":"Matek Systems www.mateksys.com "},{"title":"Maintainers​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722#maintainers","content":"Hardware: Matek Systems "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722#faq--known-issues","content":"Setup Guide: Rcgroups Thread: "},{"title":"Board - MATEKSYS F722-SE","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MATEKF722-SE","content":"","keywords":""},{"title":"Hardware Specs​","type":1,"pageTitle":"Board - MATEKSYS F722-SE","url":"/betaflight.com/docs/wiki/boards/MATEKF722-SE#hardware-specs","content":"Mass: ~10gPCB Size: 36x46mm 30x30mm Hole pattern (M4 size, M3 size with rubber isolators) "},{"title":"FC Specs​","type":1,"pageTitle":"Board - MATEKSYS F722-SE","url":"/betaflight.com/docs/wiki/boards/MATEKF722-SE#fc-specs","content":"Processors and Sensors MCU: STM32F722RET6IMU: MPU6000(Gyro1) &amp; ICM20602(Gyro2) connected via SPI1Baro: BMP280 (connected via I2C1)OSD: BetaFlight OSD (AT7456E connected via SPI2) Blackbox: MicroSD card slot (connected via SPI3)5 UARTs (1,2,3,4,6)8 Dshot outputs2 PINIO (VTX power switcher/user1 and 2 camera switcher/user2) "},{"title":"Integrated PDB Specs​","type":1,"pageTitle":"Board - MATEKSYS F722-SE","url":"/betaflight.com/docs/wiki/boards/MATEKF722-SE#integrated-pdb-specs","content":"Input: 6-36v (3-8S LiPo)ESC Pads: Rated 4x35A per ESC pad set (4x46A burst)Voltage Regulators: 5v BEC: 2A continuous load (3A burst)3.3v LDO: max load: 200mA Power Sense: Current Sensor: Rated for 184A (Suggested scale value 179)Voltage Sensor: 1:10 signal output ratio (Suggested scale value 110) "},{"title":"Status LEDs​","type":1,"pageTitle":"Board - MATEKSYS F722-SE","url":"/betaflight.com/docs/wiki/boards/MATEKF722-SE#status-leds","content":"LED\tColor\tColor CodesLED0\tBlue\tFC Status LED1\tGreen\tFC Status LED3.3\tRed\t3v3 Status "},{"title":"Pinout​","type":1,"pageTitle":"Board - MATEKSYS F722-SE","url":"/betaflight.com/docs/wiki/boards/MATEKF722-SE#pinout","content":"Pads are organised into two large banks of pads on left and right sides of board with a couple sets of pads on the underside of the board and ESC related connections near the board corners.  __________ / U U \\ /-----------------------------\\ |oE Eo| |SC SC| | | | P P | | A A | | D D | | S S | | | |ES ES| |oC Co| \\------------[USB]------------/  Pad Silkscreen Label\tFunction\tNotes+ / -\tBattery In\t6-36vDC LiPo Power input (Battery +/- and 4-in-1 ESC +/- pads) S1-S8\tESC Out\t(1-4 near ESC power connections, 5-8 on right side) Supports PWM, Oneshot, Multishot, DSHOT GND, S1-S4\tESC Out\t(Rear of board) 4-in-1 ESC Out VBat GND\tVBAT Out\tVBAT power pad (marked for VTX), power ON/OFF can be switched via PINIO1(PC8) CURR\tCurrent Sense\tCurrent Sensor I/O pin (output from onboard sensor or input from external sensor) 5V Out from internal 5v BEC (rated 2A continuous, 3A burst) 3V3 Out from 3v3 regulator (rated 200mA) 4V5 Out from 4v4~4v8, 0.5A (power is also supplied when connected via USB) G\tGND LED\tWS2812 Signal Bz-, 5V\tBuzzer CL, DA\tI2C1\tI2C connection marked for a magnetometer but could be used for whatever VTX\tVTX\tVTX: Video out C1/C2\tCamera\tC1: camera-1 IN, C1: camera-2 IN, 2 camera video can be switched via PINIO2(PC9) RX1, TX1\tUART1 TX2\tUART2-TX RX2\tUART2-RX\tRX connection for Spektrum DSMX or DSM2, FlySky iBUS, or PPM (Disable UART2 for PPM) RX3, TX3\tUART3\tTX3 can be used for VTX control RX4, TX4\tUART4\tRX4 pin PA1 can be remapped for camera control(PWM) TX6\tUART6-TX RX6\tUART6-RX\t(One per board corner) Duplicates of RX6 pad for ESC Telemetry Rssi\tRSSI\tFrSky RSSI input from RX (Rear of board) PA4 ADC/DAC\tEXTERNAL1ADC_PIN (_Rear of board) D+, D-. VBus\tUSB pins\t(Rear of board) "},{"title":"NAME","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MATEKF722-STD","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722-STD#description","content":"STM32F722RET6, ICM20602, BMP280, BF OSD, SD Card Slot, VCP+5x UARTs, 6x PWM / DShot outputs "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722-STD#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722-STD#hardware","content":"MCU: 216MHz STM32F722RET6IMU: 32K ICM20602 gyro/accelerometer (SPI)Baro: BMP280 (I2C)OSD: BetaFlight OSD w/ AT7456E chipBlackbox: MicroSD card slot (SD/SDHC)VCP, UART1, UART2, UART3, UART4, UART5PPM/UART Shared: UART2-RXBattery Voltage Sensor: 1:10 (Max.36.3V supported)Current Sensor: No (FCHUB-6S, FCHUB-VTX option)BEC 5V: No (FCHUB-6S, FCHUB-VTX option)LDO 3.3V: Max.300mAI2C1 SDA &amp; SCL: YesCamera control: YesDAC: YesWS2812 Led Strip : YesBeeper : YesRSSI: Yes "},{"title":"Features​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722-STD#features","content":"3x LEDs for FC STATUS (Blue, Red) and 3.3V indicator(Red)7x PWM / DShot outputs without conflict5x UARTs1x Group of G/S1/S2/S3/S4 pads for 4in1 ESC Signal/GND1x I2C14x pairs of corner pads for ESC Signal/GND connections (DSHOT compatible)1x Side-press button for BOOT(DFU) mode1x 16pin bottom mounted FFC Slot for FCHUB-6S or FCHUB-VTX connection36x36mm PCB with 30.5mm mounting holes Ships with 2x 0.5mm*16Pin 5cm Flexible Flat Cable and 4pcs M3 Anti-vibration Standoffs "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722-STD#manufacturers-and-distributors","content":"Matek Systems F722-STD (NEW) "},{"title":"Designers​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722-STD#designers","content":"Matek Systems www.mateksys.com "},{"title":"Maintainers​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722-STD#maintainers","content":"Hardware: Matek Systems "},{"title":"Tips​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722-STD#tips","content":"Included rubber anti-vibration standoffs are necessary to avoid vibration issues. "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/MATEKF722-STD#faq--known-issues","content":"Setup Guide Matek F722-STD: http://www.mateksys.com/?portfolio=f722-std#tab-id-3 Rcgroups Thread Matek F722: https://www.rcgroups.com/forums/showthread.php?2986161-Matek-Flight-Controller-F722-STD "},{"title":"Board - MERAKRCF405","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MERAKRCF405","content":"","keywords":""},{"title":"Hardware​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF405#hardware","content":"Processors and Sensors *MCU: STM32F405RGT6IMU_1 MPU6000(0 deg)OSD: BetaFlight OSD (AT7456E)Blackbox: FLASH W25Q128 (16MB) 6 Dshot outputs 5 UARTs (UART5 support SerialRC) Stable voltage regulation,9V/2A DCDC BEC for VTX/camera etc.5V/2A DCDC BEC for FC/WS2812 etc. Independent camera control. "},{"title":"Pinout​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF405#pinout","content":""},{"title":"All uarts have pad on board​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF405#all-uarts-have-pad-on-board","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPA10\tPA9 2\tUSART2\tPA3\tPA2 3\tUSART3\tPB11\tPB10 4\tUSART4\tPC11\tPC10 5\tUSART5\tPD2\tPC12\tRx input "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF405#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPC13 2\tBEEPER\tBEEP\tPC14\t "},{"title":"VBAT input, Current input, Analog RSSI input​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF405#vbat-input-current-input-analog-rssi-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tADC1\tVBAT\tPC2 2\tADC1\tCURRENT\tPC1 3\tADC1\tRSSI\tPC3\t "},{"title":"PWM Input & PWM Output & LED strip & Camera control​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF405#pwm-input--pwm-output--led-strip--camera-control","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM8_CH3\tPPM\tPC8 2\tTIM3_CH1\tMotor1\tPC6 3\tTIM3_CH2\tMotor2\tPC7 4\tTIM5_CH1\tMotor3\tPA0 5\tTIM5_CH2\tMotor4\tPA1 6\tTIM3_CH3\tMotor5\tPB0 7\tTIM1_CH3N\tMotor6\tPB1 8\tTIM4_CH3\tLED strip\tPB8 9\tTIM11_CH1\tCAM Control\tPB9\t "},{"title":"Gyro & ACC MPU6000​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF405#gyro--acc-mpu6000","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI2\tSCK\tPB13\tMPU6000 2\tSPI2\tMISO\tPB14\tMPU6000 3\tSPI2\tMOSI\tPB15\tMPU6000 4\tSPI2\tCS1\tPB12\tMPU6000_CS 5\tIO\tINT2\tPC4\tMPU6000_INT "},{"title":"OSD MAX7456​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF405#osd-max7456","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPB3 2\tSPI3\tMISO\tPB4 3\tSPI3\tMOSI\tPB5 4\tSPI3\tCS\tPA15\t "},{"title":"FLash Blackbox​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF405#flash-blackbox","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPA5 2\tSPI1\tMISO\tPA6 3\tSPI1\tMOSI\tPA7 4\tSPI1\tCS\tPA4\t "},{"title":"Board - MERAKRCF405","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MERAKRCF722","content":"","keywords":""},{"title":"Hardware​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF722#hardware","content":"Processors and Sensors *MCU: STM32F722RET6IMU_1 MPU6000(0 deg)OSD: BetaFlight OSD (AT7456E)Blackbox: FLASH W25Q128 (16MB) 6 Dshot outputs 5 UARTs (UART5 support SerialRC) Stable voltage regulation,9V/2A DCDC BEC for VTX/camera etc.5V/2A DCDC BEC for FC/WS2812 etc. Independent camera control. "},{"title":"Pinout​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF722#pinout","content":""},{"title":"All uarts have pad on board​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF722#all-uarts-have-pad-on-board","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPA10\tPA9 2\tUSART2\tPA3\tPA2 3\tUSART3\tPB11\tPB10 4\tUSART4\tPC11\tPC10 5\tUSART5\tPD2\tPC12\tRx input "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF722#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPC13 2\tBEEPER\tBEEP\tPC14\t "},{"title":"VBAT input, Current input, Analog RSSI input​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF722#vbat-input-current-input-analog-rssi-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tADC1\tVBAT\tPC2 2\tADC1\tCURRENT\tPC1 3\tADC1\tRSSI\tPC3\t "},{"title":"PWM Input & PWM Output & LED strip & Camera control​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF722#pwm-input--pwm-output--led-strip--camera-control","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM8_CH3\tPPM\tPC8 2\tTIM3_CH1\tMotor1\tPC6 3\tTIM3_CH2\tMotor2\tPC7 4\tTIM5_CH1\tMotor3\tPA0 5\tTIM5_CH2\tMotor4\tPA1 6\tTIM3_CH3\tMotor5\tPB0 7\tTIM1_CH3N\tMotor6\tPB1 8\tTIM4_CH3\tLED strip\tPB8 9\tTIM11_CH1\tCAM Control\tPB9\t "},{"title":"Gyro & ACC MPU6000​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF722#gyro--acc-mpu6000","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI2\tSCK\tPB13\tMPU6000 2\tSPI2\tMISO\tPB14\tMPU6000 3\tSPI2\tMOSI\tPB15\tMPU6000 4\tSPI2\tCS1\tPB12\tMPU6000_CS 5\tIO\tINT2\tPC4\tMPU6000_INT "},{"title":"OSD MAX7456​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF722#osd-max7456","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPB3 2\tSPI3\tMISO\tPB4 3\tSPI3\tMOSI\tPB5 4\tSPI3\tCS\tPA15\t "},{"title":"FLash Blackbox​","type":1,"pageTitle":"Board - MERAKRCF405","url":"/betaflight.com/docs/wiki/boards/MERAKRCF722#flash-blackbox","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPA5 2\tSPI1\tMISO\tPA6 3\tSPI1\tMOSI\tPA7 4\tSPI1\tCS\tPA4\t "},{"title":"MICROSCISKY","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MICROSCISKY","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"MICROSCISKY","url":"/betaflight.com/docs/wiki/boards/MICROSCISKY#description","content":"The Micro Scisky is a compact flightcontroller with integrated RC receiver. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"MICROSCISKY","url":"/betaflight.com/docs/wiki/boards/MICROSCISKY#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"MICROSCISKY","url":"/betaflight.com/docs/wiki/boards/MICROSCISKY#hardware","content":"MCU: STM32F1IMU: MPU6050IMU Interrupt: NoBARO: NoVCP: CP210x (Silicon Labs)Hardware UARTS: 3OSD: NoBlackbox: NoPPM/UART Shared: UART2Battery Voltage Sensor: NoIntegrated Voltage Regulator: Integrated 5V DC/DC converterBrushed Motor Mosfets: YesButtons: Depending on variant/revision there can be a bind-button "},{"title":"Features​","type":1,"pageTitle":"MICROSCISKY","url":"/betaflight.com/docs/wiki/boards/MICROSCISKY#features","content":""},{"title":"Hardware Designs (if available)​","type":1,"pageTitle":"MICROSCISKY","url":"/betaflight.com/docs/wiki/boards/MICROSCISKY#hardware-designs-if-available","content":"None "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"MICROSCISKY","url":"/betaflight.com/docs/wiki/boards/MICROSCISKY#manufacturers-and-distributors","content":"See Variants section down below for specific distributors. "},{"title":"Similar Targets​","type":1,"pageTitle":"MICROSCISKY","url":"/betaflight.com/docs/wiki/boards/MICROSCISKY#similar-targets","content":"None "},{"title":"Variants​","type":1,"pageTitle":"MICROSCISKY","url":"/betaflight.com/docs/wiki/boards/MICROSCISKY#variants","content":"There are currently (as of Jan 2017) three variants available sporting different receivers. Also, the board layout varies slightly among them. DSMX/DSM2 compatible built-in receiver Available here: Banggood,HobbyKing,overskyrc Futaba SFHSS compatible built-in receiver Available here: Bangood Flysky Compatible built-in receiver Available here: Banggood "},{"title":"Other Resources​","type":1,"pageTitle":"MICROSCISKY","url":"/betaflight.com/docs/wiki/boards/MICROSCISKY#other-resources","content":"http://community.micro-motor-warehouse.com/t/how-to-set-up-scisky-fc-step-by-step/1224 "},{"title":"MotoLab Tempest F4 Flight Controller","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MLTEMPF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"MotoLab Tempest F4 Flight Controller","url":"/betaflight.com/docs/wiki/boards/MLTEMPF4#description","content":"An F4 flight controller with integrated PDB, OSD, MicroSD, and current sensor "},{"title":"Specifications:​","type":1,"pageTitle":"MotoLab Tempest F4 Flight Controller","url":"/betaflight.com/docs/wiki/boards/MLTEMPF4#specifications","content":"168MHz STM32F4 version of Tempest100+A PDB with 200A motor current sensorMPU6000 gyro/acc on SPI busBetaflight OSDMicro SD slot with DMA supportUp to 5 serial ports plus USBUp to 6 Dshot motor outputsSerial inverters for SBUS and S.PORTCompatible with TBS Smartaudio and IRC Tramp serial protocols1.5A 5V short-protected regulator with LC filtered 5V for OSD and cameraPlug-in direct connection to VTX and Camera with custom cablesBuzzer and serial LED outputs38x40mm board size with 30.5mm mounting hole spacingSupplied with cables for direct connection to Unify Pro HV VTX and HS1177 camera2S to 6S lipo compatibleSecure through-hole wiring connections for no lifted-pad failuresAll wiring connections solderable from top side The Tempest F4 is compatible with Betaflight using the new MLTEMPF4 board target. Cables are included for direct plug-in to an HS1177 camera and a Unify Pro HV VTX. Note: The VTX will display a screen full of the letter &quot;V&quot; until a font is uploaded. Use the &quot;Upload Font&quot; button on the Configurator VTX tab and select a font. The VTX must be powered from lipo during upload. Recommended installation is to pre-tin and trim wires, insert them from the bottom side, and solder on the top. Link to thread:https://www.rcgroups.com/forums/showthread.php?2715556-MotoLab-Typhoon-F4-Flight-Controller-and-VTX/page49#post38010951 "},{"title":"Sources​","type":1,"pageTitle":"MotoLab Tempest F4 Flight Controller","url":"/betaflight.com/docs/wiki/boards/MLTEMPF4#sources","content":"RocketCityFPVDefianceRCMulticopter Builders "},{"title":"Firmware​","type":1,"pageTitle":"MotoLab Tempest F4 Flight Controller","url":"/betaflight.com/docs/wiki/boards/MLTEMPF4#firmware","content":"Board target: MLTEMPF4 The MLTEMPF4 target is included in Betaflight 3.2 and later releases. "},{"title":"Troubleshooting and Discussion Thread​","type":1,"pageTitle":"MotoLab Tempest F4 Flight Controller","url":"/betaflight.com/docs/wiki/boards/MLTEMPF4#troubleshooting-and-discussion-thread","content":"https://www.rcgroups.com/forums/showthread.php?2537379-MotoLab-Board-Setup-and-Troubleshooting "},{"title":"Pinout Diagram​","type":1,"pageTitle":"MotoLab Tempest F4 Flight Controller","url":"/betaflight.com/docs/wiki/boards/MLTEMPF4#pinout-diagram","content":" "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"MotoLab Tempest F4 Flight Controller","url":"/betaflight.com/docs/wiki/boards/MLTEMPF4#manufacturers-and-distributors","content":"Manufactured by MotoLab. "},{"title":"Designers​","type":1,"pageTitle":"MotoLab Tempest F4 Flight Controller","url":"/betaflight.com/docs/wiki/boards/MLTEMPF4#designers","content":"Moto Moto "},{"title":"Maintainers​","type":1,"pageTitle":"MotoLab Tempest F4 Flight Controller","url":"/betaflight.com/docs/wiki/boards/MLTEMPF4#maintainers","content":"Moto Moto(add your name here if you help test or contribute code for this board) "},{"title":"Similar Targets​","type":1,"pageTitle":"MotoLab Tempest F4 Flight Controller","url":"/betaflight.com/docs/wiki/boards/MLTEMPF4#similar-targets","content":"MLTYPHF4 "},{"title":"MotoLab Typhoon F4 Flight Controller and VTX","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#description","content":"A complete FC, PDB, VTX, OSD and MicroSD system with F4 CPU on two boards with minimal cabling. "},{"title":"Hardware​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#hardware","content":""},{"title":"Typhoon F4 Flight Controller:​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#typhoon-f4-flight-controller","content":"168MHz STM32F4 version of Tempest 100+A PDB with 200A motor current sensor MPU6000 gyro/acc on SPI bus Up to 4 serial ports plus USB Up to 6 Dshot motor outputs Serial inverters for SBUS and S.PORT 1.5A 5V regulator with LC filtered 5V for VTX and camera Plug-in connection to VTX board 38x40mm board size with 30.5mm mounting hole spacing 2S to 6S lipo compatible The Typhoon F4 is compatible with Betaflight using the new MLTYPHF4 board target. The F4 board mates directly with the VTX board with no external wiring between the two. "},{"title":"Typhoon VTX:​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#typhoon-vtx","content":"25/200/500mW switchable, 40-ch video transmitter Betaflight OSD MicroSD slot for Blackbox Direct plug-in connection to camera and antenna with available custom cables Pass-through connector for camera joystick 38x38mm board with 30.5mm mounting hole spacing The Typhoon VTX is a self-contained video system, operating on filtered 5V provided by the Typhoon F4. The video is isolated from the PDB power distribution and delivers cleaner video. The VTX board mates directly with the F4 controller board with no external wiring between the two. Note: The VTX board is not powered from the USB input. The board should NOT be powered from lipo without an antenna connected. The VTX will display a screen full of the letter &quot;V&quot; until a font is uploaded. Use the &quot;Upload Font&quot; button on the Configurator VTX tab and select a font. The VTX must be powered from lipo during upload. The VTX controls are through the BetaFlight OSD functions using the RC transmitter. The VTX requires uploading a font through the Font Manager in BetaFlight Configurator. The only other control is the power selection switches. The settings for that are: SW1 ON, SW2 ON 25mWSW1 OFF, SW2 ON 200mWSW1 OFF, SW2 OFF 500mW The VTX can also be configured while on USB power (the VTX is not powered) with Configurator using CLI commands vtx_band and vtx_channel. The values (1-5) for vtx_band in CLI are: 1: Boscam A2: Boscam B3: Boscam E4: Fatshark5: Raceband vtx_channel values are 1-8 for channel 1-8. "},{"title":"Sources​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#sources","content":"RocketCityFPVDefianceRC65DronesMulticopter Builders "},{"title":"Firmware​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#firmware","content":"Firmware target: MLTYPHF4 The MLTYPHF4 target is included in Betaflight 3.2 and later releases. "},{"title":"Pinout​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#pinout","content":"https://www.rcgroups.com/forums/showatt.php?attachmentid=10039116&amp;d=1494799003 "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#manufacturers-and-distributors","content":"Manufactured by MotoLab. "},{"title":"Designers​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#designers","content":"Moto Moto "},{"title":"Maintainers​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#maintainers","content":"Moto Moto(add your name here if you help test or contribute code for this board) "},{"title":"Similar Targets​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#similar-targets","content":"MotoLab Tempest F4 "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#faq--known-issues","content":"I can't get it to connect properly in DFU mode!​ There are two reason the board might not appear as the correct device: The firmware is corrupted or wrong file loaded. The red led should flash at startup, and then flash if the board is rotated from level if the firmware is running. If not, force DFU mode with the boot pins and reflash with &quot;No reboot sequence&quot; enabled. The wrong drivers are installed. Zadig should be used to install only the DFU mode driver. Connect in DFU mode with the boot pins, and then install the driver listed in post #1. Additional instructions are here. The default Windows drivers should work for VCP mode. how do I configure the vtx like change channels?​ Stick commands are shown on the OSD startup screen. Mid throttle, yaw left and roll centered, pitch up. Can the Typhoon's stackable Vtx's power, band, and channel be controlled/adjusted via the radio/goggles? Asking because I'm trying to decide between it and a tbs Unify, which has SmartAudio. Could only see reference to controlling the power via dipswitches and band/channel via CLI commands.​ The Typhoon band and channel can be selected through the Betaflight OSD or CLI. Power selection is on the switches, although there is a power setting in the OSD that affects the RF preamp gain and not the power amp gain. The Typhoon FC is intended for use with the VTX specifically. It won't connect easily to other VTXs. The Tempest F4 is designed specifically for use with a Unify Pro and comes with a custom cable for that. The Tempest has the OSD and SD card on the FC board also. If you want to use a Unify, get the Tempest F4. "},{"title":"Other Resources​","type":1,"pageTitle":"MotoLab Typhoon F4 Flight Controller and VTX","url":"/betaflight.com/docs/wiki/boards/MLTYPHF4#other-resources","content":"Setup Guides: See Post #2 of this thread:https://www.rcgroups.com/forums/showthread.php?2537379-MotoLab-Board-Setup-and-TroubleshootingMore in this thread:https://www.rcgroups.com/forums/showthread.php?2715556-MotoLab-Flight-Controllers Board stuck in 'unknown device' mode? Check out this post:https://www.rcgroups.com/forums/showpost.php?p=37567682&amp;postcount=3053 Joshua Bardwell Video Review "},{"title":"MNR-MAGDALENA","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA","content":"","keywords":""},{"title":"News​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#news","content":""},{"title":"Betaflight 4.0​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#betaflight-40","content":"As you might have learned from the Betaflight GitHub page, our next release will be 4.0. Betaflight 4.0 will be the culmination of years of work that started in 2016 with the introduction of remappable resources, and it will drastically change the way how Betaflight is built and distributed. To you as the user, not much in how you download and install the Betaflight firmware will change, but you will get some noticeable improvements: we’ll have to spend less time on maintaining and releasing the firmware, meaning that we’ll have more time to work on new and exciting features;manufacturers will have an easy way to release custom configurations for all of their boards and ready-to-fly (including RX setup and tuning) craft based on original Betaflight firmware - you will no longer be stuck on using old firmware, or recreating your configuration from scratch;the tinkerers amongst you will be able to share Betaflight firmware with your home built improvements amongst your friends without having to build and distribute separate targets for everybody’s board. (These changes are planned for F4 and F7, F3’s flash space limitations mean we won’t be able to fit all of this in.) We are almost there with the implementation of these changes, but since they are quite complex, and getting ‘almost there’ doesn’t buy us much, we have decided that we need to take more time to complete them, make sure the way users can use the firmware still works as expected, and properly test the new firmware. For this reason we have decided to postpone the planned release date for Betaflight to 01 April 2019. We will keep doing monthly releases of Betaflight 3.5 with bugfixes and new / updated targets in the meantime. To get the latest update from us, you can now also visit our webpage at https://betaflight.com/. In addition to the drastic changes mentioned above, Betaflight 4.0 will have a number of other exciting new features and improvements: yet again improved flight performance;'Launch control' mode;switchable profiles for the OSD layout. "},{"title":"Events​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#events","content":"Date\tEvent01 March 2019\tStart of feature freeze / Release Candidate window for Betaflight 4.0 01 April 2019\tPlanned release date for Betaflight 4.0 "},{"title":"Merchandise:​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#merchandise","content":"For a limited time only: Buy a Betaflight Shirt or Hoodie! "},{"title":"Wiki Tips:​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#wiki-tips","content":"Searching the Wiki- Type in URL bar of the Web Browser: &quot;site:github.com/betaflight/betaflight/wiki PT1&quot; (wiki search for term 'PT1') or &quot;site:github.com/betaflight/betaflight PT1&quot; (broader search for term 'PT1') Note that Default settings as well as CLI commands may change from one Version to the next. We try to list these under the Version Release Notes but not always get them all. a method to use to keep track of changes and to check these yourself is: After Flashing but before configuring do the CLI Dump then Copy/paste this into a Text file named with V#. Then on next update do this again to a new text file. This allows you to check for differences by either manually compared the two text files or by using an Difference option in a text editor. NotePad++ is one such editor with a good difference feature. If not in this Wiki then it is probably not a feature new to BetaFlight and you need to look in the CleanFlight Docs. All BASICs and alternate methods to config and flash are in the NAZE32 Manual here: http://www.abusemark.com/downloads/naze32_rev2.pdf New Docs for BetaFlight 2.x. Note: These are NOT fully covering all Versions of BetaFlight, particularly the CLI commands. Always also read the Wiki Release Note pages for changes and then a &quot;get&quot; CLI command to check spelling and valid options. "},{"title":"Introduction​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#introduction","content":"Betaflight is software that is open source and is available free of charge without warranty to all users. Betaflight is a Cleanflight fork started by BorisB. It used to work as a beta test platform for Cleanflight and kept pushing the envelope in terms of performance, but it eventually evolved into a fully grown up, stable and well maintained firmware by various developers. In fact it looks like it is the number 1 open source multi-rotor firmware according to Google Trends analysis around January 2017. The name &quot;Beta&quot; comes from the fact it started with a goal to keep trying new things out and have quick and easy test distributions available. The name &quot;Beta&quot; has stuck as the brand name was strong at the moment where it transitioned from beta to stable and there was already a lot of documentation around. &quot;This project also helps by contributing to other open source projects like iNav.&quot; - says Boris B (lead developer) 3Min video of Betaflight Evolution from Baseflight-&gt;Cleanflight-&gt;Betaflight "},{"title":"Tools​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#tools","content":"Betaflight is also always being adjusted to support most current Cleanflight tools like Configurator and EzGui devices and many other MSP tools. There is no special tool needed just for Betaflight. "},{"title":"Firmware Releases​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#firmware-releases","content":"Releases can be found here: https://github.com/betaflight/betaflight/releases or downloaded from configurator. Also check the Upgrading List to the Right for Release Notes and other Details on the various Versions. BETA TESTING (WARNING) If you want to contribute to better development you can download the latest beta build directly from: https://ci.betaflight.tech/job/Betaflight/lastBuild/artifact/obj/ You can find release planning here:https://github.com/betaflight/betaflight/milestones "},{"title":"Configuration Tool​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#configuration-tool","content":"To configure Betaflight you should use the latest stable Betaflight-configurator GUI tool (Windows/OSX/Linux) that can be found in google chrome store:https://chrome.google.com/webstore/detail/betaflight-configurator/kdaghagfopacdngbohiknlhcocjccjao BETA TESTING If you want to contribute to better development you can download the latest or any of the older BetaFlight configurator from:https://github.com/betaflight/betaflight-configuratorThe following method also allows more than one Version of the configurator to be installed. Instructions (the README.MD file in the download is NOT correct):Note: these instruction work for Chrome version 59.0. Other versions and Chromium may have different Menus so Use the Help to learn how to install Extensions) 1. Clone the repo to any local directory or download source as zip, click the GREEN &quot;Clone or download&quot; button, Select &quot;Download ZIP2. Unzip on your PC, remember the location3. Start Chromium or Google Chrome4. Click the 3-dots on the far right of the URL bar5. Select &quot;More Tools&quot; then &quot;extensions6. Check the &quot;Developer mode&quot; checkbox7. Click on load unpacked extension and point it to the Betaflight Configurator directory (for example D:/betaflight-configurator)Then you'll see the new configurator in your Chrome extensions. "},{"title":"Mobile Flight for iPhone and iPad​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#mobile-flight-for-iphone-and-ipad","content":"thread: v2.0 is in Beta Testing- See post: https://www.rcgroups.com/forums/showpost.php?p=37815161&amp;postcount=49332 "},{"title":"BlackBox Viewer​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#blackbox-viewer","content":"Viewer Releases are here:https://github.com/betaflight/blackbox-log-viewer/releases The Latest Viewer source is here:https://github.com/betaflight/blackbox-log-viewerSee BB Logging and Usage Wiki page on using the BB logger. "},{"title":"BetaFlight Logos​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#betaflight-logos","content":"Links to logos (Note: The bee/wasp in the logo is different from the one that was finally adopted):https://www.rcgroups.com/forums/showpost.php?p=34909081&amp;postcount=29679 Here the original ones designed by skaman82:https://www.dropbox.com/s/viczizbjz0fwod4/Betaflight.Logos.zip?dl=0 Or The logo bf uses is at the top of this wiki page, just mouse right and save image as, cut the writing if you don't want it "},{"title":"Other Firmware that runs on same hardware as BF and has related source code:​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#other-firmware-that-runs-on-same-hardware-as-bf-and-has-related-source-code","content":"Official CleanFlight documentation: http://github.com/cleanflight/cleanflight/wiki Check out the INAV project. It's focused on GPS/Alt Hold/Autonomous flight.http://inavflight.com "},{"title":"Providing feedback and contributing to this project​","type":1,"pageTitle":"MNR-MAGDALENA","url":"/betaflight.com/docs/wiki/boards/MNR-MAGDALENA#providing-feedback-and-contributing-to-this-project","content":"Visit this RC Groups Forum to join the discussion: http://www.rcgroups.com/forums/showthread.php?t=2464844 Financial support to the Betaflight Team by PayPal donation:  "},{"title":"Board - MotoLab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MOTOLAB","content":"","keywords":""},{"title":"CONTENT FROM SAME FILE IN OTHER FOLDER​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#content-from-same-file-in-other-folder","content":""},{"title":"Description​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#description","content":"Four FCs that all use the same Target HEX MotoF3 - Board shape designed for the ImpulseRC Warp Quads as part of the frame.Tornado - Does not allow BLHeli Pass-through due to have 5V uni-directional drivers on the motor output pins. Requires a Pololu 5V regulator mounted on the board.Cyclone - Like the Tornado but supports BLHeli pass-through and has the 5V regulator built onto the board.Tempest (F3 version) - Has PDB built into the board as well as a 5V regulator to power accessories. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#hardware","content":"MCU: STM32F3IMU: MPU6000, SPI (Cyclone, Tempest) : MPU6050, IIC (MotoF3, Tornado)IMU Interrupt:BARO: NoVCP: YesHardware UARTS: 3OSD: NoBlackbox: SerialPPM/UART Shared: UART2Battery Voltage Sensor: YesIntegrated Voltage Regulator: Yes (MotoF3, Cyclone, Tempest) : Pololu 5V (Tornado)Brushed Motor Mosfets: NoButtons: None. Solder BOOT pads "},{"title":"Features​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#features","content":"(add list of features) "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#manufacturers-and-distributors","content":"(add links to Manufacturers and Distributors) "},{"title":"Designers​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#maintainers","content":"(add your name here if you help test or contribute code for this board) "},{"title":"Similar Targets​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) "},{"title":"Variants​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#variants","content":"Differences: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#faq--known-issues","content":"The BF developers removed flash support from the MotoLab target in 3.1.x. The other MotoLab boards use the same target but don't have flash, so apparently they overlooked the MotoF3 and thought the flash code wasn't needed. To use DSHOT ESC protocol with ßF3.1 Motor1 needs to be re-mapped to the PPM pin. Tornado has output driver chips so can not add a wire to the output pin header to use DSHOT. So just wire Motor #1's ESC directly to the PPM pin and re-map. The Cyclone and Tempest boards can have the PPM pin wired to the motor #1 output pin. See the DSHOT &amp; Betaflight page. For Cyclone &amp; Tempest - A wire can be soldered from the PPM pin to the motor 1 header pin or just connect ESC#1 directly to the PPM pin. Note: Adding this wire is not required if you connect signal wire from ESC #1 directly to the PPM pin. Move motor 1 from Output #1 header pin to the PPM input header pin. Follow above and to re-map output type in CLI:resource ppm none resource motor 1 A07 save  Photo of wire added to a Cyclone.https://www.rcgroups.com/forums/showpost.php?p=36589146&amp;postcount=2787 Photo and post on modifying the MotorF3 (Warp Quad) board to use Dshot. Note this is an alternet method that wires the PPM to Motor #7 output since the #7 output is very close to the PPM pin. The CLI re-mapping is:resource motor 7 none resource ppm none resource motor 1 A07 save https://www.rcgroups.com/forums/showthread.php?2537379-MotoLab-Board-Setup-and-Troubleshooting/page197#post37314713 Report that with the Mod and remapping to run DSHOT there is a conflict with DMA for LEDs with Motor #4. Currently LEDs need to be disabled to run DSHOT. ctzsnooze reported a fix: The solution, for versions of betaflight before 3.3, is to solder the ESC signal wire for motor 4 to the motor 5 pad, and in the CLI save:resource MOTOR 4 A01resource MOTOR 5 NONE "},{"title":"Servo_tilt with DSHOT on BF3.1:​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#servo_tilt-with-dshot-on-bf31","content":"Do mod and setup for DSHOT as above. Outputs 7 &amp; 8 on the Cyclone (Tornado &amp; Tempest) have timers available for servos (Outputs 5 &amp; 6 might also be available but not tested). In CLI type: resource motor 7 noneresource motor 8 noneresource servo 1 A03resource servo 2 A08save Reconnect USB and reopen configurator. On Config Tab Enable 'Servo_tilt' and click &quot;SAVE and REBOOT&quot;. On Servo Tab check CH1 (Roll) for Servo 0 (servo 0 here is Servo 1 in CLI) and check CH2 (Pitch) for Servo 1. Click Save. Outputs 7 &amp; 8 should now be 1000 to 2000usec servo pulses. Use the Motors Tab to check or an O'scope on the output pins. Adjust the MIN &amp; MAX to get the movement desired. "},{"title":"Tri-copter with Dshot ESCs on BF3.1:​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#tri-copter-with-dshot-escs-on-bf31","content":"Must add wire from PPM to output1 for Dshot. Servo must be on output 5 or 6 (Timer restriction: see SERVO_TILT wiki page). Do NOT enable SERVO_TILT, selecting TRICOPTER directs Yaw stick to Servo 1. Re-map motor 5 to Servo 1 with the following CLI commands (servo on output 5): resource MOTOR 5 none resource servo 1 A01 save  "},{"title":"Hex-copter with Dshot ESCs on BF3.1:​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#hex-copter-with-dshot-escs-on-bf31","content":"This did not seem to work. No DSHOT output on motor 1 (No DMA assignment) and bad output on motor 6. "},{"title":"Other Resources​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#other-resources","content":"Setup Guides: Tornado and Cyclonehttps://www.rcgroups.com/forums/showthread.php?t=2537379 Tempesthttps://www.rcgroups.com/forums/showthread.php?t=2715556 "},{"title":"Image​","type":1,"pageTitle":"Board - MotoLab","url":"/betaflight.com/docs/wiki/boards/MOTOLAB#image","content":""},{"title":"MultiFlite PICO-B-FC","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/MULTIFLITEPICO","content":"","keywords":""},{"title":"Flashing the firmware​","type":1,"pageTitle":"MultiFlite PICO-B-FC","url":"/betaflight.com/docs/wiki/boards/MULTIFLITEPICO#flashing-the-firmware","content":"The firmware can be updated with the BetaFlight configurator as for any other target. All multiFlite boards have a boot jumper which need to be closed for initial flashing or for recovery from a broken firmware. "},{"title":"NERO","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/NERO","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"NERO","url":"/betaflight.com/docs/wiki/boards/NERO#description","content":"Beautifully simple STM32F7 based flightcontroller. A F7 replacement for the Naze.  "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"NERO","url":"/betaflight.com/docs/wiki/boards/NERO#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"NERO","url":"/betaflight.com/docs/wiki/boards/NERO#hardware","content":"Size: 36x36mm (30.5x30.5 mounting holes)MCU: STM32F722RET6IMU: ICM-20602 (SPI)IMU Interrupt: YesVCP: YesHardware UARTS: 3OSD: Compatible pin-outs for MinimOSD on UART3 (stackable)Blackbox: SD cardPPM/UART Shared: UART6Battery Voltage Sensor: Yes, directly connected, no wiring necessary (if using pololu on full size)Integrated Voltage Regulator: Pololu piggy back optionButton for putting board into DFU mode "},{"title":"Features​","type":1,"pageTitle":"NERO","url":"/betaflight.com/docs/wiki/boards/NERO#features","content":"Current Sensor: available as ADC input, but requires shunt circuit on PDB or battery cable.BlHeli passthrough: YesWS2811 Led Strip: Yes (on motor output Pin 5)Transponder: NoSPI (2) is broken out for adding an SPI peripheral, e.g. another GYRO. "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"NERO","url":"/betaflight.com/docs/wiki/boards/NERO#manufacturers-and-distributors","content":"These boards are now currently available. Shipping of pre-orders is occurring now. Available here: fpvgame.euelectricwingman.comreadytoflyquads.com More information available here: nerofc.com "},{"title":"Configuration Information​","type":1,"pageTitle":"NERO","url":"/betaflight.com/docs/wiki/boards/NERO#configuration-information","content":""},{"title":"Wiring Diagrams​","type":1,"pageTitle":"NERO","url":"/betaflight.com/docs/wiki/boards/NERO#wiring-diagrams","content":"Main wiring details:  Micro pin details:  "},{"title":"Schematics​","type":1,"pageTitle":"NERO","url":"/betaflight.com/docs/wiki/boards/NERO#schematics","content":"The pin out for the MCU is provided here, so that it can be used as a reference for others considering developing a board using the same target. This is so targets can be minimised going forward. Hopefully the info will also assist other developers in adding features.  Other Resources RC Groups Thread: https://www.rcgroups.com/forums/showthread.php?2734745-NERO-STM32F7-based-FC "},{"title":"Board - AbuseMark Naze32","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/NAZE32","content":"","keywords":""},{"title":"Serial Ports​","type":1,"pageTitle":"Board - AbuseMark Naze32","url":"/betaflight.com/docs/wiki/boards/NAZE32#serial-ports","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tRX / PA10\tTX / PA9 / TELEM\tTELEM output is always inverted (for FrSky). Internally connected to USB port via CP2102 IC 2\tUSART2\tRC4 / PA3\tRC3 / PA2 4\tSOFTSERIAL1\tRC5 / PA6\tRC6 / PA7 5\tSOFTSERIAL2\tRC7 / PB0\tRC8 / PB1\t You cannot use USART1/TX/TELEM pins at the same time.You may encounter flashing problems if you have something connected to the RX/TX pins. Try disconnecting RX/TX. "},{"title":"Pinouts​","type":1,"pageTitle":"Board - AbuseMark Naze32","url":"/betaflight.com/docs/wiki/boards/NAZE32#pinouts","content":"The 10 pin RC I/O connector has the following pinouts when used in RX_PPM/RX_SERIAL mode. Pin\tIdentifier\tFunction\tNotes1 Ground 2\tCircle\t+5V 3\t1\tRX_PPM\tEnable feature RX_PPM 4\t2\tRSSI_ADC\tEnable feature RSSI_ADC. Connect to the output of a PWM-RSSI conditioner, 0v-3.3v input 5\t3\tUSART2 TX 6\t4\tUSART2 RX 7\t5\tLED_STRIP\tEnable feature LED_STRIP 8\t6\tunused 9\t7\tSonar Trigger 10\t8\tSonar Echo / CURRENT\tEnable feature CURRENT_METER Connect to the output of a current sensor, 0v-3.3v input When SOFTSERIAL is enabled, LED_STRIP and CURRENT_METER are unavailable, but two SoftSerial ports are made available to use instead. Pin\tIdentifier\tFunction\tNotes7\t5\tSOFTSERIAL1 RX\tEnable feature SOFTSERIAL 8\t6\tSOFTSERIAL1 TX 9\t7\tSOFTSERIAL2 RX 10\t8\tSOFTSERIAL2 TX\t "},{"title":"Recovery​","type":1,"pageTitle":"Board - AbuseMark Naze32","url":"/betaflight.com/docs/wiki/boards/NAZE32#recovery","content":""},{"title":"Board​","type":1,"pageTitle":"Board - AbuseMark Naze32","url":"/betaflight.com/docs/wiki/boards/NAZE32#board","content":"Short the two pads labelled 'Boot' taking extra care not to touch the 5V padApply power to the boardRemove the short on the board "},{"title":"Cleanflight configurator​","type":1,"pageTitle":"Board - AbuseMark Naze32","url":"/betaflight.com/docs/wiki/boards/NAZE32#cleanflight-configurator","content":"Select the correct hardware and the desired release of the Cleanflight firmwarePut a check in the &quot;No reboot sequence&quot;Flash firmware /-------------------\\ |O O| | []5V | | [][]Boot | | | | | | | | | |O O| \\-------[USB]-------/  "},{"title":"GPS​","type":1,"pageTitle":"Board - AbuseMark Naze32","url":"/betaflight.com/docs/wiki/boards/NAZE32#gps","content":"Due to limited flash space GPS is NOT availible. potentially enabled with a custom flash "},{"title":"Board - Nucleo H743 - RAM based image","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/NUCLEOH743 RAM based","content":"","keywords":""},{"title":"Board preparation​","type":1,"pageTitle":"Board - Nucleo H743 - RAM based image","url":"/betaflight.com/docs/wiki/boards/NUCLEOH743 RAM based#board-preparation","content":"For the MCU to run the firmware from RAM after a reset, the boot address has to be changed: open the 'Option Bytes' dialog:  set the high word of BOOT_ADD0 to 0x2401:  click 'Apply'. "},{"title":"Installation​","type":1,"pageTitle":"Board - Nucleo H743 - RAM based image","url":"/betaflight.com/docs/wiki/boards/NUCLEOH743 RAM based#installation","content":"Since the firmware image is only stored in RAM, this has to be done after every power cycle of the board. open the 'Program' dialog:  click 'Browse', select the 'NUCLEOH743_RAMBASED' hex image;make sure 'Reset after programming' is checked;click 'Start' to start programming:  After programming has completed the firmware will be run. "},{"title":"OMNIBUS","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/OMNIBUS","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#description","content":"The Omnibus F3 flight controller is an integrated flight controller and OSD specifically designed for ease of use and outstanding flight performance. The SPI-connected MPU6000 inertial motion sensor was chosen for it's high reliability, accuracy and update speed. This board has no problem running fast loop times and ESC protocols. There is an onboard barometer for altitude sensing along with an On Screen Display (OSD) chip directly connected to the main processor (MCU). This tight integration between the MCU and the OSD enables fast updates to the display and easy configuration of the OSD, which is managed straight from the BetaFlight configuration tool. You no longer need to worry about the extra hassle of configuring your OSD with a USB/UART adapter and 3rd party configuration tool, it's all built into the flight control software. For maximum ease of use, the OmnibusF3 has an onboard voltage regulator that can easily handle up to a 5s battery. No need to mess with a PDB, just plug your battery straight into the flight controller and you're ready to go! Along with the robustly engineered power management system on the OmnibusF3, special precautions have been taken to ensure that the sensitive OSD chip is well protected, so you don't have to worry about any problems with your OSD. No need to use a spark arrestor, even on 5s! "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#hardware","content":"MCU: STM32F3IMU: MPU6000 (SPI)IMU Interrupt: YesBARO: BMP280 (SPI)VCP: YesHardware UARTS: 3OSD: Yes, BetaFlight OSD (BFOSD)Blackbox: SD CardPPM/UART Shared: UART3 (optionally)Battery Voltage Sensor: Yes, directly connected, no wiring necessaryIntegrated Voltage Regulator: Yes, supports up to 5S, 1.5AMPBrushed Motor Mosfets: NoButtons: 2 (1: DFU, 2: unassigned) "},{"title":"Features​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#features","content":"Current Sensor: PA1BlHeli passthrough: YesWS2811 Led Strip: YesTransponder: YesBeeper: Inverted "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#manufacturers-and-distributors","content":"Airbot (manufacturer) Available here: http://shop.myairbot.com/index.php/flight-control/cleanflight-baseflight/omnibusv11.html Distributors​ http://www.readytoflyquads.com/https://www.pitchrollyaw.nethttps://www.fpv303.com "},{"title":"Designers​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#designers","content":"Airbot and Nathan "},{"title":"Maintainers​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#maintainers","content":"(add your name here if you help test or contribute code for this board) Nathan "},{"title":"Similar Targets​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) SirinFPV "},{"title":"Variants​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#variants","content":"OMNIBUS AIO F3 PRO - http://shop.myairbot.com/index.php/omnibus-prov1-72.html Diffrences: Added Current SensorAdded Power FilterSBEC instead of LDO "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#faq--known-issues","content":"(add FAQs, known issues and workarounds specifically related to this board. please link work in progress issues to the related github issue or pull request) format is reporter [name], (status): issue contents REMAP SERVOS AIRPLANE / FLYING WING​ You will need to remap the pins currently assigned from the motors to servos in the CLI to get servo functionality!!! The resources dump from my CLI looks like this for my flying wing, it remaps motors 3 and 4 to servos 1 and 2. resource MOTOR 1 B08resource MOTOR 2 B09resource MOTOR 3 NONEresource MOTOR 4 NONEresource MOTOR 5 B07resource MOTOR 6 B06resource MOTOR 7 NONEresource MOTOR 8 NONEresource SERVO 1 A02resource SERVO 2 A03resource SERVO 3 NONEresource SERVO 4 NONEresource SERVO 5 NONEresource SERVO 6 NONEresource SERVO 7 NONEresource SERVO 8 NONE "},{"title":"Setup TRICOPTER in ßF 3.1.x​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#setup-tricopter-in-ßf-31x","content":"This setup is for the Flip32 F3 omnibus board using Betaflight 3.1.6 The Servo needs an external 5V source with enough current to power the servo. The Omnibus' on-board 5V will not power a servo. First you need to setup the output motor # 4 to use as the servo controller. In the Cli command you want the final results to look like the following for a F3 omnibus, others just subsitute you motor assignments. CLI # resourceresource BEEPER 1 C15resource MOTOR 1 B08resource MOTOR 2 B09resource MOTOR 3 A03resource MOTOR 5 B07resource MOTOR 6 B06resource SERVO 1 A02resource PPM 1 B04resource LED_STRIP 1 A08 To get to the above, use the following commands in CLI Resource Record what motor 4 xx ( I.E. the xx assignment, in this case it was A02) Resource Motor 4 noneResource Servo 1 A02Save Enable the expert mode, on main page of CleanFlight top right. Go to the Servo Tab (which will show up when you enable expert mode). On the Servo Tab Select the line that has Servo 0 and go across and put a &quot;tick Mark under CH4&quot; Save Connect your Tail servo to Motor 4 output. (I just used the signal wire attached to signal out on Motor 4) Make sure your servo has 5vdc and a ground from your PDB or whatever source you wish to use. My tail servo is working correctly for the Flip F3 Omnibus. Couple of other pointers: If the servo is moving in the wrong direction, make the change in your transmitter.It appears from what I can figure out on the Servo Tab selection vs the resource of a given Servo number, I.E. Servo1 cli, uses Servo 0 on the Servo Tab page So on the Servo Tab page it is Servo # (resource) -1 for Servo Tab.If you wish to assign a servo to a Aux function.. Then the tick mark would be used in the A1-Axx box. So if you wished to assign a Say Aux 4, put the tick mark in A4.Use the save button....on each change. Regards BobFlyer "},{"title":"Extra timer pin​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#extra-timer-pin","content":"If you are using S.BUS or other Serial RX receivers, then you can move your receiver input from SBUS/PPM header (J8) to UART3 RX (F3: J22/PWM6, F3 Pro: J12/PWM6), and make the SBUS/PPM header dedicated for PPM signal.  The PPM signal is connected to MCU pin PB4, and you can use this for single-wire software serial available in BF3.1.6 and later. (taken from here : https://www.rcgroups.com/forums/showthread.php?2831228-OMNIBUS-F3-F3-Pro-PPM-An-extra-timer-pin) feature -RX_PPM //disable the rx-pwmfeature RX_SERIAL //switch to serial recieverfeature SOFTSERIAL // enable soft serialresource SERIAL_TX 11 B04 // enable softSerial1 tx on pin B04(PPM on J8) and/or resource SERIAL_TX 12 B07 // enable softSerial2 tx on pin B07(PWM5 on J12)Save "},{"title":"Club 24A VCC-RAM Bypass Hack​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#club-24a-vcc-ram-bypass-hack","content":"if you experience incorrect current reading when using the VCC-RAM jumper then this is the suggested fix. (taken from here : https://www.rcgroups.com/forums/showpost.php?p=36217140&amp;postcount=640) "},{"title":"Other Resources​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#other-resources","content":"Setup Guide: https://nathan.vertile.com/blog/2016/07/07/omnibus-typhoon-miniquad/ Rcgroups Thread: http://www.rcgroups.com/forums/showthread.php?t=2711617 "},{"title":"Image​","type":1,"pageTitle":"OMNIBUS","url":"/betaflight.com/docs/wiki/boards/OMNIBUS#image","content":"OMNIBUS AIO F3OMNIBUS AIO F3 PRO "},{"title":"OMNIBUS-F4-Pro-Corners","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/OMNIBUS-F4-Pro-Corners","content":"","keywords":""},{"title":"OMNIBUS F4 Pro Corners​","type":1,"pageTitle":"OMNIBUS-F4-Pro-Corners","url":"/betaflight.com/docs/wiki/boards/OMNIBUS-F4-Pro-Corners#omnibus-f4-pro-corners","content":""},{"title":"Notes​","type":1,"pageTitle":"OMNIBUS-F4-Pro-Corners","url":"/betaflight.com/docs/wiki/boards/OMNIBUS-F4-Pro-Corners#notes","content":"3.2.0: Programmable inverter on UART3 (controlled by PC9) is configured, but not activated by default as it interfere with other usages of PC9; users must activate it by resource INVERTER 3 C09 (see example below). "},{"title":"Hardware​","type":1,"pageTitle":"OMNIBUS-F4-Pro-Corners","url":"/betaflight.com/docs/wiki/boards/OMNIBUS-F4-Pro-Corners#hardware","content":"Variant of OMNIBUS F4 Pro (OMNIBUSF4SD target). Please refer to OMNIBUS F4 wiki page for additional information.Still uses OMNIBUSF4SD target.Two dual inverters, on UART3 (controlled by PC9) and UART6 (controlled by PC8); supports SBUS and native SmartPort (requires a diode for SmartPort).UART1_RX can be connected to ESC telemetry via jumper. "},{"title":"Configuration Example 1​","type":1,"pageTitle":"OMNIBUS-F4-Pro-Corners","url":"/betaflight.com/docs/wiki/boards/OMNIBUS-F4-Pro-Corners#configuration-example-1","content":"UART1 ESC TelemetryUART3 SBUSUART6 SmartPort (Inverted, TX-Inline-Diode)SOFTSERIAL1 SmartAudio  # Betaflight / OMNIBUSF4SD (OBSD) 3.2.0 Aug 28 2017 / 12:02:37 (b2cd7294e) # resources resource SERIAL_TX 1 NONE resource SERIAL_TX 11 A09 resource INVERTER 3 C09 # feature feature SOFTSERIAL feature TELEMETRY feature ESC_SENSOR # serial serial 0 1024 115200 57600 0 115200 serial 2 64 115200 57600 0 115200 serial 5 32 115200 57600 0 115200 serial 30 2048 115200 57600 0 115200 # master set serialrx_provider = SBUS set current_meter = ESC set battery_meter = ADC set tlm_halfduplex = OFF  "},{"title":"Configuration Example 2​","type":1,"pageTitle":"OMNIBUS-F4-Pro-Corners","url":"/betaflight.com/docs/wiki/boards/OMNIBUS-F4-Pro-Corners#configuration-example-2","content":"UART1 ESC TelemetryUART3 SBUSUART6 Free (for e.g. GPS)SOFTSERIAL1 Smartport (UART TX1 pad)SOFTSERIAL2 IRC Tramp (M5 pad)  # Betaflight / OMNIBUSF4SD (OBSD) 3.2.5 Feb 11 2018 / 00:49:36 (6e69ff00c) MSP API: 1.36 # resources resource MOTOR 5 NONE resource SERIAL_TX 1 NONE resource SERIAL_TX 11 A09 resource SERIAL_TX 12 A01 # feature feature MOTOR_STOP feature SOFTSERIAL feature TELEMETRY feature ESC_SENSOR # serial serial 0 1024 115200 57600 0 115200 serial 2 64 115200 57600 0 115200 serial 30 32 115200 57600 0 115200 serial 31 8192 115200 57600 0 115200 # master set serialrx_provider = SBUS  "},{"title":"OMNIBUSF4-V2","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4-V2","content":"OMNIBUSF4-V2 Hallo, Ich habe eine Omnobus F4 V2 und möchte ein GPS MGN8 abschließen. Das Gps wird erkannt, der Kompass nicht. Kann mir vielleicht jemand die Anschlussbelegung und programmierung nennen.","keywords":""},{"title":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4","content":"","keywords":""},{"title":"Board identification​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#board-identification","content":"For board identification, seeOMNIBUS F4 V2 &amp; V3 : Identifying revisions "},{"title":"Note for Omnibus F4 V6 and Omnibus F4 Nano V6 users (2019-01-17)​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#note-for-omnibus-f4-v6-and-omnibus-f4-nano-v6-users-2019-01-17","content":"Firmware target for V6 is OMNIBUSF4V6and for Nano V6 is OMNIBUSF4FW. "},{"title":"Note for Omnibus F4 Nano V4, V5 and V6 users (2018-08-24)​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#note-for-omnibus-f4-nano-v4-v5-and-v6-users-2018-08-24","content":"Serial RX port for inverted protocols (e.g., S.BUS) is UART1, and there is no programmable inverters.Flit10 Rx works only on UART3 "},{"title":"Note for OMNIBUS F4 V3, V4, V5 and ASGARD users​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#note-for-omnibus-f4-v3-v4-v5-and-asgard-users","content":"On OMNIBUS F4 V3 and later, serial RX is UART6, not UART1.ASGARD also uses UART6 RX (J5) for serial RX.These boards require a firmware with programmable inverter support (still OMNIBUSF4SD target).With the support, inversion will be enabled/disabled according to selected serial RX protocol (e.g. SBUS, IBUS, ...).However, inverter pin differs between F4 V3/V4 and ASGARD, and OMNIBUSF4SD target defaults to F4 V3/V4 design. ASGARD users must explicitly change the pin mapping by executing the following CLI command. resource inverter 6 c9  The full inverter support is available as current dev master, available at http://andwho.sytes.net:8080/job/BorisB_BetaFlight/ . Select build after #1253.Fixed inversion firmware based on 3.1.7 is available at https://www.dropbox.com/s/hj4jd3av8oko9ji/betaflight_3.1.6_Asgard_PC9_HIGH_SBUSInverter_Enabled?dl=0With this firmware, UART6 is serial RX with inversion (SBUS).Note Spektrum users can use stock 3.1.7.IBUS users probably need the full inverter support (for stability reasons). "},{"title":"v3.1.7 and later: LED strip pin assignment has changed for OMNIBUSF4SD target​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#v317-and-later-led-strip-pin-assignment-has-changed-for-omnibusf4sd-target","content":"THIS ALSO APPLIES TO ASGARD v3.1.x and earlier uses PWM5 (OMNIBUSF4 target) or PWM6 (OMNIBUSF4SD target) for LED strip, not the LED labelled pin. This was a work around for the original OMNIBUS F4 AIO having invalid pin on the designated pin. However, newer revisions of the OMNIBUS F4 family has valid (usable) pin assigned to the LED pin. Unfortunately, the pin was not ready for use with BF3.1.6 and earlier, but is was made default after BF3.1.7 and later. It means the current working connection to non-LED connector/through-hole in BF3.1.6 and earlier does not work unless explicitly remapped to the current pin. Those users with working LED strip on PWM5 or PWM6 can either migrate to the new assignment if the board supports the mapping, or explicitly assign older mapping with the resource CLI command. Migrating to the new assignment Users of the following boards can migrate (rewire the LED strip signal) to the new assignment that uses the designated LED through-hole/connector. OMNIBUS F4 V2 (J9)OMNIBUS F4 V3 (J9)OMNIBUS F4 Pro V3 (J1)ASGARD V1 and V2 (J1) Notes: (1) v3.1.7 firmware is already modified to use these through-hole/connector. (2) Unfortunately, PPM users can't use this new assignment because The new pin (MCU PB6) has a timer collision with PPM input pin (PB8); these users are forced to use the remap method below. Explicit pin assignment remapping. Users who choose (or forced in PPM case) not to migrate to the new assignment have to explicitly remap the assignment to the older default using the resource CLI command below. resource led_strip a8  "},{"title":"Board naming (needs updating)​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#board-naming-needs-updating","content":"These boards are called differently depending on the distributor. +----------------------+----------------------------+-------------+ | myairbot.com | RTFQ | BF target | +----------------------+----------------------------+-------------+ | OMNIBUS AIO F4 | FLIP32-F4-OMNIBUS | OMNIBUSF4 | | OMNIBUS AIO F4 V2 | FLIP32-F4-OMNIBUS V2 | OMNIBUSF4SD | | OMNIBUS F4 Pro | FLIP32-F4-OMNIBUS V2 PRO | OMNIBUSF4SD | | OMNIBUS F4 Pro (v2) | | | +----------------------+----------------------------+-------------+  "},{"title":"OMNIBUS F4 AIO Features​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#omnibus-f4-aio-features","content":"SPI Gyro MPU6000STM32 F405 MCU, Runs Betaflight 3.0 firmwareSBUS/PPM input (Pinheaders)6PWM output (1-4Pinheaders and Sh1.0 Plug, 5-6 as Pinheaders)NO BARO128Mbit Flash "},{"title":"OMNIBUS F4 Pro features​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#omnibus-f4-pro-features","content":"SPI Gyro MPU6000On-Board OSD (controlled by Betaflight, FC over SPI bus)MicroSD BlackboxBaro (BMP280)F4 Processor (F405)5v 3a SBECBuilt-in Current SensorOn-Board Video Filter (can only supply 5V to VTX and Camera) "},{"title":"Betaflight 3.1 specific configuration​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#betaflight-31-specific-configuration","content":""},{"title":"OMNIBUS F4 AIO​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#omnibus-f4-aio","content":"Use OMNIBUSF4 target.LED strip port is PWM5. Resource mapping (WIP)​ Label\tPin\tTimer\tDMA\tDefault\tNoteRSSI\tA0 Not ADC capable PWM5\tA1\t5,2\t1,4\tmotor 5, led_strip PWM4\tA2\t2,3\t1,1\tmotor 4 PWM3\tA3\t2,4\t1,6\tmotor 3 PWM6\tA8\t1,1\t2,3\tmotor 6 UART1 TX\tA9\t1,2\t2,2\tserial_tx 1\tNot remappable with v3.1 UART1 RX\tA10\t1,3\t?,?\tserial_rx 1\tNot remappable with v3.1 PWM1\tB0\t3,3\t1,7\tmotor 1 PWM2\tB1\t3,4\t1,2\tmotor 2 LED\tB6\t4,1\t1,0 J9 (Not accessible with v3.1) PPM\tB14\t12,3\tn.a\tppm CH2\tB15\t12,4\tn.a UART3 TX\tB10\t2,3(!)\t?,?\tserial_tx 2 UART3 RX\tB11\t2,4(!)\t?,?\tserial_rx 2 CRNT\tC1\t---\t2,4\tadc_curr VBAT\tC2\t---\t2,4\tadc_batt UART6 TX\tC6\t8,1\t2,2\tserial_tx 3 UART6 RX\tC7\t8,2\t2,3\tserial_rx 3 CH5\tC8\t8,3\t2,4 CH6\tC9\t8,4\t2,7  "},{"title":"OMNIBUS F4 V2 and F4 Pro​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#omnibus-f4-v2-and-f4-pro","content":"Use OMNIBUSF4SD target.v3.1.7 and later: For OMNIBUS F4 Pro V2, LED strip signal is connected to PWM6.v3.1.6 and earlier: LED strip signal is connected to PWM6. Resource Mapping (WIP)​ (Not available yet) "},{"title":"Other Resources​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#other-resources","content":"RCgroups thread for the F4 AIO at https://www.rcgroups.com/forums/showthread.php?2754926-Omnibus-F4-AIO RCgroups thread for the F4 Pro at https://www.rcgroups.com/forums/showthread.php?2801694-Omnibus-f4-pro Layouts for F4 Pro Top Bottom "},{"title":"Receiver Setup​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#receiver-setup","content":""},{"title":"Serial RX​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#serial-rx","content":"On the OMNIBUSF4, the UART1 RX pin is available for use on 3 different headers, only one of which can be used at any given time: SBUS port (via inverter), this pin is also shared with the PPM pin.Spektrum sat header (no inverter)UART1 header (no inverter) "},{"title":"Spektrum Binding (v3.1.6+)​","type":1,"pageTitle":"OMNIBUS F4 AIO, F4 V2/V3/V4, F4 Pro \"(v2)\"/V3 and ASGARD","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4#spektrum-binding-v316","content":"Configure the flight controller for your receiver by opening the BetaFlight Configurator and on the ports page, set UART1 to Serial RX and click save. Switch to the configuration tab and in the Receiver section, set the mode to SerialRX and provider to either: Spektrum 2048 for DSMXSpektrum 1024 for DSM2 In the CLI run: set spektrum_sat_bind = 9 set spektrum_sat_bind_autorst = 0 save  Wait for the board to reboot, then remove all power from the board (unplug the USB), wait a moment then and plug the in the USB cable. The bind light on the receiver should be flashing. Turn on your transmitter in bind mode. The flashing light on the receiver should now be solid. Turn of your transmitter. Finally take the receiver out of bind mode by running the following in the CLI: set spektrum_sat_bind = 0 save  Make sure to change to TAER channel order under the Receiver tab in the BetaFlight configurator. "},{"title":"Board Omnibus F4 Nano V7","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4NANOV7","content":"","keywords":""},{"title":"Features​","type":1,"pageTitle":"Board Omnibus F4 Nano V7","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4NANOV7#features","content":"ICM20602 Gyro connected via SPIFPC port for Frsky RXSTM32F40516MByte of Flash connected via SPI3-6s Lipo capableAB7456 chip for Betaflight OSD20x20mm mounting holes5V 3A BECSolderpads for SmartAudio and CamControlMotor outputs at each corner of the board "},{"title":"Resources​","type":1,"pageTitle":"Board Omnibus F4 Nano V7","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4NANOV7#resources","content":"Function\tSolderPad/SilkScreen\tResource\tMCU Pin\tNotesSBUS\tSBUS\tRX1\tPA10\tBuildin-Inverter DSM2\tTX1\tTX1\tPA9\tCLI serialrx_halduplex = ON SmartAudio\tS/A\tTX5\tPC12 Smartport\tS.P\tUART4\tPA0/1\tBuildin-Inverters ESC Telemetry\tTLM\tRX2\tPA3 CamControl\tCC PA8 SDA\tSDA\tI2C1_SDA\tPB9 SCL\tSCL\tI2C1_SCL\tPB8 GPS\tRX6/TX6\tUART6\tPC6/7\ton Bottom side WS2812B LED\tLED PA15 Buzzer\tBZ-/BZ+ PC5 UART3\tRX3/TX3 PC11/10\t "},{"title":"Revisions​","type":1,"pageTitle":"Board Omnibus F4 Nano V7","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4NANOV7#revisions","content":"Revision 1.0 UART4 and UART6 are swappedRevision 1.1 use table above "},{"title":"Pinmap​","type":1,"pageTitle":"Board Omnibus F4 Nano V7","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF4NANOV7#pinmap","content":" "},{"title":"OMNIBUS F7","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF7","content":"","keywords":""},{"title":"V2 support​","type":1,"pageTitle":"OMNIBUS F7","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF7#v2-support","content":"Firmware target​ For OMNIBUS F7 V2, please use OMNIBUSF7V2 target, available in 3.2RC-4 and later. ESC Mid Rail and ESC Telemetry Jumper Block​ ESC Mid Rail can be configured either as (a) 5V INPUT rail or (b) ESC telemetry input to UART7_RX(RX7).Current sensing uses pin7 of J3 connector. This pin can be used as (c) voltage (0-3V3) encoded current sensor output suitable for input to ADC, or (d) ESC telemetry input to UART7_RX(RX7).These functions should be selected with two jumper blocks, as described in the drawing below.   "},{"title":"Features​","type":1,"pageTitle":"OMNIBUS F7","url":"/betaflight.com/docs/wiki/boards/OMNIBUSF7#features","content":"F7 + OSD OSDSPI Gyro ICM-20608-G (SPI1)SPI Gyro MPU6000 (SPI3)STM32 F745 MCU F7 MCUs have an integrated inverter, like the STM32F3 SBUS/PPM input4PWM output, DSHOT enabledBMP280 BAROVBAT sensor (voltage divider)External current sensor and RSSI ADC readySDCARD "},{"title":"OMNIBUS Fireworks v2","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#description","content":"The Omnibus Fireworks flight controller uses the ICM20608 over SPI mounted inside of an onboard damping box. Also on-board is a barometer, an AB7456 OSD chip for the BetaFlight integrated OSD, and 16 megabytes of data-flash (blackbox). Omnibus Fireworks supports 3-6s LIPO direct input, contains a built-in hall effect Current Sensor, and provides on board power filtering. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#hardware","content":"Hardware\tPart Number\tNotesMCU\tSTM32F405RGT6 IMU\tICM-20608 OSD\tAB7456\tNeed actual datasheet Features\tYes/NoBarometer\tYes VCP\tYes OSD\tYes SD Card\tNo Onboard flash\tYes Voltage Sensor\tYes Current Sensor\tYes Boot Button\tYes "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#manufacturers-and-distributors","content":"Airbot "},{"title":"Contributors​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#contributors","content":"MiddleMan5 - Documentation "},{"title":"Variants​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#variants","content":""},{"title":"Fireworks V1​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#fireworks-v1","content":"Changes since V1: * Footprints for (approx 8.9mm(L) x 4.2mm(W)) ESC output capacitors. Airbot recommends a TMJE106K050RCQXC. * Solder pads for SmartAudio (UART2/GPIO PA2) and Camera Control (GPIO PB9) * IMU reoriented * Ribbon cable fully contained within IMU cage * 8V@1A (buck) switching regulator and LC filter added for camera and VTX * Smartport uses software serial on GPIO PA9. Airbot claims this increases the quantity of UARTs to 5.  (More information will need to be provided on Betaflight's support of software serial on PA9) "},{"title":"Omnibus F4 V6​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#omnibus-f4-v6","content":"Features: * STM32 F405 MCU * SBUS/PPM input (Pinheaders) * 6PWM output (1-4Pinheaders and Sh1.0 Plug, 5-6 as Pinheaders) * INCL. BARO BMP280 * SPI Sensor MPU6000 * Flash  "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#faq--known-issues","content":""},{"title":"Troubles Entering Bootloader Mode (DFU):​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#troubles-entering-bootloader-mode-dfu","content":"Some devices (e.g. receivers connected to SBUS/IBUS port or devices connected to one of the UARTS) can inhibit the FC from entering USB bootloader mode. In this case the FC will not be detected by Windows/MacOS. Windows detects the FC as &quot;Unknown Device&quot;, MacOS reports &quot;enumeration errors&quot;. If you see some of these errors unplug all devices from the FC and flash the FC standalone. "},{"title":"Voltage and Current Scaling:​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#voltage-and-current-scaling","content":" From Betaflight 3.3  Voltage:​ Scale: 110Divider: 10Multiplier: 1 Current:​ Scale: 176Offset: -18500 "},{"title":"Resource mapping​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#resource-mapping","content":""},{"title":"Other Resources​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#other-resources","content":""},{"title":"Note on Capacitors​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#note-on-capacitors","content":"Airbot recommends the usage of TMJE106K050RCQXC capacitors, however images from prior models show 107C (100uF size-C) capacitors being placed on these pads: MiddleMan5 says:​ Don't let Airbot's website, or the countless videos and forum posts, fool you; the capacitors really are missing. This is directly related to the growing MLCC shortage that has been affecting many industries, specifically PCB manufacturing. Not only has this made ceramic and tantalum capacitors significantly more expensive, but it's made lead time's significantly longer as well. I'm not suggesting Airbot is cheating anyone out of a couple of dollars, but I have first hand experience with this issue; the company I work for has had many major issues with ceramic and tantalum capacitor shortages. "},{"title":"Setup Guide:​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#setup-guide","content":"  "},{"title":"Dimensions:​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#dimensions","content":"Volume: 41.9mm(L) x 46mm(W) x 10mm(H) (Where width is measured from battery input, across USB port, to board corner) "},{"title":"Tips​","type":1,"pageTitle":"OMNIBUS Fireworks v2","url":"/betaflight.com/docs/wiki/boards/OMNIBUSFW-V2#tips","content":"Current sensor ADC on RX4​ (A note originally written for Omnibus F4 Nano V6, but it should work for Fireworks V2, too.) Current sensor source of Omnibus F4 Nano V6 is limited to telemetry from ESC, available as input to RX4 (UART4_RX). However the MCU pin PA1 which is the pin for the UART4_RX, is also capable of being assigned to ADC input. The pin can still be accessed as RX4 (either as one of 4-in-1 ESC socket J3 or a small pad marked RX4 next to J3). resource SERIAL_RX 4 none # Release PA1 from RX4 resource ADC_CURR a1 # Assign PA1 as ADC input (ADC123_IN1) current_meter = adc # Can be done in battery tab set ibata_scale = 367 # Ditto. Calibration required. set ibata_offset = 0 # Ditto  Use these CLI instructions for Frsky Omnibus versions with Rxsr-Fc connected via FPC:​ resource SERIAL_TX 11 C08 resource SERIAL_RX 11 C09 feature SOFTSERIAL feature TELEMETRY serial 0 0 115200 57600 0 115200 serial 30 64 115200 57600 0 115200 set serialrx_provider = FPORT set serialrx_inverted = OFF set serialrx_halfduplex = ON  "},{"title":"OPENPILOT-REVOLUTION","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/OPENPILOT-REVOLUTION","content":"","keywords":""},{"title":"Hardware overview​","type":1,"pageTitle":"OPENPILOT-REVOLUTION","url":"/betaflight.com/docs/wiki/boards/OPENPILOT-REVOLUTION#hardware-overview","content":"STM32F405RGT6 ARM Cortex-M4 microcontroller.Invensense MPU6000 digital MEMS Gyro/AccelerometerMeasurement Specialties MS5611 BarometerHoneywell HMC5883L MagnetometerIntegrated HopeRF RFM22B 100mW 433MHz radio can be used with an OPLink modem for wireless telemetry, configuration and control... No support in betaFlight "},{"title":"Hardware Designs and much more info​","type":1,"pageTitle":"OPENPILOT-REVOLUTION","url":"/betaflight.com/docs/wiki/boards/OPENPILOT-REVOLUTION#hardware-designs-and-much-more-info","content":"See the OpenPilot Revolution wiki page. "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"OPENPILOT-REVOLUTION","url":"/betaflight.com/docs/wiki/boards/OPENPILOT-REVOLUTION#faq--known-issues","content":"No support for integrated HopeRF RFM22B 100mW 433MHz radio. "},{"title":"Configuration​","type":1,"pageTitle":"OPENPILOT-REVOLUTION","url":"/betaflight.com/docs/wiki/boards/OPENPILOT-REVOLUTION#configuration","content":"In the Hardware Configuration tab you can enable the Accelerometer, Barometer and Magnetometer under System Configuration. "},{"title":"CPPM receiver​","type":1,"pageTitle":"OPENPILOT-REVOLUTION","url":"/betaflight.com/docs/wiki/boards/OPENPILOT-REVOLUTION#cppm-receiver","content":"Attach the receiver CPPM output to pin 5 of the Flex-IO header.Enable RX_PPM "},{"title":"Battery voltage monitoring​","type":1,"pageTitle":"OPENPILOT-REVOLUTION","url":"/betaflight.com/docs/wiki/boards/OPENPILOT-REVOLUTION#battery-voltage-monitoring","content":"Assuming you have physically connected a voltage divider (Basic voltage sensor) as per the instructions on the LibrePilot wiki. Enable VBATBattery Voltage Scale should be set to 55. Note: this value will vary depending on resistor tolerances etc... This configuration is suitable for 3/4S "},{"title":"Other Resources​","type":1,"pageTitle":"OPENPILOT-REVOLUTION","url":"/betaflight.com/docs/wiki/boards/OPENPILOT-REVOLUTION#other-resources","content":"Rcgroups Thread: couldn't find a link! I'm sure there is one somewhere. "},{"title":"Board - Paris Air Hero 32 / Acro Naze 32 Mini","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/PARISAIRHERO32","content":"","keywords":""},{"title":"Sensors​","type":1,"pageTitle":"Board - Paris Air Hero 32 / Acro Naze 32 Mini","url":"/betaflight.com/docs/wiki/boards/PARISAIRHERO32#sensors","content":"MPU6500 via SPI interface. "},{"title":"Ports​","type":1,"pageTitle":"Board - Paris Air Hero 32 / Acro Naze 32 Mini","url":"/betaflight.com/docs/wiki/boards/PARISAIRHERO32#ports","content":"6 x 3pin ESC / Servo outputs 1 x 8pin JST connector (PPM/PWM/UART2) 1 x 4pin JST connector (UART3/I2C) "},{"title":"Pinouts​","type":1,"pageTitle":"Board - Paris Air Hero 32 / Acro Naze 32 Mini","url":"/betaflight.com/docs/wiki/boards/PARISAIRHERO32#pinouts","content":"The 10 pin RC I/O connector has the following pinouts when used in RX_PPM/RX_SERIAL mode. From right to left when looking at the socket from the edge of the board. Pin\tFunction\tNotes1\tGround 2\t+5V 3\tRX_PPM\tEnable feature RX_PPM 4\tRSSI_ADC\tEnable feature RSSI_ADC. Connect to the output of a PWM-RSSI conditioner, 0v-3.3v input 5\tUSART2 TX 6\tUSART2 RX\tBuilt-in inverter 7\tLED_STRIP\tEnable feature LED_STRIP 8\tunused\t When SOFTSERIAL is enabled, LED_STRIP and CURRENT_METER are unavailable, but one SoftSerial port is made available to use instead. Pin\tFunction\tNotes7\tSOFTSERIAL1 RX\tEnable feature SOFTSERIAL 8\tSOFTSERIAL1 TX\t "},{"title":"Serial Ports​","type":1,"pageTitle":"Board - Paris Air Hero 32 / Acro Naze 32 Mini","url":"/betaflight.com/docs/wiki/boards/PARISAIRHERO32#serial-ports","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tRX / PA10\tTX / PA9 / TELEM\tTELEM output is always inverted (for FrSky). Internally connected to USB port via CP2102 IC 2\tUSART2\tRC4 / PA3\tRC3 / PA2 3\tUSART3\tF3 / PB11\tF2 / PB10\tFlex port is configured as UART3 when port is configured 4\tSOFTSERIAL1\tRC5 / PA6\tRC6 / PA7\t "},{"title":"PIKOBLX","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/PIKOBLX","content":"PIKOBLX This board target has been renamed to FF_PIKOBLX.​ FF_PIKOBLK board wiki page","keywords":""},{"title":"PLUMF4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/PLUMF4","content":"","keywords":""},{"title":"PLUM F4​","type":1,"pageTitle":"PLUMF4","url":"/betaflight.com/docs/wiki/boards/PLUMF4#plum-f4","content":"Available at: http://flyinglemon.eu/  "},{"title":"Board information:​","type":1,"pageTitle":"PLUMF4","url":"/betaflight.com/docs/wiki/boards/PLUMF4#board-information","content":"CPU - STM32F405RGT6MPU6000 SPI gyroSPI FlashBuild in 5V BEC board can be powered from main battery (up to 6S)RC input: S.BUS with HW inverter, SpektrumOther connectors: RSSI, ADC current sensor input, LED strip, BuzzerSize: 36mm x 36mm "},{"title":"Podium","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/PODIUM","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Podium","url":"/betaflight.com/docs/wiki/boards/PODIUM#description","content":"This flight controller was designed for performance and features an integrated 12V/5V regulated power distribution board (PDB). Simply connect power to the board and fly! "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"Podium","url":"/betaflight.com/docs/wiki/boards/PODIUM#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"Podium","url":"/betaflight.com/docs/wiki/boards/PODIUM#hardware","content":"MCU: STM32F405RTG6IMU: ICM-20608-G (SPI).IMU Interrupt: YesBARO: NoVCP: YesHardware UARTS: 3OSD: NoBlackbox: OptionalPPM/UART Shared: UART6Battery Voltage Sensor: Yes, Onboard Voltage sensor.Integrated Voltage Regulator: YesBrushed Motor Mosfets: NoButtons: 1 - DFU "},{"title":"Features​","type":1,"pageTitle":"Podium","url":"/betaflight.com/docs/wiki/boards/PODIUM#features","content":"Micro USB for STMicro VCPSerial or PPM inputSupports up to 4 ESCsTactile button for booting to STM bootloaderBuilt in SmartPort inverter(UART3)Built in SBUS inverter (UART6)Supports BLHeli PassthroughSupports WS2812 Led StripsSupports 12V and 5V output "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"Podium","url":"/betaflight.com/docs/wiki/boards/PODIUM#manufacturers-and-distributors","content":"This board is currently in development and can be preordered at Thrust-UAV. "},{"title":"Hardware​","type":1,"pageTitle":"Podium","url":"/betaflight.com/docs/wiki/boards/PODIUM#hardware-1","content":"This hardware is currently closed source, previous iterations may become open source. "},{"title":"Images​","type":1,"pageTitle":"Podium","url":"/betaflight.com/docs/wiki/boards/PODIUM#images","content":"  "},{"title":"Board - PYRODRONEF4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/PYRODRONEF4","content":"","keywords":""},{"title":"Serial Ports​","type":1,"pageTitle":"Board - PYRODRONEF4","url":"/betaflight.com/docs/wiki/boards/PYRODRONEF4#serial-ports","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPA10\tPA9 2\tUSART2\tPA3\tPA2 3\tUSART3\tPB11\tPB10 4\tUSART4\tPA1\tPA0 6\tUSART5\tPD2\tPC12 6\tUSART6\tPC7\tPC6\t "},{"title":"Pinout​","type":1,"pageTitle":"Board - PYRODRONEF4","url":"/betaflight.com/docs/wiki/boards/PYRODRONEF4#pinout","content":"TX1, RX1 -&gt; UART1 sbus pad (RX1 Use for Sbus has inverter build in) TX2, RX2 -&gt; UART2 Esc Telemetry (use for esc telemetery) TX3, RX3 -&gt; UART3 TEL PAD (use for frsky temeletery has inverter build in) TX4, RX4 -&gt; UART4 (Free uart) TX5, RX5 -&gt; UART5 TX5 (TX5 use for smart audio, No RX5 pinout ) TX6, RX6 -&gt; UART5 (design to use crossfire rx) "},{"title":"board label​","type":1,"pageTitle":"Board - PYRODRONEF4","url":"/betaflight.com/docs/wiki/boards/PYRODRONEF4#board-label","content":"vtx+ VTX power (Vbat) vtx- VTX ground video VTX Signal current Current sensor input bb+ Buzzer + bb- Buzzer - m1 Motor 1 m2 Motor 2 m3 Motor 3 m4 Motor 4 Vbat Battery input positive Gnd Battery input negative Cam_C Camera control(with build in Resistor and capacitor) 5V 5v output led_s Led strip signal "},{"title":"RCEXPLORERF3","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"RCEXPLORERF3","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3#description","content":"The RCExplorer F3FC Racing is a cheap STM32F3 FC with integrated voltage regulator, voltage monitoring, current sensor input, 3 UARTS, LED port, Servo feedback/RSSI and MPU6000 gyro Target HEX name: RCEXPLORERF3 "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"RCEXPLORERF3","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"RCEXPLORERF3","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3#hardware","content":"MCU: STM32F303CCIMU: MPU6000 (SPI)IMU Interrupt: YesBARO: NoVCP: YesHardware UARTS: 3OSD: NoBlackbox: NoPPM/UART Shared: No - PWM6 is used for PPMBattery Voltage Sensor: Yes, directly connected, no wiring necessaryIntegrated Voltage Regulator: Yes, 6S maximumBrushed Motor Mosfets: NoButtons: 1 - DFU "},{"title":"Features​","type":1,"pageTitle":"RCEXPLORERF3","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3#features","content":"Current Sensor: Yes, input accepts 0-3.3VBlHeli passthrough: YesWS2811 Led Strip: Yes, on dedicated LED outputTransponder: No "},{"title":"Hardware Designs​","type":1,"pageTitle":"RCEXPLORERF3","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3#hardware-designs","content":"Not public "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"RCEXPLORERF3","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3#manufacturers-and-distributors","content":"RCExplorer.se Available here: http://rcexplorer.se/product/f3fc-racing/ "},{"title":"Designers​","type":1,"pageTitle":"RCEXPLORERF3","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3#designers","content":"David Windestål "},{"title":"Maintainers​","type":1,"pageTitle":"RCEXPLORERF3","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3#maintainers","content":"Jaakko Laurikainen "},{"title":"Similar Targets​","type":1,"pageTitle":"RCEXPLORERF3","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3#similar-targets","content":"LUX_RACE SPARKY "},{"title":"Variants​","type":1,"pageTitle":"RCEXPLORERF3","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3#variants","content":"None known "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"RCEXPLORERF3","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3#faq--known-issues","content":"No known issues yet. The default resource mappings on all boards are for use on a quadcopter. If you want to use the board for a tricopter, you will have to manually remap the resources so you get a resource for the tail servo. This should work for the F3FC (Rcexplorer FC) resource MOTOR 1 A08 resource MOTOR 2 B00 resource MOTOR 3 A04 resource MOTOR 4 NONE resource MOTOR 5 NONE resource SERVO 1 A07  "},{"title":"Other Resources​","type":1,"pageTitle":"RCEXPLORERF3","url":"/betaflight.com/docs/wiki/boards/RCEXPLORERF3#other-resources","content":"Setup guide and such available here: http://rcexplorer.se/product/f3fc-racing/ "},{"title":"REVOLT","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/REVOLT","content":"","keywords":""},{"title":"REVOLT V2 OWNERS TAKE NOTE​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#revolt-v2-owners-take-note","content":"All of the information referring to Revolt V2 applies to Skitzo FC as well, it's identical board (just different color). Is not currently supported in current BetaFlight builds but can run BetaFlight now with the following instructions. Install 3.1.7 or higher Betaflight version Solder the pads on the bottom of the board to enable UART 1 for Inversion See this Solder up the cable for the receiver on UART 1 as shown in the revolt V2 diagram (make sure its the V2 diagram)https://flightone.us/support/#pinout_section Do this command in CLI. set serialrx_halfduplex=ON  (This setting became default with v3.4.0.) Hit Save. On the REVOLT V2 you also need to jumper the RX1 and TX1 pads to get receiver working. Take a look here. Enjoy Telemetry to FrSky XSR​ As far telemetry you have to do the &quot;un-inverted XSR hack&quot; which isn't a big deal at all.Link to the X4r/XSR hackthe telemetry works with this XSR hack, just remember to connect your S.Port wire to TX3 pin on the Revolt v2, don't get confused with the Revolt v2 wiring diagram which shows S.Port going to Rx3 pin. Blackbox logs download corruption fix for MAC users​ If you have issues downloading blackbox logs, this will fix the problem :https://www.rcgroups.com/forums/showpost.php?p=36811734&amp;postcount=44503more details here :https://github.com/betaflight/betaflight-configurator/issues/411 It's a temporary solution requiring you to manually install patched up version of BF configurator, next release of official BF configurator is going to fix that. "},{"title":"Revolt V1 S.BUS configuration after v3.4.0​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#revolt-v1-sbus-configuration-after-v340","content":"With v3.4.0, REVOLT target was completely rewritten as a standalone target, rather than a sub-target of REVO target. The new target also introduced a new default value of duplex option for UART1 which is suitable only for V2 and V3 boards, but it made Revolt V1 configuration from pre-v3.4.0 incompatible with post-v3.4.0 configuration. With post-v3.4.0, Revolt V1 users who are connecting S.BUS to SBUS pad must explicitly turn off the serialrx_halfduplex to OFF. set serialrx_halfduplex = OFF  The theory behind this operation is depicted by this drawing.   Board Information "},{"title":"Name​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#name","content":"Revolt V1 and V2 "},{"title":"Description​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#description","content":"FC designed to run RaceFlight 'closed source' firmware, but has a target called REVOLT in Betaflight. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#hardware","content":"MCU: STM32F405RGT6IMU: ICM-20602Virtual Com Port (VCP)BlackboxPPM/UART SharedBattery Voltage Sensor (VBAT)Boot Pads (no button) "},{"title":"Features​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#features","content":""},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#manufacturers-and-distributors","content":"https://revoltfc.com/index.html "},{"title":"Designers​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#maintainers","content":""},{"title":"Similar Targets​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#similar-targets","content":"This is a variant of the REVO, but is a cut down version, many of the pin outs of the STM MCU are the same. "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#faq--known-issues","content":""},{"title":"Other Resources​","type":1,"pageTitle":"REVOLT","url":"/betaflight.com/docs/wiki/boards/REVOLT#other-resources","content":""},{"title":"REVONANO","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/REVONANO","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"REVONANO","url":"/betaflight.com/docs/wiki/boards/REVONANO#description","content":""},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"REVONANO","url":"/betaflight.com/docs/wiki/boards/REVONANO#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"REVONANO","url":"/betaflight.com/docs/wiki/boards/REVONANO#hardware","content":"MCU:IMU:IMU Interrupt:BARO:VCP:Hardware UARTS:OSD:Blackbox:PPM/UART Shared:Battery Voltage Sensor:Integrated Voltage Regulator:Brushed Motor Mosfets:Buttons: None. Solder BOOT pads "},{"title":"Features​","type":1,"pageTitle":"REVONANO","url":"/betaflight.com/docs/wiki/boards/REVONANO#features","content":"(add list of features) "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"REVONANO","url":"/betaflight.com/docs/wiki/boards/REVONANO#manufacturers-and-distributors","content":"(add links to Manufacturers and Distributors) "},{"title":"Designers​","type":1,"pageTitle":"REVONANO","url":"/betaflight.com/docs/wiki/boards/REVONANO#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"REVONANO","url":"/betaflight.com/docs/wiki/boards/REVONANO#maintainers","content":"(add your name here if you help test or contribute code for this board) "},{"title":"Similar Targets​","type":1,"pageTitle":"REVONANO","url":"/betaflight.com/docs/wiki/boards/REVONANO#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) "},{"title":"Variants​","type":1,"pageTitle":"REVONANO","url":"/betaflight.com/docs/wiki/boards/REVONANO#variants","content":"Differences: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"REVONANO","url":"/betaflight.com/docs/wiki/boards/REVONANO#faq--known-issues","content":""},{"title":"Other Resources​","type":1,"pageTitle":"REVONANO","url":"/betaflight.com/docs/wiki/boards/REVONANO#other-resources","content":"Setup Guides: "},{"title":"Image​","type":1,"pageTitle":"REVONANO","url":"/betaflight.com/docs/wiki/boards/REVONANO#image","content":""},{"title":"RJXF7","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/RJXF7","content":"RJXF7 Aikon F4 Description FC with no PDB aimed at multi-rotor and fixed wing use, Aikon F4 features a carefully-chosen timer design which allowed to run 4-6 motors with burst DSHOT with maximum efficiency. On board are dedicated pads for ESC telemetry, VTX and camera control. Board also features an 11-pin connector for plug-and-play connection with Aikon AK32 4in1 ESC, providing voltage, current and ESC telemetry reading with no additional wires. MCU, Sensors and Features Hardware MCU: STM32F405 IMU: ICM-20602 Motor outputs: 4-6 IMU Interrupt: Yes BARO: Optionally VCP: Yes Hardware UARTS: UART1 for SerialRX, UART3 for Inverted SmartPort, UART2 and UART4 available for general use Software serial: SOFTSERIAL1 for VTX control (shared with UART1TX), SOFTSERIAL2 for ESC telemetry (shared with UART4RX) OSD: Yes Blackbox: SPI 16MB PPM/LED_STRIP Shared: Yes Battery Voltage Sensor: Yes Integrated Voltage Regulator: Yes Buttons: Boot Features UART3 inverter is controllable by software, you can use the SBUS pad for any unidirectional protocol by setting serialrx_inverted accordingly. There's also a solder-jumper to bypass the inverter and connecto UART3_RX to DSMX pad directly. Software serial is preconfigured by default, all you have to do is enable SOFTSERIAL1 for VTX control and SOFTSERIAL2 for ESC sensor on the Ports tab in Configurator. Manufacturers and Distributors https://www.aikon-electronics.com/ Designers AIKON Electronics Avi Jang Maintainers Andrey Mironov (@DieHertz)","keywords":""},{"title":"Board - RMRC Dodo","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/RMDO","content":"","keywords":""},{"title":"Hardware Features​","type":1,"pageTitle":"Board - RMRC Dodo","url":"/betaflight.com/docs/wiki/boards/RMDO#hardware-features","content":"STM32 F3 ARM Cortex-M processor with 128KB or 256KB flash program memory (Rev. 1 and 2: 128KB flash, Rev 3 256K).2MB external flash memory for storage.MPU6050 accelerometer/gyro (Rev. 2: MPU6000)BMP280 BarometerNo compass sensor.3 hardware UARTs (+ 2 software) for GPS, telemetry, OSD, etc., 5V compatibleOn-board 5V/0.5A BEC directly powered off 2-6S main battery pack. No external BEC/regulator necessary.On-board 3.3V regulator to power peripherials like Spektrum satellite receiver.36x36mm board with 30.5mm mounting holes pattern (same as CC3D or Naze32, but different pin-out). Note: Earlier revisions had issues with the buzzer circuit. "},{"title":"Serial Ports​","type":1,"pageTitle":"Board - RMRC Dodo","url":"/betaflight.com/docs/wiki/boards/RMDO#serial-ports","content":"Name\tRX (Board)\tTX (Board)\tRX (MCU)\tTX (MCU)\tNotesUART1\tU1RX\tU1TX\tPA10\tPA9\tShared with USB connection UART2\tU2RX\tU2TX/SWCLK\tPA15\tPA14\tShared with SWD UART3\tU3RX/3\tU3TX/4\tPB11\tPB10\tRX also connected to Spektrum satellite port "},{"title":"Pinouts​","type":1,"pageTitle":"Board - RMRC Dodo","url":"/betaflight.com/docs/wiki/boards/RMDO#pinouts","content":""},{"title":"Starboard (Front to back)​","type":1,"pageTitle":"Board - RMRC Dodo","url":"/betaflight.com/docs/wiki/boards/RMDO#starboard-front-to-back","content":"Label\tNotesRC_IN_8/SOFTSERIAL2_TX\tRC8 ppm input or soft-serial 2 transmit RC_IN_7/SOFTSERIAL2_RX\tRC7 ppm input or soft-serial 2 receive RC_IN_6/SOFTSERIAL1_TX\tRC6 ppm input or soft-serial 1 transmit RC_IN_5/SOFTSERIAL1_RX\tRC5 ppm input or soft-serial 2 receive RC_IN_4/U3TX\tRC4 ppm input or UART3 transmit RC_IN_3/U3RX\tRC3 ppm input or UART3 receive RC_IN_2\tRC2 ppm input RC_IN_1/PPM IN\tRC1 ppm input or SUM/CPPM 5V\t5V bus GND\tGround "},{"title":"Back (Left to right)​","type":1,"pageTitle":"Board - RMRC Dodo","url":"/betaflight.com/docs/wiki/boards/RMDO#back-left-to-right","content":"Label\tNotesSPEKTRUM_VCC/3V3\t3.3V output SPEKTRUM_GND/GND\tGround SPEKTRUM_DATA/U3RX\tUART3 receive USB\tMicro USB socket BAT+\tMain battery (2S - 6S) positive lead GND/BAT-\tMain battery negative lead "},{"title":"Front (Left to right)​","type":1,"pageTitle":"Board - RMRC Dodo","url":"/betaflight.com/docs/wiki/boards/RMDO#front-left-to-right","content":"Label\tNotesBZ_5V/BZ+\t5V, connect to positive (+) terminal of buzzer BZ_OC/BZ-\tOpen-collector output, connect to negative (-) terminal of buzzer RC_OUT_1\tESC 1 output (rear, starboard, CW on quad) RC_OUT_2\tESC 2 output (front, starboard, CCW on quad) RC_OUT_3\tESC 3 output (front, port, CW on quad) RC_OUT_4\tESC 4 output (rear, port, CCW on quad) RC_OUT_5\tPPM output 5 RC_OUT_6\tPPM output 6 RC_OUT_7\tPPM output 7 RC_OUT_8\tPPM output 8 LED_OUT\tWS2811 led output LED_GND/GND\tGround "},{"title":"Starboard (Front to back)​","type":1,"pageTitle":"Board - RMRC Dodo","url":"/betaflight.com/docs/wiki/boards/RMDO#starboard-front-to-back-1","content":"Label\tColumn\tNotesGND\tOutside\tGround U1TX\tOutside\tUART1 transmit (1) U1RX\tOutside\tUART1 receive (1) 5V\tOutside\t5V bus 3V3\tOutside\t3.3V output (2) GND\tInside\tGround SDA\tInside\tI2C data SCL\tInside\tI2C clock 3V3\tInside\t3.3V output PPM_RSSI\tInside\tLow-pass filtered PPM-style RSSI input (FrSky or EzUHF) U2RX\tOutside\tUART2 receive U2TX/SWCLK\tOutside\tUART2 transmit or SWD clock SWDIO\tOutside\tSWD input/output GND\tOutside\tGround Shared with USB.Can be used to power external low-power devices like Spektrum satellite receiver. "},{"title":"Top pads​","type":1,"pageTitle":"Board - RMRC Dodo","url":"/betaflight.com/docs/wiki/boards/RMDO#top-pads","content":"Label\tNotesCURR\tCurrent sensor ADC input, unbuffered RSSI\tRSSI ADC input, unbuffered. Use PPM_RSSI for filtered input. BOOT\tBOOT jumper for recovering a bricked boot loader "},{"title":"Bottom pads​","type":1,"pageTitle":"Board - RMRC Dodo","url":"/betaflight.com/docs/wiki/boards/RMDO#bottom-pads","content":"Label\tNotesTRIG\tTrigger for sonar (on-board 1kOhm series resistor for 5V compatibility) ECHO\tEcho for sonar (on-board 1kOhm series resistor for 5V compatibility) "},{"title":"RG SSD","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ROTORGEEKSSSD","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"RG SSD","url":"/betaflight.com/docs/wiki/boards/ROTORGEEKSSSD#description","content":"The Rotorgeeks SSD is an F3 based flight controller with best-in-class components, an intelligent layout and a great price. It features native DSHOT support, MPU6000 (SPI), 5 UARTs, Onboard low-profile IR LEDs for integration into lap timing systems, high current 5V supply, direct battery connection up to 6S, MicroSD slot for blackbox. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"RG SSD","url":"/betaflight.com/docs/wiki/boards/ROTORGEEKSSSD#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"RG SSD","url":"/betaflight.com/docs/wiki/boards/ROTORGEEKSSSD#hardware","content":"MCU: STM32F303RCT6IMU: MPU6000 (SPI)IMU Interrupt: YesBARO: NoVCP: YesHardware UARTS: 5OSD: NoBlackbox: Yes, micro SDPPM/UART Shared: UART2Battery Voltage Sensor: Yes, integratedIntegrated Voltage Regulator: Yes, up to 6SButtons: no "},{"title":"Features​","type":1,"pageTitle":"RG SSD","url":"/betaflight.com/docs/wiki/boards/ROTORGEEKSSSD#features","content":"IR LEDs for lap timing sytemCurrent Sensor: has input pinBlHeli passthrough: YesWS2811 Led Strip: Yes, with 5V supplyTransponder: see IR LEDs "},{"title":"Hardware Designs (if available)​","type":1,"pageTitle":"RG SSD","url":"/betaflight.com/docs/wiki/boards/ROTORGEEKSSSD#hardware-designs-if-available","content":""},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"RG SSD","url":"/betaflight.com/docs/wiki/boards/ROTORGEEKSSSD#manufacturers-and-distributors","content":"Rotorgeeks Available here: http://rotorgeeks.com/index.php?route=product/product&amp;product_id=676 "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"RG SSD","url":"/betaflight.com/docs/wiki/boards/ROTORGEEKSSSD#faq--known-issues","content":"(add FAQs, known issues and workarounds specifically related to this board. please link work in progress issues to the related github issue or pull request) Voltage scale needs to be set to 119 RCGroup post on Beeper connection: https://www.rcgroups.com/forums/showpost.php?p=36610466&amp;postcount=14 iLap and Easy Race Lap Timer Some progress is being made on the IR transponder. One of the guys we know has it running on a test board and is working to get it implemented. Looking at multi-protocol support. iLap and Easy Race Lap Timer (and another one I can't find much info about). ERLT is the one I really wanted to get going.https://github.com/betaflight/betaflight/issues/2131 It's working its way through github now. I think it might appear on Cleanflight first.https://github.com/cleanflight/cleanflight/blob/master/docs/Transponder.md "},{"title":"Other Resources​","type":1,"pageTitle":"RG SSD","url":"/betaflight.com/docs/wiki/boards/ROTORGEEKSSSD#other-resources","content":"Manual RCG Thread:https://www.rcgroups.com/forums/showthread.php?2805794-Rotorgeeks-SSD-F3-flight-controller "},{"title":"Image​","type":1,"pageTitle":"RG SSD","url":"/betaflight.com/docs/wiki/boards/ROTORGEEKSSSD#image","content":" "},{"title":"SINGULARITY","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SINGULARITY","content":"SINGULARITY 3.1.7 : this target should be back to normal with DSHOT support on motors 1-4. Originally Posted by jdrotor: Ok, I figured out the issue today and wasn't sure who to share what I found. The default Resource Mapping for the Singularity FC in BF3.0.1 changed in BF3.1.+. I'm not sure if the board I was working on is an &quot;old&quot; version. In any case, I remapped the Motor resources back to the mapping in 3.0.1 and the motors arm , etc.. You should check your mappings to be sure it the same issue; if it is the CLI commands below is what I entered into FC: Resource PWM 2 NoneResource PWM 3 NoneResource PWM 4 NoneResource PWM 5 NoneResource Motor 1 B04Resource Motor 2 B05Resource Motor 3 B00Resource Motor 4 B01Resource Motor 5 B08Resource PWM 2 A11Resource PWM 3 A12Resource PWM 4 A13Resource PWM 5 A14 I wasn't sure if the PWM's needed to be remapped but I had to free them to remap the Motors 1-4. Hope that helps. Posted by mixblast: I can also confirm that this fixed motors not spinning on 3.1.6 on my Singularity. Apparently it will be fixed in the next betaflight revision https://github.com/betaflight/betaflight/pull/2530 I have also submitted a pull request which lets us use Dshot on this target (not for motors 5-6 though). So hopefully that will also be included in 3.2.0 https://github.com/betaflight/betaflight/pull/2657","keywords":""},{"title":"Board - RUSHCORE7","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/RUSHCORE7","content":"","keywords":""},{"title":"Uarts​","type":1,"pageTitle":"Board - RUSHCORE7","url":"/betaflight.com/docs/wiki/boards/RUSHCORE7#uarts","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPB7\tPB6 2\tUSART2\tPA3\tPA2\tFOR SBUS IN(inverter build in)/PPM 3\tUSART3\tPC11\tPC10 4\tUSART4\tPA1\tPA0\tPA0 FOR RSSI/FPORT/TEL etc 5\tUSART5\tPD2\tPC12\tPC12 TRAMP/smart audio "},{"title":"I2C​","type":1,"pageTitle":"Board - RUSHCORE7","url":"/betaflight.com/docs/wiki/boards/RUSHCORE7#i2c","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tI2C1\tSDA\tPB9 2\tI2C1\tSCL\tPB8\t "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - RUSHCORE7","url":"/betaflight.com/docs/wiki/boards/RUSHCORE7#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPC13\tOn board 2\tBuzzer\tBEE\tPB1\t "},{"title":"VBAT input with 1/10 divider ratio,Current signal input,Analog/digit RSSI input​","type":1,"pageTitle":"Board - RUSHCORE7","url":"/betaflight.com/docs/wiki/boards/RUSHCORE7#vbat-input-with-110-divider-ratiocurrent-signal-inputanalogdigit-rssi-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tADC1\tVBAT\tPC1 2\tADC1\tCURR\tPC3 3\tADC1\tRSSI\tPA0\t "},{"title":"9 Outputs​","type":1,"pageTitle":"Board - RUSHCORE7","url":"/betaflight.com/docs/wiki/boards/RUSHCORE7#9-outputs","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM2_CH3\tPPM\tPA2\tPPM/SBUS 2\tTIM8_CH3\tOUPUT1\tPC8\tDMA 3\tTIM8_CH1\tOUPUT2\tPC6\tDMA 4\tTIM8_CH4\tOUPUT3\tPC9\tDMA 5\tTIM8_CH2\tOUPUT4\tPC7\tDMA 6\tTIM1_CH1\tOUPUT5\tPA8\tDMA 7\tTIM1_CH2\tOUPUT6\tPA9\tDMA 8\tTIM2_CH4\tPWM\tPB11\tDMA LED_STRIP 9\tTIM3_CH3\tPWM\tPB0\tFPV Camera Control(FCAM) "},{"title":"Gyro & ACC ,support ICM20602 and MPU6000​","type":1,"pageTitle":"Board - RUSHCORE7","url":"/betaflight.com/docs/wiki/boards/RUSHCORE7#gyro--acc-support-icm20602-and-mpu6000","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPA5\tMPU6000 &amp; ICM20602 2\tSPI1\tMISO\tPA6\tMPU6000 &amp; ICM20602 3\tSPI1\tMOSI\tPA7\tMPU6000 &amp; ICM20602 4\tSPI1\tCS\tPA4\tMPU6000 &amp; ICM20602 5\tSPI1\tINT\tPC4\tMPU6000 &amp; ICM20602 "},{"title":"OSD MAX7456​","type":1,"pageTitle":"Board - RUSHCORE7","url":"/betaflight.com/docs/wiki/boards/RUSHCORE7#osd-max7456","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI2\tSCK\tPB13 2\tSPI2\tMISO\tPB14 3\tSPI2\tMOSI\tPB15 4\tSPI2\tCS\tPB12\t "},{"title":"16Mbyte flash​","type":1,"pageTitle":"Board - RUSHCORE7","url":"/betaflight.com/docs/wiki/boards/RUSHCORE7#16mbyte-flash","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPB3 2\tSPI3\tMISO\tPB4 3\tSPI3\tMOSI\tPB5 4\tSPI3\tCS\tPC15\t "},{"title":"SWD​","type":1,"pageTitle":"Board - RUSHCORE7","url":"/betaflight.com/docs/wiki/boards/RUSHCORE7#swd","content":"Pin\tFunction\tNotes1\tSWCLK\tPAD 2\tGround\tPAD 3\tSWDIO\tPAD 4\t3V3\tPAD "},{"title":"SIRINFPV","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SIRINFPV","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"SIRINFPV","url":"/betaflight.com/docs/wiki/boards/SIRINFPV#description","content":"The SirinFPV board integrates a Betaflight OSD and VTX. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"SIRINFPV","url":"/betaflight.com/docs/wiki/boards/SIRINFPV#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"SIRINFPV","url":"/betaflight.com/docs/wiki/boards/SIRINFPV#hardware","content":"TODO: (update to match the target) MCU: STM32F3IMU: MPU6050 (SPI)IMU Interrupt: YesBARO: NoVCP: YesHardware UARTS: 3OSD: NoBlackbox: NoPPM/UART Shared: UART2Battery Voltage Sensor: Yes, directly connected, no wiring necessaryIntegrated Voltage Regulator: Yes, unknown voltage limitBrushed Motor Mosfets: YesButtons: 1 - DFU "},{"title":"Features​","type":1,"pageTitle":"SIRINFPV","url":"/betaflight.com/docs/wiki/boards/SIRINFPV#features","content":"TODO: (update to match the target) Current Sensor: Not implementedBlHeli passthrough: No (due to buffered outputs)WS2811 Led Strip: Not implementedTransponder: No "},{"title":"Hardware Designs (if available)​","type":1,"pageTitle":"SIRINFPV","url":"/betaflight.com/docs/wiki/boards/SIRINFPV#hardware-designs-if-available","content":"schematics, etc. "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"SIRINFPV","url":"/betaflight.com/docs/wiki/boards/SIRINFPV#manufacturers-and-distributors","content":"name of manufacturers and distributors for this specific board, variants go below Available here: link to purchase "},{"title":"Designers​","type":1,"pageTitle":"SIRINFPV","url":"/betaflight.com/docs/wiki/boards/SIRINFPV#designers","content":"Savaga "},{"title":"Maintainers​","type":1,"pageTitle":"SIRINFPV","url":"/betaflight.com/docs/wiki/boards/SIRINFPV#maintainers","content":"(add your name here if you help test or contribute code for this board) Savaga "},{"title":"Similar Targets​","type":1,"pageTitle":"SIRINFPV","url":"/betaflight.com/docs/wiki/boards/SIRINFPV#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) OMNIBUS "},{"title":"Variants​","type":1,"pageTitle":"SIRINFPV","url":"/betaflight.com/docs/wiki/boards/SIRINFPV#variants","content":"(add links to boards here that are similar in features or function, but use this target when flashing) "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"SIRINFPV","url":"/betaflight.com/docs/wiki/boards/SIRINFPV#faq--known-issues","content":"(add FAQs, known issues and workarounds specifically related to this board. please link work in progress issues to the related github issue or pull request) "},{"title":"Other Resources​","type":1,"pageTitle":"SIRINFPV","url":"/betaflight.com/docs/wiki/boards/SIRINFPV#other-resources","content":"(add setup guides and instructional material here) Rcgroups Thread: link goes here "},{"title":"SKYZONEF405","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SKYZONEF405","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"SKYZONEF405","url":"/betaflight.com/docs/wiki/boards/SKYZONEF405#description","content":"The SKYZONEF405 has been designed as a versatile flight controller, to allow efficient control of craft with 4, 6 or 8 motors. It is available in 2 variants: "},{"title":"SKYZONEF405_STD​","type":1,"pageTitle":"SKYZONEF405","url":"/betaflight.com/docs/wiki/boards/SKYZONEF405#skyzonef405_std","content":"Standard 30 * 30 mm size  "},{"title":"SKYZONEF405_PDB​","type":1,"pageTitle":"SKYZONEF405","url":"/betaflight.com/docs/wiki/boards/SKYZONEF405#skyzonef405_pdb","content":"30 x 30 mm 'extended corners' design with integrated PDB / current sensing shunt.  "},{"title":"Hardware​","type":1,"pageTitle":"SKYZONEF405","url":"/betaflight.com/docs/wiki/boards/SKYZONEF405#hardware","content":"Type\tDescriptionMCU\tSTM32F405 IMU\tavailable with MPU6000 or ICM-20689 IMU Interrupt\tyes Motor outputs\tup to 8 Barometer\toptional Magnetometer\toptional VCP (supporting joystick emulation)\tyes Hardware serial\t5 (1 with inverter for SBus) Software serial\t2 OSD\tyes Blackbox\t16 MB onboard flash PPM in\tyes Camera control output\tyes LED strip (WS2811) output\tyes Battery voltage sensor\tyes Current sensor\tyes (SKYZONEF405_PDB only) Integrated voltage regulator\tyes Buttons\tboot LEDs\tpower, activity "},{"title":"Features​","type":1,"pageTitle":"SKYZONEF405","url":"/betaflight.com/docs/wiki/boards/SKYZONEF405#features","content":"Plenty of connectivity options, including 5 UARTs, most of them with through-hole solder points, minimising the risk of ripped off solder pads. ESC signal / telemetry solder points next to the corners for motors 1 - 4 (SKYZONEF405_PDB only). "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"SKYZONEF405","url":"/betaflight.com/docs/wiki/boards/SKYZONEF405#manufacturers-and-distributors","content":"skyzone Hobbies "},{"title":"Designers​","type":1,"pageTitle":"SKYZONEF405","url":"/betaflight.com/docs/wiki/boards/SKYZONEF405#designers","content":"skyzone Hobbies "},{"title":"Maintainers​","type":1,"pageTitle":"SKYZONEF405","url":"/betaflight.com/docs/wiki/boards/SKYZONEF405#maintainers","content":"Daniel Zhou "},{"title":"Demon Soul F4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SOULF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Demon Soul F4","url":"/betaflight.com/docs/wiki/boards/SOULF4#description","content":"Derived from REVO, has inverters for SBUS and SPORT, only one full-fledged UART3 broken out. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"Demon Soul F4","url":"/betaflight.com/docs/wiki/boards/SOULF4#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"Demon Soul F4","url":"/betaflight.com/docs/wiki/boards/SOULF4#hardware","content":"MCU: STM32F405IMU: MPU-6000Motor outputs: 4IMU Interrupt:BARO: NoVCP: YesHardware UARTS: UART1 for SBUS with Rx only, UART6 for SPORT, UART3 available for general useOSD: NoBlackbox: SPI 2MBPPM/UART Shared: YesBattery Voltage Sensor: YesIntegrated Voltage Regulator: NoBrushed Motor Mosfets: NoButtons: No "},{"title":"Features​","type":1,"pageTitle":"Demon Soul F4","url":"/betaflight.com/docs/wiki/boards/SOULF4#features","content":"SmartPort telemetry inversion. This board uses the following schematic to perform SmartPort inversion and split the signal into Rx and Tx components:  To set SmartPort up correctly, connect corresponding wire from your receiver to the pad labeled S.Port on the FC, then head into CLI and type: set tlm_inverted = off set tlm_halfduplex = off save  Don't forget to enable SmartPort telemetry feature for UART6 (3rd UART on the Ports tab). "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"Demon Soul F4","url":"/betaflight.com/docs/wiki/boards/SOULF4#manufacturers-and-distributors","content":"http://demonrc.eu/product/demon-soul-f4-high-performance-flight-controller/ "},{"title":"Designers​","type":1,"pageTitle":"Demon Soul F4","url":"/betaflight.com/docs/wiki/boards/SOULF4#designers","content":"Adam Tusk (?) "},{"title":"Maintainers​","type":1,"pageTitle":"Demon Soul F4","url":"/betaflight.com/docs/wiki/boards/SOULF4#maintainers","content":"Andrey Mironov (@DieHertz) "},{"title":"Similar Targets​","type":1,"pageTitle":"Demon Soul F4","url":"/betaflight.com/docs/wiki/boards/SOULF4#similar-targets","content":"REVO F4 "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"Demon Soul F4","url":"/betaflight.com/docs/wiki/boards/SOULF4#faq--known-issues","content":"PB2/BOOT1 pin is not grounded on this board (with gratitude to Dominic Clifton aka hydra for pointing this out!), therefore it may refuse to go into DFU mode even with the boot pads shorted. You can solve this issue by running a small jumper wire from PB2 to GND like shown in the image below.SWD connector pinout: GND SWCLK SWD NRST VDD "},{"title":"Image​","type":1,"pageTitle":"Demon Soul F4","url":"/betaflight.com/docs/wiki/boards/SOULF4#image","content":" "},{"title":"Board - Sparky","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SPARKY","content":"","keywords":""},{"title":"TODO​","type":1,"pageTitle":"Board - Sparky","url":"/betaflight.com/docs/wiki/boards/SPARKY#todo","content":"Display (via Flex port)SoftSerial - though having 3 hardware serial ports makes it a little redundant.Airplane PWM mappings. Voltage and current monitoring (ADC support) Voltage monitoring is possible when enabled via PWM9 pin and current can be monitored via PWM8 pin. The voltage divider and current sensor need to be connected externally. The vbatscale cli parameter need to be adjusted to fit the sensor specification. For more details regarding the sensor hardware you can check here: https://github.com/TauLabs/TauLabs/wiki/User-Guide:-Battery-Configuration Flashing "},{"title":"Via Device Firmware Upload (DFU, USB) - Windows​","type":1,"pageTitle":"Board - Sparky","url":"/betaflight.com/docs/wiki/boards/SPARKY#via-device-firmware-upload-dfu-usb---windows","content":"These instructions are for flashing the Sparky board under Windows using DfuSE. Credits go to Thomas Shue (Full video of the below steps can be found here: https://www.youtube.com/watch?v=I4yHiRVRY94) Required Software: DfuSE Version 3.0.2 (latest version 3.0.4 causes errors): http://code.google.com/p/multipilot32/downloads/detail?name=DfuSe.rarSTM VCP Driver 1.4.0: http://www.st.com/web/en/catalog/tools/PF257938 A binary file is required for DFU, not a .hex file. If one is not included in the release then build one as follows. Unpack DfuSE and the STM VCP Drivers into a folder on your Hardrive Download the latest Sparky release (cleanflight_SPARKY.hex) from: https://github.com/cleanflight/cleanflight/releases and store it on your Hardrive In your DfuSE folder go to BIN and start DfuFileMgr.exe Select: &quot;I want to GENERATE a DFUfile from S19,HEX or BIN files&quot; press OK Press: &quot;S19 or Hex..&quot; Go to the folder where you saved the cleanflight_SPARKY.hex file, select it and press open (you might need to change the filetype in the DfuSE explorer window to &quot;hex Files (*.hex)&quot; to be able to see the file) Press: &quot;Generate&quot; and select the .dfu output file and location If all worked well you should see &quot; Success for 'Image for lternate Setting 00 (ST..)'!&quot;  Put the device into DFU mode by powering on the sparky with the bootloader pins temporarily bridged. The only light that should come on is the blue PWR led. Check the windows device manager to make sure the board is recognized correctly. It should show up as &quot;STM Device in DFU mode&quot; under Universal Serial Bus Controllers If it shows up as &quot;STMicroelectronics Virtual COM&quot; under Ports (COM &amp; LPT) instead then the board is not in DFU mode. Disconnect the board, short the bootloader pins again while connecting the board. If the board shows up as &quot;STM 32 Bootloader&quot; device in the device manager, the drivers need to be updated manually. Select the device in the device manager, press &quot;update drivers&quot;, select &quot;manual update drivers&quot; and choose the location where you extracted the STM VCP Drivers, select &quot;let me choose which driver to install&quot;. You shoud now be able to select either the STM32 Bootloader driver or the STM in DFU mode driver. Select the later and install. Then flash the binary as below. In your DfuSE folder go to BIN and start DfuSeDemo.exe Select the Sparky Board (STM in DFU Mode) from the Available DFU and compatible HID Devices drop down list Press &quot;Choose..&quot; at the bootom of the window and select the .dfu file created in the previous step &quot;File correctly loaded&quot; should appear in the status bar Press &quot;Upgrade&quot; and confirm with &quot;Yes&quot; The status bar will show the upload progress and confirm that the upload is complete at the end  Disconnect and reconnect the board from USB and continue to configure it via the Cleanflight configurator as per normal "},{"title":"Via Device Firmware Upload (DFU, USB) - Mac OS X / Linux​","type":1,"pageTitle":"Board - Sparky","url":"/betaflight.com/docs/wiki/boards/SPARKY#via-device-firmware-upload-dfu-usb---mac-os-x--linux","content":"These instructions are for dfu-util, tested using dfu-util 0.7 for OSX from the OpenTX project. http://www.open-tx.org/2013/07/15/dfu-util-07-for-mac-taranis-flashing-utility/ A binary file is required for DFU, not a .hex file. If one is not included in the release then build one as follows. make TARGET=SPARKY clean make TARGET=SPARKY binary  Put the device into DFU mode by powering on the sparky with the bootloader pins temporarily bridged. The only light that should come on is the blue PWR led. Run 'dfu-util -l' to make sure the device is listed, as below. $ dfu-util -l dfu-util 0.7 Copyright 2005-2008 Weston Schmidt, Harald Welte and OpenMoko Inc. Copyright 2010-2012 Tormod Volden and Stefan Schmidt This program is Free Software and has ABSOLUTELY NO WARRANTY Please report bugs to dfu-util@lists.gnumonks.org Found DFU: [0483:df11] devnum=0, cfg=1, intf=0, alt=0, name=&quot;@Internal Flash /0x08000000/128*0002Kg&quot; Found DFU: [0483:df11] devnum=0, cfg=1, intf=0, alt=1, name=&quot;@Option Bytes /0x1FFFF800/01*016 e&quot;  Then flash the binary as below. dfu-util -D obj/cleanflight_SPARKY.bin --alt 0 -R -s 0x08000000  The output should be similar to this: dfu-util 0.7 Copyright 2005-2008 Weston Schmidt, Harald Welte and OpenMoko Inc. Copyright 2010-2012 Tormod Volden and Stefan Schmidt This program is Free Software and has ABSOLUTELY NO WARRANTY Please report bugs to dfu-util@lists.gnumonks.org Opening DFU capable USB device... ID 0483:df11 Run-time device DFU version 011a Found DFU: [0483:df11] devnum=0, cfg=1, intf=0, alt=0, name=&quot;@Internal Flash /0x08000000/128*0002Kg&quot; Claiming USB DFU Interface... Setting Alternate Setting #0 ... Determining device status: state = dfuERROR, status = 10 dfuERROR, clearing status Determining device status: state = dfuIDLE, status = 0 dfuIDLE, continuing DFU mode device DFU version 011a Device returned transfer size 2048 No valid DFU suffix signature Warning: File has no DFU suffix DfuSe interface name: &quot;Internal Flash &quot; Downloading to address = 0x08000000, size = 76764 ...................................... File downloaded successfully can't detach Resetting USB to switch back to runtime mode  On Linux you might want to take care that the modemmanager isn't trying to use your sparky as modem getting it into bootloader mode while doing so. In doubt you probably want to uninstall it. It could also be good idea to get udev fixed. It looks like teensy did just that -&gt; http://www.pjrc.com/teensy/49-teensy.rules (untested) To make a full chip erase you can use a file created by dd if=/dev/zero of=zero.bin bs=1 count=262144  This can be used by dfu-util. "},{"title":"Via SWD​","type":1,"pageTitle":"Board - Sparky","url":"/betaflight.com/docs/wiki/boards/SPARKY#via-swd","content":"On the bottom of the board there is an SWD header socket onto switch a JST-SH connector can be soldered. Once you have SWD connected you can use the st-link or j-link tools to flash a binary. See Sparky schematic for CONN2 pinouts. "},{"title":"TauLabs bootloader​","type":1,"pageTitle":"Board - Sparky","url":"/betaflight.com/docs/wiki/boards/SPARKY#taulabs-bootloader","content":"Flashing cleanflight will erase the TauLabs bootloader, this is not a problem and can easily be restored using the st flashloader tool. Serial Ports Value\tIdentifier\tRX\tTX\tNotes1\tUSB VCP\tRX (USB)\tTX (USB) 2\tUSART1\tRX / PB7\tTX / PB6\tConn1 / Flexi Port. 3\tUSART2\tRX / PA3\tPWM6 / PA2\tOn RX is on INPUT header. Best port for Serial RX input 4\tUSART3\tRX / PB11\tTX / PB10\tRX/TX is on one end of the 6-pin header above the PWM outputs. USB VCP can be used at the same time as other serial ports (unlike Naze32). All USART ports all support automatic hardware inversion which allows direct connection of serial rx receivers like the FrSky X4RSB - no external inverter needed. Sonar Connections Pin\tSignal\tFunction\tResistorPWM6\tPA2\tTrigger pin\t1K Ohm PWM7\tPB1\tEcho pin\t1K Ohm WARNING: Both PWM6 and PWM7 pins are NOT 5 volt tolerant, so a 1K Ohm resistor is required between the sensor and the FC pins. Battery Monitoring Connections Pin\tSignal\tFunctionPWM9\tPA4\tBattery Voltage PWM8\tPA7\tCurrent Meter "},{"title":"Voltage Monitoring​","type":1,"pageTitle":"Board - Sparky","url":"/betaflight.com/docs/wiki/boards/SPARKY#voltage-monitoring","content":"The Sparky has no battery divider cricuit, PWM9 has an inline 10k resistor which has to be factored into the resistor calculations. The divider circuit should eventally create a voltage between 0v and 3.3v (MAX) at the MCU input pin. WARNING: Double check the output of your voltage divider using a voltmeter before connecting to the FC. "},{"title":"Example Circuit​","type":1,"pageTitle":"Board - Sparky","url":"/betaflight.com/docs/wiki/boards/SPARKY#example-circuit","content":"For a 3Cell battery divider the following circuit works: Battery (+) ---&lt; R1 &gt;--- PWM9 ---&lt; R2 &gt;--- Battery (-) R1 = 8k2 (Grey Red Red)R2 = 2k0 (Red Black Red) This gives a 2.2k for an 11.2v battery. The vbat_scale for this divider should be set around 52. "},{"title":"Current Monitoring​","type":1,"pageTitle":"Board - Sparky","url":"/betaflight.com/docs/wiki/boards/SPARKY#current-monitoring","content":"Connect a current sensor to PWM8/PA7 that gives a range between 0v and 3.3v out (MAX). "},{"title":"SPEDIX F4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SPEDIXF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"SPEDIX F4","url":"/betaflight.com/docs/wiki/boards/SPEDIXF4#description","content":"One of the main considerations while designing the SPEDIX F4 was to provide users the maximum amount of UARTs, as well as motor outputs, while retaining maximum efficiency, a careful choice of pinmap allowed to run 6-8 DSHOT motors off just 2 timers, while breaking out all the 6 UARTs that the STM32F405 provides. Timer design favors running multirotor and fixed wing alike. Plug &amp; play connectivity to SPEDIX and AIKON 4in1 ESCs, "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"SPEDIX F4","url":"/betaflight.com/docs/wiki/boards/SPEDIXF4#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"SPEDIX F4","url":"/betaflight.com/docs/wiki/boards/SPEDIXF4#hardware","content":"MCU: STM32F405IMU: ICM-20602 or MPU-60006 DSHOT motors outputs, 8 by remapping UART6 as M7 &amp; 8, using just 2 timersBMP280 SPI6 hardware UARTs, UART5 with a controllable inverter for SBUS, USART1 with bidirectional inverter for FPORT/SPORTOnboard regulator supports up to 6SDataflash blackboxExternal I2C portJST-SH 10 pin 4in1 ESC plug "},{"title":"Designers​","type":1,"pageTitle":"SPEDIX F4","url":"/betaflight.com/docs/wiki/boards/SPEDIXF4#designers","content":"Kyle Lee (SPEDIX) Andrey Mironov (@DieHertz) "},{"title":"Maintainers​","type":1,"pageTitle":"SPEDIX F4","url":"/betaflight.com/docs/wiki/boards/SPEDIXF4#maintainers","content":"Andrey Mironov (@DieHertz)  "},{"title":"Board - Speedy Bee F7 AIO","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF7AIO","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Board - Speedy Bee F7 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF7AIO#description","content":"The Speedy Bee F7 AIO is an AIO flight controller that integrates PDB, Bluetooth chip, Barometer, 32MB OnBoard Flash (Used for BlackBox), and users can adjust the parameters of the flight controller using the Speedy Bee App with an integrated Bluetooth chip. "},{"title":"Hardware Features​","type":1,"pageTitle":"Board - Speedy Bee F7 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF7AIO#hardware-features","content":"MCU: STM32F722IMU: ICM20689OSD: BetaFlight OSD w/ AT7456E chipBLE Module: inner connect to UART3 for remote setting with SpeedyBee App or other similar appsBlackBox: 32MB onboard dataflashCurrent Sensor: 200A(Scale 102)BetaFlight Camera Control Pad: YesPower input: 3s - 6s LipoPower output: 5V 5(Including BZ+), the maximum load current is 2.5A. 9V 1, the maximum load current is 2.5A.ESC power output: 4 * VCC outputUART: UART Pads * 4(UART1, UART2, UART4, UART5)RSSI input: RSSI input solder padSmartPort: Use Softserial1 to support SmartPortI2C: Used for external Magnetometer, Sonar, etc.Buzzer: BZ+ and BZ- pad used for 5V BuzzerESC signal: S1 - S5LED pin: Used for WS2812 LEDBoot button: Used to easy enter DFU modeBetaFlight Target: SPEEDYBEEF7 "},{"title":"Board - SpeedyBee F4 AIO","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF4AIO-1","content":"","keywords":""},{"title":"Descriptions​","type":1,"pageTitle":"Board - SpeedyBee F4 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF4AIO-1#descriptions","content":"This SpeedyBee F4 AIO board integrates the Bluetooth module, with SpeedyBee App, we can set the FC parameter via mobile device.It runs Betaflight, with Built-in LC-Filter for 5V and 9V, and no pinned-connectors – all direct solder for optimal durability on top side. It has the current sensor and ESC power output. "},{"title":"Hardware Features​","type":1,"pageTitle":"Board - SpeedyBee F4 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF4AIO-1#hardware-features","content":"MCU: STM32F405IMU: MPU6000OSD: BetaFlight OSD w/ AT7456E chipBLE Module: inner connect to UART5 for remote setting with SpeedyBee App or other similar appsBlackBox: 16Mb onboard dataflashCurrent Sensor: 200A(Scale 608)Power input: 3s - 6s LipoPower output: 4.5V 1 , 3.3V 1, 5V 3 , 9V 1Cam And VTX power output: Built-in LC-Filter for 5V and 9VESC power output: 4 * VCC outputUART: UART Pads * 3(UART1, UART3, UART4)UART2 for Receiver: Built in inverter of RX2 for SBUS input through SBUS pad, RX2 pad used for PPM, DSM2, DSMX, IBUSRSSI input: RSSI input solder padI2C: Used for external GPS, Barometer moduleBuzzer: Buz- and 5V pad used for 5V BuzzerESC signal: s1 - s7LED pin: Used for WS2812 LEDBoot button: Used to easy enter DFU mode "},{"title":"All uarts have pad on board​","type":1,"pageTitle":"Board - SpeedyBee F4 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF4AIO-1#all-uarts-have-pad-on-board","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPA10\tPA9\tPB7 FOR SBUS IN(inverter built-in) 2\tUSART2\tPA3\tPA2\tPA3 for SBUS signal through SBUS pad, and normally connect to RX2 pad for other types receiver 3\tUSART3\tPC11\tPC10\tUSE FOR GPS 4\tUSART4\tPA1\tPA0\tPA0 FOR RSSI/FPORT/TEL etc 5\tUSART5\tPD2\tPC12\tPAD "},{"title":"I2C, use for Barometer or compass​","type":1,"pageTitle":"Board - SpeedyBee F4 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF4AIO-1#i2c-use-for-barometer-or-compass","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tI2C1\tSDA\tPB7 2\tI2C1\tSCL\tPB6\t "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - SpeedyBee F4 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF4AIO-1#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPB9 2\tBEEPER\tBEE\tPC13\t "},{"title":"Analog signal input​","type":1,"pageTitle":"Board - SpeedyBee F4 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF4AIO-1#analog-signal-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tADC1\tVBAT\tPC2 2\tADC1\tCURR\tPC1 3\tADC1\tRSSI\tPC3\t "},{"title":"7 PWM Outputs​","type":1,"pageTitle":"Board - SpeedyBee F4 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF4AIO-1#7-pwm-outputs","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM8_CH1\tOUPUT1\tPC6\tDMA1_Stream7 2\tTIM8_CH2\tOUPUT2\tPC7\tDMA2_Stream2 3\tTIM8_CH3\tOUPUT3\tPC8\tDMA2_Stream6 4\tTIM8_CH4\tOUPUT4\tPC9\tDMA2_Stream1 5\tTIM2_CH1\tOUPUT5\tPA15\tDMA2_Stream4 6\tTIM1_CH1\tOUPUT6\tPA8\tDMA1_Stream2 7\tTIM4_CH3\tOUPUT7\tPB8\tDMA1_Stream5 "},{"title":"LED & PPM Input​","type":1,"pageTitle":"Board - SpeedyBee F4 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF4AIO-1#led--ppm-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM5_CH4\tPPM\tPA3 2\tTIM4_CH1\tLED Strip Signal Input\tPB6\t "},{"title":"Gyro & ACC(MPU6000)​","type":1,"pageTitle":"Board - SpeedyBee F4 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF4AIO-1#gyro--accmpu6000","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPA5 2\tSPI1\tMISO\tPA6 3\tSPI1\tMOSI\tPA7 4\tSPI1\tCS\tPB11\t "},{"title":"OSD(AT7456E)​","type":1,"pageTitle":"Board - SpeedyBee F4 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF4AIO-1#osdat7456e","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI2\tSCK\tPB13 2\tSPI2\tMISO\tPB14 3\tSPI2\tMOSI\tPB15 4\tSPI2\tCS\tPB10\t "},{"title":"16Mbyte onboard flash​","type":1,"pageTitle":"Board - SpeedyBee F4 AIO","url":"/betaflight.com/docs/wiki/boards/SPEEDYBEEF4AIO-1#16mbyte-onboard-flash","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPB3 2\tSPI3\tMISO\tPB4 3\tSPI3\tMOSI\tPB5 4\tSPI3\tCS\tPC0\t "},{"title":"Board - Seriously Pro SP Racing F3 (Acro/Deluxe)","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3","content":"","keywords":""},{"title":"Hardware Features​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 (Acro/Deluxe)","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3#hardware-features","content":"No compromise I/O. Use all the features all the time; e.g. Connect your OSD + SmartPort + SBus + GPS + LED Strip + Battery Monitoring + Sonar + 8 motors - all at the same time!On-board high-capacity black box flight log recorder - optimize your tuning and see the results of your setup without guesswork. (Acro and Deluxe)Next-generation STM32 F3 processor with hardware floating point unit for efficient flight calculations and faster ARM-Cortex M4 core.Stackable design - perfect for integrating with OSDs and power distribution boards.16 PWM I/O lines for ESCs, Servos and legacy receivers. 8 available on standard pin headers. 8 via side mounted connectors.Supports SBus, SumH, SumD, Spektrum1024/2048, XBus, PPM, PWM receivers. No external inverters required (built-in).Dedicated output for programmable LEDs - great for orientation, racing and night flying.Dedicated I2C port for connection of OLED display without needing flight battery.Battery monitoring ports for voltage and current.Buzzer port for audible warnings and notifications.Solder pads in addition to connectors for Sonar, PPM, RSSI, Current, GPIO, LED Strip, 3.3v,Developer friendly debugging port (SWD) and boot mode selection, unbrickable bootloader.Symmetrical design for a super tidy wiring.Wire up using using pin headers, JST-SH sockets or solder pads. Use either right-angled or straight pin-headers.Barometer mounted on the bottom of the board for easy wind isolation. "},{"title":"Serial Ports​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 (Acro/Deluxe)","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3#serial-ports","content":"Value\tIdentifier\tRX\tTX\t5v Tolerant\tNotes1\tUSART1\tPA10\tPA9\tYES\tInternally connected to USB port via CP2102 IC. Also available on a USART1 JST connector and on through hole pins. 2\tUSART2\tPA15\tPA14\tYES\tAvailable on USART2 JST port only. 3\tUSART3\tPB11 / IO2_3\tPB10 / IO2_4\tNO\tAvailable on IO_2, USART3 JST port and through hole pins. You cannot use SWD and USART2 at the same time.You may encounter flashing problems if you have something connected to the USART1 RX/TX pins. Power other devices off and/or disconnect them. "},{"title":"Pinouts​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 (Acro/Deluxe)","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3#pinouts","content":"Full pinout details are available in the manual, here: http://seriouslypro.com/spracingf3#manual "},{"title":"IO_1​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 (Acro/Deluxe)","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3#io_1","content":"The 8 pin IO_1 connector has the following pinouts when used in RX_PARALLEL_PWM mode. Pin\tFunction\tNotes1\tGround 2\tVCC_IN\tVoltage as-supplied by BEC. 3\tRC_CH1 4\tRC_CH2 5\tRC_CH5 6\tRC_CH6 7\tLED_STRIP\tEnable feature LED_STRIP 8\tVCC\t3.3v output for LOW CURRENT application only When RX_PPM/RX_SERIAL is used the IO_1 pinout is as follows. Pin\tFunction\tNotes1\tGround 2\tVCC_IN\tVoltage as-supplied by BEC. 3\tRX_PPM\tEnable feature RX_PPM 4\tGPIO 5\tSoftSerial1_RX 6\tSoftSerial1_TX 7\tLED_STRIP\tEnable feature LED_STRIP 8\tVCC\t3.3v output for LOW CURRENT application only "},{"title":"IO_2​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 (Acro/Deluxe)","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3#io_2","content":"The 8 pin IO_2 connector has the following pinouts when used in RX_PARALLEL_PWM mode. Pin\tFunction\tNotes1\tGround 2\tVCC_IN\tVoltage as-supplied by BEC. 3\tRC_CH3 4\tRC_CH4 5\tRC_CH7/SONAR_TRIG 6\tRC_CH8/SONAR_ECHO 7\tADC_1\tCurrent Sensor 8\tADC_2\tRSSI When RX_PPM/RX_SERIAL is used the IO_2 pinout is as follows. Pin\tFunction\tNotes1\tGround 2\tVCC_IN\tVoltage as-supplied by BEC. 3\tRX_SERIAL\tUART3 RX 4 UART3_TX 5\tSONAR_TRIG/SoftSerial2_RX\tEnable feature SONAR/SOFTSERIAL 6\tSONAR_ECHO/SoftSerial2_TX\tEnable feature SONAR/SOFTSERIAL 7\tADC_1\tCurrent Sensor 8\tADC_2\tRSSI "},{"title":"UART1/2/3​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 (Acro/Deluxe)","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3#uart123","content":"Pin\tFunction\tNotes1\tGround 2\tVCC_IN\tVoltage as-supplied by BEC. 3\tTXD 4\tRXD\t "},{"title":"I2C​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 (Acro/Deluxe)","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3#i2c","content":"Pin\tFunction\tNotes1\tGround 2\t5.0v\tVoltage as-supplied by BEC OR USB, always on 3\tSCL 4\tSDA\t "},{"title":"SWD​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 (Acro/Deluxe)","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3#swd","content":"The port cannot be used at the same time as UART2. Pin\tFunction\tNotes1\tGround 2\tNRST 3\tSWDIO 4\tSWDCLK\t Reference:SPRF3 "},{"title":"Board - Seriously Pro SP Racing F3 EVO","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO","content":"","keywords":""},{"title":"Hardware Features​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#hardware-features","content":"Next-generation STM32 F3 processor with hardware floating point unit for efficient flight calculations and faster ARM-Cortex M4 core.MicroSD-Card socket for black box flight log recorder - optimize your tuning and see the results of your setup without guesswork.Race transponder built in - just turn up at a race and have your lap times recorded.Features the latest Accelerometer, Gyro and Mag/Compass and Baro/Altitude sensor technology.Wire up using using pin headers for all major connections for excellent crash-durability. Use either right-angled or straight pin-headers.No compromise I/O. Use all the features all the time; e.g. Connect your USB + OSD + SmartPort + SBus + GPS + LED Strip + Battery Monitoring + 8 motors - all at the same time! (Sonar will be supported in CF 1.14)8 PWM output lines for ESCs and Servos. Arranged for easy wiring on standard pin headers.Supports direct connection of SBus, SumH, SumD, Spektrum1024/2048, XBus receivers. No external inverters required (built-in).Supports direct connection of 3.3v Spektrum Satellite receivers via 3 pin through-hole JST-ZH connector.Dedicated PPM receiver input.3 Serial Ports - NOT shared with the USB socket.Telemetry portMicro USB socket.Dedicated output for programmable LEDs - great for orientation, racing and night flying. (Currently mutually exclusive with the Transponder).Dedicated I2C port for connection of OLED display without needing flight battery.Battery monitoring for voltage and current.RSSI monitoring (analogue or PWM).Buzzer port for audible warnings and notifications.Developer friendly debugging port (SWD) and boot mode selection, unbrickable bootloader.Symmetrical design for a super tidy wiring.JST-SH sockets only for I2C, UART2 and SWD. UART2 also on through-hole pins.Flashing via USB or serial port.Stackable design - perfect for integrating with OSDs and power distribution boards.Standard mounting - 36x36mm with standard 30.5mm mounting holes.LEDs for 3v, 5v and Status for easy diagnostics.Copper-etched Cleanflight logo. "},{"title":"Serial Ports​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#serial-ports","content":"Value\tIdentifier\tRX\tTX\t5v Tolerant\tNotes1\tUSART1\tPA10\tPA9\tYES\t2 through-hole pins. Use for connecting to OSD/GPS/BlueTooth. 2\tUSART2\tPA15\tPA14 / SWCLK\tYES\tJST socket and PPM header. Use to connect to RX. 3\tUSART3\tPB11 / AF7\tPB10 / AF7\tNO\tAvailable on 4 through-hole pins. 3.3V signals only ! Use for GPS, Spektrum Satellite RX, SmartPort Telemetry, HoTT telemetry, etc. You cannot use SWD and USART2 at the same time.When using a Serial RX receiver the TXD (T2) pin cannot be used for telemetry. Use UART3 TXD instead.Software serial is not supportedWindows DFU Flashing requires Zadig (see configurator) "},{"title":"Pinouts​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#pinouts","content":"Full pinout details are available in the manual, here: http://seriouslypro.com/files/SPRacingF3EVO-Manual-latest.pdf "},{"title":"IO_1​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#io_1","content":"The 6 pin IO_1 connector has the following pinouts when used in RX_SERIAL mode. Pin\tFunction\tNotes1\tGround 2\tVCC_IN\tVoltage as-supplied by BEC. 3\tRX_SERIAL\tEnable feature RX_SERIAL 4 5\t+V BATTERY\tVoltage as-supplied by Battery. 6\t-V BATTERY\tVoltage as-supplied by Battery. When RX_PPM is used the IO_1 pinout is as follows. Pin\tFunction\tNotes1\tGround 2\tVCC_IN\tVoltage as-supplied by BEC. 3\tRX_PPM\tEnable feature RX_PPM 4\tTELEMETRY\tEnable feature TELEMETRY 5\t+V BATTERY\tVoltage as-supplied by Battery. 6\t-V BATTERY\tVoltage as-supplied by Battery. "},{"title":"IO_2​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#io_2","content":"When TRANSPONDER is used and the IR solder pads are shorted, the 6 pin IO_2 pinout is as follows. Pin\tFunction\tNotes1\tIR-\tShort leg of the IR LED 2\tIR+\tLong leg of the IR LED 3\tCURRENT\tCurrent Sensor 4\tRSSI\tRSSI (PWM or Analog - select by solder pads) 5\tBUZZER+\t5V Source 6\tBUZZER-\tBuzzer signal When LEDSTRIP is used and the LED solder pads are shorted, the 6 pin IO_2 pinout is as follows. Pin\tFunction\tNotes1 2\tLEDSTRIP\tWS2812 Ledstrip data 3\tCURRENT\tCurrent Sensor 4\tRSSI\tRSSI (PWM or Analog - select by solder pads) 5\tBUZZER+\t5V Source 6\tBUZZER-\tBuzzer signal "},{"title":"UART1​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#uart1","content":"Pin\tFunction\tNotes3\tTXD 4\tRXD\t "},{"title":"UART2/3​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#uart23","content":"Pin\tFunction\tNotes1\tGround 2\tVCC_IN\tVoltage as-supplied by BEC. 3\tTXD 4\tRXD\t "},{"title":"Spektrum Satellite​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#spektrum-satellite","content":"Pin\tFunction\tNotes3\t3.3V 2\tGround 1\tRXD\t "},{"title":"I2C​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#i2c","content":"Pin\tFunction\tNotes1\tGround 2\t5.0v\tVoltage as-supplied by BEC OR USB, always on 3\tSCL\t3.3V signals only 4\tSDA\t3.3V signals only "},{"title":"SWD​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#swd","content":"The port cannot be used at the same time as UART2. Pin\tFunction\tNotes1\tGround 2\tNRST 3\tSWDIO 4\tSWDCLK\t "},{"title":"Hardware​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#hardware","content":"MCU: STM32F3IMU: MPU9250 accelerometer/gyro/compass (SPI)IMU Interrupt: YesBARO: BMP280VCP: YesHardware UARTS: 3OSD: NoBlackbox: MicroSD card slot (SD/SDHC, upto 32GB)PPM/UART Shared: UART2Battery Voltage Sensor: YesIntegrated Voltage Regulator: Yes (3.3V 100mA max. / 5.0V is also supplied when powering via USB)Brushed Motor Mosfets: NoButtons: No "},{"title":"Features​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#features","content":"PPM only: YesRSSI: Yes (Analog/PWM)Buzzer: YesTelemetry port: YesSpektrum Satellite Receivers: Yes (Connector supplied)Current Sensor: YesBlHeli passthrough: YesWS2811 Led Strip: Yes**Transponder: Yes** ** You can only use Led Strip or Transponder, but not both together. "},{"title":"Hardware Designs (if available)​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#hardware-designs-if-available","content":""},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#manufacturers-and-distributors","content":"Seriously Pro Available here: Seriously Pro Shop "},{"title":"Designers​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#designers","content":"Hardware design by Dominic Clifton. "},{"title":"Maintainers​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#maintainers","content":"Cleanflight firmware and GUI tools are maintained by Dominic Clifton. Betaflight firmware and GUI tools are maintained by Boris B. "},{"title":"Similar Targets​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) "},{"title":"Variants​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#variants","content":"(add links to boards here that are similar in features or function, but use this target when flashing) "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#faq--known-issues","content":"Softserial is disabled for this target in bf 3.1.7 but works in nightly build 3.2.0 as of today (2017-05-13).DSHot does not work out of the box, due to DMA limitations. The solution to enable DSHOT on this board is to remap motor 4 to motor pin 5 (A06), this can be done through CLI as follows: resource MOTOR 5 NONE resource MOTOR 4 A06 save Note that, if you wish to use SDCARD Blackbox logging with DSHOT, you will have to disable SDCARD DMA. This will negatively impact SDCARD logging rate. As of BF 3.2.0-RC3 there is no other solution. This can be done as follows: set sdcard_dma = OFF save Source: https://github.com/betaflight/betaflight/issues/2162 "},{"title":"Other Resources​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#other-resources","content":"Manual: SPRacingF3EVO PDF manual Rcgroups Thread: SPRacingF3EVO flight controller - CHEAP! F3/SDCard Socket/Race Transponder "},{"title":"Image​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 EVO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3EVO#image","content":" "},{"title":"Board - Seriously Pro SP Racing F3 MINI","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI","content":"","keywords":""},{"title":"Hardware Features​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#hardware-features","content":"Next-generation STM32 F3 processor with hardware floating point unit for efficient flight calculations and faster ARM-Cortex M4 core.MicroSD-Card socket for black box flight log recorder - optimize your tuning and see the results of your setup without guesswork.Race transponder built in - just turn up at a race and have your lap times recorded.Onboard regulator (BEC) for powering the FC, receiver and small servos.Features the latest Accelerometer, Gyro and Mag/Compass and Baro/Altitude sensor technology.2 Buttons for binding Spektrum Satellite receivers, activating USB bootloader mode or resetting the configuration. More future uses coming!Wire up using using pin headers for all major connections for excellent crash-durability. Use either right-angled or straight pin-headers.No compromise I/O. Use all the features all the time; e.g. Connect your USB + OSD + SmartPort + SBus + GPS + LED Strip + Battery Monitoring + Sonar + 8 motors - all at the same time!8 PWM output lines for ESCs and Servos. Arranged for easy wiring on standard pin headers.Supports direct connection of SBus, SumH, SumD, Spektrum1024/2048, XBus receivers. No external inverters required (built-in).Supports direct connection of 3.3v Spektrum Satellite receivers via 3 pin through-hole JST-ZH connector.Supports direct connection of 1-5 channel Parallel PWM receivers *1.Dedicated PPM receiver input.3 Serial Ports - NOT shared with the USB socket.Telemetry port (via pin header or USART2 JST-SH socket).Micro USB socket.Dedicated output for programmable LEDs - great for orientation, racing and night flying. (Currently mutually exclusive with the Transponder).Dedicated I2C port for connection of OLED display without needing flight battery.Battery monitoring for voltage and current.RSSI monitoring (analog or PWM).Buzzer port for audible warnings and notifications.Developer friendly debugging port (SWD) and boot mode selection, unbrickable bootloader.Symmetrical design for a super tidy wiring.JST-SH sockets only for I2C/UART2 and SWD.Barometer mounted on the bottom of the board for easy wind isolation.Flashing via USB or serial port.Stackable design - perfect for integrating with OSDs and power distribution boards.Modular design - the core of the board measures 36x22mm but has the ability to be mounted using standard 30.5mm mounting holes.LEDs for 3v, 5v and Status for easy diagnostics.Copper-etched Cleanflight and #RB logos. *1 - PWM receiver must use 3.3v outputs. Works only in multirotor mode. Uses motor outputs 5-8 and PPM pin as RC 1-5 inputs. "},{"title":"Pinouts​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#pinouts","content":"Full pinout details are available in the manual, here: http://seriouslypro.com/spracingf3mini#manual Main Section​ The main section is the square part of the board with the 30.5mm mounting holes. "},{"title":"Left Side IO (Front to Back)​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#left-side-io-front-to-back","content":"Pin\tFunction\tNotes1\tRX3\tSquare Pad 2\tTX3\tRound Pad 3\tPWM8 / SoftSerial 1 RX / RC4\tSquare Pad 4\tPWM7 / SoftSerial 1 TX / RC3\tSquare Pad To the left of both PWM7 and PWM8 there are 2 more pins - left to right: GND, VIN, PWM7/8. To the right of RX3 there are two more though holes. Use RX3 and the 2 holes to attach a JST-ZH connector for a Spektrum Satellite 3v receiver. "},{"title":"Right Side IO (Front to Back)​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#right-side-io-front-to-back","content":"Pin\tFunction\tNotes1\tRSSI\tRound Pad / PWM 2\tCURRENT\tRound Pad 3\tPWM6 / RC2\tSquare Pad 4\tPWM5 / RC1\tSquare Pad 5\tT1\tRound Pad 6\tR1\tRound Pad 7\t5v\tRound Pad 8\tGND\tRound Pad 9\t5v\tRound Pad 10\tPPM\tSquare Pad To the right of both PWM5 and PWM6 there are 2 more pins - left to right: PWM5/6, VIN, GND. Pins 8/9/10 allow a standard 3 pin cable to be attached for PPM receivers. Pins 8/7/6 allow a standard 3 pin cable to be attached for SBus/SerialRX receivers (5v). "},{"title":"Top IO (Left to Right)​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#top-io-left-to-right","content":"Pin\tFunction\tNotes1\tBATTERY -\tRound Pad 2\tBATTERY +\tSquare Pad 25V Absolute Maximum. No reverse polarity protection! "},{"title":"Bottom Left IO (Left to Right)​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#bottom-left-io-left-to-right","content":"For Telemetry / LED / IR. A - Bottom Row (Towards board edge) B - Top Row (Towards board center) Pin\tRow\tFunction\tNotes1\tA\tTELEMETRY / T2\tSquare Pad 2\tA\tGND\tRound Pad 3\tB\tVIN\tSquare Pad (Suface) 4\tB\tLED_STRIP/IR\tRound Pad "},{"title":"Bottom Right IO (Left to Right)​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#bottom-right-io-left-to-right","content":"For Buzzer. A - Bottom Row (Towards board edge) B - Top Row (Towards board center) Pin\tRow\tFunction\tNotes1\tA\tBUZZER -\tRound Pad 2\tA\tGND\tSquare Pad 3\tB\t5v\tRound Pad (For Buzzer) 4\tB\t3.3v\tSquare Pad (Surface) "},{"title":"Bottom Center IO (Left to Right)​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#bottom-center-io-left-to-right","content":"For ESC / Servos. A - Bottom Row (Towards board edge) B - Middle Row C - Top Row (Towards board center) Pin\tRow\tFunction\tNotes1\tA\tGND\tRound Pad 2\tA\tGND\tRound Pad 3\tA\tGND\tRound Pad 4\tA\tGND\tRound Pad 1\tB\tVIN\tRound Pad 2\tB\tVIN\tRound Pad 3\tB\tVIN\tRound Pad 4\tB\tVIN\tRound Pad 1\tC\tPWM1\tSquare Pad (Suface) 2\tC\tPWM2\tRound Pad 3\tC\tPWM3\tRound Pad 4\tC\tPWM4\tRound Pad "},{"title":"Bottom IO (Underside, left to right)​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#bottom-io-underside-left-to-right","content":"Pad\tFunction\tNotesTRIG\tSONAR TRIGGER\tAlso Switch B, 3.3v signal only ECHO\tSONAR ECHO\tAlso Switch A, 3.3v signal only "},{"title":"UART2​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#uart2","content":"Pin\tFunction\tNotes1\tGround 2\t5v\tVoltage as-supplied by BEC OR USB, always on 3\tTXD 4\tRXD\t "},{"title":"I2C​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#i2c","content":"Pin\tFunction\tNotes1\tGround 2\t5v\tVoltage as-supplied by BEC OR USB, always on 3\tSCL 4\tSDA\t "},{"title":"SWD​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#swd","content":"The port cannot be used at the same time as UART2. Pin\tFunction\tNotes1\tGround 2\tNRST 3\tSWDIO 4\tSWDCLK\t "},{"title":"Transponder Section.​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#transponder-section","content":"The transponder section of the board is where up to two IR leds (supplied) can be connected for the race timing transponder system. It can left attached, stacked above or below the main board or detached and connected via a cable, as appropriate. The transponder section has a small enable jumper which must be bridged with solder before using the IR transponder feature. Bottom Left and Bottom Right Transponder IO (Left to Right)​ For LED / IR. The 4 pins arranged in a square by the mounting holes of the transponder board have the same pinouts on the left and right hand sides of the board. They are the same so that a 4 pin cable can be attached either side when relocating the transponder section. A - Bottom Row (Towards board edge) B - Top Row (Towards board center) Pin\tRow\tFunction\tNotes1\tA\tN/C\tSquare Pad 2\tA\tGND\tRound Pad 3\tB\t5v\tRound Pad 4\tB\tLED_STRIP/IR\tRound Pad "},{"title":"Bottom Left and Bottom Right IR​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#bottom-left-and-bottom-right-ir","content":"There are two, two pin holes on the left and right of the transponder section either side of some surface mount components. They are for connecting up to two IR leds. A - Bottom Row (Towards board edge) B - Top Row (Towards board center) Pin\tRow\tFunction\tNotes1\tA\tIR+\tRound Pad 2\tB\tIR-\tSquare Pad Note: The silk screen on early boards have IR+ and IR- transposed. Connect as above regardless of silkscreen. "},{"title":"Switch Section.​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 MINI","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3MINI#switch-section","content":"On the bottom of the switch section there are 4 pads. The switch section can be relocated and reconnected to the main section via a 4 way cable. Pad On Switch Section\tPad on main sectionA\tECHO B\tTRIG GND\tAny GND 3v3\tAny 3.3v "},{"title":"Board - Seriously Pro SP Racing F3 NEO","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3NEO","content":"","keywords":""},{"title":"Hardware Features​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 NEO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3NEO#hardware-features","content":"The NEO comprises of two boards. NEO FC/PDB - FC/PDB/AMPERAGE MONITORING/LC FILTER/12V BEC/5V BEC/ETCNEO OSD/VTX - OSD/VTX/BUTTON/ANTENNA/ETC The height of the combined stack is just 15mm high. "},{"title":"NEO FC/PDB board.​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 NEO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3NEO#neo-fcpdb-board","content":"Next-generation STM32 F3 processor with hardware floating point unit for efficient flight calculations and faster ARM-Cortex M4 core. Features the latest accelerometer and gyro technology (ICM20602) via SPI connection. MicroSD-Card socket for black box flight log recorder - optimize your tuning and see the results of your setup without guesswork. Built in amperage/current monitoring sensor, 110A. Telemetry support (FrSky, SmartPort/S.PORT, IBus, etc). 5 Serial ports. e.g Receiver + Telemetry + 3 Spare - None shared with the USB. Built-in LC-Filter for clearer video. Race transponder built in - just turn up at a race and have your lap times recorded. Boot button for easy DFU/USB flashing. Wire up using solder pads for ESC connections and cable or header pins for receiver. 6 PWM output lines for ESCs and Servos. 4 are arranged for easy wiring on each corner of the board. (The 4 main outputs support DSHOT *). Supports direct connection of SBus, SumH, SumD, Spektrum1024/2048, XBus/IBus receivers. No external inverters required (built-in). Supports direct connection of 3.3v Spektrum Satellite receivers via 3 pin through-hole JST-ZH connector. Supports PPM receivers. Micro USB socket. Dedicated output for programmable LEDs - great for orientation, racing and night flying. Dedicated I2C/UART3/UART5 port for connection of OLED display, GPS receivers, external MAG/BARO without needing flight battery. Voltage monitoring for battery, 12v and 5v supplies. Analog RSSI monitoring. Buzzer port for audible warnings and notifications. Developer friendly debugging port (SWD) unbrickable bootloader. Symmetrical design for a super tidy wiring, just 4 wires per corner to each ESC and you're done! JST-SH sockets only for I2C/UART3/UART4 and SWD. UART1 available on through-hole stacking pins and broken out on OSD/VTX board. 12 position connector for stacking the OSD/VTX board. (SPI/CS1/CS2/VSYNC/HSYNC/VTX ENABLE/BUTTON), Through-hole solder pads AND solder-less connections for receiver via PicoBlade connector. Through-hole solder pads for Transponder IR LED. Solder pads for RSSI. Solder pads for LED Strip. Solder pads for ESC power. (2 by each corner) Solder pads for ESC signal and ground. (2 by each corner). Solder pads for 2x additional PWM outputs (e.g. for pan / tilt servos). Direct connection for XT60 socket. (Through hole). Flashing via USB or serial port. Standard 30.5mm mounting holes, board fits in most 36x36x mounting spaces. Board is 45x50mm with corner cutouts to allow frame clearance. LEDs for 3v (Blue), 5v (Green) and 12v (Yellow) supplies. Two status LEDs (Red, White) for easy diagnostics/flight mode indications. Supplied with cable for no-solder connection to FrSky XSR receivers. Supplied with receiver cable for no-solder connection to most other receviers. Supplied with JST-ZH socket for connection to 3.3v spektrum satellite receivers. Cleanflight logo. SPRacing logo. Note: DSHOT support is coming to a future Cleanflight release. "},{"title":"NEO VTX/OSD board.​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 NEO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3NEO#neo-vtxosd-board","content":"OSD with customisable layout.VTX with 25/200mw output.Button for changing VTX channel/band/rf power/power/etc.Configurable via cleanflight configurator, via the NEO USB socket.U.FL socket for antenna connection, gold plated.Display of amperage/current, voltage, RSSI, flight modes, on duration, armed duration, 5v, 12v, callsign, motors, etc.Available without VTX module, so users can use external VTX or alternative compatible VTX modules.VTX can be turned off remotely (e.g via transmitter). Great for team races or in-pit configuration.Solder pads for 5V, 5V switched, 3.3V, 12V, Video IN/OUT, Audio, GND.Breakout 2.54mm pitch though-holes for connecting to UART1 on the NEO - e.g. for Bluetooth/Wifi modules.Picoplade connector for no-solder connection to external VTX, with 12V/VIDEO/AUDIO/5V switched/GND signals.2.54mm Through hole pads for connecting Buzzer (controlled via NEO).2.54mm Through hole pads for connecting 12V devices.Though hole pads for JST-ZH sockets (supplied) connecting CAMERA an EXTERNAL VTX boards.Solder pads for PCB side-mount antenna JACK connection (when not using U.FL connector).CAMERA and EXTERNAL VTX sockets power selectable between 5V and 12V.Hole for accessing the boot button (via paperclip) on the NEO below it.Board is 36x36mm with standard 30.5mm mounting holes.12 position connector for stacking above the NEO.Illuminating white LED.Blue LED for 3v3 power.Cleanflight logos.SPRacing logo. "},{"title":"Pinouts​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 NEO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3NEO#pinouts","content":"Full pinout details are available in the manual, here: http://seriouslypro.com/files/SPRacingF3NEO-Manual-latest.pdf "},{"title":"Spektrum Satellite​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 NEO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3NEO#spektrum-satellite","content":"Pin\tFunction\tNotes3\t3.3V 2\tGround 1\tRXD\t "},{"title":"Receiver​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 NEO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3NEO#receiver","content":"Pin\tFunction\tNotes1\tUART2 RX\tSerial RX or PPM 2\tUART2 TX\tFrSky Telemetry 3\tUART5 TX\tSmartPort/S.PORT telemetry 4\t5.0v\tVoltage as-supplied by BEC or USB, always on 5\tGround\t "},{"title":"I2C/UART3/UART4​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 NEO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3NEO#i2cuart3uart4","content":"Pin\tFunction\tNotes1\tGround 2\t5.0v\tVoltage as-supplied by BEC OR USB, always on 3\tSCL\t3.3V signals only 4\tSDA\t3.3V signals only 5\tUART3 RXD\t3.3V signals only 6\tUART3 TXD\t3.3V signals only 7\tUART4 RXD\t3.3V or 5V signals OK 8\tUART4 TXD\t3.3V or 5V signals OK "},{"title":"SWD​","type":1,"pageTitle":"Board - Seriously Pro SP Racing F3 NEO","url":"/betaflight.com/docs/wiki/boards/SPRACINGF3NEO#swd","content":"Pin\tFunction\tNotes1\tGround 2\tNRST 3\tSWDIO 4\tSWDCLK\t "},{"title":"SPRACINGF7DUAL","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SPRACINGF7DUAL","content":"SPRACINGF7DUAL The SPRacingF7DUAL is the first Betaflight/Cleanflight FC to support SIMULTANEOUS DUAL GYRO and PID AUDIO features. It features an F7 (STM32F722) CPU, two 32Khz capable GYROS, AUDIO-OUTPUT, FC/PDB, OSD, SD-Card, Transponder, LED Strip, 8 Motor Outputs, 5 Serial Ports (no inverters needed, F7 does it), Camera OSD Control, Current Sensor, 4in1 ESC pads, BMP280 Barometer, 5V BEC, PWM/Analog RSSI, Edge-press boot buttons and is soft-mountable with supplied grommets if required. Basically, it's the best FC out there! Read more here: http://seriouslypro.com/spracingf7dual Buy one here: http://shop.seriouslypro.com/catalogsearch/result/?q=spracingf7dual Also available is a stacking board which supports RTC6705-SPI and TBS Unify VTX modules. Designed by Dominic Clifton, the guy that started Cleanflight!","keywords":""},{"title":"Board - Seriously Pro SP Racing H7 EXTREME","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7EXTREME","content":"","keywords":""},{"title":"Background​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 EXTREME","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7EXTREME#background","content":"The SPRacingH7EXTREME FC is the first STM32H750 based FC to ship with Betaflight. It is unique among Cleanflight/Betaflight based FCs as it is the first to use the External Storage (EXST) build system which allows a bootloader to load the flight-controller firmware from either external flash or via SD card. See the EXST documentation for more details on the EXST system. "},{"title":"Hardware Features​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 EXTREME","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7EXTREME#hardware-features","content":"The SPRacingH7EXTREME can be stand-alone or be turned into a stack that allows fitting of TBS Unify Pro or FX578-2-SPI VTX modules. SPRacingH7EXTREME FC/PDB - https://shop.seriouslypro.com/sp-racing-h7-extremeSPRacingStackingVTX - https://shop.seriouslypro.com/sp-racing-f7-vtx-board-without-vtx-module "},{"title":"SPRacingH7EXTREME FC/PDB board.​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 EXTREME","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7EXTREME#spracingh7extreme-fcpdb-board","content":" STM32H750 CPU, 400MHz inc FPU128MByte 1GBit NAND flash via QuadSPI2x Low-noise ICM20602 accelerometer/gyro with dedicated VREG (connected via SPI)BMP388 Barometer - bottom mounted for wind isolation (I2C + interrupt)OSD with customisable layout, profiles and configuration menu systemOn-board MEMS microphonePID-Audio with CPU audio out and audio mixerMicroSD card slot (SD/SDHC, upto 32GB) connected via 4-Bit SDIODurable 1.6mm thick 6-layer copper gold-plated PCB with cutouts for battery wiresCurrent sensor/Amperage meter (110A)2-6S BEC 5V Switching regulator, 1ATVS protection diodeDedicated 500mA VREG for gyros with extra filter capacitorsSecond 500mA VREG for CPU, and other peripheralsTransponder circuitry (LED and code available separately)Buzzer circuitryRSSI Analog and PWM circuit12 motor outputs (4 by motor pads, 4 in the middle, and 4 on stacking connector)1x SPI breakout onto stacking connector6 Serial Ports (5x TX+RX + 1x TX only bi-directional)3 LEDs for 5V, 3V and STATUS (Green, Blue, Red)37x37mm PCB with 30.5mm mounting hole pattern4mm mounting holes for soft-mount grommets and M3 boltsFPV stack weight of FC/PDB + OSD/VTX ~16 gramsMicroUSB socket for configuration and ESC programmingBootable from SD Card or External flash.Supplied with 4x soft-mount grommets.Optionally supplied with 2x Audio/Video cables. (Camera Input, VTX Output)Optionally supplied with 2x Audio/Video PicoBlade connectors. (for Camera Input, for VTX Output)Optional receiver cables for FrSky XSR receivers and 3-pin style receivers available4x pairs of solder pads for ESC Signal/GND connections (Bi-Directional DSHOT compatible)4x pairs of solder pads for ESC Power/GND connections4x special solder pads with through-holes for Camera In + Camera OSD4x special solder pads with through-holes for Audio+Video Out (VTX)1x solder pad for PWM RSSI1x solder pad for LED Strip1x solder pad for DAC out1x solder pad for ADC in (for 4in1 current sensor output, etc)2x solder pads for 5V/GND power2x large solder pads with cut-outs for battery wires2x large solder pads for 4in1 ESC power connection1x 2pin though-holes for pin headers for UART4 RX/TX1x 2pin though-holes for pin headers for BUZZER1x 2pin though-holes for pin headers for 5V/GND1x 2pin though-holes for pin headers for IR Transponder LED1x 4pin though-holes for pin headers for Receiver (GND/5V/UART1 RX+TX)1x 8pin bottom mounted, JST-SH socket for GND/5V/I2C/UART3/UART8 (IO port, e.g. for external GPS module)1x 6pin bottom mounted, PicoBlade receiver socket for UART1(PPM/SerialRX)/UART2 TX(Telemetry)/RSSI/GND/5V1x 4pin top mounted JST-SH socket for SWD debugging1x 4pin top mounted JST-SH socket for UART5 RX+TX/GPIO/GND1x 12pin stacking connector (SPI, UART8, DSHOT/PWM 9-12/TIM3-CH1-4, 5V BEC, 3.3V, etc)1x Side-press BOOT button (top mounted)1x Side-press VTX/Settings button (top mounted)1x Mixer control (top mounted, near Camera input/output)2x 5V/BATTERY voltage selectors for Camera and VTX outputs1x Analog/Digital RSSI selectorCleanflight and Betaflight logos - they're on there, you just have to find themSP Racing logo2x Additional easter eggs! "},{"title":"SPRacingStackingVTX board.​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 EXTREME","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7EXTREME#spracingstackingvtx-board","content":"  Fits Optional RTC6705 VTX 25/200mw output (SPI modules only)Fits Optional TBS Unify Pro VTX with no-wire SmartAudio connectivityFits Optional FrSKy XM+ Full Range Diversity ReceiverRemote VTX ON/OFF circuitry (for RTC6705 modules)36.8x36.8mm PCB with 30.5mm mounting hole patternSupplied with 4x soft-mount grommets.Supplied with very low profile stacking I/O connectors (2x 2pin male + 2x 2pin female)Supplied with very low profile stacking A/V connectors (1x 4pin male + 1x 4pin female)Cleanflight logosSPRacing logo1x U.FL socket for antenna connection, gold plated. (For RTC6705 module)1x set of solder pad for edge mount coax jack socket. (For RTC6705 module)1x 4pin though-holes for pin headers for UART1 Receiver/Bluetooth/etc (RX/TX/5V/GND)1x 4pin though-holes for pin headers for UART4 Bluetooth/Wifi/GPS/etc (RX/TX/5V/GND)4x 2pin though-holes for stacking onto H7 EXTREME (5V/GND/UART 4 RX+TX)1x 2pin though-holes for pin headers for BUZZER Out1x 3pin though-holes for pin headers for JST-ZH camera socket1x 6pin though-holes for pin headers for IR in/out + Buzzer In1x 3pin though-holes for JST-ZH connector for CAMERA-through connections1x set of SOIC-8 209mil pads for user-installable SPI Flash Chip (e.g. 25Q064A2x SmartAudio enable jumpers (UART8 TX when using TBS Unify) "},{"title":"Connection Diagrams​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 EXTREME","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7EXTREME#connection-diagrams","content":"Connection diagrams can be found on the website, here: http://seriouslypro.com/spracingh7extreme#diagrams "},{"title":"Manual​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 EXTREME","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7EXTREME#manual","content":"The manual can be downloaded from the website, here: http://seriouslypro.com/files/SPRacingH7EXTREME-Manual-latest.pdf "},{"title":"Board - Seriously Pro SP Racing H7 NANO","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7NANO","content":"","keywords":""},{"title":"Background​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 NANO","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7NANO#background","content":"The SPRacingH7NANO FC is the second STM32H750 based FC to ship with Betaflight. Like the SPRacingH7EXTREME before it, it too uses the External Storage (EXST) build system which allows a bootloader to load the flight-controller firmware from external flash. See the EXST documentation for more details on the EXST system. "},{"title":"Hardware Features​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 NANO","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7NANO#hardware-features","content":"The SPRacingH7NANO is available in two versions, the NANO-S (solder-pads only) or NANO-E (with connectors for 4in1 ESC + RX + IO) "},{"title":"SPRacingH7NANO FC board.​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 NANO","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7NANO#spracingh7nano-fc-board","content":" STM32H750 CPU, 400MHz inc FPU 128MByte 1GBit NAND flash via QuadSPI Low-noise ICM20602 accelerometer/gyro with dedicated filtering(connected via SPI) 1.0mm thick 4-layer copper gold-plated PCB 2-6S BEC 5V Switching regulator, 1A TVS protection diode (NANO-E: Fitted, NANO-S: optional extra) Transponder circuitry (LED and code available separately) Buzzer circuitry RSSI Analog input 8 motor outputs (NANO-S: 8 on pads, NANO-E: 4 on 4in1 connector, 4 on pads) 1x Dual SPI + GPIO breakout onto stacking connector (NANO-E only) 6 Serial Ports (5x TX+RX + 1x TX only bi-directional) 3 LEDs for 5V, 3V and STATUS (Green, Blue, Red) 26.5x26.5mm PCB with 20mm mounting hole pattern 4mm mounting holes for soft-mount grommets and M3 bolts MicroUSB socket for configuration and ESC programming Bootable from External flash. Supplied with 4x soft-mount grommets. Optionally supplied with 2x JST-SH 8-way IO cables. (NANO-E only) Optionally supplied with 2x PicoBlade 6-way IO cables. (NANO-E only) 1x solder pad for LED Strip 2x solder pad for DAC out (NANO-S only) 2x solder pad for ADC in (for 4in1 current sensor output, etc) 2x solder pads for UART8 RX/TX 2x solder pads for 5V/GND power 2x solder pads for Buzzer 2x solder pads for TVS Diode 1x Row of pads for Motor 1-4 + Battery wires (NANO-S only) 1x Row of pads for RX connections (UART1 RX+TX, RSSI, 5V, GND, IR) (NANO-S only) 2x Rows of pads for additional IO (UART2,UART5,IR,LED-Strip,etc) 2x 8pin JST-SH socket for GND/5V/I2C/UART4/UART5 (IO port, e.g. for external GPS module) 2x 8pin JST-SH socket for GND/5V/SWD/UART3 (IO port, e.g. for debugging, etc) 1x 6pin PicoBlade socket for RX (NANO-E only) 1x 6pin PicoBlade socket for 4in1 ESC (NANO-E only) 1x solder pads for BOOT 1x solder pads for BIND Cleanflight and Betaflight logos - they're on there, you just have to find them SP Racing logo 1x Additional easter egg! "},{"title":"Connection Diagrams​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 NANO","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7NANO#connection-diagrams","content":"Connection diagrams can be found on the website, here: http://seriouslypro.com/spracingh7nano#diagrams "},{"title":"Manual​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 NANO","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7NANO#manual","content":"The manual can be downloaded from the website, here: http://seriouslypro.com/files/SPRacingH7NANO-Manual-latest.pdf "},{"title":"Board - Seriously Pro SP Racing H7 ZERO","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7ZERO","content":"","keywords":""},{"title":"Background​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 ZERO","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7ZERO#background","content":"The SPRacingH7ZERO FC is the third STM32H750 based FC to ship with Betaflight. Like the SPRacingH7NANO and SPRacingH7EXTREME before it, it too uses the External Storage (EXST) build system which allows a bootloader to load the flight-controller firmware from external flash. See the EXST documentation for more details on the EXST system. "},{"title":"Design Goals​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 ZERO","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7ZERO#design-goals","content":"Easy connection for 2 * 4in1 ESCs for 8 motor outputs.No premium hardware features like Microphone, Audio Mixer, Transponder Circuit, Current Sensor or Dual Gyro - See SPRacingH7EXTREMECheaper than SPRacingH7EXTREME.No integrated PDB.Single sided PCB. "},{"title":"Hardware Features​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 ZERO","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7ZERO#hardware-features","content":" STM32H750 CPU, 400MHz inc FPU128MByte 1GBit NAND flash via QuadSPILow-noise ICM20602 accelerometer/gyro (connected via SPI)BMP388 Barometer (I2C + interrupt)OSD with customisable layout, profiles and configuration menu systemMicroSD card slot (SD/SDHC, upto 32GB) connected via 4-Bit SDIO2-6S BEC 5V Switching regulator, 1ATVS protection diodeDedicated 500mA VREG for sensors and SD card, with extra filter capacitorsSecond 500mA VREG for CPU, and other peripheralsBuzzer circuitry8 motor outputs. All in a row, with signal ground connections.RSSI Analog input.6 Serial Ports (5x TX+RX + 1x TX only bi-directional)3 LEDs for 5V, 3V and STATUS (Green, Blue, Red)37x37mm PCB with 30.5mm mounting hole pattern4mm mounting holes for soft-mount grommets and M3 boltsMicroUSB socket for configuration and ESC programmingBootable from SD Card or External flash.Supplied with 4x soft-mount grommets.Optionally supplied with 2x Audio/Video cables. (Camera Input, VTX Output)1x Side-press BOOT button (top mounted)1x Side-press VTX/Settings button (top mounted)2x 5V/BATTERY voltage selectors for Camera and VTX outputsCleanflight and Betaflight logosSP Racing logoAdditional easter-eggs! "},{"title":"Connection Diagrams​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 ZERO","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7ZERO#connection-diagrams","content":"Connection diagrams can be found on the website, here: http://seriouslypro.com/spracingh7zero#diagrams "},{"title":"Manual​","type":1,"pageTitle":"Board - Seriously Pro SP Racing H7 ZERO","url":"/betaflight.com/docs/wiki/boards/SPRACINGH7ZERO#manual","content":"The manual can be downloaded from the website, here: http://seriouslypro.com/files/SPRacingH7ZERO-Manual-latest.pdf "},{"title":"Boards - STM32Discovery","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/STM32DISCOVERY","content":"","keywords":""},{"title":"Targets​","type":1,"pageTitle":"Boards - STM32Discovery","url":"/betaflight.com/docs/wiki/boards/STM32DISCOVERY#targets","content":"Target\tMCU\tDocumentationSTM32F3DISCOVERY\tSTM32F303VC\tUser Manual | MCU Datasheet STM32F4DISCOVERY\tSTM32F407VG\tUser Manual | MCU Datasheet STM32F411DISCOVERY\tSTM32F411VE\tUser Manual | MCU Datasheet Hardware specifications, peripherals, pinouts and all other data can be found in above User Manuals. Rest of this document is instead going to focus on setup of the board for Betaflight and example assemblies/wirings. Note: Not all pin-outs seem to be listed in the User Manual, double-checking in MCU Datasheet is recommended. "},{"title":"Pins​","type":1,"pageTitle":"Boards - STM32Discovery","url":"/betaflight.com/docs/wiki/boards/STM32DISCOVERY#pins","content":"Function\tF3\tF4\tF411PPM Receiver\tPB8\tPB9\tPB8 Motor 1\tPA8\tPB1\tPD12 Motor 2\tPC6\tPB0\tPB1 Motor 3\tPC7\tPA2\tPB0 Motor 4\tPC8\tPA3\tPA2 Motor 5\t/\tPA10\tPA3 Motor 6\t/\tPA8\tPA10 Beeper\tPD12\t/\tPA8 USART1 TX\tPA9\tPB6\tPA15 USART1 RX\tPA10\tPB7\tPA10 USART2 TX\tPD5\tPA2\tPA2 USART2 RX\tPD6\tPA3\tPA3 USART3 TX\tPB10\tPB10\t/ USART3 RX\tPB11\tPB11\t/ USART4 TX\tPC10\tPA0\t/ USART4 RX\tPC11\tPA1\t/ USART5 TX\tPC12\t/\t/ USART5 RX\tPD2\t/\t/ USART6 TX\t/\tPC6\tPC6 USART6 RX\t/\tPC7\tPC7 HCSR04 Trigger\tPB0\t/\t/ HCSR04 Echo\tPB1\t/\t/ Note: / means not supported or configured. "},{"title":"Setup​","type":1,"pageTitle":"Boards - STM32Discovery","url":"/betaflight.com/docs/wiki/boards/STM32DISCOVERY#setup","content":""},{"title":"Flash​","type":1,"pageTitle":"Boards - STM32Discovery","url":"/betaflight.com/docs/wiki/boards/STM32DISCOVERY#flash","content":"Connect board using ST-LINK labelled port (usually Mini-B USB connector) Linux &amp; Mac: Install stlink$ st-flash --format ihex write program.hex Windows: Install and use STM32 ST-LINK utility "},{"title":"Connect Configurator​","type":1,"pageTitle":"Boards - STM32Discovery","url":"/betaflight.com/docs/wiki/boards/STM32DISCOVERY#connect-configurator","content":"Connect board using USER labelled port (usually Micro-AB or secondary Mini-B USB connector) "},{"title":"Example Assembly​","type":1,"pageTitle":"Boards - STM32Discovery","url":"/betaflight.com/docs/wiki/boards/STM32DISCOVERY#example-assembly","content":"As an example of full assembly, feriCopterV1 is completely custom built drone as part of a student project. Includes simple 3D printed frame, parts list, assembly and pin connection instructions, providing a great entry-point to anyone who wants to assemble their own little drone cheaply and learn more about how everything works. It is based on STM32F3DISCOVERY target, required changes in Configurator are noted below. Also refer to Target Pins table for other Discovery boards. Additional non-pin changes are noted below. Configurator: Setting\tValueMixer\tQuad X 1234 Receiver\tPPM RX input "},{"title":"F411 Changes​","type":1,"pageTitle":"Boards - STM32Discovery","url":"/betaflight.com/docs/wiki/boards/STM32DISCOVERY#f411-changes","content":"Inversed Front/Back (Front is Back and Back is Front).Frame requires minor incision to fit different jumper location. "},{"title":"SYNERGYF4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/SYNERGYF4","content":"","keywords":""},{"title":"Specifications​","type":1,"pageTitle":"SYNERGYF4","url":"/betaflight.com/docs/wiki/boards/SYNERGYF4#specifications","content":"Processor: STM32F405 (F4 processor)Gyro: MPU6000Loop: 8k/8kInput: 2-6S (Max 28V)Regulator: Filtered 5V 3AReceiver: 3.3V or 5V selectable. Inverted and non-inverted selectable receiver inputConnectors: 8 pin JST-SH main connector. 2x 3 pin JST-SH Addressable LED connectors (mirrored output)Telemetry: Current Sensor and ESC Telemetry InputBlackbox: 128Mbit flash (16Megabytes)Motor: 4 pwm motor outputs with D-Shot and Multishot supportMounting: M3 30.5x30.5mm holes with soft mountingDimensions: 37x37mmWeight: 7.5gCamera: Filtered 5V output "},{"title":"Features​","type":1,"pageTitle":"SYNERGYF4","url":"/betaflight.com/docs/wiki/boards/SYNERGYF4#features","content":"Direct mounting for Unify Pro (5V), Unify Nano, Unify Pro Nano32 (Nano VTXs use adapter board included)Direct mounting for TBS CrossFire Nano RX, TBS CrossFire Nano Diversity RX, FR Sky XM+, and FR Sky R9m Mini (R9m Mini Adapter Included From Tiny's LEDs)Header holes for direct receiver installation.Built in camera control via single wire (analog only)Built in BetaFlight OSDBuzzer: Dedicated pads for 5V (100mA max) buzzersOnboard addressable LEDBuilt in Tiny’s LEDs RealPit VTX power switch (selectable between ON-OFF-Remote)Receiver can be powered on via USB (VTX stays off)SmartAudio: Selectable between internal (FC controlled) and external (receiver). "},{"title":"UART info​","type":1,"pageTitle":"SYNERGYF4","url":"/betaflight.com/docs/wiki/boards/SYNERGYF4#uart-info","content":"UART1: Receiver (FrSky, Spektrum, Crossfire, etc)UART3: SmartAudio (or any other desired output if SmartAudio is selected to pull signal from the “external” pad, designated RX SA on the top of the FC)UART6: ESC Telemetry (if applicable). "},{"title":"Top​","type":1,"pageTitle":"SYNERGYF4","url":"/betaflight.com/docs/wiki/boards/SYNERGYF4#top","content":" "},{"title":"Bottom​","type":1,"pageTitle":"SYNERGYF4","url":"/betaflight.com/docs/wiki/boards/SYNERGYF4#bottom","content":" "},{"title":"Photo​","type":1,"pageTitle":"SYNERGYF4","url":"/betaflight.com/docs/wiki/boards/SYNERGYF4#photo","content":" *** The flight controller does not include a receiver or VTX. The picture is for illustration only! "},{"title":"Installation​","type":1,"pageTitle":"SYNERGYF4","url":"/betaflight.com/docs/wiki/boards/SYNERGYF4#installation","content":"Video: https://www.facebook.com/kevinslee106/videos/10156338569116234 "},{"title":"Where to get​","type":1,"pageTitle":"SYNERGYF4","url":"/betaflight.com/docs/wiki/boards/SYNERGYF4#where-to-get","content":"WhitenoiseFPV: https://whitenoisefpv.com/products/synergyf4Tiny's LEDs: https://tinysleds.com/products/synergy-f4-flight-controller "},{"title":"TinyBee F3","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/TINYBEE-F3","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"TinyBee F3","url":"/betaflight.com/docs/wiki/boards/TINYBEE-F3#description","content":""},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"TinyBee F3","url":"/betaflight.com/docs/wiki/boards/TINYBEE-F3#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"TinyBee F3","url":"/betaflight.com/docs/wiki/boards/TINYBEE-F3#hardware","content":"MCU: F3IMU: MPU6500BARO: BMP280VCP:Hardware UARTS: 1, 2, 3Battery Voltage Sensor:Brushed Motor Mosfets: "},{"title":"Features​","type":1,"pageTitle":"TinyBee F3","url":"/betaflight.com/docs/wiki/boards/TINYBEE-F3#features","content":""},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"TinyBee F3","url":"/betaflight.com/docs/wiki/boards/TINYBEE-F3#manufacturers-and-distributors","content":"RCTimer: http://rctimer.com/product-1731.html "},{"title":"Designers​","type":1,"pageTitle":"TinyBee F3","url":"/betaflight.com/docs/wiki/boards/TINYBEE-F3#designers","content":"RCTimer: http://rctimer.com/ "},{"title":"Maintainers​","type":1,"pageTitle":"TinyBee F3","url":"/betaflight.com/docs/wiki/boards/TINYBEE-F3#maintainers","content":"Hardware: Eric LiangSoftware: Michael Keller "},{"title":"Similar Targets​","type":1,"pageTitle":"TinyBee F3","url":"/betaflight.com/docs/wiki/boards/TINYBEE-F3#similar-targets","content":"SPRACINGF3MINI "},{"title":"TMOTOR F4","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/TMOTORF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"TMOTOR F4","url":"/betaflight.com/docs/wiki/boards/TMOTORF4#description","content":"One of the main considerations while designing the TMOTOR F4 was to provide users the maximum amount of UARTs, as well as motor outputs, while retaining maximum efficiency, a careful choice of pinmap allowed to run 6-8 DSHOT motors off just 2 timers, while breaking out all the 6 UARTs that the STM32F405 provides. Plug &amp; play connectivity with most popular 4in1 ESCs. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"TMOTOR F4","url":"/betaflight.com/docs/wiki/boards/TMOTORF4#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"TMOTOR F4","url":"/betaflight.com/docs/wiki/boards/TMOTORF4#hardware","content":"MCU: STM32F405IMU: ICM-20602 or MPU-60006 DSHOT motors outputs, 8 by remapping UART6 as M7 &amp; 8, using just 2 timersBMP280 SPI6 hardware UARTs, UART5 with a controllable inverter for SBUS, USART1 with bidirectional inverter for FPORT/SPORTOnboard regulator supports up to 6SDataflash blackboxExternal I2C portJST-SH 10 pin 4in1 ESC plug "},{"title":"Designers & Maintainers​","type":1,"pageTitle":"TMOTOR F4","url":"/betaflight.com/docs/wiki/boards/TMOTORF4#designers--maintainers","content":"T-Motor FPV (https://www.facebook.com/rctigermotor/)  "},{"title":"TMOTOR F7","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/TMOTORF7","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"TMOTOR F7","url":"/betaflight.com/docs/wiki/boards/TMOTORF7#description","content":"An evolution of TMOTOR F4, solves the inability to run bidir DSHOT on first 4 motors without remapping. Plug &amp; play connectivity with most popular 4in1 ESCs. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"TMOTOR F7","url":"/betaflight.com/docs/wiki/boards/TMOTORF7#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"TMOTOR F7","url":"/betaflight.com/docs/wiki/boards/TMOTORF7#hardware","content":"MCU: STM32F722IMU: MPU-60006 DSHOT motors outputsBMP280 SPI5 hardware UARTsOnboard regulator supports up to 6SDataflash blackboxExternal I2C portJST-SH 10 pin 4in1 ESC plug "},{"title":"Designers & Maintainers​","type":1,"pageTitle":"TMOTOR F7","url":"/betaflight.com/docs/wiki/boards/TMOTORF7#designers--maintainers","content":"T-Motor FPV (https://www.facebook.com/rctigermotor/)  "},{"title":"Board - TRANSTEC F411 Series","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/TRANSTECF411","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"Board - TRANSTEC F411 Series","url":"/betaflight.com/docs/wiki/boards/TRANSTECF411#description","content":"TransTECF411 was designed for easily use. There will have three version of TRANSTECF411 30x30(Normal) / 20x20(Normal) / 20x20(HD). "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"Board - TRANSTEC F411 Series","url":"/betaflight.com/docs/wiki/boards/TRANSTECF411#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"Board - TRANSTEC F411 Series","url":"/betaflight.com/docs/wiki/boards/TRANSTECF411#hardware","content":"MCU: STM32F411IMU: MPU-60004 DSHOT motors outputs2 hardware UARTsOnboard regulator supports up to 6S(30x30) 4S(20x20)5V 3A BECJST-SH 6 pin 4in1 ESC plugJST-SH 5 pin plug for Cam and Vtx (Normal Version)GH-1.25 6 pin HD plug for Dji FPV System (HD Version) "},{"title":"Feature​","type":1,"pageTitle":"Board - TRANSTEC F411 Series","url":"/betaflight.com/docs/wiki/boards/TRANSTECF411#feature","content":"Easy connect for peripherals(CAM/Vtx/Receiver)Built in inverter for SBUSRubber damping ringVtx power switch support "},{"title":"Designers & Maintainers​","type":1,"pageTitle":"Board - TRANSTEC F411 Series","url":"/betaflight.com/docs/wiki/boards/TRANSTECF411#designers--maintainers","content":"TransTEC Hobby (https://www.transtechobby.com) TransTEC Facebook (https://www.facebook.com/TransTechobby/) TransTEC Instagram (https://www.instagram.com/transtechobby/)  "},{"title":"NAME","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4#description","content":"F4chip+ OSD + 16MB FlashBeautifully simple STM32F4 based flightcontroller. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4#hardware","content":"MCU: STM32F4IMU: MPU6000 (SPI)IMU Interrupt: YesBARO: NO BAROVCP: YesHardware UARTS: 3OSD: YesBlackbox: Yes(128Mbit on board flash)PPM/UART Shared: UART1Battery Voltage Sensor: 10:1Integrated Voltage Regulator: SBEC 5V 3AButtons: Button for putting board into DFU mode "},{"title":"Features​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4#features","content":"SBUS/PPM input (Pinheaders)SBUS port (via inverter), this pin is also shared with the PPM pin.4PWM output5v 3a SBECWS2811 Led StripOn-Board OSD (controlled by Betaflight, FC over SPI bus)Current Sensor InterfaceButton for putting board into DFU mode "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4#manufacturers-and-distributors","content":""},{"title":"Designers​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4#maintainers","content":"VGOODDHF4 "},{"title":"Similar Targets​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4#similar-targets","content":""},{"title":"Variants​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4#variants","content":"99% identical to OmnibusF4Differences: with a 16MB flash on board for blackbox "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4#faq--known-issues","content":""},{"title":"Other Resources​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4#other-resources","content":"Setup Guide: Rcgroups Thread: "},{"title":"Image​","type":1,"pageTitle":"NAME","url":"/betaflight.com/docs/wiki/boards/VGOODDHF4#image","content":""},{"title":"Board - VIVAF4AIO","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/VIVAF4AIO","content":"","keywords":""},{"title":"All uarts have pad on board​","type":1,"pageTitle":"Board - VIVAF4AIO","url":"/betaflight.com/docs/wiki/boards/VIVAF4AIO#all-uarts-have-pad-on-board","content":"Value\tIdentifier\tRX\tTX\tNotes1\tUSART1\tPB7\tPA9\tPB7 FOR SBUS IN(inverter build in) 2\tUSART2\tPA3\tPA2\tPAD USE FOR TRAMP/smart audio 3\tUSART3\tPB11\tPB10\tUSE FOR GPS 4\tUSART4\tPA1\tPA0\tPA0 FOR RSSI/FPORT/TEL etc 5\tUSART5\tPD2\tPC12\tPAD "},{"title":"I2C with GPS port together, also utilised for BARO or compass etc​","type":1,"pageTitle":"Board - VIVAF4AIO","url":"/betaflight.com/docs/wiki/boards/VIVAF4AIO#i2c-with-gps-port-together-also-utilised-for-baro-or-compass-etc","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tI2C1\tSDA\tPB9\twith GPS outlet 2\tI2C1\tSCL\tPB8\twith GPS outlet "},{"title":"Buzzer/LED output​","type":1,"pageTitle":"Board - VIVAF4AIO","url":"/betaflight.com/docs/wiki/boards/VIVAF4AIO#buzzerled-output","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tLED0\tLED\tPC14 2\tBEEPER\tBEE\tPC13\t "},{"title":"6 Outputs, 1 PPM input​","type":1,"pageTitle":"Board - VIVAF4AIO","url":"/betaflight.com/docs/wiki/boards/VIVAF4AIO#6-outputs-1-ppm-input","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tTIM12_CH2\tPPM\tPB15\tPPM 2\tTIM3_CH3\tOUPUT1\tPB0\tDMA1_Stream7 3\tTIM8_CH1\tOUPUT2\tPC6\tDMA2_Stream2 4\tTIM1_CH3\tOUPUT3\tPA10\tDMA2_Stream6 5\tTIM1_CH1\tOUPUT4\tPA8\tDMA2_Stream1 6\tTIM8_CH3\tOUPUT5\tPC8\tDMA2_Stream4 7\tTIM3_CH4\tOUPUT6\tPB1\tDMA1_Stream2 10\tTIM4_CH1\tPWM\tPB6\tDMA1_Stream0 LED_STRIP 11\tTIM2_CH1\tPWM\tPA5\tFPV Camera Control(FCAM) "},{"title":"Gyro & ACC ,suppose ICM20602/MPU6000​","type":1,"pageTitle":"Board - VIVAF4AIO","url":"/betaflight.com/docs/wiki/boards/VIVAF4AIO#gyro--acc-suppose-icm20602mpu6000","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI1\tSCK\tPB3 2\tSPI1\tMISO\tPA6 3\tSPI1\tMOSI\tPA7 4\tSPI1\tCS\tPC4\t "},{"title":"OSD MAX7456​","type":1,"pageTitle":"Board - VIVAF4AIO","url":"/betaflight.com/docs/wiki/boards/VIVAF4AIO#osd-max7456","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI3\tSCK\tPC10 2\tSPI3\tMISO\tPC11 3\tSPI3\tMOSI\tPB5 4\tSPI3\tCS\tPA15\t "},{"title":"16Mbyte flash​","type":1,"pageTitle":"Board - VIVAF4AIO","url":"/betaflight.com/docs/wiki/boards/VIVAF4AIO#16mbyte-flash","content":"Value\tIdentifier\tfunction\tpin\tNotes1\tSPI2\tSCK\tPB13 2\tSPI2\tMISO\tPB14 3\tSPI2\tMOSI\tPC3 4\tSPI2\tCS\tPB12\t "},{"title":"YuPiF7 by Copperyu","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/YUPIF7","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"YuPiF7 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF7#description","content":"The YuPiF7 is a 36x36mm (30.5x30.5 mounting holes) board with an F7 microcontroller. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"YuPiF7 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF7#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"YuPiF7 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF7#hardware","content":"MCU: STM32F722IMU: ICM-20689 (SPI)IMU Interrupt: YesBARO: NoVCP: YesHardware UARTS: 3 with an inverter for SBusBlackbox: SD card slotPPM : A specific pad is available for PPM inputBattery Voltage Sensor: Yes, directly connected, no wiring neededCurrent sensor : Yes, directly connected, no wiring neededIntegrated Voltage Regulator: the board can be powered by your lipo (2S to 6S)Brushed Motor Mosfets: NoMotor outputs : can drive up to 6 motorsButtons: Boot0 to enter in DFU mode "},{"title":"Features​","type":1,"pageTitle":"YuPiF7 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF7#features","content":"BlHeli passthrough: YesWS2811 Led Strip: Yes (on motor output Pin 5)Transponder: No "},{"title":"Designers and Maintainers​","type":1,"pageTitle":"YuPiF7 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF7#designers-and-maintainers","content":"RcNet and FaduF "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"YuPiF7 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF7#manufacturers-and-distributors","content":"This board is available in the shop FR Website : http://www.yupifc.com "},{"title":"Hardware Designs (if available)​","type":1,"pageTitle":"YuPiF7 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF7#hardware-designs-if-available","content":"The hardware is currently closed source. "},{"title":"YuPiF4 by Copperyu","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/YUPIF4","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"YuPiF4 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF4#description","content":"The YuPiF4 is a 36x36mm (30.5x30.5 mounting holes) board with an F4 microcontroller. "},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"YuPiF4 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF4#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"YuPiF4 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF4#hardware","content":"MCU: STM32F405RTG6IMU: ICM-20689 (SPI)IMU Interrupt: YesBARO: NoVCP: YesHardware UARTS: 3 with an inverter for SBusBlackbox: SD card slotPPM : A specific pad is available for PPM inputBattery Voltage Sensor: Yes, directly connected, no wiring necessaryIntegrated Voltage Regulator: the board can be powered by your lipo (2S to 6S)Brushed Motor Mosfets: NoMotor outputs : can drive up to 6 motorsButtons: Boot0 to enter in DFU mode "},{"title":"Features​","type":1,"pageTitle":"YuPiF4 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF4#features","content":"Current Sensor: Not implementedBlHeli passthrough: YesWS2811 Led Strip: Yes (on motor output Pin 5)Transponder: No "},{"title":"Designers and Maintainers​","type":1,"pageTitle":"YuPiF4 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF4#designers-and-maintainers","content":"RcNet and FaduF "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"YuPiF4 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF4#manufacturers-and-distributors","content":"This board is currently in the prototype phase. Only small batches were manufactured for testing. Website : http://www.yupif4.com/ "},{"title":"Hardware Designs (if available)​","type":1,"pageTitle":"YuPiF4 by Copperyu","url":"/betaflight.com/docs/wiki/boards/YUPIF4#hardware-designs-if-available","content":"The hardware is currently closed source.  "},{"title":"Adjustments Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/adjustments-tab","content":"Adjustments Tab","keywords":""},{"title":"ZCOREF3","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/boards/ZCOREF3","content":"","keywords":""},{"title":"Description​","type":1,"pageTitle":"ZCOREF3","url":"/betaflight.com/docs/wiki/boards/ZCOREF3#description","content":""},{"title":"MCU, Sensors and Features​","type":1,"pageTitle":"ZCOREF3","url":"/betaflight.com/docs/wiki/boards/ZCOREF3#mcu-sensors-and-features","content":""},{"title":"Hardware​","type":1,"pageTitle":"ZCOREF3","url":"/betaflight.com/docs/wiki/boards/ZCOREF3#hardware","content":"MCU:IMU:IMU Interrupt:BARO:VCP:Hardware UARTS:OSD:Blackbox:PPM/UART Shared:Battery Voltage Sensor:Integrated Voltage Regulator:Brushed Motor Mosfets:Buttons: None. Solder BOOT pads "},{"title":"Features​","type":1,"pageTitle":"ZCOREF3","url":"/betaflight.com/docs/wiki/boards/ZCOREF3#features","content":"(add list of features) "},{"title":"Manufacturers and Distributors​","type":1,"pageTitle":"ZCOREF3","url":"/betaflight.com/docs/wiki/boards/ZCOREF3#manufacturers-and-distributors","content":"(add links to Manufacturers and Distributors) "},{"title":"Designers​","type":1,"pageTitle":"ZCOREF3","url":"/betaflight.com/docs/wiki/boards/ZCOREF3#designers","content":""},{"title":"Maintainers​","type":1,"pageTitle":"ZCOREF3","url":"/betaflight.com/docs/wiki/boards/ZCOREF3#maintainers","content":"(add your name here if you help test or contribute code for this board) "},{"title":"Similar Targets​","type":1,"pageTitle":"ZCOREF3","url":"/betaflight.com/docs/wiki/boards/ZCOREF3#similar-targets","content":"(add links board descriptions here that are similar in features or function, but have a separate target) "},{"title":"Variants​","type":1,"pageTitle":"ZCOREF3","url":"/betaflight.com/docs/wiki/boards/ZCOREF3#variants","content":"Differences: "},{"title":"FAQ & Known Issues​","type":1,"pageTitle":"ZCOREF3","url":"/betaflight.com/docs/wiki/boards/ZCOREF3#faq--known-issues","content":""},{"title":"Other Resources​","type":1,"pageTitle":"ZCOREF3","url":"/betaflight.com/docs/wiki/boards/ZCOREF3#other-resources","content":"Setup Guides: "},{"title":"Image​","type":1,"pageTitle":"ZCOREF3","url":"/betaflight.com/docs/wiki/boards/ZCOREF3#image","content":""},{"title":"Configuration Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/configuration-tab","content":"","keywords":""},{"title":"System Configuration​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#system-configuration","content":""},{"title":"Gyro Update Frequency​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#gyro-update-frequency","content":"The rate at which the gyro is sampled. In most recent versions of Betaflight, it will default and lock to the frequency that the gyro runs best at (8KHz for the MPU6000, 3.2KHz for the BMI270, etc...) "},{"title":"PID Loop Frequency​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#pid-loop-frequency","content":"The frequency at which the PID loop computations are done. This is basically all of the math that goes into actual flight control. When using dshot300 you may see the PID loop reset to 4K if you manually attempt to set 8K, dshot300 does not send updates fast enough to make use of 8K PID loop so 4K is selected to save CPU time. Recommended PID loop and motor output combinations, With RPM filtering enabled, are 2K/dshot150, 4K/dshot300 and 8K/dshot600. Exception is when using the BMI270 gyro in which case the rates are 3.2K/1.6K info Usually it's best to have it set to the same frequency as the gyro, or a half of it if you are using a slower MCU and a high gyro frequency (8KHz gyro would be 4KHz PID loop on an F411) "},{"title":"Sensor Toggles​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#sensor-toggles","content":"Accelerometer - Enable or disable the accelerometer, which is used for self-stabilization featuresBarometer - Enable or disable the barometer. If present, it's used for altitude measurementMagnetometer - Enable or disable the magnetometer. If present, it's used to tell the real world orientation "},{"title":"Accelerometer Trim​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#accelerometer-trim","content":"Trim the accelerometer to compensate for any errors in the accelerometer readings. Only visible when the accelerometer option is enabled "},{"title":"Camera​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#camera","content":"Used to set the camera angle to be used for things like FPV angle mix mode and artificial horizon. Only visible when the accelerometer option is enabled "},{"title":"Arming​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#arming","content":"Set a maximum angle that the craft can be tilted at while arming, to prevent arming the craft when it's in an unsafe position info Unless you specifically need a failsafe like this, setting it to 180 degrees will disable the check, and you can arm the craft in any position, useful for flip over after crash "},{"title":"Board and Sensor Alignment​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#board-and-sensor-alignment","content":"Allows you to virtually offset the FC and other sensors if they're mounted in a non-standard way tip If the 3d model preview is not responding correctly to real world movement, it's most likely because the board alignment is incorrect. Use the alignment options to fix it. Go in increments of 90 degrees (45 if it's a diagonally mounted FC) and test the preview after each change "},{"title":"Personalization​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#personalization","content":"Allows you to set a craft and pilot name to be shown in the OSD, blackbox logs and diff/dump outputs "},{"title":"DShot Beacon Configuration​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#dshot-beacon-configuration","content":"Running a high frequency signal on the motor output to make the motors resonate and make a sound. A good alternative for an actual buzzer, but it cannot be activated in flight (as the motors are spinning), isn't as loud, and can't be used for a long time as the motors may draw excessive current and overheat Beacon Tone - You can pick from 5 different tonesRX_LOST - Enable or disable the tone when the RX signal is lostRX_SET - Enable or disable the tone when the BEEPER mode is on "},{"title":"Other features​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#other-features","content":"A list of various different features that can be enabled or disabled, and may or may not be present on your flight controller INFLIGHT_ACC_CAL - Allows you to calibrate the accelerometer in flightSERVO_TILT - Enables the CAMSTAB mode, which will stabilize the camera angle by up to two servos set in a gimbal configurationSOFTSERIAL - Emulates a serial port on a different output, or splits an RX-TX UART pair. This allows you to use it as an extra UART  info Softserial is useful for FCs that don't have enough UARTs to support all of the features you want to use. However, there are some limitations. It runs at a lower baud rate. Works well at 9600, but not so well on higher ratesConsumes more CPU resources, and puts an extra load on the CPU. So not ideal for lower performance MCUsIt's not ideal to run a receiver on a softserial port due to duty cycle limitationsSome ports may work better than others. LED_STRIP usually works all the time, but you may need to experiment with othersAnd lastly, you cannot have more than two softserial ports active at the same time SONAR - Enables sonar support, but this feature is not recommended for use nowadaysLED_STRIP - Enables the LED strip feature, which allows you to control WS2812B RGB LEDsDISPLAY - Enables the display feature, which allows you to use a small OLED display to show various information. If enabled and no display is connected, the FC will take about 10s longer to boot. It's not recommended to use nowadaysOSD - Enables the OSD, you can configure it in the OSD tab that will appear when you enable thisBLACKBOX - Enables the blackbox feature, which allows you to record flight data to a flash chip on the FC, or an SD card (if present). You can configure it in the Blackbox tab that will appear when you enable thisCHANNEL_FORWARDING - Allows you to forward an aux channel to a motor/servo outputTRANSPONDER - Enables the race transponder feature if your hardware supports itAIRMODE - Permanently enable airmode, which will give the craft more control authority in the air when at 0 throttle "},{"title":"GPS​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#gps","content":"Enable and set up the GPS settings: Protocol: NMEA - A binary protocol for GPS dataUBLOX - A text protocol for GPS data, more customisableMSP - GPS using the MultiWii Serial Protocol Auto Baud - Automatically detect the baud rate of the GPS Auto Config - Automatically configure the GPS Set Home Point Once - If enabled, the home point will be set only once, when the GPS is first acquired. If disabled, the home point will be updated every time the craft is armed "},{"title":"Beeper Configuration​","type":1,"pageTitle":"Configuration Tab","url":"/betaflight.com/docs/wiki/configurator/configuration-tab#beeper-configuration","content":"Toggle different triggers when the beeper should be active GYRO_CALIBRATED - Will beep when the gyroscope has been calibrated RX_LOST - Will beep when the RX signal is lost (repeats until the signal is regained)RX_LOST_LANDING - Will beep when the RX signal is lost, and the craft is in a landing phaseDISARMING - Will beep when the craft is disarmedARMING - Will beep when the craft is armedARMING_GPS_FIX - Will beep when the craft is armed, and the GPS has a fixBAT_CRIT_LOW - Will beep when the battery is critically low according to the value set in the Battery tab (repeats)BAT_LOW - Will beep when the battery is low according to the value set in the Battery tab (repeats)GPS_STATUS - Will beep x amount of times depending on the amount of satellites foundRX_SET - Will beep when the BEEPER mode is onACC_CALIBRATION - Will beep when the inflight accelerometer calibration is successfulACC_CALIBRATION_FAIL - Will beep when the inflight accelerometer calibration failsREADY_BEEP - Will beep when the craft has a GPS fix and is ready to be armedDISARM_REPEAT - Will beep when the sticks are in a disarm positionARMED - Will beep when the craft is armed and motors are not spinning (repeats until throttle is raised, or the craft is disarmed)SYSTEM_INIT - Will beep when the FC has been powered onUSB - Will beep when the FC is powered by USB, disable this to prevent beeping when configuring on the benchBLACKBOX_ERASE - Will beep when the blackbox has been erasedCRASH_FLIP - Will beep when the crash flip mode is activeCAM_CONNECTION_OPEN - Will beep when the 5 key OSD menu is openedCAM_CONNECTION_CLOSE - Will beep when the 5 key OSD menu is closedRC_SMOOTHING_INIT_FAIL - Will beep when the craft is armed and RC smoothing has not been initialized "},{"title":"CLI Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/cli-tab","content":"","keywords":""},{"title":"Accessing the CLI with a terminal emulator​","type":1,"pageTitle":"CLI Tab","url":"/betaflight.com/docs/wiki/configurator/cli-tab#accessing-the-cli-with-a-terminal-emulator","content":"The CLI can be accessed via the CLI Tab in GUI tool or via a terminal emulator connected to the CLI serial port. Connect your terminal emulator to the CLI serial port (which, by default, is the same as the MSP serial port)Use the baudrate specified by msp_baudrate (115200 by default).Send a # character. "},{"title":"CLI Usage​","type":1,"pageTitle":"CLI Tab","url":"/betaflight.com/docs/wiki/configurator/cli-tab#cli-usage","content":"To save your settings type in 'save', saving will reboot the flight controller. To exit the CLI without saving power off the flight controller or type in 'exit'. To see a list of other commands type in 'help' and press return. To dump your configuration (including the current profile), use the 'dump' command. See the other documentation sections for details of the cli commands and settings that are available. "},{"title":"Backup via CLI​","type":1,"pageTitle":"CLI Tab","url":"/betaflight.com/docs/wiki/configurator/cli-tab#backup-via-cli","content":"info Backup and Restore is now supported in the Presets Tab. This method is quicker and does not reqire CLI usage Disconnect main power, connect to cli via USB/FTDI. diff backup using CLI​ This method shows all user-modified settings but avoids saving values left as default or values that are part of the board targets Note that diff only shows the current Rate and PID profiles, whereas diff all will show all profiles that have been changed diff all  This data should be sufficient to replicate the quad configuration on a new or erased flight controller board. Use the save to file function to create a backup dump using cli​ Note that the dump command will output every setting and their current values. Many of these will be firmware defaults and are not needed to backup quad configuration changes rateprofile 0 profile 0 dump  dump profiles using cli if you use them​ profile 1 dump profile profile 2 dump profile  dump rate profiles using cli if you use them​ rateprofile 1 dump rates rateprofile 2 dump rates  copy screen output to a file and save it. "},{"title":"Restore via CLI​","type":1,"pageTitle":"CLI Tab","url":"/betaflight.com/docs/wiki/configurator/cli-tab#restore-via-cli","content":"info Backup and Restore is now supported in the Presets Tab. This method is quicker and does not reqire CLI usage Use the cli defaults command first. When restoring from a backup it is a good idea to do a dump of the latest defaults so you know what has changed - if you do this each time a firmware release is created you will be able to see the cli changes between firmware versions. For instance, in December 2014 the default GPS navigation PIDs changed. If you blindly restore your backup you would not benefit from these new defaults. Use the CLI and send all the output from the saved backup commands. Do not send the file too fast, if you do the FC might not be able to keep up when using USART adapters (including built in ones) since there is no hardware serial flow control. You may find you have to copy/paste a few lines at a time. Repeat the backup process again! Compare the two backups to make sure you are happy with your restored settings. Re-apply any new defaults as desired. "},{"title":"CLI Command Reference​","type":1,"pageTitle":"CLI Tab","url":"/betaflight.com/docs/wiki/configurator/cli-tab#cli-command-reference","content":"Click on a command to jump to the relevant documentation page. Command\tDescription1wire &lt;esc&gt;\tpassthrough 1wire to the specified ESC adjrange\tshow/set adjustment ranges settings aux\tshow/set aux settings mmix\tdesign custom motor mixer smix\tdesign custom servo mixer color\tconfigure colors defaults\treset to defaults and reboot dump\tprint configurable settings in a pastable form dma\tconfigure direct memory access channel exit feature\tlist or -val or val get\tget variable value gpspassthrough\tpassthrough GPS to serial help led\tconfigure leds map\tmapping of RC channel order mixer\tmixer name or list mode_color\tconfigure mode colors motor\tget/set motor output value play_sound\tindex, or none for next profile\tindex (0 to 2) rateprofile\tindex (0 to 2) rxrange\tconfigure rx channel ranges (end-points) rxfail\tshow/set rx failsafe settings save\tsave and reboot serialpassthrough\tserial passthrough mode, reset board to exit set\tname=value or blank or * for list status\tshow system status timer\tconfigure timer version\tshow version serial\tconfigure serial ports servo\tconfigure servos sd_info\tsdcard info tasks\tshow task stats "},{"title":"CLI Variable Reference​","type":1,"pageTitle":"CLI Tab","url":"/betaflight.com/docs/wiki/configurator/cli-tab#cli-variable-reference","content":"Click on a variable to jump to the relevant documentation page. info Variable shown here are based on older documentation. Please check the help command and use get &lt;variable name&gt; in the CLI Tab to get the latest information Variable\tDescription/Units\tMin\tMax\tDefault\tType\tDatatypemid_rc\tThis is an important number to set in order to avoid trimming receiver/transmitter. Most standard receivers will have this at 1500, however Futaba transmitters will need this set to 1520. A way to find out if this needs to be changed, is to clear all trim/subtrim on transmitter, and connect to GUI. Note the value most channels idle at - this should be the number to choose. Once midrc is set, use subtrim on transmitter to make sure all channels (except throttle of course) are centered at midrc value.\t1200\t1700\t1500\tMaster\tUINT16 min_check\tThese are min/max values (in us) which, when a channel is smaller (min) or larger (max) than the value will activate various RC commands, such as arming, or stick configuration. Normally, every RC channel should be set so that min = 1000us, max = 2000us. On most transmitters this usually means 125% endpoints. Default check values are 100us above/below this value.\t0\t2000\t1100\tMaster\tUINT16 max_check\tThese are min/max values (in us) which, when a channel is smaller (min) or larger (max) than the value will activate various RC commands, such as arming, or stick configuration. Normally, every RC channel should be set so that min = 1000us, max = 2000us. On most transmitters this usually means 125% endpoints. Default check values are 100us above/below this value.\t0\t2000\t1900\tMaster\tUINT16 rssi_channel\tRX channel containing the RSSI signal\t0\t18\t0\tMaster\tINT8 rssi_scale\tWhen using ADC RSSI, the raw ADC value will be divided by rssi_scale in order to get the RSSI percentage. RSSI scale is therefore the ADC raw value for 100% RSSI.\t1\t255\t30\tMaster\tUINT8 rssi_invert\tWhen using PWM RSSI or ADC RSSI, determines if the signal is inverted (Futaba, FrSKY)\tOFF\tON\tON\tMaster\tINT8 rc_smoothing\tInterpolation of Rc data during looptimes when there are no new updates. This gives smoother RC input to PID controller and cleaner PIDsum\tOFF\tON\tON\tMaster\tINT8 rx_min_usec\tDefines the shortest pulse width value used when ensuring the channel value is valid. If the receiver gives a pulse value lower than this value then the channel will be marked as bad and will default to the value of mid_rc.\t750\t2250\t885\tMaster\tUINT16 rx_max_usec\tDefines the longest pulse width value used when ensuring the channel value is valid. If the receiver gives a pulse value higher than this value then the channel will be marked as bad and will default to the value of mid_rc.\t750\t2250\t2115\tMaster\tUINT16 serialrx_provider\tWhen feature SERIALRX is enabled, this allows connection to several receivers which output data via digital interface resembling serial. Possible values: SPEK1024, SPEK2048, SBUS, SUMD, XB-B, XB-B-RJ01, IBUS SPEK1024\tMaster\tUINT8 sbus_inversion\tStandard SBUS (Futaba, FrSKY) uses an inverted signal. Some OpenLRS receivers produce a non-inverted SBUS signal. This setting is to support this type of receivers (including modified FrSKY). This only works on supported hardware (mainly F3 based flight controllers).\tOFF\tON\tON\tMaster\tUINT8 spektrum_sat_bind\t0 = disabled. Used to bind the spektrum satellite to RX\t0\t10\t0\tMaster\tUINT8 input_filtering_mode\tFilter out noise from OpenLRS Telemetry RX\tOFF\tON\tON\tMaster\tINT8 min_throttle\tThese are min/max values (in us) that are sent to ESC when armed. Defaults of 1150/1850 are OK for everyone, for use with AfroESC, they could be set to 1064/1864.\t0\t2000\t1150\tMaster\tUINT16 max_throttle\tThese are min/max values (in us) that are sent to ESC when armed. Defaults of 1150/1850 are OK for everyone, for use with AfroESC, they could be set to 1064/1864. If you have brushed motors, the value should be set to 2000.\t0\t2000\t1850\tMaster\tUINT16 min_command\tThis is the PWM value sent to ESCs when they are not armed. If ESCs beep slowly when powered up, try decreasing this value. It can also be used for calibrating all ESCs at once.\t0\t2000\t1000\tMaster\tUINT16 servo_center_pulse\tServo midpoint\t0\t2000\t1500\tMaster\tUINT16 motor_pwm_rate\tOutput frequency (in Hz) for motor pins. Defaults are 400Hz for motor. If setting above 500Hz, will switch to brushed (direct drive) motors mode. For example, setting to 8000 will use brushed mode at 8kHz switching frequency. Up to 32kHz is supported. Default is 16000 for boards with brushed motors. Note, that in brushed mode, minthrottle is offset to zero. For brushed mode, set max_throttle to 2000.\t50\t32000\t400\tMaster\tUINT16 servo_pwm_rate\tOutput frequency (in Hz) servo pins. Default is 50Hz. When using tricopters or gimbal with digital servo, this rate can be increased. Max of 498Hz (for 500Hz pwm period), and min of 50Hz. Most digital servos will support for example 330Hz.\t50\t498\t50\tMaster\tUINT16 3d_deadband_low\tLow value of throttle deadband for 3D mode (when stick is in the 3d_deadband_throttle range, the fixed values of 3d_deadband_low / _high are used instead)\t0\t2000\t1406\tMaster\tUINT16 3d_deadband_high\tHigh value of throttle deadband for 3D mode (when stick is in the deadband range, the value in 3d_neutral is used instead)\t0\t2000\t1514\tMaster\tUINT16 3d_neutral\tNeutral (stop) throttle value for 3D mode\t0\t2000\t1460\tMaster\tUINT16 auto_disarm_delay\tDelay before automatic disarming\t0\t60\t5\tMaster\tUINT8 small_angle\tIf the copter tilt angle exceed this value the copter will refuse to arm. default is 25°.\t0\t180\t25\tMaster\tUINT8 reboot_character\tSpecial character used to trigger reboot\t48\t126\t82\tMaster\tUINT8 gps_provider\tGPS standard. Possible values: NMEA, UBLOX NMEA\tMaster\tUINT8 gps_sbas_mode\tGround assistance type. Possible values: AUTO, EGNOS, WAAS, MSAS, GAGAN AUTO\tMaster\tUINT8 gps_auto_config\tEnable automatic configuration of UBlox GPS receivers.\tOFF\tON\tON\tMaster\tUINT8 gps_auto_baud\tEnable automatic detection of GPS baudrate.\tOFF\tON\tOFF\tMaster\tUINT8 report_cell_voltage\tDetermines if the voltage reported is Vbatt or calculated average cell voltage.\tOFF\tON\tOFF\tMaster\tUINT8 telemetry_inversion\tDetermines if the telemetry signal is inverted (Futaba, FrSKY)\tOFF\tON\tOFF\tMaster\tUINT8 frsky_default_lat\tOpenTX needs a valid set of coordinates to show compass value. A fake value defined in this setting is sent while no fix is acquired.\t-90\t90\t0\tMaster\tFLOAT frsky_default_long\tOpenTX needs a valid set of coordinates to show compass value. A fake value defined in this setting is sent while no fix is acquired.\t-180\t180\t0\tMaster\tFLOAT frsky_gps_format\tFRSKY_FORMAT_DMS (default), FRSKY_FORMAT_NMEA FRSKY_FORMAT_DMS\tMaster\tUINT8 frsky_unit\tIMPERIAL (default), METRIC IMPERIAL\tMaster\tUINT8 frsky_vfas_precision\tSet to 1 to send raw VBat value in 0.1V resolution for receivers that can handle it, or 0 (default) to use the standard method\t0\t1\t0\tMaster\tUINT8 hott_alarm_int\tBattery alarm delay in seconds for Hott telemetry\t0\t120\t5\tMaster\tUINT8 bat_capacity\tBattery capacity in mAH. This value is used in conjunction with the current meter to determine remaining battery capacity.\t0\t20000\t0\tMaster\tUINT16 vbat_scale\tResult is Vbatt in 0.1V steps. 3.3V = ADC Vref, 4095 = 12bit adc, 110 = 11:1 voltage divider (10k:1k) x 10 for 0.1V. Adjust this slightly if reported pack voltage is different from multimeter reading. You can get current voltage by typing &quot;status&quot; in cli.\t0\t255\t110\tMaster\tUINT8 vbat_max_cell_voltage\tMaximum voltage per cell, used for auto-detecting battery voltage in 0.01V units, default is 430 (4.3V)\t100\t500\t430\tMaster\tUINT16 vbat_min_cell_voltage\tMinimum voltage per cell, this triggers battery-critical alarms, in 0.01V units, default is 330 (3.3V)\t100\t500\t330\tMaster\tUINT16 vbat_warning_cell_voltage\tWarning voltage per cell, this triggers battery-warning alarms, in 0.01V units, default is 350 (3.5V)\t100\t500\t350\tMaster\tUINT16 vbat_hysteresis\tSets the hysteresis value for low-battery alarms, in 0.01V units, default is 1 (0.01V)\t10\t250\t1\tMaster\tUINT8 ibata_scale\tThis sets the output voltage to current scaling for the current sensor in 0.1 mV/A steps. 400 is 40mV/A such as the ACS756 sensor outputs. 183 is the setting for the uberdistro with a 0.25mOhm shunt.\t-10000\t10000\t400\tMaster\tINT16 ibata_offset\tThis sets the output offset voltage of the current sensor in millivolts.\t0\t3300\t0\tMaster\tUINT16 current_meter_type\tADC (default), VIRTUAL, NONE. The virtual current sensor, once calibrated, estimates the current value from throttle position. ADC\tMaster\tUINT8 align_board_roll\tArbitrary board rotation in degrees, to allow mounting it sideways / upside down / rotated etc\t-180\t360\t0\tMaster\tINT16 align_board_pitch\tArbitrary board rotation in degrees, to allow mounting it sideways / upside down / rotated etc\t-180\t360\t0\tMaster\tINT16 align_board_yaw\tArbitrary board rotation in degrees, to allow mounting it sideways / upside down / rotated etc\t-180\t360\t0\tMaster\tINT16 gyro_calib_noise_threshold\tWhen powering up, gyro bias is calculated. If the model is shaking/moving during this initial calibration, offsets are calculated incorrectly, and could lead to poor flying performance. This threshold (default of 32) means how much average gyro reading could differ before re-calibration is triggered.\t0\t128\t32\tMaster\tUINT8 imu_dcm_kp\tInertial Measurement Unit KP Gain\t0\t20000\t2500\tMaster\tUINT16 imu_dcm_ki\tInertial Measurement Unit KI Gain\t0\t20000\t0\tMaster\tUINT16 3d_deadband_throttle\tThrottle signal will be held to a fixed value when throttle is centered with an error margin defined in this parameter.\t0\t2000\t50\tProfile\tUINT16 servo_lowpass_hz\tSelects the servo PWM output cutoff frequency. Valid values range from 10 to 400. This is a fraction of the loop frequency in 1/1000ths. For example, 40 means 0.040. The cutoff frequency can be determined by the following formula: Frequency = 1000 * servo_lowpass_freq / looptime\t10\t400\t400\tMaster\tFLOAT rate_profile\tDefault = profile number\t0\t2\t0\tProfile\tUINT8 rc_rate\tRate value for all RC directions\t0\t250\t90\tRate Profile\tUINT8 rc_expo\tExposition value for all RC directions\t0\t100\t65\tRate Profile\tUINT8 rc_yaw_expo\tYaw exposition value\t0\t100\t0\tRate Profile\tUINT8 thr_mid\tThrottle value when the stick is set to mid-position. Used in the throttle curve calculation.\t0\t100\t50\tRate Profile\tUINT8 thr_expo\tThrottle exposition value\t0\t100\t0\tRate Profile\tUINT8 roll_rate\tRoll rate value 100\t40\tRate Profile\tUINT8 pitch_rate\tPitch rate value 100\t40\tRate Profile\tUINT8 yaw_rate\tYaw rate value\t0\t255\t0\tRate Profile\tUINT8 tpa_rate\tThrottle PID attenuation reduces influence of P on ROLL and PITCH as throttle increases. For every 1% throttle after the TPA breakpoint, P is reduced by the TPA rate.\t0\t100\t0\tRate Profile\tUINT8 tpa_breakpoint\tSee tpa_rate.\t1000\t2000\t1500\tRate Profile\tUINT16 failsafe_delay\tTime in deciseconds to wait before activating failsafe when signal is lost. See Failsafe documentation.\t0\t200\t10\tMaster\tUINT8 failsafe_off_delay\tTime in deciseconds to wait before turning off motors when failsafe is activated. See Failsafe documentation.\t0\t200\t200\tMaster\tUINT8 failsafe_throttle\tThrottle level used for landing when failsafe is enabled. See Failsafe documentation.\t1000\t2000\t1000\tMaster\tUINT16 failsafe_kill_switch\tSet to ON to use an AUX channel as a faisafe kill switch.\tOFF\tON\tOFF\tMaster\tUINT8 failsafe_throttle_low_delay\tActivate failsafe when throttle is low and no RX data has been received since this value, in 10th of seconds\t0\t300\t100\tMaster\tUINT16 failsafe_procedure\t0 = Autolanding (default). 1 = Drop.\t0\t1\t0\tMaster\tUINT8 gimbal_mode\tWhen feature SERVO_TILT is enabled, this can be either NORMAL or MIXTILT NORMAL\tProfile\tUINT8 acc_hardware\tThis is used to suggest which accelerometer driver should load, or to force no accelerometer in case gyro-only flight is needed. Default (0) will attempt to auto-detect among enabled drivers. Otherwise, to force a particular device, set it to 2 for ADXL345, 3 for MPU6050 integrated accelerometer, 4 for MMA8452, 5 for BMA280, 6 for LSM303DLHC, 7 for MPU6000, 8 for MPU6500 or 1 to disable accelerometer alltogether - resulting in gyro-only operation.\t0\t9\t0\tMaster\tUINT8 accz_lpf_cutoff\tCutoff frequency used in the low-pass filtering of accelerometer measurements.\t1\t20\t5\tProfile\tFLOAT acc_trim_pitch\tAccelerometer trim (Pitch)\t-300\t300\t0\tProfile\tINT16 acc_trim_roll\tAccelerometer trim (Roll)\t-300\t300\t0\tProfile\tINT16 p_pitch\tPitch P parameter\t0\t200\t40\tProfile\tUINT8 i_pitch\tPitch I parameter\t0\t200\t30\tProfile\tUINT8 d_pitch\tPitch D parameter\t0\t200\t23\tProfile\tUINT8 p_roll Roll P parameter\t0\t200\t40\tProfile\tUINT8 i_roll Roll I parameter\t0\t200\t30\tProfile\tUINT8 d_roll Roll D parameter\t0\t200\t23\tProfile\tUINT8 p_yaw\tYaw P parameter\t0\t200\t85\tProfile\tUINT8 i_yaw\tYaw I parameter\t0\t200\t45\tProfile\tUINT8 d_yaw\tYaw D parameter\t0\t200\t0\tProfile\tUINT8 p_alt\tAltitude P parameter (Baro / Sonar altitude hold)\t0\t200\t50\tProfile\tUINT8 i_alt\tAltitude I parameter (Baro / Sonar altitude hold)\t0\t200\t0\tProfile\tUINT8 d_alt\tAltitude D parameter (Baro / Sonar altitude hold)\t0\t200\t0\tProfile\tUINT8 p_level\tLevel P parameter (Angle / horizon modes)\t0\t200\t20\tProfile\tUINT8 i_level\tLevel I parameter (Angle / horizon modes)\t0\t200\t10\tProfile\tUINT8 d_level\tLevel D parameter (Angle / horizon modes)\t0\t200\t100\tProfile\tUINT8 p_vel\tVelocity P parameter (Baro / Sonar altitude hold)\t0\t200\t120\tProfile\tUINT8 i_vel\tVelocity I parameter (Baro / Sonar altitude hold)\t0\t200\t45\tProfile\tUINT8 d_vel\tVelocity D parameter (Baro / Sonar altitude hold)\t0\t200\t1\tProfile\tUINT8 yaw_p_limit\tLimiter for yaw P term. This parameter is only affecting PID controller MW23. To disable set to 500 (actual default).\t100\t500\t500\tProfile\tUINT16 dterm_cut_hz\tLowpass cutoff filter for Dterm for all PID controllers\t0\t500\t0\tProfile\tUINT16 blackbox_rate_num\tBlackbox logging rate numerator. Use num/denom settings to decide if a frame should be logged, allowing control of the portion of logged loop iterations\t1\t32\t1\tMaster\tUINT8 blackbox_rate_denom\tBlackbox logging rate denominator. See blackbox_rate_num.\t1\t32\t1\tMaster\tUINT8 blackbox_device\tSERIAL, SPIFLASH, SDCARD (default) SDCARD\tMaster\tUINT8 magzero_x\tMagnetometer calibration X offset\t-32768\t32767\t0\tMaster\tINT16 magzero_y\tMagnetometer calibration Y offset\t-32768\t32767\t0\tMaster\tINT16 magzero_z\tMagnetometer calibration Z offset\t-32768\t32767\t0\tMaster\tINT16 vtx_band\tConfigure the VTX band. Set to zero to use vtx_freq. Bands: 1: A, 2: B, 3: E, 4: F, 5: Race.\t0\t5\t4\tMaster\tUINT8 vtx_channel\tChannel to use within the configured vtx_band. Valid values are [1, 8].\t1\t8\t1\tMaster\tUINT8 vtx_freq\tSet the VTX frequency using raw MHz. This parameter is ignored unless vtx_band is 0.\t0\t5900\t5740\tMaster\tUINT16 vtx_halfduplex\tUse half duplex UART to communicate with the VTX, using only a TX pin in the FC.\tOFF\tON\tON\tMaster\tUINT8 vtx_low_power_disarm\tWhen the craft is disarmed, set the VTX to its lowest power. ON will set the power to its minimum value on startup, increase it to vtx_power when arming and change it back to its lowest setting after disarming. UNTIL_FIRST_ARM will start with minimum power, but once the craft is armed it will increase to vtx_power and it will never decrease until the craft is power cycled. OFF\tMaster\tUINT8 vtx_pit_mode_freq\tFrequency to use (in MHz) when the VTX is in pit mode.\t0\t5900\t0\tMaster\tUINT16 vtx_power\tVTX RF power level to use. The exact number of mw depends on the VTX hardware.\t0\t3\t1\tMaster\tUINT8 "},{"title":"Failsafe Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/failsafe-tab","content":"Failsafe Tab","keywords":""},{"title":"GPS Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/gps-tab","content":"GPS Tab","keywords":""},{"title":"Led Transponder Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/led_strip-tab","content":"Led Transponder Tab","keywords":""},{"title":"Tethered Logging Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/logging-tab","content":"Tethered Logging Tab","keywords":""},{"title":"Firmware Flasher tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/firmware-flasher-tab","content":"","keywords":""},{"title":"Preparation​","type":1,"pageTitle":"Firmware Flasher tab","url":"/betaflight.com/docs/wiki/configurator/firmware-flasher-tab#preparation","content":"Upgrade to the latest Betaflight Configurator. Before upgrading always save a diff of the current configuration. Using status command you get some info about hardware being used. You can also save a diff using Presets tab using the save backup button. Except master and profile most settings should be able to migrate from a previous version. note Configurator only supports Betaflight version 4.0 and beyond. Older versions only have access to the firmware flasher tab or CLI. "},{"title":"Flashing​","type":1,"pageTitle":"Firmware Flasher tab","url":"/betaflight.com/docs/wiki/configurator/firmware-flasher-tab#flashing","content":"Type\tVersionRelease\tStable Candidate\tPreview Development\tTest After selecting a build type select the board using the list or use the Auto-detect button.Always use Full Chip Erase unless instructed otherwise. note Using Show Release Candidates with Expert Mode enabled gives access to development builds. "},{"title":"Board defines​","type":1,"pageTitle":"Firmware Flasher tab","url":"/betaflight.com/docs/wiki/configurator/firmware-flasher-tab#board-defines","content":"We have defines for ACC, BARO, FLASH, GYRO, MAX7456, FLASH or SDCARD in the board configuration. note If we are missing any information please reach out on Discord to help us add any missing defines to the configuration. "},{"title":"Radio protocols​","type":1,"pageTitle":"Firmware Flasher tab","url":"/betaflight.com/docs/wiki/configurator/firmware-flasher-tab#radio-protocols","content":"Select the receiver wire protocol used. The most common are: Protocol\tReceiverCRSF\tTBS Crossfire or ExpressLRS GHST\tImmersion RC Ghost SBUS\tFrSky or Futaba info EXPRESSLRS (SPI) receivers use CRSF protocol. FrSky (SPI) receivers uses SBUS or FPORT protocol depending on the receiver firmware used. "},{"title":"Telemetry protocols​","type":1,"pageTitle":"Firmware Flasher tab","url":"/betaflight.com/docs/wiki/configurator/firmware-flasher-tab#telemetry-protocols","content":"Select the telemetry protocol used. For CRSF, ELRS or GHST protocols this is included by default to ease configuraton. info ExpressLRS uses CRSF protocol. SPI configuration is done in the board configuration. "},{"title":"Other options​","type":1,"pageTitle":"Firmware Flasher tab","url":"/betaflight.com/docs/wiki/configurator/firmware-flasher-tab#other-options","content":"Option\tDescriptionAKK (SA Fix)\tSmartaudio patch for AKK hardware DASHBOARD\tPost-flight overview screen FLASH\tEnable blackbox Flash Tools GPS\tEnable GPS LED Strip\tEnable 32 LEDs LED Strip 64\tEnable 64 LEDs MAG\tEnable magnetometer OSD_SD\tEnable SD OSD (onboard MAX7456 required) OSD_HD\tEnable HD OSD PIN IO\tEnable PINIO VTX\tEnable VTX "},{"title":"Motor protocol​","type":1,"pageTitle":"Firmware Flasher tab","url":"/betaflight.com/docs/wiki/configurator/firmware-flasher-tab#motor-protocol","content":"Select ESC protocol being used. DShot is default. tip When needed additional protocols like PWM or SERVOS please add them using Custom Defines. "},{"title":"Custom defines​","type":1,"pageTitle":"Firmware Flasher tab","url":"/betaflight.com/docs/wiki/configurator/firmware-flasher-tab#custom-defines","content":"You can add a custom define to bake a feature into the build which would not fit before: Define\tDescriptionACRO_TRAINER\tAdds Acro Trainer support BATTERY_CONTINUE\tSee #11084 CAMERA_CONTROL\tAdds Camera Control EMFAT_AUTORUN\tAdds FAT emulation for onboard flash or MSC EMFAT_ICON\tAdds (Windows) icon for FAT Emulation ESCSERIAL_SIMONK\tAdds support for SimonK ESC Firmware FRSKYOSD\tAdds FrSky OSD support GPS_PLUS_CODES\tUse Open Location Code LAUNCH_CONTROL\tAdds Launch Control SERIAL_4WAY_SK_BOOTLOADER\tAllow flashing APD / BlHeli ESC using serial 4way SERVOS\tAdd Servo support VARIO\tAdd Vario support "},{"title":"Local flashing​","type":1,"pageTitle":"Firmware Flasher tab","url":"/betaflight.com/docs/wiki/configurator/firmware-flasher-tab#local-flashing","content":"To flash local development firmware with optional custom configuration use the Load Firmware local button to load board configuration or click Auto-detect or when in DFU mode select a board manually. note If using a local configuration file use the same button again to load a local hex file. tip Use a good quality data cable not a power cable.USB hubs are sometimes needed in other cases they can cause issues.Try disconnecting all cables from your PC first, try rebooting, other ports, upgrade system drivers. Remove other USB connections.Try DFU mode (use boot button on FC while plugging in, use Activate Boot Loader / DFU button in setup tab or use bl command in CLI.Sometimes peripherals on the flight controller such as receivers or GPS devices can hijack port communication requiring de-soldering.Linux needs configuration to allow flashing.MacOS or Windows do not need any drivers.If it still doesn't work try IRC Driver Fix or Zadig on Windows platform. "},{"title":"Modes Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/modes-tab","content":"","keywords":""},{"title":"Mode Types​","type":1,"pageTitle":"Modes Tab","url":"/betaflight.com/docs/wiki/configurator/modes-tab#mode-types","content":"ARM enables motor output and allows the craft to fly ANGLE flight mode which remains level using accelerometer. Stick input affects the angle of the craft HORIZON flight mode which remains level using accelerometer. Stick input affects the angle of the craft but at extremes of pitch and roll the craft will flip upside down and then back to level ANTI GRAVITY flight mode increases P and I term during fast throttle movements to improve stick tracking and avoid nose drift MAG activates heading lock via magnetometer (compass) HEADFREE flight mode where yaw is aligned with an external frame of reference (often where the pilot is facing) instead of the craft's. Designed for beginners but rarely used, advise ANGLE mode HEADADJ set a new yaw origin for HEADFREE mode CAMSTAB engages servo(s) to respond to the craft's movements and auto-level a gimbal for camera stabilisation PASSTHRU skip PID loop and pass roll, yaw and pitch directly to servos for airplane mixer BEEPER activates the beeper, either dshot motor beeper (if not armed) or external buzzer and flashing OSD beeper element. Useful for locating crashed craft LEDLOW turn LED strip off CALIB calibrates roll/pitch offsets for the accelerometer in-flight. An older mode and it is instead recommended to do this on the bench before flying OSD enable/disable the OSD overlay feature TELEMETRY enable/disable the sending of FC telemetry to the control link receiver or other output port SERVO1 enable/disable the first servo output SERVO2 enable/disable the second servo output SERVO3 enable/disable the third servo output BLACKBOX enable/disable blackbox log recording. Useful to log only required data when blackbox storage is limited FAILSAFE replicates a control-link failure event to allow for thorough testing of GPS Return To Home AIRMODE enable/disable the air mode feature which enables full PID correction at zero throttle to maintain authority. See tuning notes for more details 3D enables reversible motor direction to provide negative thrust and allow inverted flight. Throttle becomes -100 to +100 instead of 0 to 100 FPV ANGLE MIX flight mode that applies yaw rotation relative to the angle of the camera instead of the angle of the flight controller. Designed to allow beginners to turn without inadvertent rolling. Generally not recommended BLACKBOX_ERASE clears all data from the blackbox flash/microSD storage device CAMERA CONTROL 1 custom action to configure a Runcam compatible camera device. Used to control some Runcam/Caddx HD recorders CAMERA CONTROL 2 custom action to configure a Runcam compatible camera device. Used to control some Runcam/Caddx HD recorders CAMERA CONTROL 3 custom action to configure a Runcam compatible camera device. Used to control some Runcam/Caddx HD recorders FLIP OVER AFTER CRASH activates Turtle Mode where the quad will spin props on one side only in reverse to flip over if crashed upside down. Dshot required BOXPREARM if enabled provides a 2-stage arming method. PREARM switch must be activated before ARM can be used for additional safety BEEP GPS SATELLITE COUNT indicates the number of locked GPS satellites by beeping this number of times VTX PIT MODE enables low-power output mode on VTX to prevent interfering with pilots in the air. Requires VTX support USER1 User defined switch 1. Controls arbitrary output via PINIO USER2 User defined switch 2. Controls arbitrary output via PINIO USER3 User defined switch 3. Controls arbitrary output via PINIO PID AUDIO enable output of PID controller state as audio PARALYZE permanently disable a downed craft until it is power cycled GPS RESCUE enable GPS Return To Home to autonomously return the craft to the home point and land ACRO TRAINER flight mode which limits craft angle when flying in acro mode DISABLE VTX CONTROL disable control of the VTX settings through the OSD LAUNCH CONTROL race assistance start system. Spins motors and tilts craft forward to the desired angle without taking off "},{"title":"Motors Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/motors-tab","content":"","keywords":""},{"title":"Mixer​","type":1,"pageTitle":"Motors Tab","url":"/betaflight.com/docs/wiki/configurator/motors-tab#mixer","content":"Mixer controls motor layout and how the FC will use the motors to maintain stable flight. Typical quadcopters use the &quot;QUAD X&quot; setting so set this if you are unsure. Motor direction is reversed - The normal setting assumes your props will spin in towards the camera at the front of your quad &quot;props in&quot;, reversed means that props spin away from the camera &quot;props out&quot;.  info Pilots use &quot;props out&quot; to prevent debris from being pushed into the camera at the cost of pushing it into the body of the quad instead. It also helps against prop wash on smaller crafts Motor direction - opens a motor direction test tool which allows you to gently spin motors and easily reverse motors so that they match the appropriate spin direction for your Mixer. Remove props and take care "},{"title":"ESC/Motor features​","type":1,"pageTitle":"Motors Tab","url":"/betaflight.com/docs/wiki/configurator/motors-tab#escmotor-features","content":"ESC/Motor Protocol - DShot is standard for modern builds and provides the best flight performance and features. info Speed of DShot depends on your chosen PID loop frequency, as slower DShot speeds cannot send updates fast enough to fully utilise faster PID loop rates. Because of this it is recommended to pair 8K with DShot600, 4K with DShot300 and 2K with DShot150. Other options such as Oneshot125 are only needed on very old ESCs such as original BLHELI, newer BLHeli_S, BLHeli_32, BlueJay or AM32 ESCs should all use DShot MOTOR_STOP - Prevent motors spinning at idle when armed. Not normally required and it is considered safer to spin motors so bystanders can see that your quad is armed ESC_SENSOR - Prefer ESC telemetry data from a UART connection to the ESC as configured in the Ports tab Bidirectional DShot - Required for RPM filtering. Instead of only sending DShot commands to the ESC on the motor output connections the FC will also listen for return data from the ESC on the same wire note By default includes only RPM data but can be expanded with the dshot_edt CLI command to also enable ESC voltage and temperature data via DShot telemetry (requires newer BlueJay/AM32/BLHELI32 ESC firmware) Motor Poles - Number of permanent magnets stuck inside the motor bell info Larger motors such as 2207 or 2306 have 14 whilst 1103 and smaller motors have 12 magnets. Magnet numbers typically change from 12 to 14 in the 14xx/15xx size of motor Motor idle ( % static) - Sets a minimum motor output value to ensure the motor is able to smoothly speed up from idle without a delay and without loosing control.  info Generally this speed is increased to improve smoothness when coming out of dives and decreased to avoid unwanted downward thrust during inverted manuevers "},{"title":"3D ESC/Motor features​","type":1,"pageTitle":"Motors Tab","url":"/betaflight.com/docs/wiki/configurator/motors-tab#3d-escmotor-features","content":"3D Enables motors to run in both directions which permits inverted flight. Zero throttle is now the 50% stick position and the lowest stick position now produces maximum negative throttle, with maximum positive throttle at the highest stick position 3D Deadband low - Start of the zero-throttle band in 3D mode where no thrust is wanted 3D Deadband high - End of the zero-throttle band in 3D mode where no thrust is wanted 3D Deadband neutral - Midpoint of the zero-throttle band in 3D mode where no thrust is wanted "},{"title":"Motors Test Mode​","type":1,"pageTitle":"Motors Tab","url":"/betaflight.com/docs/wiki/configurator/motors-tab#motors-test-mode","content":"Be careful when bench testing your motors and read this section thoroughly if you are unsure. Always be careful when using lipo batteries. If you are in doubt you may wish to investigate safety options such as Smoke Stoppers which limit current from the battery danger Always remove props before connecting a battery and testing motors. You will hear this repeated for a good reason. Please be careful! Visualisation of the current motor signalling. Props should be removed before testing motors. Once a battery is connected and the ESC is online the motors can be spun using the sliders. R - RPM telemetry from the ESC E - DShot telemetry error rate. Will show errors if the ESC is not powered. A powered ESC should show 0% or very close to 0% errors. Error rates of 1% or more usually indicate a hardware problem. DShot telemetry requires a modern ESC firmware such as BlueJay, AM32 or BLHELI32 T - Temperature telemetry from the ESC "},{"title":"Blackbox Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/onboard-logging-tab","content":"Blackbox Tab","keywords":""},{"title":"PID Tuning Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/pid-tuning-tab","content":"PID Tuning Tab","keywords":""},{"title":"OSD Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/osd-tab","content":"","keywords":""},{"title":"Active OSD profiles​","type":1,"pageTitle":"OSD Tab","url":"/betaflight.com/docs/wiki/configurator/osd-tab#active-osd-profiles","content":"Selects the OSD profile which will be overlaid on the camera data. "},{"title":"Video Format​","type":1,"pageTitle":"OSD Tab","url":"/betaflight.com/docs/wiki/configurator/osd-tab#video-format","content":"Auto - attempts to guess the appropriate output type PAL - Uses a 30 columns x 16 row grid of OSD elements. If the MAX7456 chip is used then this must match the camera signal NTSC - Uses a 30 columns x 13 row grid of OSD elements. If the MAX7456 chip is used then this must match the camera signal HD - Used by Digital VTXs which accept OSD commands via MSP Displayport info HD OSD defaults to a 53 column x 20 row grid of OSD elements. When the VTX is online BetaFlight will query via MSP Displayport to determine the optimum grid size and may update the grid to match what is supported by the digital VTX system "},{"title":"Units​","type":1,"pageTitle":"OSD Tab","url":"/betaflight.com/docs/wiki/configurator/osd-tab#units","content":"Set the system of Units to use when rendering OSD data. System\tSpeed\tDistance\tTemperatureMetric\tKilometers per hour\tKilometers\tCelsius Imperial\tMiles per hour\tMiles\tFahrenheit British\tMiles per hour\tKilometers\tCelsius "},{"title":"Timers​","type":1,"pageTitle":"OSD Tab","url":"/betaflight.com/docs/wiki/configurator/osd-tab#timers","content":"Three timer alarms are available to show and OSD alarm when one of the selected timer Sources reaches the Alarm value. "},{"title":"Alarms​","type":1,"pageTitle":"OSD Tab","url":"/betaflight.com/docs/wiki/configurator/osd-tab#alarms","content":"Show an OSD alarm when one of the values reaches the number input here. "},{"title":"Warnings​","type":1,"pageTitle":"OSD Tab","url":"/betaflight.com/docs/wiki/configurator/osd-tab#warnings","content":"The OSD Warnings element can show error conditions from a number of different sources. If the pilot wishes they can disable some of these warnings. "},{"title":"Post Flight Statistics​","type":1,"pageTitle":"OSD Tab","url":"/betaflight.com/docs/wiki/configurator/osd-tab#post-flight-statistics","content":"When the craft disarms the OSD will show a post-flight screen including the statistics selected here "},{"title":"Font Manager​","type":1,"pageTitle":"OSD Tab","url":"/betaflight.com/docs/wiki/configurator/osd-tab#font-manager","content":"When using a MAX7456 chip the font glyphs are uploaded from the Font Manager  "},{"title":"Font Presets​","type":1,"pageTitle":"OSD Tab","url":"/betaflight.com/docs/wiki/configurator/osd-tab#font-presets","content":"This can be used to select different font styles which heavier or lighter lettering and different styles. Use Upload Font to save changes "},{"title":"Boot Logo​","type":1,"pageTitle":"OSD Tab","url":"/betaflight.com/docs/wiki/configurator/osd-tab#boot-logo","content":"A custom boot logo can be uploaded. The image must be 288x72 pixels, and green/white/black. Green areas are rendered as transparent. Use Upload Font to save changes "},{"title":"Upload Font​","type":1,"pageTitle":"OSD Tab","url":"/betaflight.com/docs/wiki/configurator/osd-tab#upload-font","content":"Font upload max be required when upgrading from older versions of Betaflight as font symbols have been added and changed over time. In particular if your crosshair looks wrong or if your display appears garbled or using incorrect characters you should try uploading the font again. "},{"title":"Ports Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/ports-tab","content":"","keywords":""},{"title":"Identifier​","type":1,"pageTitle":"Ports Tab","url":"/betaflight.com/docs/wiki/configurator/ports-tab#identifier","content":"The label of the port. Usually UART[x], SOFTSERIAL, or USB. The UART number responds to the RX-TX pairs on the FC "},{"title":"Configuration/MSP​","type":1,"pageTitle":"Ports Tab","url":"/betaflight.com/docs/wiki/configurator/ports-tab#configurationmsp","content":"As the name suggests, usually only used for lower-level communication using the MSP (MultiWii Serial Protocol) for configuration done by external devices, or to allow a more direct way of control. You can also set a specific baud rate caution This is not to be used as a &quot;toggle&quot; for the current UART when setting it (for example) for Serial RX. It's a relatively common mistake to make, and then cause your config to not save to prevent unwanted behavior when conflicting options are set "},{"title":"Serial RX​","type":1,"pageTitle":"Ports Tab","url":"/betaflight.com/docs/wiki/configurator/ports-tab#serial-rx","content":"Used to set the UART to receive serial data from a receiver. This is the most common use of a UART port. If you toggle this on, you likely do not need to touch any ohter options for this port "},{"title":"Telemetry Output​","type":1,"pageTitle":"Ports Tab","url":"/betaflight.com/docs/wiki/configurator/ports-tab#telemetry-output","content":"Used for older radio systems that would require telemetry data to be sent back to the receiver over a UART separate from the one used for control. You may also need to set the baud rate for your device. This is not used for most modern radio systems like ELRS. Modern receivers use 2-way communication with the FC by default which allows for telemetry to be sent over the same port used for Serial Rx link. Ensure that you have toggled Telemetry output to On in the Receiver tab to make the FC send telemetry to the Receiver "},{"title":"Sensor Input​","type":1,"pageTitle":"Ports Tab","url":"/betaflight.com/docs/wiki/configurator/ports-tab#sensor-input","content":"When you want the port to receive data from a sensor. This is used for things like BLHeli_32 ESC telemetry, or GPS. To get GPS working, you may need to manualy assign a baud rate as well "},{"title":"Peripherals​","type":1,"pageTitle":"Ports Tab","url":"/betaflight.com/docs/wiki/configurator/ports-tab#peripherals","content":"Multiple options to allow the FC to control peripherals like VTXs, cameras, external OSDs, or even digital VTXs along with MSP. Similar to Telemetry Output and Sensor Input, you may need to set a baud rate for your device although common devices like SmartAudio, Tramp and MSP VTXs should work well with the default baud rates "},{"title":"Power & Battery","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/power-tab","content":"","keywords":""},{"title":"Battery​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#battery","content":""},{"title":"Voltage Meter Source​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#voltage-meter-source","content":"Select the source for the voltage measurements None - No voltage measurements will be availableESC Sensor - Use the ESC telemetry to get the voltage measurementsOnboard ADC - Use the ADC on the flight controller to get the voltage measurements "},{"title":"Current Meter Source​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#current-meter-source","content":"Select the source for the current measurements None - No current measurements will be availableESC Sensor - Use the ESC telemetry to get the current measurementsMSP Sensor/OSD Slave - NEEDS REVIEW, FOR ONCE I HAVE NO IDEA WHAT THIS MEANSOnboard ADC - Use the ADC on the flight controller to get the current measurements "},{"title":"Min/Max/Warning Cell Voltage​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#minmaxwarning-cell-voltage","content":"Minimum Cell Voltage - The voltage that is considered critically low, and will trigger the corresponding warningsMaximum Cell Voltage - The voltage of a fully charged CellWarning Cell Voltage - The voltage that is considered low, and will trigger the corresponding warnings danger The warning voltage should be set to a value where you can still land safely, usually 3.6-3.5V. The minimum voltage should be set to a value where damage is imminent, usually 3.3V. If you fly a battery to less than 3.3V, it will start to be damaged and will not be able to hold a charge anymore, and can even be dangerous "},{"title":"Capacity​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#capacity","content":"The capacity of the battery in mAh. This is used to calculate the remaining battery capacity in percent. "},{"title":"Voltage Meter​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#voltage-meter","content":"Settings for the voltage meter to measure the battery voltage correctly "},{"title":"Scale​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#scale","content":"The scale of the voltage meter. This is used to calculate the correct voltage from the ADC value. If the battery voltage is not displayed correctly, you can adjust this value up/down to fix it "},{"title":"Divider Value​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#divider-value","content":"PLEASE REVIEW, NOT SURE WHAT TO WRITE HERE "},{"title":"Multiplier Value​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#multiplier-value","content":"PLEASE REVIEW, NOT SURE WHAT TO WRITE HERE "},{"title":"Amperage Meter​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#amperage-meter","content":"Settings for the amperage meter to measure the current draw correctly, using this formula: Current(Amps)=ADC(mV)amperage_meter_scale×10+amperage_meter_offset1000Current(Amps) = \\frac{ADC (mV)}{amperage\\_meter\\_scale \\times 10 + \\frac{amperage\\_meter\\_offset}{1000}}Current(Amps)=amperage_meter_scale×10+1000amperage_meter_offset​ADC(mV)​ "},{"title":"Scale​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#scale-1","content":"The scale of the amperage meter. Used in the calculation to get the correct current draw from the ADC value "},{"title":"Offset​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#offset","content":"The offset of the amperage meter, rarely needed "},{"title":"Power State​","type":1,"pageTitle":"Power & Battery","url":"/betaflight.com/docs/wiki/configurator/power-tab#power-state","content":"Connected - Yes/No, if Yes, also shows cell countVoltage - Voltage of the batterymAh Used - Capacity used in mAhAmperage - Current draw "},{"title":"Presets Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/presets-tab","content":"","keywords":""},{"title":"Search Filters​","type":1,"pageTitle":"Presets Tab","url":"/betaflight.com/docs/wiki/configurator/presets-tab#search-filters","content":"Narrow down your search by using the search filters. You can filter by: Category - Select from multiple common categories for a wide range of presets. Categories include: FILTERSLEDSMODESOSDOTHERRATESRC_LINKTUNEVTX Keywords - Enter keywords to search for in the preset name and description, allows for a more specific searchAuthor - Select from a list of authors to filter presets byFirmware - Select from a list of firmware versions to filter presets byStatus - Select from various statuses to filter presets by OFFICIAL - Presets that are made and/or officially supported by the Betaflight team. Usually more advanced and/or specific to a particular settingCOMMUNTIY - Presets that are made by other users in the community. Often for specific products (like VTX tables) and pilot ratesEXPERIMENTAL - Presets that are in development and in the process of being tested "},{"title":"Preset Preview​","type":1,"pageTitle":"Presets Tab","url":"/betaflight.com/docs/wiki/configurator/presets-tab#preset-preview","content":"View the basic info for a preset in the results, and a detailed description of the preset along with its options when opened "},{"title":"Result Preview​","type":1,"pageTitle":"Presets Tab","url":"/betaflight.com/docs/wiki/configurator/presets-tab#result-preview","content":"Shows basic information about the preset, including the name, description, author, firmware version, and status.  "},{"title":"Preset Details​","type":1,"pageTitle":"Presets Tab","url":"/betaflight.com/docs/wiki/configurator/presets-tab#preset-details","content":"Shows the same info as the result preview, along with detailed information about the preset: Options - A list of options that can be configured for the preset to change its behavior (for example to pick motor KV for a tune preset, or link options for receiver presets)Description - A detailed description of the preset and its options, including any warnings or recommendationsDiscussion - A link to the Pull Request for the preset, where you can see and contribute to the discussion about the presetView online - A link to the preset file, where you can view the preset's codeView CLI - View the CLI commands that will be applied when the preset is selectedClose - Close the preset detailsApply - Apply the preset to your configuration  "},{"title":"Receiver Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/receiver-tab","content":"","keywords":""},{"title":"Output Preview​","type":1,"pageTitle":"Receiver Tab","url":"/betaflight.com/docs/wiki/configurator/receiver-tab#output-preview","content":"The receiver output preview shows the current state of the receiver channels, both in channel value and graph forms, and how those affect the drone movement. "},{"title":"Receiver Configuration​","type":1,"pageTitle":"Receiver Tab","url":"/betaflight.com/docs/wiki/configurator/receiver-tab#receiver-configuration","content":"Used to configure all of the settings that are specific to your receiver "},{"title":"Receiver​","type":1,"pageTitle":"Receiver Tab","url":"/betaflight.com/docs/wiki/configurator/receiver-tab#receiver","content":"Select the communication protocol used by your receiver. The options are: PPM/CPPM - Legacy protocol, unlikely to be used in modern setupsSerial-based - Most modern receivers communicate over serial, using different protocols like CRSF or SBUSPWM - Legacy protocol, unlikely to be used in modern setupsMSP - An advanced option, using the MSP protocol to communicate with the receiverSPI - Used for most integrated receivers, like ExpressLRS on tinywhoop AIO boards caution Selecting the incorrect protocol will lead to no signal being detected, or the signal being interpreted incorrectly. You have to pick the correct one for your receiver "},{"title":"Telemetry​","type":1,"pageTitle":"Receiver Tab","url":"/betaflight.com/docs/wiki/configurator/receiver-tab#telemetry","content":"Toggle the telemetry output on or off. Also required for VTX control from ELRS receivers "},{"title":"RSSI​","type":1,"pageTitle":"Receiver Tab","url":"/betaflight.com/docs/wiki/configurator/receiver-tab#rssi","content":"Mostly a legacy option, used to configure a separate analogue 0-3.3V RSSI input. Most modern receivers communicate RSSI (along with other telemetry data) over the same serial connection as the control data. Do not enable this option with a modern receiver "},{"title":"Channel Map​","type":1,"pageTitle":"Receiver Tab","url":"/betaflight.com/docs/wiki/configurator/receiver-tab#channel-map","content":"Different receivers output the four main control channels: Aileron - Roll (left/right)Elevator - Pitch (forward/backward)Throttle - Throttle (up/down)Rudder - Yaw (left/right) caution If your radio input does not match up to what you see in the preview, you need to change the channel map. There are also preset options for some of the more common systems: FrSky/Futaba/Hitec - FrSky, Futaba, and Hitec receivers output the channels in the same order as the Betaflight default (AETR1234)Spektrum/Graupned/JR - Spektrum receivers output the channels in a different order than the Betaflight default (TAER1234) "},{"title":"RSSI Channel​","type":1,"pageTitle":"Receiver Tab","url":"/betaflight.com/docs/wiki/configurator/receiver-tab#rssi-channel","content":"Some older receivers only had RSSI output on a single channel. If you have an older receiver, you can set which channel is used to read the RSSI value. This is usually AUX 4 or 12. Leave this setting disabled if you have a modern receiver such one using the CRSF or GHST protocols One use case for this setting on modern equipment is to view LQ on DJI FPV goggles, which do not include a native LQ field. In this case you can set this channel to the channel used for LQ - AUX11 on ELRS. A better solution is to enable the osd_craftname_msgs CLI option or install WTFOS on your DJI FPV system for a full customisable OSD "},{"title":"\"Stick\" Settings​","type":1,"pageTitle":"Receiver Tab","url":"/betaflight.com/docs/wiki/configurator/receiver-tab#stick-settings","content":"Minimum/Center/Maximum values for the four main control channels. These are used to set the range of the stick values, usually for safety and calibration purposes "},{"title":"Deadband Settings​","type":1,"pageTitle":"Receiver Tab","url":"/betaflight.com/docs/wiki/configurator/receiver-tab#deadband-settings","content":"Deadband is the range of stick movement that is ignored. Some radios/receivers may have a small amount of jitter, and this setting can be used to ignore that. You also have options to set it specifically for Yaw and 3d mode throttle "},{"title":"RC Smoothing​","type":1,"pageTitle":"Receiver Tab","url":"/betaflight.com/docs/wiki/configurator/receiver-tab#rc-smoothing","content":"Toggle the RC smoothing filter on or off "},{"title":"Sensors Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/sensors-tab","content":"Sensors Tab","keywords":""},{"title":"Servos Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/servos-tab","content":"Servos Tab Configure a servo to move when in response to one of your receiver's channels. Set the servo endpoints with MIN, MID and MAX. Check the box for the channel you want to control the servo. Direction and Rate control is a weighting which controls the direction and range of the servo movement Enable live mode to move your servos when configurator is running","keywords":""},{"title":"Setup Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/setup-tab","content":"","keywords":""},{"title":"Basic Setup​","type":1,"pageTitle":"Setup Tab","url":"/betaflight.com/docs/wiki/configurator/setup-tab#basic-setup","content":""},{"title":"Calibrate Accelerometer​","type":1,"pageTitle":"Setup Tab","url":"/betaflight.com/docs/wiki/configurator/setup-tab#calibrate-accelerometer","content":"The accelerometer is used to determine the orientation of the flight controller. It is used to determine the pitch, roll and yaw angles. You can calibrate it here, following the instructions info The accelerometer is used for self stabilization features, like angle, horizon, acro trainer, and even GPS rescue. If you do not intend to use these features, you can skip this step, or even disable the accelerometer entirely "},{"title":"Calibrate Magnetometer​","type":1,"pageTitle":"Setup Tab","url":"/betaflight.com/docs/wiki/configurator/setup-tab#calibrate-magnetometer","content":"The magnetometer (compass) is used to determine the heading of the flight controller in 3d space. This is useful for more accurate information for GPS rescue. Calibrate it following the instructions The magnetometer calibration process is time limited, you only have 30 seconds to do the movements "},{"title":"Reset Settings​","type":1,"pageTitle":"Setup Tab","url":"/betaflight.com/docs/wiki/configurator/setup-tab#reset-settings","content":"danger This will reset ALL settings to default, leading to an empty config. This is not a &quot;Factory Reset&quot; for your drone or flight controller, nor will it reset your just-changed settings. It's to be used as a hard reset, and can lead to unpredictable results, or you may even need to re-flash in order to even be able to connect again "},{"title":"Activate Bootloader/DFU​","type":1,"pageTitle":"Setup Tab","url":"/betaflight.com/docs/wiki/configurator/setup-tab#activate-bootloaderdfu","content":"A manual way to put the flight controller into DFU (Device Firmware Update) mode without having to hold down the physical boot button. This is useful if you're having issues when flashing. Board will remain in DFU mode until cycled or a flash is completed "},{"title":"FC Information​","type":1,"pageTitle":"Setup Tab","url":"/betaflight.com/docs/wiki/configurator/setup-tab#fc-information","content":""},{"title":"Live Gyro Preview​","type":1,"pageTitle":"Setup Tab","url":"/betaflight.com/docs/wiki/configurator/setup-tab#live-gyro-preview","content":"A live preview of the gyroscope data. This is useful to check if the gyroscope is aligned correctly, and if it isn't getting/giving noisy data info You can set the gyroscope alignment in the Configuration tab "},{"title":"Info​","type":1,"pageTitle":"Setup Tab","url":"/betaflight.com/docs/wiki/configurator/setup-tab#info","content":"Shows some basic data from the flight controller. This includes: Arming Disable Flags - Shows all of the &quot;errors&quot; that prevent the flight controller from arming. This is useful to check if you're having issues armingBattery Voltage - Shows the current battery voltage if the settings for it are set correctlyCurrent Drawn - Shows the current drawn from the battery if the settings for it are set correctlyCurrent Draw - Shows the current that the drone is drawing from the battery if the settings for it are set correctlyRSSI - Shows the current RSSI value (used as a rough estimate of the signal strength) if the settings for it are set correctly "},{"title":"GPS​","type":1,"pageTitle":"Setup Tab","url":"/betaflight.com/docs/wiki/configurator/setup-tab#gps","content":"Shows the GPS data if the flight controller has a GPS module connected and set up. This includes: 3D Fix - Shows if the GPS has a 3D fix or not, a fix is needed for proper GPS functionalitySats - Shows the current ammoount of satellites the GPS has a lock on. The more the better, usually 6 or more is needed for a good fixLattitude/Longittude - Shows the current lat/long coordinates of the drone "},{"title":"Instruments​","type":1,"pageTitle":"Setup Tab","url":"/betaflight.com/docs/wiki/configurator/setup-tab#instruments","content":"A graphic replica of real aircraft instruments "},{"title":"Experimental Backup and Restore​","type":1,"pageTitle":"Setup Tab","url":"/betaflight.com/docs/wiki/configurator/setup-tab#experimental-backup-and-restore","content":"Allows you to back up the configuration that can be changed in the configurator itself, you cannot back up CLI-only settings "},{"title":"Race Transponder Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/transponder-tab","content":"Race Transponder Tab","keywords":""},{"title":"Video Transmitter Tab","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/configurator/vtx-tab","content":"Video Transmitter Tab","keywords":""},{"title":"Betaflight 3.4 Release Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/release/Betaflight 3.4 Release Notes","content":"","keywords":""},{"title":"Important information when upgrading​","type":1,"pageTitle":"Betaflight 3.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 3.4 Release Notes#important-information-when-upgrading","content":"A number of changes and improvements in this release require changes to the Betaflight configurator. These changes have been added to Betaflight configurator 10.3.1 (installation instructions here). Please update your Betaflight configurator to version 10.3.1. If you are using the Blackbox Log Viewer, there is an updated version 3.1.0 to go with Betaflight 3.4 (installation instructions here);as part of the overhaul of the various filter stages, and improvements to the PID loop, the default settings have been re-evaluated and updated. The new default values are designed to make optimal use of the new filtering and improved PID loop, and be flyable with (almost) any hardware. Even if your current set up is working ok, it is probably worthwhile to try and only restore the non-filtering / PID loop settings, and have a go with the new default values (store your old diff in a safe place, just in case you don't like the new values 😉). (#6036);also as part of the filtering overhaul, the names of the debug modes available to log filtering / tuning data have been improved NOTCH (gyro data after scaling, before filtering) is now GYRO_SCALED, GYRO (gyro data after all filtering has been applied) is now GYRO_FILTERED (#6059);the upper limit of dterm_setpoint_weight has been increased to 2000 (corresponding to a value of 20 for 'D Setpoint Weight' in Betaflight configurator). This means that pilots wanting a more 'locked in' stick feeling can increase this value beyond the previous maximum of 254. At the same time, an undocumented scaling change was reverted, and the scale is now again how it is described in the Betaflight configurator. If you are using a custom setting for dterm_setpoint_weight, divide your value by 1.27 to get the new value that will give you the same feeling as between 3.1.6 and 3.4.0 (#5945, #6052);Dshot beacon configuraton has been changed. Now the beacon CLI command can be used analogous to how the beeper command is used. This allows for the Dshot beacon to be disabled individually for the conditions that are supported by it (RX_SET and RX_LOST at the moment). The old way of disabling the Dshot beacon by setting beeper_dshot_beacon_tone to 0 is no longer supported. The Dshot beacon is disabled for all conditions by default, if you want to enable it, use beacon &lt;condition name|ALL&gt; in CLI (#5891, #6070);in previous versions of the firmware, there was a race condition that could cause Dshot commands (e.g. activation of crash flip) to be ignored by the ESC when the Dshot beacon was active. To prevent this, a timeout has been added to the Dshot beacon that prevents arming for 1.2 seconds after the Dshot beacon was active (#6079);validation has been added for the RSSI configuration. Unlike in previous versions, it is no longer possible to have multiple sources for RSSI configured simultaneously, since only one can be active at any one time. If you have got more than one of the supported RSSI sources (frame error count / ADC / RX channel) configured, all but the first on this list will be disabled (#5644);scaling has been added to all RSSI sources. If the RSSI mechanism that you are using does not give you the output range that you want for RSSI, you can now use the rssi_scale / rssi_offset CLI variables to set the scale and offset for RSSI (#6001, #6032);the functionality of the crash flip mode has been improved: In addition to the existing front / back / left / right spinning of 2 propellers, it now supports spinning only 1 propeller (by moving the roll / pitch stick diagonally), and spinning 2 props that are diagonally opposite (by moving yaw), in order to yaw the overturned craft. The largest stick deflection in any of these directions determines which properllers are spun (#5163);the setting moron_threshold for the acceptable noise limit during gyro calibration was renamed to gyro_calib_noise_limit. Additionally, a new setting gyro_calib_duration was added. This allows users to configure a longer minimum gyro calibration duration (in 1/10ths of seconds, default: 125). Using a larger setting here will result in reduced gyro drift, which is helpful when flying line of sight (#5932);unfortunately bugfixes and improvements in the flight controller core functionality have led to an increase of the firmware size, causing it to overflow the available space on a number of F3 based flight controllers. As a result, some features have had to be removed from a number of F3 based flight controllers in order to make the firmware fit into flash. The following targets are affected: BETAFLIGHTF3, COLIBRI_RACE, FRSKYF3, FURYF3OSD, LUX_RACE, MIDELICF3, OMNIBUS, RCEXPLORERF3, RG_SSD_F3, SPRACINGF3EVO, SPRACINGF3NEO;the OSD elements osd_crosshairs (crosshairs) and osd_ah_sbar (artificial horizon sidebar) have been renamed in CLI to osd_crosshairs_pos and osd_ah_sbar_pos to make them consistent with the naming of OSD elements. If you are using these elements, please manually change the names in your backup before restoring (#5534);the range of the vtx_band parameter in CLI was extended to start at 0 instead of 1. Setting vtx_band = 0 allows users of VTX using the SmartPort or Tramp protocols to set the desired frequency directly via the vtx_freq parameter. Since direct frequency setting is not supported by the RTC6705 (onboard) VTX driver vtx_band = 0 does not work for these VTX, and should not be used (#5465). "},{"title":"Major features:​","type":1,"pageTitle":"Betaflight 3.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 3.4 Release Notes#major-features","content":"Overhauled and improved filtering (#5391, #5458);Optimised and massively improved the performance on F7 (#5674);Added GPS rescue mode (#5753, #5764);Added support for accessing SD card / onboard flash as USB mass storage device (MSC) (#5443, #5629, #5650);Added support for reading RC input as USB joystick (HID) (#5478, #5596);Added support for CMS configuration over CRSF (#5743);Added support for experimental filter based RC channel smoothing (#6017). "},{"title":"Minor features:​","type":1,"pageTitle":"Betaflight 3.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 3.4 Release Notes#minor-features","content":"Added acro trainer mode (#5970);Added throttle boost mode (#5508);Added support for throttle limiting (#5608);Added PID loop improvements (#5968, #5963, #5962);Added support for accelerated yaw spin recovery (#5706);Added support for direct adjustment of PID values through an RC channel (#5584);Added support for multiple overclocking speeds (#5193);Added MCU temperature monitoring (#5322);Added paralyse mode (#5851);Added support for QMC5883L compass (#5309);Added support for W25M flash chips (#5722). "},{"title":"New targets:​","type":1,"pageTitle":"Betaflight 3.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 3.4 Release Notes#new-targets","content":"Added SPRACINGF7DUAL with dual gyro support (#5264). "},{"title":"MDX Reference","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/misc/mdx-reference","content":"","keywords":""},{"title":"Header 2​","type":1,"pageTitle":"MDX Reference","url":"/betaflight.com/docs/wiki/misc/mdx-reference#header-2","content":""},{"title":"Header 3​","type":1,"pageTitle":"MDX Reference","url":"/betaflight.com/docs/wiki/misc/mdx-reference#header-3","content":"Header 4​ Header 5​ Header 6​ Normal text italic text bold text bold italic text strikethrough text blockquote list item 1list item 2list item 3 numbered list item 1numbered list item 2numbered list item 3 Code blocks: const foo = 'bar'; const foo: string = 'bar';  # MDX Reference # Header 1 ## Header 2 ### Header 3 #### Header 4 ##### Header 5 ###### Header 6 Normal text *italic text* **bold text** ***bold italic text*** ~~strikethrough text~~ &gt; blockquote - list item 1 - list item 2 - list item 3 1. numbered list item 1 2. numbered list item 2 3. numbered list item 3 \\```js const foo = 'bar'; \\``` \\```ts const foo: string = 'bar'; \\``` {/* wow so meta */}  &lt;Tabs&gt; &lt;TabItem value=&quot;tab1&quot; label=&quot;Tab 1&quot; default&gt; This is tab 1 &lt;/TabItem&gt; &lt;TabItem value=&quot;tab2&quot; label=&quot;Tab 2&quot;&gt; This is tab 2 &lt;/TabItem&gt; &lt;TabItem value=&quot;tab3&quot; label=&quot;Tab 3&quot;&gt; This is tab 3 &lt;/TabItem&gt; &lt;/Tabs&gt; &lt;!-- even more meta --&gt;  Tab 1Tab 2Tab 3 This is tab 1 Admonitions: note This is a note. It notes things. caution This is a caution. It cautions things. danger This is a danger. It is dangerous. info This is an info. It informs things. tip This is a tip. It tips things. "},{"title":"Betaflight 3.5 Release Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/release/Betaflight 3.5 Release Notes","content":"","keywords":""},{"title":"Important information when upgrading​","type":1,"pageTitle":"Betaflight 3.5 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 3.5 Release Notes#important-information-when-upgrading","content":"A number of changes and improvements in this release require changes to the Betaflight configurator. These changes have been added to Betaflight configurator 10.4.0(installation instructions here), please update your Betaflight configurator to at least this version;if you are using the Blackbox Log Viewer, there is an updated version 3.2.0 to go with Betaflight 3.5 (installation instructions here). Please update to at least version 3.2.0;a new 'Feed Forward PID' algorithm has been implemented, replacing setpoint weight (#6355). In addition to this, the dynamic notch filter (#6411) and anti-gravity (#6220) have been optimised for improved flight performance. For all of these changes, default values have been chosen that should result in good flight characteristics for most setups. It is recommended to start testing with default settings, incorporating tuned settings from previous versions if needed, where needed. For more in-depth instructions for tuning Betaflight 3.5, please consult these notes.unfortunately, bugfixes in the flight controller core functionality have led to an increase of the firmware size, causing it to overflow the available space on a number of F3 based flight controllers. As a result, some features have had to be removed from a number of F3 based flight controllers in order to make the firmware fit into flash. The following targets are affected: CRAZYBEEF3FR, CRAZYBEEF3FS, FRSKYF3, FURYF3, FURYF3OSD, OMNIBUS, SPRACINGF3, SPRACINGF3EVO, SPRACINGF3MINI, SPRACINGF3NEO (#6497, #6501) "},{"title":"Major features:​","type":1,"pageTitle":"Betaflight 3.5 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 3.5 Release Notes#major-features","content":"Added support for feed forward to the PID controller (#6355).Improved the performance of the dynamic notch filter (#6411). "},{"title":"Minor features:​","type":1,"pageTitle":"Betaflight 3.5 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 3.5 Release Notes#minor-features","content":"Improved the performance of anti-gravity (#6220);Added support for linking of modes (#6335);Added support for dynamic filter in dual gyro mode (#6428). "},{"title":"Betaflight 4.0 Release Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/release/Betaflight 4.0 Release Notes","content":"","keywords":""},{"title":"Important information when upgrading​","type":1,"pageTitle":"Betaflight 4.0 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.0 Release Notes#important-information-when-upgrading","content":"A number of changes and improvements in this release require changes to the Betaflight configurator. These changes have been added to Betaflight configurator 10.5.1 (installation instructions here), please update your Betaflight configurator to at least this version;if you are using the Blackbox Log Viewer, there is an updated version 3.3.1 to go with Betaflight 4.0 (installation instructions here). Please update to at least this version;if you are using OpenTX and the Betaflight TX Lua scripts, please update them to at least version 1.2.0 in order to get support for the latest features introduced in Betaflight 4.0;there are a number of flight performance related improvements in Betaflight 4.0. Therefore, pasting back-ups of the tuning settings for older versions of Betaflight into Betaflight 4.0 will most likely result in poor flight performance! The default settings in Betaflight 4.0 should be reasonably well flyable for most hardware configurations, but users wanting to tune the performance of their craft should read the 4.0 Tuning Notes to learn everything they need to know about tuning Betaflight 4.0 (#6432, #6943, #7078, #7264, #7271, #7304, #7373, #7538);there was a fix to how the min_check 'zero throttle' dead zone is applied. Before the fix, there was an additional, undocumented deadband of the same size as the min_check range above the min_check range. The fix has not brought a change to the arming behaviour and throttle is still required to be below min_check for arming to be possible. However the extra unintended throttle deadband above min_check has been eliminated. This will result in more responsive throttle near minimum and a slight increase in throttle resolution. If you desire to retain the same range for the 'zero throttle' dead zone, you need to double the amount of dead zone configured in min_check (offset from 1000). Be aware that this will also double the throttle range within which the craft can be armed (#7463);there is a new 'Stick Overlay' OSD element that shows an overlay of the current stick positions. In order to use it, the font loaded onto the OSD needs to be updated to the latest version (available in configurator 10.5.0 or newer) (#7476);the functionality of the 'crash flip arrow' OSD element was extended to activate as well when the craft is not in crash flip mode, but small_angle is set, and the craft is unarmed and tilted more than small_angle. This is to show pilots that they won't be able to arm from the current orientation, and allow them to activate crash flip mode and then right their craft (#7250);As part of the introduction of Unified Targets, the existing resource command was complemented with two new commands for resource management: timer and dma. Just like resource can be used to assign pins to functions, timer can be used to assign timers to pins, and dma can be used to assign DMA streams to subsystems and pins (if they have a timer assigned). Important: Since DMA streams are linked to pins through timers, timer assignments for pins have to be made first, before dma assignments to these pins can be made (#5824, #6837, #7620);The syntax for the resource, timer, and dma commands was consolidated, and as part of this the resource list subcommand was renamed into resource show. This aligns it with the new dma show and timer show subcommands (#7712);the following parameters were renamed to more closely match their function: p_level =&gt; angle_level_strength, i_level =&gt; horizon_level_strength, d_level =&gt; horizon_transition (#6673);the gyro configuration was unified from being done by gyro hardware model to being generic for all gyro models. This means that for some targets that are used for multiple different boards that come with different gyro models that are mounted with different orientations, it is necessary from Betaflight 4.0 on to manually set gyro_1_sensor_align (and / or gyro_2_sensor_align for boards with a second gyro) to match the gyro orientation on the board that is used. See note #6761 for an explanation, and instructions for individual boards. This is a temporary workaround, per-board configurations with correct gyro alignment will be released as Unified Target configurations (#5868);unfortunately, bugfixes in the flight controller core functionality have led to an increase of the firmware size, causing it to overflow the available space on almost all F3 based flight controllers. As a result, features have had to be removed from all but a few of the currently supported F3 based flight controllers. Some of the affected targets are: AIORACERF3, BETAFLIGHTF3, CHEBUZZF3, CRAZYBEEF3FR, FURYF3, FURYF3OSD, IMPULSERCF3, LUX_RACE, LUXV2_RACE, MIDELICF3, OMNIBUS, RACEBASE, RMDO, SIRINFPV, SPRACINGF3, SPRACINGF3MINI, SPRACINGF3NEO, STM32F3DISCOVERY (#6900, #6955, #7037, #7038, #7045, #7306, #7381, #7392, #7402, #7421, #7501, #7508, #7518, #7829, #7842);in addition to the above point, the following features had to be removed from all F3 based flight controllers in order to make the firmware fit into flash: Smart Feedforward, support for flashing / configuration of SimonK based ESCs (#7272, #7274, #7391);support for status display through LED strips was removed from F3 based flight controllers, in order to be able to reclaim some flash space. In its place, LED Strip Profiles (except for the 'Status' profile which is not supported on F3) can be used to set LED strips to fixed colours. LED strip profiles are also available on F4 / F7, to enable simple configuration of the LED strip in OSD (#7485);since the above three measures proved to be insufficient to keep flash space from overflowing on F3 based flight controllers, a system of classifying F3 based flight controllers into a number of 'feature cut' levels, and removing features according from them according to their level were introduced. This was used to reduce the number of features built into most F3 based flight controllers even more (#7429). "},{"title":"Major features:​","type":1,"pageTitle":"Betaflight 4.0 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.0 Release Notes#major-features","content":"real time ESC RPM feedback, and notch filtering based on motor RPM (#7264, #7271);D term management with D_min (#7373, #7538);throttle based dynamic gyro and D term filtering (#6943);launch control (#6992);switchable OSD profiles (#6714);SPI attached Spektrum RX (#7210);Unified Targets (#5824, #6837, #7620). "},{"title":"Minor features:​","type":1,"pageTitle":"Betaflight 4.0 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.0 Release Notes#minor-features","content":"cascaded dynamic notches (#7078);thrust linearisation (#7304);integrated yaw control (#6432);switchable LED_STRIP profiles (#7303);stick overlays in OSD (#7167); profile switching based on battery cell count (#7516);per profile limiting of maximum motor output (#7482);support for the Futaba SFHSS protocol on CC2500 (FrSky SPI) hardware (#6865);EU LBT mode for the FrSky SPI RX (#7339);support for STM32F765xx based flight controllers (#6669).configuration over HoTT telemetry (#6224). "},{"title":"Betaflight 4.1 Release Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/release/Betaflight 4.1 Release Notes","content":"","keywords":""},{"title":"Important information when upgrading​","type":1,"pageTitle":"Betaflight 4.1 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.1 Release Notes#important-information-when-upgrading","content":"Betaflight 4.1 brings a fundamental change to how targets are downloaded and installed. The latest release of Betaflight configurator, 10.6.0, contains the changes necessary to support this. For this reason it is important that you update to the version 10.6.0 or newer of Betaflight Configurator (installation instructions here) in order to get the latest version of your targets installed;if you are using the Blackbox Explorer, there is an updated version 3.4.0 to go with Betaflight 4.1 (installation instructions here);version 1.4.0 of the Betaflight TX lua scripts has been released. This includes changes to go with Betaflight 4.1 (installation instructions here);bidirectional Dshot, which is the basis for RPM based filtering, has been improved and is now available with BLHeli_32 (from version 32.7 on) and on BLHeli_S hardware (by using the JESC firmware). Use these instructions to get it set up (#8554, #8779);as you have come to expect, there is a detailed Tuning Notes for Betaflight 4.1. Use them, or use the new tuning sliders in the Betaflight configurator 10.6.0 to get your craft tuned. Please do not paste tuning configurations from previous versions of the firmware. Some defaults have been changed, and some parameters are used in different ways, so previous tuning settings will not work well with Betaflight 4.1 (#8623, #8736);with the introduction of fully configurable VTX control (VTX tables), after flashing the firmware you now have to load a VTX tables appropriate for your VTX and for the country you are flying in before you can control your VTX through Betaflight. Support for loading VTX tables from files is integrated into Betaflight configurator from version 10.6.0 on. Please see the documentation in the new 'Video Transmitter' tab for instructions on how to find an appropriate VTX table and install it (#7251);some optimisations were made to the OSD fonts, and some characters were improved. In order to get a properly working OSD with Betaflight 4.1, the font loaded onto the OSD needs to be updated to the latest version (available in configurator 10.6.0 or newer) (#8390);as announced before the release of Betaflight 4.0, support for F3 based flight controllers has been removed from Betaflight 4.1. "},{"title":"Major features:​","type":1,"pageTitle":"Betaflight 4.1 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.1 Release Notes#major-features","content":"new and improved feed forward 2.0 (#8623, #8736);reworked bidirectional Dshot (#8554, #8779);dynamic idle management using RPM telemetry (#8604);fully configurable VTX control with VTX tables (#7251). "},{"title":"Minor features:​","type":1,"pageTitle":"Betaflight 4.1 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.1 Release Notes#minor-features","content":"support for the Spektrum SRXL2 serial protocol (#8606);support for board-specific custom defaults (#8707);support for arbitrary gyro and mag alignment (#8474). "},{"title":"Betaflight 4.2 Release Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/release/Betaflight 4.2 Release Notes","content":"","keywords":""},{"title":"Important information when upgrading​","type":1,"pageTitle":"Betaflight 4.2 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.2 Release Notes#important-information-when-upgrading","content":"Betaflight 4.2 brings some changes to how targets are downloaded and installed. The latest release of Betaflight Configurator, 10.7.0, contains the changes necessary to support this. For this reason it is important that you update to the version 10.7.0 or newer of Betaflight Configurator (installation instructions here) in order to get the latest version of your targets installed;if you are using the Blackbox Explorer, there is an updated version 3.5.0 to go with Betaflight 4.2 (installation instructions here);version 1.5.0 of the Betaflight TX lua scripts has been released. This includes changes to go with Betaflight 4.2 (installation instructions here);as you have come to expect, there is a detailed Tuning Notes for Betaflight 4.2. Use them, or use the improved tuning sliders in the Betaflight configurator 10.7.0 to get your craft tuned. Please do not paste tuning configurations from previous versions of the firmware. Some defaults have been changed, and some parameters are used in different ways, so previous tuning settings will not work well with Betaflight 4.1 (#8623, #8736);after installing new firmware or resetting the configuration, the motor output protocol selected by default is now 'disabled'. This means that the correct motor protocol has to be selected before the craft can be armed. But this also removed the limitation on the maximum possible PID loop speed imposed by the pre-selected legacy protocol (OneShot125) in earlier versions, resulting in the maximum possible PID loop speed for each MCU type being pre-selected. Arming will be disabled and a warning displayed in configurator until a motor output protocol has been selected (#9619);when enabling bidirectional Dshot, the maximum possible PID loop speed for Dshot protocols will be reduced by half to accommodate for the time taken by the ESC to send the RPM data packet to the flight controller. This does not affect Dshot600, but if bidirectional Dshot is used with Dshot300, the maximum PID loop speed is 4 kHz, and 2 kHz for Dshot150 (#9642);the threshold for activation of the yaw spin recovery feature has had an automatic mode added - this mode sets the threshold to a value that is based on the currently configured maximum yaw rate, with a buffer added on top of it. This new mode is the default for yaw spin threshold, since it provides a setting that is safe to use for most users. Manual configuration of the yaw spin threshold is still possible (#9455);accelerometer calibration is now required before arming is allowed if any feature is enabled that requires the accelerometer. This is to prevent situations arising where the craft may try to self-level with an uncalibrated accelerometer, leading to unexpected or dangerous results. Arming will be disabled and a warning displayed in configurator until the accelerometer has been calibrated (#9031);the calculation for the virtual current meter device has been changed to be based on the throttle value used in the mixer, instead of the throttle channel RC input. This means that this value has things like throttle limiting and throttle boost applied, resulting in more accurate prediction of current and consumption. If you are using the virtual current meter device, make sure to calibrate it again after updating the firmware to make sure the calibration is still correct (#9153);the way that the 'RSSI dBm' value is tracked in the firmware has changed to use actual dBM value in a range of -130 to 0, instead of the previous version's 130 to 0 range. This means that if a custom setting for osd_rssi_dbm_alarm is used, this will have to be changed to be the inversion of its previous value (e.g. 60 becomes -60) (#9550);since stick arming is not recommended for multirotor craft because it can lead to accidental disarms, it has been disabled by default. If you want to use stick arming (at your own risk), it has to be enabled by setting enable_stick_arming to on (#9183);the name CLI command has been removed. Use set name = &lt;name&gt; instead (#8837). "},{"title":"Major Features:​","type":1,"pageTitle":"Betaflight 4.2 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.2 Release Notes#major-features","content":"completely reworked the gyro loop, improved performance and made it always run at the native speed of the gyro (#9444);added new selectable ACTUAL and QUICK rates models (#9495, #9506);added compensation for sagging battery voltage, resulting in more consistent throttle / PID behaviour over for the entire flight time (#9561);Added level race mode ('NFE race mode' in Silverware) (#9481). "},{"title":"Minor Features:​","type":1,"pageTitle":"Betaflight 4.2 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.2 Release Notes#minor-features","content":"added the option to display the OSD logo on arming (#9244);added support for enhanced OSD / CMS devices, made it possible to support highligting of text or symbols (#9212);added support for FrSkyOSD OSD devices (#9127);added support for the Redpine RC protocol on devices with an SPI connected CC2500 chip (FrSky SPI) (#7601). "},{"title":"Betaflight 4.4 Release Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/release/Betaflight 4.4 Release Notes","content":"","keywords":""},{"title":"1. Cloud build​","type":1,"pageTitle":"Betaflight 4.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.4 Release Notes#1-cloud-build","content":"This is predominantly brought to you for convenience, and to ensure we can keep the 512kb flash targets (STM32F411 and STM32F722) alive and well for years to come. The cloud build system will allow you, the flyer, to select the features you want, and a custom firmware will be created for you. Any issues with the cloud build process please check out the #cloud-build-issues Discord channel. Help us to help you, buy taking advantage of the new Support button in the Command Line Interface (CLI) tab in Configurator 10.9.0 (RC4 onwards). This will give us valuable information in trying to diagnose your issue. NOTE: If you have something missing from your cloud build that you would normally expect to be present, e.g. a flash chip or barometer, the reason is because the board configuration (in unified targets) has not been updated with this information (either by the community, or the manufacturer). If you do have something missing then we suggest flashing the core version. This will load all the hardware drivers (but not all features), and then you can submit a Support level of detail from the CLI tab. In addition you can use the custom defines input box that is shown when &quot;Expert Mode&quot; is enabled. For those missing a barometer: You can try any or all of BARO_MS5611 BARO_SPI_MS5611 BARO_BMP280 BARO_SPI_BMP280 BARO_BMP388 BARO_SPI_BMP388 BARO_LPS BARO_SPI_LPS BARO_QMP6988 BARO_SPI_QMP6988 BARO_DPS310 BARO_SPI_DPS310 BARO_BMP085 BARO_2SMBP_02B BARO_SPI_2SMBP_02B in the custom defines input box. For those missing the flash chip: You can try any or all of FLASH_W25P16 FLASH_W25Q128FV FLASH_W25M02G FLASH_W25N01G FLASH_W25M in the custom defines input box. Thank you all for your patience and assistance in working through what boards have what hardware. Unfortunately we need our flyers to help crowd source this information - as there is such diverse hardware out there! Thanks to @blckmn for the implementation of the cloud build! "},{"title":"2. HD OSD​","type":1,"pageTitle":"Betaflight 4.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.4 Release Notes#2-hd-osd","content":"HD OSD is now supported and adds the following features. Note that not all HD Goggle/VTX combinations support all features, but hopefully will do so in time. If the OSD option alone, or the OSD (HD) option is included in the build options, then HD support will be included. To enable HD support select VTX (MSP + Displayport) on the ports tab for the UART to which the VTX is connected. The MSP option will automatically be selected.  The OSD HD preview may be manually selected on the OSD tab along side the PAL and NTSC options however this is not necessary as the first time the HD Goggle/VTX system is powered the FC detects it and automatically applies the following settings, saves and reboots automatically. This only happens if the setting below are not already applied. This is a new feature, and may not be supported by the your HD system yet, so if the OSD tab does not automatically switch to HD, please enter the commands below manually. set osd_displayport_device = MSP set vcd_video_system = HD  The size of the canvas (visible number of columns/rows) defaults to 53x20 (compared to 30x16 for PAL and 30x13 for NTSC). The VTX is then able to adjust this by sending an MSP command to adjust the canvas size. WTFOS will set this to 60x22 for example. This will be automatic with no user interaction required. Should the goggle vendor decide to support alternate canvas sizes then they would be selected in the goggle menus, and the new canvas size communicated to Betaflight which would then adjust the usable number of OSD rows/columns accordingly. Regardless of the canvas size the boot logo, armed message, stats, CMS menu etc. will be centred correctly. If the canvas size is reduced, either by selecting the PAL/NTSC options or by the VTX sending a different canvas size, all OSD elements will be moved onto the available canvas so they can be repositioned using the configurator. In addition to the usual OSD elements it is now possible, where supported by the Goggle/VTX vendor, to enable/disable and reposition the following OSD elements. If none are explicitly enabled then all those supported will be displayed at their default locations. Goggle battery voltageVTX voltageBit-rateDelayDistanceVideo link qualityGoggle DVR iconVTX DVR iconVTX warningsVTX temperatureGoggle fan speed To make better use of the colour OSD capabilities of the HD systems, four fonts are now supported. The intent is that these be used to display text and other icons in white, green, amber and red corresponding to normal, good, marginal, critical conditions respectively. This will allow the link quality text and icon to be display in red when critical, amber when marginal, and green when good for example. To enable this feature set the displayport_msp_fonts array to select the font number (0-4) to use for each of normal, good, marginal, critical conditions respectively. To enable all four fonts: set displayport_msp_fonts = 0,1,2,3  To only use the the default (predominantly white) font: set displayport_msp_fonts = 0,0,0,0  To display critial warnings in red, select the first font for normal, good, and marginal OSD elements and for critical OSD elements select the third font: set displayport_msp_fonts = 0,0,0,3  Thanks goes to @SteveCEvans for these improvements! "},{"title":"3. Preset Favourites​","type":1,"pageTitle":"Betaflight 4.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.4 Release Notes#3-preset-favourites","content":"This feature reduces the amount of search the users have to do in the presets tab. Configurator will remember the presets you are using, automatically marking them with the &quot;star&quot;. Favorite presets will always appear first in the initial list and the search results. In combination with the fix that preselects the current firmware from the plugged in FC it allows users to completely avoid searching of the commonly used presets, and pick them right away. The UI &quot;stars&quot; are clickable, so users can manually add/remove favorite presets.Favorite presets are being remembered by it's path+name in the repo. So a favorite preset in one repository becomes automatically a favorite in another, if it's sharing the same name and path withing the repos. "},{"title":"4. GPS Return to Home enhancements​","type":1,"pageTitle":"Betaflight 4.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.4 Release Notes#4-gps-return-to-home-enhancements","content":"GPS &quot;Rescue&quot; has been extensively revised and greatly improved. The quad should reliably return at the set speed, descend at an angle, land within a few metres of the home point, and disarm automatically on touch-down. There are separate PID control elements for altitude and return velocity t home; the defaults work very well for 'typical' quads. The system should initially be tested with a switch at reasonably close range and low altitude. Setting up and testing GPS Rescue to provide a reliable return on the event of an RxLoss failsafe is a non-trivial task, but well worth the trouble. We strongly recommend reading the wiki entry and following the instructions there. Remember that in any true failsafe the quad will always enter Failsafe Stage 1 phase for 1s (user-configurable) before initiating the Rescue. You MUST set the Stage 1 behaviour NOT to DROP, or it will disarm and drop in Stage 1 and never enter GPS Rescue. The safest option for Stage 1 is to configure Angle Mode on an aux switch, and set Stage 1 Failsafe to enable Angle Mode at a fixed hover / light climb throttle value with all other sticks forced to center. When you get signal loss of more than 300ms, you'll enter Angle Mode, and the will start to level out. That will give you a clear advance warning that you are getting signal breakup. Alternatively, you can set Failsafe Stage 1 to hold all current values; the quad will then continue on the same path until Stage 1 Failsafe expires and the Rescue starts. Please disable the compass/magnetometer unless: it has been fully calibrated, andyou have confirmed, by logging, that the magnetometer heading values are noise free and reflect the true attitude of the quad. In most short flights, using the Baro provides a significant improvement in altitude control. Baro data is updated more frequently than GPS data, and often varies less. The user can control how much trust they place on the Baro vs GPS altitude data. Over long flights, and with some particular Baro units or installations, Baro drift can be more of a problem, and the GPS data should be trusted more. There are three new, and very useful, GPS Rescue Debug modes. One shows how accurately the quad tracks the requested altitude and the requested velocity. The other two are used for tuning the GPS Rescue PIDs. If Mag is enabled, Mag information is automatically recorded. Data acquisition from GPS hardware now uses the UBlox protocol, at 10hz, by default. NMEA mode has been improved and in some cases will run at 10hz. We now can log Dilution Of Precision values for future improvements. There are extensive changes to sanity checks, and in most cases the quad will attempt to land itself, rather than disarm, if necessary using only the Baro signal. WARNING: ALWAYS CHECK that the Home Arrow points directly back towards home after takeoff! Sometimes, if you take off and spin around during arming, or immediately on takeoff, the quad's attitude information can become corrupted, and the Home Arrow can point the wrong way. It's best to arm cleanly and fly away from Home in a straight line at reasonable speed immediately after takeoff. Watch the Home Arrow carefully to ensure that it quickly points back to Home. If the Home Arrow points the wrong way when a failsafe occurs, the GPS Rescue will initially fly off in the wrong direction and in some cases you may lose the quad. thanks to @ctzsnooze, @karatebrot, @haslinghuis "},{"title":"5. Other OSD improvements​","type":1,"pageTitle":"Betaflight 4.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.4 Release Notes#5-other-osd-improvements","content":"Option to show 'READY' in the OSD with a mode switchThis is a niche improvement, intended for racing situations where all pilots video feeds are on one central screen. The pilot can flick a switch to indicate that they are ready to fly, and the word READY appears on their OSD. The race director can then tell if all pilots are ready by looking at the central screen. On arming, the READY text disappears. For more info see PR#11886 - thanks @jonmahoney15 Craft and Pilot name now handled correctlyThe user can now configure their OSD to show either Craft or Pilot name, or both. For more info see PR#11391 - thanks @krasiyan PID profile and Rate profile names shown in OSD Thanks @qvasic "},{"title":"6. Support for extended DShot Telemetry​","type":1,"pageTitle":"Betaflight 4.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.4 Release Notes#6-support-for-extended-dshot-telemetry","content":"If the ESC supports it, we now can get per-motor temp, current and voltage via DSHot Telemetry. For more info see PR11694 - thanks @damosvil "},{"title":"7. Flight improvements​","type":1,"pageTitle":"Betaflight 4.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.4 Release Notes#7-flight-improvements","content":"Antigravity AntiGravity has been tweaked, resulting in greater stablility during rapid throttle changes, by: not applying AntiGravity P boost to yaw, preventing additional yaw wobbles during rapid throttle changesreducing the overall AntiGravity P boost to reduce the chance of unwanted P wobblesallows the relative P gain during AntiGravity to be set independently of the I boost, with anti_gravity_p_gain. The default is 100, meaning 'normal'. A lower number will give proportionally less P boost than default, for machines that get P wobbles readily during throttle boost, and vice versa.further optimisations of the timing of the boost effect. A PT2 filter is used at 6Hz by default. The value can be tweaked to focus the boost when it is needed most by changing the anti_gravity_cutoff value. Higher values will make the boost a bit stronger but of shorter duration. Lower values may work better for less responsive builds or where a more prolonged boost is needed.applying iTerm windup constraints to antigravity-induced iTerm increases (thanks tbolin)removing the old 'step' mode, which wasn't working as intended The AntiGravity value is now directly related to the amount of iTerm boost. The default is now 80, meaning 8x iTerm boost on fast throttle cuts.Do not increase AntiGravity unless you've made a log and confirm that there is no P wobble. Use the debug.See PR#11679 for more information - thanks @ctzsnooze, @tbolin. iTermWindup iTermWindup is an 'old' way to prevent iTerm growth when the quad cannot achieve the requested target rate. In 4.4 we are making iTermWindup active by default, at a value of 85. Whenever the motorMix percentage exceeds the iterm_windup limit value of 85%, iTerm growth will be reduced to the extent that motor_mix exceeds the iterm_windup value. There will be zero iTerm growth only when motorMix differential is 100%. The iTerm inhibiotion will apply on all axes, including yaw. The default value is appropriate for nearly all quads. Heavy or very low authority quads with significant iTerm windup problems (slow oscillations on larger moves) may benefit from lower iterm_windup values. iTermWindup complements iTermRelax, and is especially useful to prevent iterm windup in low authority quads where the machine is not able to meet the target rate for some time after the sticks have stopped moving. iTermRelax is most effective, and operates more smoothly, when the sticks are moving fast. iTermWindup also constrains iTerm growth in a variety of impact or failure states. For more information see PR#11806 - thanks @ctzsnooze. Smoother mixer behaviour when airmode is active with extreme stick inputs There were a number of edge cases where the onset of airmode throttle boost was not smooth, with different outcomes depending on the mixer type. The mixer is now better behaved. For more information see PR#11867 - thanks @QuickFlash. "},{"title":"7. ELRS 3.x support for ELRS SPI boards​","type":1,"pageTitle":"Betaflight 4.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.4 Release Notes#7-elrs-3x-support-for-elrs-spi-boards","content":"NOTE: ELRS 2.x transmitters will not be able to bind to ELRS SPI Boards flashed with Betaflight 4.x. "},{"title":"Other changes​","type":1,"pageTitle":"Betaflight 4.4 Release Notes","url":"/betaflight.com/docs/wiki/release/Betaflight 4.4 Release Notes#other-changes","content":"Four PID profiles (was 6), and 4 rate profiles (was 3) - thanks @haslinghuisTPA settings inside the PID profile - thanks @haslinghuisimproved barometer smoothing and calibration, attitude calculation fixes, filter fixes - thanks @karatebrotHD OSD support - thanks @SteveCEvansVTX device over MSP PR11705 - thanks @phobosparse and log GPS degree of precision (DOP) values PR11912 - thanks @karatebrothardware support for newer gyro chips, improved filtering for BMI160/270, etc - thanks @SteveCEvans and otherslower minimum of 20Hz for dynamic notch, useful for low RPM setups with very large propsincreased dynamic idle minimum RPM from 100 (10k RPM) to 200 (20k rpm) for quads with very small propssupport for 64 discrete LEDs via cloud build option - PR12064 - thanks @LimonspbFixes to NMEA at 10hz and UBlox comms - thanks @Karatebrot, @krzysztofkuczekWinbond W25q80 flash support - thanks @David-OConnormany bugfixes, target updates, driver updates and fixes - thanks to too many people to mention individually "},{"title":"BetaFlight 3.0 Release Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x","content":"","keywords":""},{"title":"Betaflight 3.0.1 (3.0 patch 1)​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#betaflight-301-30-patch-1","content":"Finalized OSD Code. (More OSD configuration options)Changed Relaxation Parameter to act as transition (Helps better against bounce backs on higher rates with high setpoint weight). Config's two sliders are now Dterm Setpoint and Dterm Transistion. See addition to the 2DOF PIDC description.Fixed non working Baro for some boardsAdded second notch for gyro (set gyro_notch1_hz and set gyro_notch2_hz, also available in the new 1.8.3 configurator)Added configurable pidSum limitNew filter defaults (notch filters enabled by default)Added BEEBRAIN target "},{"title":"Betaflight 3.0.0-RC14 (F4 Support)​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#betaflight-300-rc14-f4-support","content":"Final Release​ This is really a major release. The full detailled change list can be found in the the commit history.[https://github.com/betaflight/betaflight/commits/master] Short Summary of changes: STM32 F4 support (working blheli passthrough)Full IO reworkMajor target seperations. Easy implementation for new targetsPWM code reworkAdded OSD integrationMajor code cleanups and rewritesMore configurator integrationNew Betaflight PID controller based on deg/sec. All of the future development will all happen in this single pid controller. There is still a Legacy PID controller, which is pretty much evolved rewrite. That one will stay the same.The new Betaflight 2DOF PID controller has some additional extra parameters for configuring. Check out the config options in the configurator. This PID controller allowes less overshoot percentage and less Derivative needed to get the same affect.RC Interpolation added back with multiple options. (Use Auto for automatic rx rate configuration)Added &quot;diff&quot; cli command for easier backuping of config.Removed Super expo as it is a part of Super Rates and enabled by default.Increased linear rate range. rc_rate higher than 2.0 will become stronger and 255 will give full linear 2000deg/sec. Use configurator rate tool to see visual representation of rates.Smoother RC EXPO curve (Use rate tool in configurator for optimal rate tuning) RC2 - Changed defaults / cleanup ONESHOT125 feature RC3 - Defaults based on feedback // yaw_axis added to interpolation // add additional config parameters // FIX PPM on KISS RC4 - Defaults based on new public tests // Fixed some wrong denom defaults for SPI targets RC5 - Defaults based on new public tests // Fix for higher CPU due to filter reinitialisations // Add Sparky2 // Fixes for various targets RC6 - Defaults // rename zero throttle stabilisation to pid_at_min_throttle // CLI cleanups RC7 - Fix F4 diff/dump crashes // Fix for Sparky2 // Fix for d filter coefficients bug with higher pid denoms // Add new blackbox headers RC8 - Defaults (notch filter 260hz) // add &quot;diff showdefaults&quot; command // change some cli names // more MSP parameters // higher gpio speed for i2c gyro targets // added blackbox motor test // Improved FPV angle mix feature // Reduced PID loop busy wait // Added new Target ISHAPEDF3 // Fix PPM for Revo // RC9 - Support all targets (ignore int pin on pid loop) RC10 - Defaults // Cleanups // Drop betaflight PIDc from OPBL CC3D target (use hex for full support) RC11 - Fix for dterm setpoint range // sparky i2c fix RC12 - Removed Sonar for naze32 to free some flash space // Removed feature super expo. Super expo is active when srates are set // Increased linear rate range. rc_rate higher than 2.0 will become stronger and 255 will give full linear 2000deg/sec // Redefined EXPO like in 2.8.0 RC4 rc_expo is now power expo! // Improved efficiency in rate code // rate cleanup // BlHeli passthrough fixes for F4 // New target RCEXPLORER RC13 - Fix drastically rc expo curve around center // Fix anglemix mode in configurator // added forcing into DFU mode for F1 and F3 through cli command dfu // Fix faulty baro detection // Fix broken LEDSTRIP west indicator RC14 - disable yaw filter by default // repurpose pterm setpoint weight to apply only on super rates // improve gyro debugging // fix beeper for sparky2 New 1.8.0 configurator (RC14) supports some additional tuning parameters. Don't forget to check tool tips for explanations! New blackbox 2.5.6 supports all new parameters 1.7.8 configurator (RC12) 1.7.7 configurator (RC11) 1.7.6 configurator (RC10) supports some additional tuning parameters. Don't forget to check tooltips for explainations! 1.7.5 configurator for RC 8 and up supports some additional tuning parameters. Don't forget to check tooltips for explanations! The ones who are trying a notch filter on pre RC7 releases and using separate gyro ans pid rate/denom you must upgrade to RC7 as there was a bug in coefficient calculation. Use 1.7.2 configurator for up to RC 7. 1.7.1 configurator supports some additional tuning parameters. Don't forget to check tooltips for explainations! The PID from 2.x versions can transfer to 3.0 as the scaling is the same, but you may expect that it should be possible to get higher PID's despite the same PID scaling due to new PID controller functionalities. "},{"title":"New CLI commands​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#new-cli-commands","content":"Note that most are better to set using the new BetaFlight Config GUI. If a CLI command is not listed here then it is most likely not changed so look in the Wiki 'CLI command' page. If in error, missing, etc then post a note about what is wrong in Boris' thread. Be sure you type 'help' in the CLI to see all commands. diff​ To see what differs from default. This is handy to learn what the config GUI does with CLI settings. This is also a better output for posting your CLI since then you post only setting that are different from the defaults instead of a 'dump' which outputs everything. diff all​ shows differences in all profiles and rate profiles diff all commented​ to see defaults feature SUPEREXPO_RATES or feature -SUPEREXPO_RATES​ Enables or disables the SuperExpo. If disabled as a Feature it can still be enable from a AUX (Mode tab) switch. RC12- Removed feature super expo. Super expo is active when srates are set This means that if you used rc expo you may need to readjust it. Just lower it. Super expo feature is removed. Needs some cleanups though in the cli, but it is actually not there anymore. Superexpo is automatically active when you use srates (old rate). When 0 it is disabled. The ones who like to have linear rates without super expo can now increase rc rate. All rc rates above 2.0 are now having much higher incremental. 2.18 is I believe already 1000deg/sec and 2.55 is 2000deg/sec. Than you can add some rc expo. This new solution offers more flexible rate behavior for everyone. Also when you don't use rc expo now cpu usage will be lower as it the calculation is not performed anymore. Same for srates. If you don't use them than super expo calculations are not performed. The current configurator doesn't display these rates properly, but that will happen soon when configurator gets an update. Probably next week. set rc_interpolation = AUTO​ [OFF, PRESET, AUTO, MANUAL] This feature can cause the CPU to work harder to be able to run higher d setpoint weights and get cleaner motor outputs. Set to OFF if CPU loading is too high. Note: Auto rc interpolation detects rx speed based on the reported speed by rx itself. But some receivers like also X4RS can report 9ms interval while it is actually 18ms on roll and pitch when using more channels than 8. set rc_interpolation_interval = 19​ [1..50] set motor_pwm_protocol = OFF​ [OFF, ONESHOT125, ONESHOT42, MULTISHOT, BRUSHED] set zero_throttle_stabilisation = OFF​ [ON, OFF] NOTE: this is only in versions up to RC5. In RC6 and up it is changed to: pid_at_min_throttle = OFF​ [ON, OFF] With this OFF the PIDC does NOT respond to Sticks when Throttle values in below min_check, just like in the orignal MultiWii, BaseFlight or CleanFlight. set airmode_activate_throttle = 1350​ [1000..2000] That is the THRESHOLD (ACTIVATION) at which Airmode gets turned on the FIRST time the throttle hits this value. Airmode is then ON until DisArmed. This is to keep AirMode OFF while still on the ground. Once throttle goes above this setting AirMode is enabled through the entire throttle range. set yaw_rate_acceleration_limit = 50?​ [0..200?]Changed to rate_accel_limit in RC12 Yaw rate accel limit is the betaflight (2DOF) PIDC replacement for yaw jump prevention. It works differently and much better. It prevents quick accelerations and decelerations of yaw axis, what were actually causing jumps. For the Legacy PIDC use &quot;d_yaw&quot;. What we do with sticks is pushing the multirotors beyond their limits, but pid controller still wants to correct that and ramps up the motors what causes jerky behavior. With accel limits the pid controller has a protection to limit the acceleration and make it smoother what also helps against iterm windups we have seen getting worse on yaw axis. Same can also be done for roll and pitch axis what is disabled by default. It can give much smoother flight characteristics. set gyro_lowpass_level = HIGH​ [NORMAL, HIGH] Sets how aggressive/steep the cutoff is. Steeper cutoff adds more delay compared to less steep one. Boris states: &quot;The gyro doesnt need a very steep cut if you ask me on a descent setup, while dterm is the one what needs more filtering&quot;. "},{"title":"The following CLI commands are Per PROFILE so can be different in each Profile.​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#the-following-cli-commands-are-per-profile-so-can-be-different-in-each-profile","content":"set pid_tolerance_band = 0​ [0..200] set tolerance_band_min_reduction = 40​ [0..100] Reduces &quot;hunting&quot; effect from pid controller. What does the pid controller do? It hunts for error all the time. Its mainly P and D what are the quickest ones. The problem is that when error is very small like in forward flight or hover where not much error needs to be corrected the pid controller gets more &quot;relaxed&quot; to not keep looking for perfection. The amount of pid relaxation is determined in percentage in tolerance_band_min_reduction. You can for example remove yaw noise on this way till certain level, but you may need to retune. set pid_controller = BETAFLIGHT​ [LEGACY, BETAFLIGHT] set dterm_lowpass_level = HIGH​ [NORMAL, HIGH] Sets how aggressive/steep the cutoff is. Steeper cutoff adds more delay compared to less steep one. set dterm_lowpass = 100​ [0..500] set dterm_notch_hz = 0​ Set to zero disables the filter. [0..500] set dterm_notch_cutoff = 150​ [1..500] set dterm_setpoint_weight = 120​ [1..200] "},{"title":"Changes in RC8 CLI​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#changes-in-rc8-cli","content":"New settings set blackbox_on_motor_test = OFF​ [OFF,ON] diff showdefaults​ New Defaults set dterm_notch_hz = 260​ set dterm_not​ off = 160 set pid_at_min_throttle = ON​ set failsafe_procedure = DROP​ [AUTO-LAND,DROP] "},{"title":"Changes in RC12 CLI​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#changes-in-rc12-cli","content":"Rc rate will be represented in deg/sec on the new configurator. That is your max stick reflection. Also expo and other stuff will eventually be showed correctly with proper naming. set rate_accel_limit = 0​ [0..1000]Increasing can help decrease Bounce back on low power copters. set yaw_rate_accel_limit = 220​ [0..1000]Name changed. See &quot;yaw_rate_acceleration_limit&quot; above for description. set accum_threshold = 130​ [15..1000] set yaw_accum_threshold = 32​ [15..1000] set iterm_throttle_gain = 0​ [0..200]Joshua Bardwell's comment: iterm_throttle_gain came from a suggestion I made to increase I gain roughly as the derivative of the throttle position. I noticed that I was having to increase I gain significantly higher--maybe 20 points or so--to keep pitch consistent on throttle punch and chops. So I proposed that the I term be artificially boosted when the throttle was moving quickly. iterm_throttle_gain controls the strength of this parameter. set zero_cross_allowance = 2​ [0..50] rc_rate, rc_rate_yaw​ linear rate without curves. Configurable up to 2000deg/sec roll_srate, pitch_srate, yaw_srate​ super expo rate like it was already, but now doesnt need a feature for being activated. Set it to 0 and super expo is disabled. You can now even have super expo on one axis and not on another for example rc expo​ new expo what needs lower numbers with smoother curve and more center feel configurability. Usefull particularly for linear rates. Note: The Srates replace the old rates for Roll, Pitch &amp; Yaw so still can be adjusted with Apps that use MSP like MWOSD. A tip of tuning super expo rates. Configure rc rate for how you want your mid stick to feel and than just add more or less srates to change transition and max stick reflection. Good thing about srates is that it kind of tries to keep the same mid stick while the extremes do change. Its like inverted expo idea. Post by ctzsnooze explaining these settings:[http://www.rcgroups.com/forums/showpost.php?p=35602942&amp;postcount=37292] Post by Boris showing Old verse New rates with and without using SRATE settings:[http://www.rcgroups.com/forums/showpost.php?p=35704903&amp;postcount=38205] Note: See the FAQ &quot;What is the story on the different Rates and Expos?&quot; for an in depth explanation on the history of Rates and Expos. "},{"title":"Changes & new in RC13 CLI​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#changes--new-in-rc13-cli","content":"command dfu forcing into DFU mode for F1 and F3 "},{"title":"Changes & new in RC14 CLI​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#changes--new-in-rc14-cli","content":"repurpose pterm setpoint weight to apply only on super rates "},{"title":"Discussions on using the new features:​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#discussions-on-using-the-new-features","content":""},{"title":"Legacy PID controller​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#legacy-pid-controller","content":"This is a rewritten MWREWRITE PID controller that uses integer math instead of Floating point math. Some may like this one better and it is also recommended to run faster PID loop rates on F1 processors. "},{"title":"Betaflight 2DOF PID controller​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#betaflight-2dof-pid-controller","content":"This is a NEW PIDC controller. All components P, I and D work completely independent from each other. That means it is a parallel PID controller. On top of that also the setpoint weight from 2DOF architecture is used for Derivative component. So technically it is a Kp, Ki, Kd, c from pid2 in here. Post from Boris about this differences between the Legacy and 2DOF PIDC:[http://www.rcgroups.com/forums/showpost.php?p=35460572&amp;postcount=35822] Post from Joshua explaining 2DOF PIDC and setpoint weight: Betaflight 3.0's new 2 degree-of-freedom PID controller is one of its most exciting features. Let's learn what the new &quot;setpoint weight&quot; sliders do! I also discuss the new RC interpolation feature. Error in a PID controller can be separated into externally-induced error and error caused by moving the set-point. The 2DOF PID controller allows you to distinguish between these two types of error. In other words, it allows you to control how aggressively the PID controller responds to your stick movements. P term setpoint weight basically controls overshoot. Higher P term setpoint weight results in sharper stick response, lower P gains, and more overshoot and oscillation. Lower P term setpoint weight results in softer stick response, higher P gains, and less overshoot and oscillation. D term setpoint weight is harder to describe. Higher D term setpoint weight results in an overall much sharper and more precise flight feel. But it also makes the copter fly less smoothly, since it is responding exactly to every little wiggle and jiggle of the stick. Lower D term setpoint weight results in a smoother, more &quot;organic feeling&quot; flight experience, but also a softer and less precise one. A very critical point to understand is that these characteristics ONLY come into play when the PID controller is responding to your stick movements. When the sticks are not moving, or are moving slowly, the effect is less pronounced or nonexistent, and the PID controller works exactly like it used to. So you can think of P, I, and D as tuning the overall response of the copter to all inputs, including external ones like wind blowing on the copter, and the setpoint weight sliders as tuning the way the copter responds specifically to stick movements. A video by Joshua about this (note: for 3.0):[https://www.youtube.com/watch?v=4zncyYdAZPU] "},{"title":"V3.0.1​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#v301","content":"Dterm setpoint: 0 = Measurement, 1 = error. Everything above 1 is more error / more stick derivative. 2 = 2 times error. Second slider used to be P setpoint as originally described in 2DOF pid controllers and in release candidates, but I didn't find it as useful as I would like so it has been repurposed to be transition for the first slider. When going into the roll its error and when returning from roll back to center stick it will be transitioned more into measurement to smooth it out. Here it means D setpoint transition of 1 means no transition at all. Its fully error from setpoint weight. When lower than 1 it will soften the transition on returning stick slowly to measurement. For example if you liked the smoothness of measurement on quick stick inputs etc, but you also like the responsitivity of error, which makes it more robotic than you can find a middle way now. Still high stick response, but without losing the smoothness on stick returns. I personally fly 2.0 setpoint with 0.3 transition. 0.3 is like exponential curve on stick returns. It will help slow down the rotational rate faster instead at the last moment to prevent bumpyness. Not sure where new info on using the &quot;setpoint weight&quot; sliders and Tuning the newest BetaFlight PIDC (2DOF) should go but for now adding it here. These are Posts from people that have successfully used these to 'tune' out bad behavior.​ Maybe this should go into a New FAQ. Post in Boris' thread suggestions. General explanation from ctzsnooze:​ When flying through turbulent air the quad gets lots of external inputs. If the buffeting effect results in errors between your set roll rate and what the gyros report, then the PID system has to make corrections. Most PID systems 'under-correct' external influences simply because 'over-correction' will cause oscillation. When tuning, we aim to get the magnitude of the under-correction to be as small as possible. A very highly tuned quad sits just under the point of self-oscillation all the time. Mostly we don't tune as high as that because it won't tolerate dodgy props and we might get hot motors - however with the new filtering options we can sometimes up-tune without such a problem. I takes time to build up and let go. So when flying at medium speed through slightly bumpy air and noticing you have a 'wandering line', more I will usually help. But too much I may mean that once you leave one bank of moving air and enter the next, the accumulated iTerm correction will be going the opposite way and will take some time - about half a second - to 'let go'. So adding more iTerm won't always solve the problem. I certainly won't fix fast buffeting, it is too slow, and 'too much' I may not be helpful even for slow wandering lines. D on the other hand responds immediately to sudden changes, and responds faster as the buffeting becomes faster. It does very little or nothing for slow drifting behaviours (thats what I is for). P is good for any speed of buffeting but mostly when the angular deviations are larger, rather than small fast deviations for which D is more effective. If the quad is well tuned and has crisp roll stops, it should fly well in wind as well. If your filtering is heavy, the props are relatively heavy for the motors, and the quad already has issues in prop wash or with wobble, then it probably won't handle wind buffeting very well either. If you fly very fast through very turbulent air you need super responsive P and D and responsive lightweight props. The more 'aerodynamic' the quad the better. You may want to push P and D higher than 'normal', and maybe see if you can run with slightly higher filters - i.e. re-tune more aggressively. That tune might put you at risk of hotter motors or other oscillations and demand clean props, so it might not be your 'everyday' tune, but it should generally handle wind that little bit better than a less highly tuned machine. Post from QuadMcFly:​ Well I had an interesting experience trying to tune these silly 5x4.5x3HBN props on my primary acro quad. Mostly I just wanted to see if I could. The key ended up being kind of counter-intuitive. Basically I had to screw with the set-point sliders in 3.0.1 to compensate for the slow transition speed of the props, but it was exactly backwards from what I thought. The D set-point slider had to get put almost all the way to the left, and the Transition set-point slider all the way to the right, so essentially that basically equals almost the old &quot;measurement&quot; D calculation method. Then I was able to get my P gains back up to make up for the smoothing of the measurement method and get some snap back. I had to jack D way up too, to get rid of prop wash and it's still not gone entirely, but it's looking pretty darn good! Oh, also my I gains are quite high on both roll and pitch. I'm pretty pleased with the results! Still a tiny bit of prop wash at high throttle, but I think I can get rid of it with a tiny bit of TPA without sacrificing too much stick feel. Right now my TPA is at 0. Posts from the &quot;BB log video response&quot; thread by Woody_99:​ problem: Need just a little help with fine tuning a couple of my X quads. (130 and 250 size. BF 3.01) On a hard, high throttle 180 turn, I get some shaking on both of them. Been raising D, and it seems to be helping, but is that the direction I should be going? Motors aren't hot. From what I've been able to comprehend, that seems to be right, but wanted to double check that I'm on the right track.suggestion: Yes, raising 'D's should be correct to suppress prop wash as long as motors do not get hot. Do run a BB Log to check for oscillations and other bad things. ßF 3.0.x is still quite new but in Boris' thread there is discussion on the two sliders in the PID Tab. Seems adjusting these can really help eliminate prop wash and help a copter fly the best. Not many people have posted about these so not much is known on how to adjust them. Result: Raised D just a couple more points on both quads. Propwash was better, but still there. Instead or raising D any further, I thought I would give the top slider (Setpoint Weight) a try. 1st adjustment on the 130 and the propwash is totally gone at a Setpoint Weight of 2.36. 250 quad, I made the same 1st adjustment. Better still, but still slightly present. Made a second adjustment, and now the shakes are gone from the 2nd quad too. Setpoint Weight at 2.46. Both have the Setpoint transition at 0.3. Could be just a placebo effect, because I have no clue what the slider does, but both quads are better than ever. Motors are slightly above ambient temp, so I think I'm set. Wish I could say the same for my batteries. Flies so nice I was really pushing them today. Boris' comment of the Dterm Sliders:​ The sliders are pretty easy. Just use extremes and feel difference. Upper slider determines the stick sharpness (acceleration of stick input). The lower slider determines how smooth it acts on stick returns. Upper slider high: Sharpest response Lower slider high: sharpest response on stick returns, but also chance to most jerkiness. So smooth this out by higher transition deacceleration. Slider Tuning Tip from Tesseract1984:​ My freestyle setting was top slider down to 1.7 and bottom slider adjusted until bounceback is eliminated. I ended up with 0.8 (correction) Note: for my method, you quad needs to be well tuned already. No noise issues, minimal propwash (i have virtually zero since moving to dshot). If you don't sort your tune out first, you'll be chasing these sliders around trying to make sense of what it's actually doing to your tune. Tune first. Sliders last. This may be me speaking for myself and there might be a better method but this is what works for me. Oh, also, when you're tuning, don't be so afraid of using D. Keep jacking it up while maintaining motor temps until your prop wash is under control. My numbers ended up a lot higher in 3.1 over any other release. And Boris' reply: Yeah that's a valid statement. The sliders can even differ per prop. On bullnose props which seem a bit more bouncy in general I tend to run lower setpoint transition. On that way I don't have to sacrifice much sharpness on my tune. A Joshua Bardwell video on Betaflight 3.0 Setpoint Weight (2DOF PID Controller) MoreTuning Tip from Tesseract1984:​ Ya...I almost feel like there needs to be a blurb somewhere that post 3.0.1 you should rethink your paradigms around what are acceptable value ranges. I remember in 2.9.1 if i had D over 26 i had screwed up and usually meant starting from scratch. My D in 3.1 is now at 46 and 50 for R and P respectively and motors still come down cold. My P is also a lot higher than other releases on this same powertrain. I basically stopped pushing D up with my propwash handling was good. Yes lower the transition slider also helps with this if you are getting bounceback on move completion. So scenario 1: Propwash Crank the D, keeping an eye on motor tempsMotor temps high and still have propwash? Back off on P and try working D up again Scenario 2: Behaviour on stick return Play with slidersTransition slider specifically introduces some deceleration on stick return so that stops are not as abrupt. "},{"title":"PID control at Zero Throttle​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#pid-control-at-zero-throttle","content":"Originally Posted by MasterZap View Post Let me try to explain this in a clear way: As boris say, you have three things: Motor Stop (nobody should use that in 2016, so forget it) Air mode (everyone should use that ) Pid_at_zero_throttle  !! BORIS - CORRECT ME IF I AM WRONG !! pid_at_zero throttle kills PID's COMPLETELY for after you just arm. The moment you spool the motors up above zero, PID's start working. Now I'm not sure if they continue to work until you disarm or not I don't know, but as you see below, that doesn't matter. I think the motivation for this &quot;feature&quot; is to stop people whining about motors revving on the bench, or I dunno. For me, who run an underslung battery that barely lets the quad stand, I actually WANT pid at zero throttle, or it surely tips over when I arm it. Me, I need stabilization on the ground!! Airmode also has a threshold for starting, and again, the moment you come over this threshold, it is on until you disarm. Plus, airmode overrides &quot;Pid_at_zero_throttle&quot;. So even if &quot;pid_at_zero_throttle&quot; isn't sticky, airmode IS sticky, and since it overrides.... it makes pid_at_zero_throttle &quot;effectively sticky&quot;. So the moment you've revved up, you will have full authority until you disarm. Clear as mud? /Z "},{"title":"Notch Filters​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#notch-filters","content":"See: Black-Box logging and usage notch filter explanations A Video from Joshua Bardwell on Notch filtering:[https://www.youtube.com/watch?v=UQOqYOBSCc8] A short video demonstrating with and without Notch filter from Robogenisis[https://youtu.be/ic6Np86Jsrs] A discussion of how to and when to setup LPF &amp; Notch filters:What filters should we add when?... when trying to reduce dterm vibrations, how do you decide when to i) increasing dterm filtering, and ii) simply reducing dterm gains somewhat? Explained by R.A.V. Here's an explanation for the new notch filter in 3.0 with the new PR in mind. Maybe waltr knows best where to put something from it into the wiki. From wikipedia: Quote: In signal processing, a band-stop filter or band-rejection filter is a filter that passes most frequencies unaltered, but attenuates those in a specific range to very low levels. It is the opposite of a band-pass filter. A notch filter is a band-stop filter with a narrow stopband (high Q factor). The pid loop calculates an error from the current gyro rate and a set point and will command the motors to correct this error. There is a limit to how fast motors can react and it makes no sense to try to correct anything at high frequencies above 200Hz. This is why the lowpass filter was introduced. It will leave most frequencies below the cutoff value intact but it will already attenuate the cutoff frequency by -3dB. The attenuation will increase with higher frequency. Unfortunately some setups are so noisy that the attenuation will not be enough and the filter cutoff has to be set very low to 70Hz or 60Hz simply to get rid of the noise above 200Hz. This means that useful information between cutoff and 100Hz is lost. A lower cutoff also means a higher delay caused by the filter which is especially bad for dTerm and can cause more propwash. The notch filter is an additional filter which can be enabled for gyro data and dTerm data and will remove a lot of noise from the signal before feeding it into the lowpass filter. This way the cutoff value of the lowpass filter does not need to be lowered too much. A notch filter with a low bandwidth in combination with a lowpass filter with high cutoff will have less delay and less noise than a lowpass filter alone with low cutoff. By default the filter is disabled. It will be enabled when the center frequency is set. This can be adjusted with gyro_notch_hz while the cutoff frequency at the lower side can be adjusted with gyro_notch_cutoff For dTerm the settings are dterm_notch_hz and dterm_notch_cutoff. Center frequency should be the mean frequency of your motors, most likely somewhere between 200Hz and 300Hz. When setting the cutoff value you should avoid getting the filter's range below 100Hz. Keep in mind that the attenuation at this frequency is already -3dB. My very noisy copter with mean motor frequency at 250Hz runs very well with these settings: gyro_notch_hz = 250 gyro_notch_cutoff = 130 dterm_notch_hz = 250 dterm_notch_cutoff = 130 gyro_lowpass = 110 dterm_lowpass = 0 yaw_lowpass = 0  This means that the notch filter will remove noise from gyro before the lowpass filter will improve the signal further. Because there is still some noise left in dTerm, another filter is needed. The notch filter alone is enough to remove the remaining noise in my case. It causes less latency than a lowpass filter and keeps the dTerm more in phase with pTerm. No filtering is required for yaw for my copter with filtered gyro. The notch filter requires some additional floating point math on each axis for gyro and dTerm so F1 targets might get slower with it enabled. In my opinion a properly setup notch filter can also help noise free copters, especially on dTerm. Without blackbox it will be very hard to determine the center motor frequency. I already looked into the current spectrum implementation of the viewer and will add an option to get the frequency easier. It does not need to be very precise though. I'd recommend to start with a center frequency of 200 - 250. Higher kv motors on 4s will create higher frequency noise than low kv on 3s. Cutoff describes the lower end of the filter response and should not be too low in order to reduce latency. I don't think anyone would need it to be lower than ~130. "},{"title":"roll/yaw cam mix​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#rollyaw-cam-mix","content":"from FieserKiller Note that its not active permanently in this version of BF any more. You have to configure it in modes tab. I've bound it to a switch so I can finally let my buddys fly my quad without crashing due to unfamiliar controls. "},{"title":"Tuning Tips​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#tuning-tips","content":"How high can I go with D on pitch?​ Got some HQ Durables today and found out that my 5x4x3 tune doesn't work out for them. Using KISS24 escs and the KISSFC running BF 3.0. I can lower my P on Pitch but than it doesn't lock as good as it does with a higher P gain. But with a high P gain I nearly have to set my Ds to like 40. Is this good? and btw also using lumenier rx2206s. Thanks Thomas. Boris' Answer: If its just the bounce: You could try lower p setpoint weight. But you could also try test dterm setpoint of 0. See if the above 2 can remove the need for more D. But high D is not an issue at all if the motors dont heat up and if it all still sounds smooth. Thomas' Reply: Set dterm setpoint to 0 and no bounce back at all. Gonna try to go higher on P on Pitch and lower the D on pitch to get the feel I want! "},{"title":"Discussions on using the New configurator​","type":1,"pageTitle":"BetaFlight 3.0 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.0.x#discussions-on-using-the-new-configurator","content":"There are ? marks next to many of the setting Fields. Mouse Over these for a short Explanation of what they do.​ measurement and error is now the d term slider thingy. all the way to the right is error, all the way to the left is measurement. can vary. scroll down under your PIDS. BF PIDC does not use the dropdown for PID_DELTA_METHOD (or the CLI variable) but the slider instead. 0 is like 2.9 measurement and 1 is like 2.9 Error. See the 2DOF PIDC details above. Also my blackbox logging rate is off may be a bug in running 4k/2k and on blackbox it's saying 1k is 50% when it's really 25%. Not a bug. BB Rate is a percentage of the PID loop speed, since that's where the important data comes from. The OSD Tab is ONLY for FC boards that have a integrated OSD chips. One such FC is the omnibus. "},{"title":"Betaflight 3.2 Release Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2","content":"","keywords":""},{"title":"Betaflight v3.2 will be the last version to include STM32F1 based flight controllers. From v3.3 onwards support for those flight controllers will no longer be provided, this includes the NAZE, CC3D (original), ALIENFLIGHTF1 and MICROSCISKY and their clones.​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#betaflight-v32-will-be-the-last-version-to-include-stm32f1-based-flight-controllers-from-v33-onwards-support-for-those-flight-controllers-will-no-longer-be-provided-this-includes-the-naze-cc3d-original-alienflightf1-and-microscisky-and-their-clones","content":"If you have any questions or concerns please advise in Boris' BetaFlight thread. Providing notice here so that there is plenty of time to prepare. v3.2 will be released in October, whilst v3.3 won't be until next year. You can see some information here : https://github.com/betaflight/betaflight/projects/2 however it doesn't look complete. From Boris (30 June 2017): Well release candidate is around the corner. Basically a lot of fundamental changes. Not much of those will affect the user, but there are also quite some new features as well. The major complaint about Betaflight was too frequent updates in the past. So we slowed that down. Not having the pressure for quick releases gives some time for thinking and researching new things. Current V3.2 files are here: https://ci.betaflight.tech/job/Betaflight/lastSuccessfulBuild/artifact/obj/or https://betaflight.qmd.cl/ "},{"title":"Note: When discussing this Version in the Forums (Boris' BetaFlight thread)​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#note-when-discussing-this-version-in-the-forums-boris-betaflight-thread","content":""},{"title":"Please State: Version and Build Number.​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#please-state-version-and-build-number","content":""},{"title":"If having a problem check ISSUES to see if it have been reported and a possible work around.​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#if-having-a-problem-check-issues-to-see-if-it-have-been-reported-and-a-possible-work-around","content":""},{"title":"From Boris:​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#from-boris","content":"Hi Guys. I hope everyone is fine. We finally have a release candidate on schedule like promised!https://github.com/betaflight/betaflight/releases "},{"title":"Betaflight 3.2.1​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#betaflight-321","content":""},{"title":"Maintenance Release​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#maintenance-release","content":"Please read the Instructions for Upgrading. This release contains bugfixes and target changes only. For a full list of new features see 3.2.0. "},{"title":"Fixes:​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#fixes","content":"Configuration does not reset to defaults after an upgrade, and is corrupted instead (#4280);MavLink port sharing with MSP does not work (#4287);CRSF Telemetry gets stuck when ACC is turned off (#4279);Wrong timer assignment for PA14 (#4297);GD32F350x6 ESCs not supported by 4-way interface (#4329).When a battery is connected, the ESCs are initialised twice in a row (#4322);Camera control menu is overlaid with the OSD statistics page if camera control is invoked from the statistics page (#4293);VTX band colours for LED_STRIP are wrong (#4362);Dshot beacon sounds when beeper is turning off (#4360);Dshot ESC info is inconsistent in CLI (#4308);Dshot1200 timing is wrong for F4 and F7 (#4367);Stick commands for camera control do not repeat when holding stick (#4368);Dshot on F7 does not work (#4165);Toggling WiFi on a RunCam Split will turn it off in flight (#4369);Arming flag names are not used in CLI in some cases, even if compiled in (#4370). "},{"title":"Target updates:​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#target-updates","content":"KIWIF4V2 / PLUMF4: Moved LED_STRIP pin back to VTX.DTA (#4285);New target: XRACERF4 (#4255).ALIENFLIGHT: Fixed instable hardware detection issue. (#4300).BEEBRAIN_V2: Separated into V2D and V2F (#4318). "},{"title":"Betaflight 3.2.0 Release​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#betaflight-320-release","content":""},{"title":"New:​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#new","content":"Full F7 support (@sambas @blckmn )SITL simulator support (@cs8425)Added crosshairs to CMS (@lostcontrol)Improved ITerm windup handling for tricopter (@martinbudden)Added SP RACING F3 OSD/PDB suport (@hydra)Added horizon_tilt_effect command (@ethomas997)Improved scheduler efficiency (@lilcw)Increased motor output resolution (@borisbstyle)Improved pwm timer precision (@blckmn)Added new motor protocol Proshot1000 (@TonyBazz)Improved configuration architecture (PG implementation @martinbudden , @ledvinap)OSD improvementsNew target supportAdded Automatic Notch filter based on noise frequency (@rav-rav , @martinbudden)Fix/enable disabling of rc smoothing in level modesFlip inverted quad on ground (anti-turtle mode) (@brycedjohnson)Improved blackbox storage to be more compact. Allows recording at higher rates and/or longer logs on flash storage (@martinbudden)Camera controlTBS compatible LED frequency indicatorbeeper / OSD / CLI indication of reason for not arming;Added Iterm limit to prevent strong accumulations "},{"title":"Issues​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#issues","content":"F7 support is quite early and dshot is currently broken. The devs know and are looking into it. See https://github.com/betaflight/betaflight/issues/4129 Many features disabled for NAZE and other F1 boards. BLHeli Pass-through is/was one disabled. A custom build has been done that removes Mag &amp; Baro and enables Pass-through. Might be the way the final 3.2.0 code will be. See this post for NAZE code:https://www.rcgroups.com/forums/showpost.php?p=38309374&amp;postcount=51892 "},{"title":"Experimental - use with caution​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#experimental---use-with-caution","content":"Added experimental crash detection and recovery (@martinbudden)Added experimental CPU overclock options for F4 "},{"title":"Fixes:​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#fixes-1","content":"Fix GPS serial overflow (@mikeller)Fixed destabilisation on full throttle when Airmode disabledLess chance on yaw spins with Iterm limit "},{"title":"Known issues:​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#known-issues","content":"The configuration after an upgrade from a previous version of the firmware is not properly reset, and is likely to be corrupted. To fix this, always do a CLI backup, before the upgrade, then do a 'Reset to defaults' / CLI defaults after upgrading, and restore from the backup (#4280);MavLink port sharing with MSP does not work (#4287);Camera control menu is overlaid with the OSD statistics page if camera control is invoked from the statistics page (#4293);When a battery is connected, the ESCs are initialised twice in a row (i.e. the initialisation beeps sound twice) (#4257). "},{"title":"RC2 Changes:​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#rc2-changes","content":"Fix for new blackbox denominatorsImproved ACC scaling in some cases "},{"title":"RC3 Changes​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#rc3-changes","content":"MATEKF405 Enable follow me spektrum bindingFix for blackbox p_denomROM savingsAdd missing AHI sidebar in cliCheck for notch 0 in filter initrework on pin timer mappingFix buzzer on alienwhoop v2.0Spektrum Telemtry fix for FlightPack CapacityFix Acc reporting for some gyros in configurator "},{"title":"RC4 Changes​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#rc4-changes","content":"Added Experimental Slew filterFixed lockup on MSP for dterm filter changeImproved gyro debug loggingValidate features when not supportedExperimental Yaw overflow handlingAdded OSD warning for battery not fullFix cli settings for OSD timersAdded Iterm limit to prevent strong accumulationsReset iterm after crash for crash detection "},{"title":"RC4 Bugs (see the Issues and Pull requests in Github for details)​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#rc4-bugs-see-the-issues-and-pull-requests-in-github-for-details","content":"gyro debug and notch debug doesnt work. No data is displaying in analyzer. Fixed in Build #179.various Issues with DSHOT1200NAZE target not able to log data to Black BoxGyro Cal beeps issue 4107effectively made the setpoint weight behave as if it was set to zero (no matter what you set it to) if the setpoint transition was at the default 1.0. Fixed in RC5. "},{"title":"RC5 Changes​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#rc5-changes","content":"Default setpoint weight has been changed to 0. This should result in flight behaviour identical to previous 3.2 RC's if the user left the relax ratio at the default of 1, because relax ratio of 1 was disabling setpoint weight in those RC's. This has been fixed in RC5, so that D weight is active even if relax is 1. Users wanting D weight behaviour like 3.1 should set weight to 0.6.Removed experimental Slew filterDisabled beeping on gyro calibration during bootAdded gyro overflow protection for some newer gyros (ICMxxx gyro series is known to show inversion due to overflow above +/-2000deg/sec)Added internal resistance adjustment for camera controlShow MSP version in cli "},{"title":"RC5 Bugs (see the Issues and Pull requests in Github for details)​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#rc5-bugs-see-the-issues-and-pull-requests-in-github-for-details","content":"running a Cl Racing f4 fc and upgraded to 3.2 rc5 today and lost ppm signal. That is a known problem, fixed withhttps://github.com/betaflight/betaflight/pull/4182 "},{"title":"RC6 Changes​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#rc6-changes","content":"Disable small angle during crashflipFix mixer for dshot 3DImproved Mixer for crashflip modeCCD fix for parallel PWMRemove pidsumlimit from crashflip mode "},{"title":"Other Features:​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#other-features","content":"Spektrum Satellite Bind for 3.2 Spektrum-Satellite-Bind-for-3.2 Reconfigurable Barometer for 3.2 Barometer-Configuration-(3.2) "},{"title":"Black Box Viewer​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#black-box-viewer","content":"https://github.com/betaflight/blackbox-log-viewer/commits/master "},{"title":"Instructions for Upgrading -​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#instructions-for-upgrading--","content":"DO NOT use Copy/Paste of CLI commands since many have changed- either names or new ones. Use the latest Configurator to setup then the CLI Tab and manually set. Joshua Bardwell's Betaflight 3.2 Ultimate Setup Guide "},{"title":"New features and changes of how old feature work​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#new-features-and-changes-of-how-old-feature-work","content":""},{"title":"Switching from 'tlm_inversion' to 'tlm_inverted'​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#switching-from-tlm_inversion-to-tlm_inverted","content":"With the change of the configuration parameter tlm_inversion to the parameter tlm_inverted, the scope and function of the parameter have changed: tlm_inverted applies to all telemetry protocols;tlm_inverted = on means that telemetry is expected to be inverted compared to what it is for the selected protocol (i.e. when using SmartPort, tlm_inverted = off means that the flight controller expects the telemetry signal to be inverted serial, since this is the default for SmartPort). This means that for all protocols, if unmodified hardware is used tlm_inverted = off is most likely the correct setting. (Also, note that this only works for F3 / F7 based boards, or for F4 boards on ports with switchable external inverters.) "},{"title":"Dynamic Filters​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#dynamic-filters","content":"TO DO - fill in CLI commands and what they do. NOTE: F1 boards can't handle dynamic filters.. no space, no power for it. This is the current signal path in ascii art: gyro -&gt; dynamicNotch -&gt; notch1 -&gt; notch2 -&gt; lpf -&gt; P term -&gt; motors-&gt; D term -&gt; notchD -&gt; lpfD -&gt; setpointRelax&amp;Weight / Dynamic filter runs in the gyro loop, so PID loop freq doesn't matter. Don't run 8k on F3 processors, use 4/4 on those. F4 / F7 should run fine on higher freq. mjbudden posted on Boris' thread regarding the gyro/PID loop speed and Dynamic Filtering: Official recommendation from myself and r.a.v. (who between us wrote the code) is not to use above 4k/4k on F3 processors if using dynamic filtering. When running 8k gyro you have 125 microseconds in each loop and it is simply not enough time to run the calculations. So the PID loop will run slower than 8k anyway. There may be no outward signs of problems, but there will be jitter in the PID loops and that can potentially cause problems. "},{"title":"Crash Recovery​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#crash-recovery","content":"TO DO - fill in CLI commands and what they do. Briefly the mode works like this: A crash is detected if crash_dthreshold and crash_gthreshold are exceded.Once a crash is detected, the craft tries to level itself, ignoring RC input on roll and pitch axes.Craft continues to try and level itself until either:crash_time milliseconds after the crash, orthe craft angle is less than crash_recovery_angle degrees on both the roll and pitch axes and the craft gyro rate is less that crash_recovery_rate degrees/second on both roll and pitch axes.For testing purposes crash recovery can be enabled by turning the beeper on (this will be removed/changed if crash recovery proves successful). TCHTHSKY Posted in Boris' thread-Here's the code for it. It has comments: And here is the feature request: And here's this: Here's another from earlier in this thread: Important note from mjbudden:​ The crash recovery routine does not currently attempt to limit yaw spin - it just tried to level the quad. I did not anticipate the &quot;yaw spin to the moon&quot; problem when I wrote the crash recovery routine. I'm now working on a solution. See PR github.com/betaflight/betaflight/pull/3909 in github for the current discussion on the subject. Feel free to contribute to the discussion. Also black box logs of &quot;yaw spins to the moon&quot; are very welcome and will help analyze and solve the problem. From Yamaford: Just to clear this up for others that may read this wrong, I don't think your crash recovery code is the culprit as the crazy &quot;YSTTM&quot; (Yaw spin to the moon) is happening with or without acc or crash recovery enabled right? From mjbudden: Correct. Yaw spin to the moon happens with or without crash recovery enabled and is not cause by crash recovery code. There is a new PR that tries to fix this, see PR 3909. If you could test this and provide blackbox logs it would be most useful. Crash Recovery while failsafe is active​ In the event that a crash is detected while the vehicle is in failsafe mode, it will immediately disarm. This is to prevent damage or injury should the vehicle strike an object or the ground during a failsafe event (i.e. loss of RX signal). This should also disarm the vehicle after failsafe LANDING has put the vehicle on the ground. Once the failsafe condition has cleared (i.e. RX signal is restored for a minimum of 30 seconds), the vehicle will once again be ready to arm. "},{"title":"\"flip after crash mode\" (was called Turtle Mode)​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#flip-after-crash-mode-was-called-turtle-mode","content":"TO DO - Describe what this does, how to setup and which ESC firmware supports this. NOTE: Ensure the ESC Firmware supports DSHOT commands to Reverse the motors. NOT all latest ESC firmware has this support. Check with the ESC Firmware developers/Docs for the ESCs you are using.​ Description by brycej: In its current form (as of last week, 8aug17, or so). You need to flick the mode switch and then arm. Throttle and yaw sticks don't do anything. Pitch and roll will control which props are spinning based on stick deflection. With the pitch and roll centered no props are moving. Take a good guess on the side with free props and try and flip it over. If it isn't flipping, try a different pitch or roll. Don't just jam the stick over and leave it if it is stuck. I haven't burned up any escs in quite a bit of testing, but I'm just someone will manage it with some effort.... Disarm after flipped. Undo flipaftercrash mode and rearm to fly away. Other tips: Has worked well to get me out of trees. Try it with props off on the bench first. 16.63 from official blheli hasn't some issues reversing all the motors because it is a little more stringent then 16.67 from the unofficial blheli fork. Newer betaflight versions have some fixes in to help that. Also, try it in short grass LOS so you can see how it works... Can't fix broken props or save you or if long grass, so doesn't always work. RCs 4 or below inverted the mixer and had all 4 props reversed and spinning. That works too but it is a little more messy on the ground and requires some finesse. "},{"title":"Yaw Jump tuning​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#yaw-jump-tuning","content":"Post by ctzsnooze: The jump up when abruptly stopping / reversing a hard yaw spin is because two motors must go full on to generate maximum yaw torque. That's like applying 50% throttle. acc_limit_yaw delays the speed at which yaw can accumulate, but not the maximum amount, so as you say it kind of delays the onset of the jump, but if a big correction is needed it will still jump at the same speed. As you say, slowing the rate of onset of yaw moves using a lower acc_limit_yaw will reduce yaw responsiveness to stick inputs. pid_sum_yaw indirectly limits the maximum speed the motors will be requested to attain during a yaw move. That will limit the maximum possible yaw rate, and reduce the climb rate to the same extent. Basically jump and yaw are inextricably linked. But this should retain crisp yaw responsiveness for inputs that don't hit the limit. RC5 has a number of measures to reduce yaw spin to the moon problems. I haven't had a bad one since going to RC5. Reversing the prop rotation also seems to me to reduce the amount of spin acquired when clipping a gate with the outside of a front prop. This reduces the chance of getting a big spin and a big climb after hitting a gate. Keep in mind that if you clip a gate and spin at high rotational rates, and if you run a lot of yaw P, two of your motors will go full on to oppose that spin, and may need to stay on for some time before regaining control. I configure my sticks so that equal yaw and roll stick deflections result in a properly banked turn with the quad at 45 degrees. Hence I set the same rates for yaw as for roll. However because yaw responsiveness is inherently weaker than roll, I do need to run quite a lot of yaw P, which does cause fast yaw climbs after clipping gates. "},{"title":"FPV Camera control via OSD​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#fpv-camera-control-via-osd","content":"Consult wiki and RCG thread to see if your camera requires special handling. See: FPV-Camera-Control-(Joystick-Emulation) "},{"title":"Experimental Slew filter- Removed in RC5​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#experimental-slew-filter--removed-in-rc5","content":"https://github.com/betaflight/betaflight/pull/3983More info here:https://github.com/betaflight/betaflight/pull/3909https://github.com/betaflight/betaflight/issues/3959#issuecomment-326430286https://github.com/betaflight/betaflight/pull/3950https://github.com/betaflight/betaflight/issues/3893 "},{"title":"Arming Flags​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#arming-flags","content":"Are now in the CLI STATUS. Example: Arming disable flags: RX LOSS CLIOn F4/F7 STM32's the Arming status will print out names whereas on F1/F3 STM32's this is a simple Bit Field. See Arming Sequence and Safety for details. "},{"title":"Rate Profile and Profiles​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#rate-profile-and-profiles","content":"From Woody_99's experience: I will share what I have learned, and also that 3.2 is different in a couple of ways from previous versions. rate profiles are definitely separated from regular profiles in 3.2in 3.2, if I enable rate profile select on a 3 way switch, BF will use all three rate profiles no matter where the slider is positioned in the adjustments screen. Previously, if I just wanted to have two rate profiles tied to a single profile, the slider would control whether the rate profile was selected by switch position. Not a bad thing, just a change to be aware of.Need to use a different slot now as well. Previously I could use the same slot for various different adjustments using different aux channels, but now different adjustments need a different slot as well.Post with a Adjustment Tab screen shot "},{"title":"CLI command changes in 3.2​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#cli-command-changes-in-32","content":""},{"title":"Removed CLI Commands​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#removed-cli-commands","content":"feature -VBAT feature -FAILSAFE feature -CURRENT_METER feature -BLACKBOX feature -SDCARD feature -VTX set align_mag set bat_detect_thresh set blackbox_rate_num set fixedwing_althold_dir set frsky_vfas_cell_voltage set gyro_use_32khz set mwii_ibat_output set servo_lowpass "},{"title":"New CLI commands​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#new-cli-commands","content":"TO DO - list all new CLI commands with a description of what they do and how to use them (links are good) and what the Default and optional values are. feature -DYNAMIC_FILTER​ beeper BLACKBOX_ERASE​ GLOBAL SET set beeper_frequency = 0​ [0..16000] set blackbox_record_acc = ON​ [OFF..ON] set camera_control_key_delay = 150​ [100..500] set camera_control_mode = HARDWARE_PWM​ [HARDWARE_PWM, SOFTWARE_PWM, DAC] set camera_control_ref_voltage = 330​ [100..400] set dashboard_i2c_addr = 60​ [8..119] set dashboard_i2c_bus = 1​ [0..2] set esc_sensor_halfduplex = OFF​ [OFF, ON] set ibatv_offset = 0​ [-16000..16000] set ibatv_scale = 0​ [-16000..16000] set led_inversion = 0​ [0..7] set motor_pwm_inversion = OFF​ [OFF, ON] set report_cell_voltage = OFF​ [OFF, ON] set vbat_detect_cell_voltage = 30​ [10..50] set motor_pwm_protocol = ONESHOT125​ [OFF, ONESHOT125, ONESHOT42, MULTISHOT, BRUSHED, DSHOT150, DSHOT300, DSHOT600, DSHOT1200, PROSHOT1000] Per PROFILE: set crash_delay = 0​ [0..500] set crash_dthreshold = 50 :degrees/second/second​ [0..2000]dterm crash value, zero (off) by default, set to at least 1 to enable crash detection set crash_gthreshold = 400 :degrees/second​ [0..2000]gyro crash value set crash_recovery = OFF​ [OFF, ON, BEEP] set crash_recovery_angle = 10 :degrees​ [0..30] set crash_recovery_rate = 100 :degrees/second​ [0..255] set crash_setpoint_threshold = 350 :degrees/second​ [0..2000] set crash_time = 500 :ms​ [0..500] set horizon_tilt_effect = 75​ [0..250] set horizon_tilt_expert_mode = OFF​ [OFF, ON] "},{"title":"Name changes​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#name-changes","content":"yaw_motor_direction [1, -1] ==&gt; yaw_motors_reversed [OFF, ON]​ sport_halfduplex ==&gt; set tlm_halfduplex​ tlm_inversion' ==&gt; tlm_inverted​ spektrum_sat_bind_autorst ==&gt; spektrum_sat_bind_autoreset​ dfu ==&gt; bl​ current_meter_type = ADC ==&gt; current_meter = VIRTUAL​ d_lowpass ==&gt; dterm_lowpass​ d_lowpass_type ==&gt; dterm_lowpass_type​ d_notch_cut ==&gt; dterm_notch_cutoff​ d_notch_hz ==&gt; dterm_notch_hz​ digital_idle_percent [7.00] ==&gt; dshot_idle_value [450]​ yaw_accel_limit ==&gt; acc_limit_yaw​ yaw_control_direction [1] ==&gt; yaw_control_reversed [OFF]​ anti_gravity_thresh ==&gt; anti_gravity_threshold​ battery_meter_type ==&gt; battery_meter​ blackbox_rate_denom [4] ==&gt; blackbox_p_denom [32]​ ibat_offset [0] ==&gt; ibata_offset [0]​ ibat_scale [400] ==&gt; ibata_scale [400]​ "},{"title":"Changes in the New Configurator GUI (V3.2.2)​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#changes-in-the-new-configurator-gui-v322","content":""},{"title":"Receiver Tab​","type":1,"pageTitle":"Betaflight 3.2 Release Notes","url":"/betaflight.com/docs/wiki/release/BetaFlight-3.2#receiver-tab","content":"Added &quot;Stick Min&quot;, &quot;Stick Center&quot; &amp; &quot;Stick Max&quot; ---these are simply MIN_CHECK, MID_RC, MAX_CHECK. "},{"title":"BetaFlight-V3.1.x","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x","content":"","keywords":""},{"title":"Betaflight 3.1.7 Release Notes​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#betaflight-317-release-notes","content":"Maintenance Release 3.1.7https://github.com/betaflight/betaflight/releases/tag/v3.1.7 For full release info see 3.1:https://github.com/betaflight/betaflight/releases/tag/v3.1.0 Mixer Support: Mixer-Support-in-3.1.7-(and-later) "},{"title":"New:​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#new","content":"Airmode is now fully disabled when feature or mode not engaged. Before airmode was always active and it was just the iterm not being active on low throttle.Digital idle percent added to OSDAnti Gravity can now be disabled via feature or mode switchRSSI inversion addedAdded KROOZX , CL_RACINGF4 and SPRACINGF4EVO targetReadjusted default configAdded transponder driver for F4 "},{"title":"Fixes:​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#fixes","content":"Improved safety of DSHOT on very high loop speedsImprove validation of dterm notch settingsFix spektrum bind stuck bugFix AK8975 MAG detectionFix broken Softserial SPRACINGF3EVOFix &quot;deathswitch&quot; bug with SD and onboard blackbox on the same board (BLUEJAYF4)Fix angletrim bugFix &quot;escprog&quot; feature for some boards. KISS ESC passthrough should now work betterFix wrong flash sector for F4Fix some broken targets like COLIBRI_RACE "},{"title":"Known bugs:​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#known-bugs","content":"with airmode disabled copter does not hold at Full Throttle https://github.com/betaflight/betaflight/issues/3016 What Defaults changed?​ Boris's answer: Basically people kept complaining that betaflight default D was too conservative and therefore changed. Setpoint transition has been disabled (1.0) to give more linearity over the entire stick. I still recommend that you slowly remove default filtering as well if your setup allows you for best results. Nowadays most do softmounting so removing of filters can easily improve performance. The defaults are optimized for hard mounted medium noisy environment for safety. The best tuning performance is achieved with as less Du. See the Gyro &amp; Filters for much more. Air mode feature and failsafe issue​ This is with regards to the issue raised in RCGroups (https://www.rcgroups.com/forums/showpost.php?p=37535627&amp;postcount=48369) and in issue #3108 (https://github.com/betaflight/betaflight/issues/3108). The issue that was being faced was due to misconfiguration of the failsafe function, specifically failsafe stage 2 had been disabled. It is failsafe stage 2 that is responsible for putting the craft into a safe state after a failure, stage 1 is still regarded as a potentially recoverable state (if the RX link is recovered). It is an issue that the firmware allows you to disable stage 2, therefore the ability to do so has been removed (https://github.com/betaflight/betaflight/pull/3562). It is unlikely you'd face an issue with motors starting if you plug in the quad before powering on the radio (the exception being if the default AUX channel positions are close to the ARM or AIRMODE box ranges, which in itself is an unsafe configuration). Even in the worst case given that throttle position is at minimum in failsafe the maximum motor speed is determined by min_command, the motors could not run at full throttle. There is no safety issue with airmode as a feature when failsafe is configured correctly. A few tips for minimizing the potential for injury when building, flying and testing: Always perform tests with props removedAlways test your failsafe before ever putting props onAlways set the arm range slider to be activated well away from the default channel value (typically the high end of the channel is adequate, e.g. 1800-2000)Try to keep your radio more than a foot away from your quad to ensure a good radio link at close rangePlug in the battery with a firm grip of the quad (all being well this is unnecessary but is a good belt and braces approach) "},{"title":"Betaflight 3.1.6 -​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#betaflight-316--","content":"https://github.com/betaflight/betaflight/releases New: Thanks to @jflyper Dynamic bidirectional softserial. Assigned through resource command. (NAZE users dont have to short TX and RX now to get Smartport working)Updated SDK to 6.2.1 2016q4 Fixes: Fixed limited max_aux for F1 and F3 to 6Added 6 motor DSHOT support to XRACER targetAdded Led Strip for KISSFCAdded current sensor pin for KISSFCEnabled softserial for all targetsFixed activation for HEADFREE modeFixed Led strip orientation for indicatorsFix artificial Horizon for rolling wrong wayFix for 3D Dshot conversion in configuratorFix led strip for KAKUTEF4Fix targeted looptimeFix inverted polarity DSHOT timers on F4Disable DMA for SDcard for SPRACINGF3EVOSofter dterm setpoint defaultFix filter bug for trying to filter over nyquist frequency (Not working 500hz mode)Less restrictive on F1 looptimeFix Spektrum bind for OmnibusF4 Known issues/bugs: There is no check for the D Term Notch Filter to ensure that the cutoff frequency ('D Term Notch Filter Cutoff') is not higher than the mid frequency ('D Term Notch Filter Frequency'). WARNING: If a cutoff frequency that is higher than the mid frequency is configured, this can result in a runaway motor acceleration. (Applies to versions prior to 3.1.6 too.) If your board has SDCARD blackbox and onboard Flash both available and you want to use onboard flash without inserted SDCARD you need to disable feature SDCARD, which is available from Configurator 1.9.3. Only BluejayF4 has both blackbox options available as far as it is known. (This is not just in 3.1.6, but also in previous versions) Colibri Race target 3.1.6 on a Powercube V1 (always used that target, it's the one to use). Unfortunately after flashing no way I can connect. It doesn't boot up and the device is suddenly not being detected anymore. Boris: This will be addressed in 3.1.7 On a CC3D the receiver goes into bind mode every time. Fixed in 3.1.7 alpha.http://andwho.sytes.net:8080/job/BorisB_BetaFlight_Maint/ Use Configurator 1.9.3 "},{"title":"Betaflight 3.1.5 - Maintenance Release​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#betaflight-315---maintenance-release","content":"Link to Release: https://github.com/betaflight/betaflight/releases/tag/v3.1.5 Restore multiwii throttle expoFix Motor 6 for SIRINFPV[VTX SmartAudio] Fix status string for user frequency modeFix broken standard PWMChange default current meter scale for BFF3 // Enable Serial RX by default on UART2Register SDCard DMA in resource listConfigurable starting AUX channel for CHANNEL_FOWARDINGFixed for Tramp Power menuSimplify anti gravity gain parameters (disabled by default)Fix multiple changes through MSP for trampFix Tramp display issue for Raceband Channel 7 (was showing F8)Decouple min_throttle and max_throttle from altitude hold Known Bugs/Issues::​ limit of 6 aux channels. Scheduled to be fixed in next release on 1 March 2017.1 softserial is enough. But in 3.1.6 you will be able to assign it manually through resource command. Also it will not be required to short TX and RX anymore for smartport on softserial.Configurator 1.9.2 has a Spek Sat setting bug which is fixed in 1.9.3 "},{"title":"Betaflight 3.1.4 - patch​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#betaflight-314---patch","content":"No hex files, just source code: https://github.com/betaflight/betaflight/releases/tag/v3.1.4Simplify anti gravitywith throttle expo fixes "},{"title":"Betaflight 3.1.3 - Maintenance Release​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#betaflight-313---maintenance-release","content":"Link to Release: https://github.com/betaflight/betaflight/releases/tag/v3.1.3 Minor optimalisations to PID codeFix for iterm anti_windup_gain axis coupling Note from Boris: 3.1.2 would have been latest, but as we find more things that are worth releasing we bring out the new patch. Update to patches keeps your settings btw. You don't have to erase it. "},{"title":"Betaflight 3.1.2 - Maintenance Release​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#betaflight-312---maintenance-release","content":"Link to Release: https://github.com/betaflight/betaflight/releases/tag/v3.1.2 Fixed scaling issue where min_throttle would affect rcCommand ThrottleReplaced old multiwii throttle expo by new floating point versionSimplified few CLI commands (see list below for CLI name changes)Lowered strength for some default settings like the new anti_gravity_gain Note from Boris: Ok here this one should be the last one. Lets move to 3.2 now! I know they still maybe be some target related issues, but there is not much to do about. Soon there will be a list of targets divided in 2 categories. There will be a list of FULLY supported FC's where devs spend time to make it all work and there will be the list of best effort supported targets there from those we don't own or where the manufacturers don't provide enough support for it. That doesn't mean that targets will get removed, just less guaranteed support of features ! So if someone reports dshot or blackbox not working on targets he or she will have to complain to the actual shop where they got it from. Note: Throttle expo works as regular expo now without even throttle mid involved.​ This is actually a temporary situation until custom throttle curve is finished (expected in 3.2). The reason for current temporary situation is because this part of code was mixing min_throttle into throttle value. Maybe its best to not use it for now. "},{"title":"Betaflight 3.1.1 - Maintenance Release​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#betaflight-311---maintenance-release","content":"Link to Release: https://github.com/betaflight/betaflight/releases/tag/v3.1.1 New:​ Resource remapping command doesn't require to set it to NONE first. (you can paste your diff output now) @blckmnAdded KISSCC target @borisbstyle @ronlixAdded more OSD configurable features and warnings @jflyper @DanNixonAdded IBUS Telemetry @mikellerAdded Blackbox to CMS @DanNixonAdded VTX config over MSP @raphaelcoeffic Fixed:​ Improved Iterm windup handling @borisbstyle @martinbuddenFixed &quot;diff&quot; output for few OSD parameters @DanNixonSimplified cli on F1 and F3 targets for more flash space @mikellerFixed REVONANO target @blckmnMinor Code optimalisations @borisbstyleImproved default configuration (higher default idle offset and new anti windup parameters) @borisbstyleFixed OSD switch @DanNixonFixed motor mapping on RCExplorer target @blckmnImproved boot issues on wrong resource mappings @blckmn NOTE- For the features in this release you will need to use the following Versions or Higher: Configurator 1.9.1 "},{"title":"Betaflight 3.1.0-Release​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#betaflight-310-release","content":"Link to Releases: https://github.com/betaflight/betaflight/releasesNote: Embedded links to Videos are in the Github Release Notes. Read here to Learn exactly what firmware issues and features are being worked on:https://github.com/betaflight/betaflight/issues?q=is%3Aissue+is%3Aclosed+sort%3Aupdated-desc "},{"title":"Betaflight 3.1.0 (Release)​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#betaflight-310-release-1","content":"Betaflight firmware has undergone some major changes under the hood. Hardware drivers have been optimized to improve future maintainability, but also easier target and hardware support. The efficiency of the code has also been improved by a lot as Betaflight team reviewed each line of the code to squeeze every possible performance win out of it for flight performance purposes. The difference between the current release and previous one is over 1800 code commits by various developers. Only release notes highlights are represented. For full change history github commit history can be reviewed. Release note highlights:​ Added F7 support with already few supported targets - @sambasDynamic IO / pin allocation - @blckmn[DSHOT Support](DSHOT ESC Protocol) for F3 and F4. DSHOT150, 300, 600, and 1200 supported (read wiki about board supported hardware) - @blckmnFull Floating Point Logic for flight behavior - @borisbstyleMany new dynamic configurations (filters, setpoint weights etc.) - @borisbstyleMany code optimizations (faster pid speeds possible on F3 and F4) - @martinbudden and @borisbstyleSupport for KISS ESC telemetry (only with DSHOT) - @basdelfosAdded temperature and RPM to KISS ESC telemetry - @mikellerAdded Serial ESC Pass-through for KISS24 and CASTLE esc's - @sambasNew target support (now 72 targets on 4 MCU types)Added CMS display support - @jflyperAdded CRSF support for TBS receivers and associated telemetry - @martinbudden and @blckmnAdded additional OSD parameters like pids and power - @martinbudden and @raflAdded Unify SmartAudio support - @jflyperAdded MSP over Smartport - @raphaelcoefficAuto Video Format support for OSDConfigurator enhancements - @mikellerSpeeded up build system, needed now there are so many targets - @AndersHoglundFixed JUMBO frame handling on VCP targets, so blackbox logs can be downloaded more quickly - @AndersHoglundNew &quot;anti_gravity_threshold&quot; parameter in CLI - @borisbstyleProtection against too fast motor speeds (When ONESHOT125 selected for example, max allowed pid and motor speed will be 2khz) and many more.. - @borisbstyleAdded experimental 32khz support for gyros that support it - @martinbudden.Blackbox enhancements (use 2.5.8 blackbox-viewer) @GaryKeebleAdded new level sensitivity and level limit parameters in degrees. level_limit is the maximum allowed angle. Level_sensitivity is the max deflection on full stick @borisbstyleAdded IRC Tramp VTX support. Changable channel, band, power and pitmode @jflyperand many more: https://github.com/betaflight/betaflight/commits/masterOnly one PIDC the 2DOF or Betaflight now (see the 3.0.x wiki page for details) NOTE- For the features in this release you will need to use the following Versions or Higher: Configurator 1.9.0BlackBox Viewer 2.5.9 "},{"title":"Warning: It is NOT recommended to use any Save/Restore or even CLI Dump/Diff copy paste between firmware Versions.​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#warning-it-is-not-recommended-to-use-any-saverestore-or-even-cli-dumpdiff-copy-paste-between-firmware-versions","content":"Always use the Config GUI to setup and manually type into the CLI after doing a &quot;get 'name'&quot; to be sure of new spelling and options. "},{"title":"Bugs and fixes:​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#bugs-and-fixes","content":"RC2 - Fix in rc expo symmetry // fix missing baro on some targets RC3 - Enable experimental 32khz support RC4 - Fix non MPU INT supporting targets // Added MPU Int NAZE // Fix adjustment for setpoint // Some cleanups RC5 - Fix more non MPU INT supporting targets // fixed RACEBASE and some SPRACINGF3 variants // Fix ledstrip on BETAFLIGHTF3 and IMPULSERCF3 // DSHOT900 and DSHOT1200 added for testing (only to be enable through cli for now) RC6 - Fix ledstrip IMPULSERCF3 // Fix DSHOT for SIRINFPV // Add PODIUMF4 // Improved CPU usage // Optimised RC interpolation // Improve DSHOT speed // Add more safety in DSHOT limits (DSHOT150 is limited to 4khz) RC7 - Fix gyro detection handling for 32k mode // Improved target limitiation RC8 - Fix FPV angle mix // Added RG_SSD_F3 target // SPRACINGF3NEO DSHOT optimalisations // CC3D_OPBL fix // Remove MSP from UART1 by default // Added debug for gyro calibration noise // Minor optimalisations RC9 (Build #959 - 16Jan2017)- Fix servo mixer scaling for tricopters // Add softserial for NAZE // Add IRC Tramp VTX support // Fix FPV angle mix RC10 (Build #965 - 19Jan2017)- Added anti_gravity_gain // KISSFC dshot support motor 5 and 6 // CC3D startup issue solved // new defaults for level and PID's RC11 - Fix spectrum bind PIN on BFF3 // Fix connection to some targets // Restore missing blackbox log fields RC12 ( -25Jan2017)- FPV angle mix applied to actual rates (also a fix) // Fix truncated blackbox logs // Redefined OSD defaults to not have PIDs by default on screen // Increased configurable filter range RC13 - reported bug where blackbox would disable itself is now resolved Save blackbox file from dataflash freezes mid-download in recent versions of configurator. Configurator Issue #411 - https://github.com/betaflight/betaflight-configurator/issues/411Fixed in Configurator 1.9.3 Configurator seems to have a Bug when setting Spektrum Sat RX protocol. Update the Config Version 1.9.3 to fix this. Everyone having issues with weird freakouts, make sure that this isn't the culprit. I have no idea if it would be the cause but just throwing this out there, as I know a lot of people don't read the changelog. Adamtfc There is no check for the D Term Notch Filter to ensure that the cutoff frequency ('D Term Notch Filter Cutoff') is not higher than the mid frequency ('D Term Notch Filter Frequency'). WARNING: If a cutoff frequency that is higher than the mid frequency is configured, this can result in a runaway motor acceleration. (Applies to versions prior to 3.1.6 too.) Some are reporting issue with copter shaking or oscillating with BB logging directly to and SD card. This is in Github Issue #2631. Note: With v3.1 and later, servos must be configured manually by resource cli command.Do NOT use CHANNEL_FORWARDING. It does something really nasty.​ See Teralift's post hereServo mapping on a Naze32 to use Servo_tilt by TeraLift Notes from Boris:​ DSHOT1200 does work now but only on kiss24 that I know. We decided to add a lot of new stuff available from cli for testing purposes and try to only add proven things in the configurator. "},{"title":"Questions and Answers about 3.1 from Boris' BetaFlight thread.​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#questions-and-answers-about-31-from-boris-betaflight-thread","content":"question by Woody_99:​ I've been flying a Naze32 on BF (3.01) for a while, and seems to be working fine for me. With all the code optimizations (noted in the WIKI), is the Naze still a viable option to continue with, or should I swap it out for a newer FC? Answer from Boris: No NAZE32 and other F1s actually got slower in 3.1. 3.1 is the first version where everything is floating point math. F1 lacks of floating point processor unit so it gets a lot of more to work. Besides that it only has 128k flash what prevents a lot of new optimizing we applied. All optimizations only affect f3, f4 and f7 boards. Instead of running new versions of betaflight or reforking it you can simply stick to the version you use now for example. There is no solution for F1 boards in the future unfortunately and every new feature will NOT be included to it. You are for example willing to give up acc, but 100 others may not. So that's not a solution. I see that Softserial does fit again since latest cleanups (RC9?). There is only like 1kb left on Naze now. question by fftunes:​ If i run 8k/1k, will the PID loop be calculated from an average of the 8 gyro samples, or will it only use 1 sample out of 8? Answer from Boris: There is no averaging. There is IIR filtering, what works faster than averaging. Every sample it's information is taken to the next sample a bit. Btw you can enable simple averaging with chosing FIR filter style. Averaging gives a lot of delay typically. It seems that a lot of guys really missed the early betaflights where all this was discussed a lot. All i can say is to read about the way how filtering works and look up about aliasing. (Filtering is explained in this Wiki) Question by spikerspike97:​ But why do my throttle and yaw rccommands have so much steps and the pitch and roll are super smooth as seen in the BB log? Answer from Boris: Because only roll and pitch have Derivative kick affect. Therefore only those are smoothed by default. You can enable the full smoothing in cli, but I suggest fly it like this. Only reason for smoothed rc inputs is Derivative kick symptom where PIDsum can get very jerky. Note: See the new &quot;rc_interpolation_channels&quot; CLI command below to smooth all channels. question by Ede2016:​ Can you please say a word about average CPU load for BF3.1. Do you suggest less than 50% in the configurator disarmed or armed or what's the best way to analyze which frequency is the maximum recommended? Answer from Boris: Well 50% is a good guideline, but honestly as long as it arms without issues it is fine. As long as every feature works there is enough CPU power. Usually on high CPU usage more less prioritized things will stop working. For example telemetry, BlackBox, current sensor or VBAT would fail first before PID loop or RX code would not be executed. The only true danger with too high cpu before was that motor commands may overlap, but there is a lot of spacing in between all motor commands and it is protected as well with looptime limitations on different protocols. I personally fly everything enabled except accelerometer on my rigs. Question by Jerm357:​ Can anyone suggest some settings for &quot;Angle Limit&quot; and &quot;Sensitivity&quot; in 3.1.3 to get Angle mode to feel like it did in 3.0.1? Answer from Boris: Sensitivity 100 Limit 70 Someone mentioning that 3.1 was a bit more &quot;bumpy&quot; than 3.0.1. Is this true and what to adjust?​ Boris' answer: 3.1 is indeed more &quot;from error&quot; based. Reduce your setpoint weight to make it smoother. I think the current defaults are a bit to much for some setups. Especially on end of fast flips or rolls. In case some don't remember what the setpoint weight was doing. Just a quick explanation in easy language. More to the right (higher)-&gt; More stick acceleration and more sharpy on stick. Your quad reaches faster its target and the rates feel faster, but the motors work harder and have to break faster. More to the left (lower)-&gt; The accelerating and deaccelerating movements of your quad get more dampened. This results in really smoothed motion and pretty much never bouncebacks. Maybe better for freestyle. Weight transition is basically gradual transition of setpoint weight from center stick to full stick. But the effect of it is not really small at the moment. Comment from QuadMcFly: Also worth noting your set-point will likely shift depending on your specific setup, so you can't assume it will be the same on every quad. Heavy, slow transitioning props will need a lower set-point than light fast changing props. For instance I had to run quite low on 5x4.5x3HBN props, but on the Lumenier ButterCutter I'm running almost all the way to the right. Basically I just turn it down till I stop getting bounce-back or &quot;slaps&quot; on hard flips and rolls. More on SetPoint Posted by joshuabardwell​ For setpoint transition, the wiki has a good explanation:Reference PIDC and Setpoint discussion on 3.0.x Wiki pageSo: Delta from error (high D term setpoint weight) has very sharp, immediate stick response. But may have problems with bounceback at the end of flips and rolls, and may provide less smooth flight (especially bad for some freestyle flyers). With high D term setpoint weight, the quad feels very connected and immediate, but also every. tiny. little. finger. motion. is translated instantly to quadcopter motion, which is not necessarily what every pilot wants. Delta from measurement (low D term setpoint weight) has smoother and slower stick response. Quad feels less connected and immediate, but is smoother. Also, measurement is best at stopping bounceback/oscillation at the end of flips and rolls. Think of entering a flip or roll as &quot;positive&quot; stick input, and exiting a flip or roll as &quot;negative&quot; stick input. When the stick is moving away from center, that's positive. When it is moving towards center, that's negative. Delta from error (high D term setpoint weight) is just as likely to cause bounce on positive stick input, in theory, but in practice, we seldom make sharp stick movements when making positive stick input. When re-centering the stick (negative stick input), the crossbar helps the stick come to a sharp stop. When making positive stick input, even when our fingers make very sharp moves, the stick does not come to as abrupt a stop (for most pilots). For some pilots, this will not be true. If you experience ringing oscillation or bounce when doing positive stick inputs, such as if you are doing a four point roll, then you may be the exception to this rule. So then what is setpoint transition. Setpoint transition tries to give you the best of both worlds. When setpoint transition = 1, then NO SETPOINT TRANSITION OCCURS. The D term is calculated based on the setpoint weight, period. When setpoint transition is raised, what happens is that on positive stick input, the D term is calculated based on setpoint weight, and on negative stick input, the setpoint weight is relaxed (reduced) and the D term transitions from error to measurement. The goal here is to give you sharp, &quot;error style&quot; control on positive stick input, and soft, &quot;measurement style&quot; control on negative stick input. This means you get the advantage of error style control but without bounceback at the end of flips and rolls. Here is how I think of it: Set the setpoint weight based on how much error vs measurement feel you want.Lower setpoint transition to fix bounceback at the end of flips and rolls (remember, default is low, and basically nobody complained about stops, ever, in 3.0.1)Raise setpoint transition to increase stability at center stick (especially when running low P and/or low setpoint weight) If setpoint weight is low, then setpoint transition won't do anything because the setpoint can't really be reduced. Also, bear in mind that you should DEFINITELY be tuning P and D when playing with these numbers. P and D interact strongly, and setpoint weight interacts strongly with D, so these three parameters are all interlinked and tuning them is NOT for amateurs. What I would suggest is starting with the default values then tuning P and D as perfectly as possible. Then adjust setpoint weight to extreme values and feel the difference. If you like the softer or sharper feel of a higher/lower setpoint weight, try re-tuning P and D around that value. Finally, adjust setpointn transition to try to tune out bounce at the end of flips and rolls (or other negative stick input. AILERON8 comment:​ I've been raising the setpoint transition to reduce roll/flip bounceback in general. Even if your PIDs are at default this setting has a very pronounced effect on bounce back reduction. Before utilizing this feature I left bounce back removal at the tail-end of tuning. Where as now it's the first thing I do and is easily accomplished. Another use of SetPoint to get a better Tune from fftunes:​ The main issue was, it was too soft/unstable at midstick, but at the same time i could not really increase P much more or it would become excessively noisy. The result was i-term going all over the place to a degree where it caused very unreliable stick feel and even drifting. By increasing transition setpoint from 0.35 to 0.50 it became very solid and reliable around mid-stick and small quick moves, as well as in fast turns where i hold sticks with relatively small inputs. I think after I &quot;fixed it&quot; with transition setpoint, I could even back off with the P's a bit again. To check for DMA conflicts do the following (thanks teralift):​ (1) Disable Dshot, enable LED_STRIP, save &amp; reboot. (2) Goto CLI. (3) Type &quot;resource list&quot;. (4) At the end of the list, there is DMA section. Record which DMA resource the LED_STRIP is using. (5) Type &quot;exit&quot;. (6) Enable Dshot, disable LED_STRIP, save &amp; reboot. (7) Goto CLI. (8) Type &quot;resource list&quot;. (9) Check if any of DMA resource assigned to motors is same as the one LED_STRIP is using. "},{"title":"New CLI commands for 3.1:​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#new-cli-commands-for-31","content":"Note: See the 3.0.x page for CLI commands plus other features that were new in 3.0.x See the V2.x CLI Commands page for a history of CLI command changes. This WIKI has only documented Changes from being Forked from CleanFlight. Do see the CF docs. Resource Remapping​ From betaflight v3.1 there is a new command to map resources. No more custom motor mixes just to move a motor pin.Resource Mapping goes into further details on how to use this new command. set digital_idle_percent = 3.000​ [0..20]Only used when a DSHOT ESC protocol is selected. See [Setting Min Throttle with Dshot](DSHOT ESC Protocol) set anti_gravity_threshold = 350 - per Profile​ [20..1000]To improve stability in fast changing G forces during flight. This applies to quick throttle jumps where multirotor can go through weightless transitions. In these cases the iterm can cause unwanted effects like pitching up or yawing due to strong changes in accumulation polarities. To disable anti_gravity set anti_gravity_threshold = 1000. See Discussion on Anti_gravity below. set yaw_accel_limit = 20.000 - per Profile​ [0..50]Note from Boris: The old value was upscaled. This is the real value now in float representation. Its representing deg/sec/ms. A bit easier to swallow for human. posted by AILERON8: Yaw_accel_limit helps by limiting the rate of change of speed of your motors. The lower this value the less the rate of change of speed your quad is able to Yaw. Yaw_accel_limit prevents your props from spooling-up too quickly. This feature can be used to reduce fast yaw jumps or other rapid increases in the yaw direction. However, this feature will not prevent i-term windup, so it may not prevent yaw jumping, but it will be less severe. "},{"title":"set yaw_p_limit​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#set-yaw_p_limit","content":"This not longer has any effect since it is Not used with the 2DOF PIDC. This was only used in the Legacy PIDC (available in 3.0). set gyro_isr_update = OFF​ [OFF..ON]From mjbudden: gyro_isr_update is an experimental feature I have added. When set on, the gyro is read and filtered in the ISR (interrupt service routine). This is &quot;unconventional&quot; programming practice (many would frown upon doing this), which is why the default is off. Theoretically setting it on should produce some small performance improvements, but that needs to be confirmed by flight testing. This setting should be used with caution. From Boris: Might be useful on slower i2c targets like NAZE etc. Its for testing purposes. Things not mentioned in release notes and manuals are not meant to be changed generally unless you really want to be a &quot;tester&quot;. "},{"title":"New RC3 CLI commands:​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#new-rc3-cli-commands","content":"set gyro_use_32khz = OFF​ [OFF..ON]Only available on F4 &amp; F7 targets. Usually F4 board will run fine on 32kHz gyro and 16kHz pid loop. 32/32 is slightly too much for CPU. F7 target is now the only one able to run 32kHz/32kHz flawlessly with even accelerometer enabled. To enable 32kHz mode use CLI setting gyro_use_32khz = ON. (Configurator will not display correct speed until the next configurator update, but you will see the real cycletime). NOTE - only flight controllers with MPU6500, MPU9250, and ICM-series (eg ICM20689) gyro support 32kHz mode. 32khz is added just because it can, but no new harder filtering will be defaulted to that. If you want to fly 32khz you will have to try to optimise your filters by yourself. Default filtering is good enough for 8k gyro sampling, but 32khz requires more filtering depending of setup. I did find out that old blheli esc's for example perform well under 32khz as those are less responsive, while blheli_s and other responsive esc's with better braking really suffer from micros on 32khz. Note from Ksyrium:​ I have two BlueJay F4 rev 3. Initially they flew really wonky, until I learned how to properly soft mount the FC, a fully soft stack did not help to put it mildly. Then one of them refused to arm on 32khz and had 50% CPU instead of 40% on the other. The fix was to set moron threshold to 100. Note from arcaine25:​ I want to run 32k/32k on that revolt V2, but the CPU is at 50%ish.. I know Boris said that would be fine, but I am a little OCD about things, and just don't feel like risking it. 32k/16k flies great as it is, so I couldn't imagine TOO much difference between now and 32/32. While I didn't have to modify moron_threshold at all on the Revolt V2, I absolutely do have to on a Flip32 F4 with an MPU 9250. I have to set it to around 110 - 120 (i'd have to check) in order for it to work, otherwise the Gyro never cal's and it won't arm. Once I set the moron threshold, it works like a charm now that I soft mounted it correctly (previous post about it, as well as in the wiki :-) ). those M3 bobbins from RMRC are absolutely wonderful, and I ordered a bunch of them to keep on hand! Default in 3.1.5 is 48 for moron_threshold. Question from fftunes:​ Did someone compare mpu6500 vs ICM20x at 32k? In Felix' tests the ICM20x did not look so well... Boris' answer: Yes I did. Zero difference.....absolutely zero difference. I fact ICM208601 seemed slightly more prone to motor frequencies hitting its resonant frequency. I also did some more investigation about the new vs old gyros and talked even to invenesense about it. This is the story: The old gyros like MPU60x0 had 3 separate internal gyros. Each axis had its own gyro. That had too high power consumption for mobile phones and there was a demand for more power efficient gyro. So what did they do? They removed 2 gyros from it and made one gyro for all 3 axis to reach this low power demand and succeeded in that! They are selling millions of gyros installed on pretty much every mobile phone. But they did remove some robustness and hardware, which seems crucial for drone applications! The new gyros are also cheaper than the old ones as well, because of that. What we need in drone industry is better gyros and not cheaper less power hungry ones as that's not relevant for us! If you ask me they could make a more expensive gyro with better quality targeted for drones. "},{"title":"New RC6 CLI commands:​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#new-rc6-cli-commands","content":"Level mode has changed in 3.1 a bit. It got more parameters. In the Configurator pid tab you can find 2 new level parameters. It is level sensitivity and level limit. Both are in degrees. Level sensitivity is the max angle on full stick and level limit is the limited angle. So for example sensitivity of 100 means that full stick would give you tilt of 100 degrees, but if the limit is just 70 degrees last 30% of your stick will be thrown away. Lowering your sensitivity will give you smoother stick control. Maybe the defaults are a bit aggressive perhaps. Rc rate or any other rate or expo parameter doesn't do anything for level modes. set level_limit = 70​ [10..120]the maximum allowed angle in degrees set Level_sensitivity = 100​ [10..200]the max deflection on full stick in degrees "},{"title":"New RC10 CLI commands:​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#new-rc10-cli-commands","content":"anti_gravity_gain = 4.000 - per Profile​ [1..30]Gain is the temporary iterm acceleration on rapid throttle moves. Boris: Well fly and see how it goes on defaults and post some logs if you can. To disable anti_gravity set anti_gravity_threshold = 1000. See Discussion on Anti_gravity below. "},{"title":"Misc CLI commands that seem to be new in 3.1​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#misc-cli-commands-that-seem-to-be-new-in-31","content":"Note: Many have no information of how to use. rc_interpolation_channels = RP​ Allowed values: RP, RPY, RPYT Smoothing of RX inputs for Roll, Pitch, Yaw, Throttle. consumption_warning_percentage = 10​ Allowed range: 0 - 100 displayport_msp_col_adjust = 0​ Allowed range: -6 - 0 displayport_msp_row_adjust = 0​ Allowed range: -3 - 0 sdcard_dma = ON​ Allowed values: OFF, ON A report of setting this to OFF fix a BB logging issue on the BFF3 board. Boris has stated that this does not need to be done and an SDcard will work better with DMA on the BFF3. blackbox_on_motor_test = OFF​ Allowed values: OFF, ON task_statistics = ON​ Allowed values: OFF, ON beeper_inversion = ON​ Allowed values: OFF, ON beeper_od = OFF​ Allowed values: OFF, ON ledstrip_visual_beeper = OFF​ Allowed values: OFF, ON debug_mode = NONE (added in 3.0)​ Allowed values: NONE, CYCLETIME, BATTERY, GYRO, ACCELEROMETER, MIXER, AIRMODE, PIDLOOP, NOTCH, RC_INTERPOLATION, VELOCITY, DFILTER, ANGLERATE, ESC_SENSOR, SCHEDULER, STACK Enable additional value to be sent to a BlackBox Log which is useful to measure frequency of noise before filters and other debugging. See BB logging page for measuring noise and filter. pidsum_limit = 0.500​ Allowed range: 0 - 1 Mjbudden &amp; Boris suggested reducing pidsum_limit to reduce impact spins and make for a softer yaw. "},{"title":"CLI Changes between 3.1.2 & 3.1.3:​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#cli-changes-between-312--313","content":"dump​ no longer outputs section name. CLI name changes:​ rc_interpolation =&gt; rc_interp​ rc_interpolation_channels =&gt; rc_interp_ch​ rc_interpolation_interval =&gt; rc_interp_int​ roll_yaw_cam_mix_degrees =&gt; fpv_mix_degrees​ telemetry_switch =&gt; tlm_switch​ telemetry_inversion =&gt; tlm_inversion​ frsky_default_lattitude =&gt; frsky_default_lat​ frsky_default_longitude =&gt; frsky_default_long​ frsky_coordinates_format =&gt; frsky_gps_format​ hott_alarm_sound_interval =&gt; hott_alarm_int​ pid_values_as_telemetry =&gt; pid_in_tlm​ battery_capacity =&gt; bat_capacity​ current_meter_scale =&gt; ibat_scale​ current_meter_offset =&gt; ibat_offset​ multiwii_current_meter_output =&gt; mwii_ibat_output​ battery_notpresent_level =&gt; bat_detect_thresh​ use_consumption_alerts =&gt; use_cbat_alerts​ consumption_warning_percentage =&gt; cbat_alert_percent​ throttle_correction_value =&gt; thr_corr_value​ set throttle_correction_angle =&gt; thr_corr_angle​ servo_lowpass_freq =&gt; servo_lowpass_hz​ servo_lowpass_enable =&gt; servo_lowpass​ airmode_activate_throttle =&gt; airmode_start_throttle​ dterm_lowpass_type =&gt; d_lowpass_type​ dterm_lowpass =&gt; d_lowpass​ dterm_notch_hz =&gt; d_notch_hz​ dterm_notch_cutoff =&gt; d_notch_cut​ vbat_pid_compensation =&gt; vbat_pid_gain​ anti_gravity_threshold =&gt; anti_gravity_thresh​ dterm_setpoint_weight =&gt; d_setpoint_weight​ level_stick_sensitivity =&gt; level_sensitivity​ level_angle_limit =&gt; level_limit​ "},{"title":"New in 3.1.3​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#new-in-313","content":"set anti_gravity_rate_max = 80​ Allowed range: 0 - 2000 See Discussion on Anti_gravity below. set iterm_windup = 50​ Allowed range: 30 - 100 Boris' explanation: Just a limit for how high i-term can grow, its threshold to prevent iterm to go nuts on high dynamic cases for example like fast stick inputs or some other scenarios. I think the default value is pretty good from what I have seen from many setups I analyzed. I don't think you need to tune it unless you really suffer from high iterm windups. fpv_mix_degrees = 0​ Allowed range: 0 - 50 Note: Same command as &quot;set roll_yaw_cam_mix_degrees&quot; in V2.x. See the 2.x CLI coommand Wiki page for more ino and video links. Note that in newer BF versions, you need to enable a flight mode for 'FPV ANGLE MIX' on the modes tab to make the mixing work. You can either define a switch to switch FPV cam angle mixing on and off OR you can set the full range of any switch to keep it permanently on. "},{"title":"Removed from 3.1.3​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#removed-from-313","content":"accum_threshold = 200​ set yaw_accum_threshold​ "},{"title":"Discussions of new features:​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#discussions-of-new-features","content":""},{"title":"Anti_gravity:​","type":1,"pageTitle":"BetaFlight-V3.1.x","url":"/betaflight.com/docs/wiki/release/BetaFlight-V3.1.x#anti_gravity","content":"Posted by Vaflius:​ I have played with anti_gravity values a bit, but it is still very confusing. There are 3 values: set anti_gravity_thresh = 350 set anti_gravity_gain = 3.000 set anti_gravity_rate_max = 80 thresh is simple - it's the sensitivity (when/if the antigravity should kick in, as maxing out thresh means to turn off the antigravity) What's the difference between gain and rate_max? In my testing so far (I've had quite huge pitching on throttle blips), the biggest improvement was upping gain to 5. I could not see any difference between gain=5 and gain=6, other antigravity parameters defaulted. Lowering thresh to 200 did not seem to have positive impact, nor raising rate_max to 90. On my setup I now have: set anti_gravity_thresh = 200 set anti_gravity_gain = 6.000 set anti_gravity_rate_max = 90 It's much better, however, there is little pitching up on throttle and after lowering thresh to 200 it added something like propwash on throttle punchouts/blips. Has anyone tested these parameters on their quads? this from my notes, Boris B talking: Dont use that low threshold. I think 300 or 350 should be fine. What does the value mean? 350 for example means 35% of throttle. Once the throttle has been increased or decreased with 35% within 100ms of time than it means that there might be a high gravitational change going on and iterm needs to be accelerated to go to its new value faster. The gain is Ki multiplier. So your igain gets a temporarily nitro boost to prevent pitch up / down behaviour caused by too slow iterm. Default value of 2 is really mellow and is done for safety reasons as I found out a lot of folks were running pretty high igains and with this value iterm might just get pushed easier over the edge. Rate max is the rate where this feature completaly gets ignored. Anit-gravity Video by Joshua Bardwell "},{"title":"Betaflight 3.5 Tuning Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/tuning/3.5-tuning-notes","content":"","keywords":""},{"title":"Can I just update and go fly?​","type":1,"pageTitle":"Betaflight 3.5 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/3.5-tuning-notes#can-i-just-update-and-go-fly","content":"Yes, especially if moving from defaults... but: If you are updating from pre-3.4, please read the Betaflight 3.4 Tuning Notes because they apply to 3.5 also. If you had customised D weight and transition, your sensitivity to quick stick inputs may be different. You may need to modify the new Feed Forward and Feed Forward Transition values to reflect your old settings. The new Anti Gravity code defaults to SMOOTH, and should be better than before, but if you hate it, you can go back to the old STEP method. You will get slightly better dynamic notch functionality than before, but to really improve things on cleaner quads, the settings should be modified from defaults. D weight settings, including changes via OSD or Lua, will be ignored. Goodbye D Setpoint Weight: Hello Feed Forward! This is perhaps the biggest change in recent years: No more D Setpoint Weight. Feed Forward now takes over the role of D setpoint weight, and can be configured independently for each axis (pitch, roll and yaw). set f_pitch = 60, set f_roll = 60, set f_yaw = 60, Allowed range: 0 - 2000  The default values (60) for FF are comparable to the previous 3.4 defaults. NOTE: Your old D weight settings will be lost, in each PID profile, on updating from previous versions. To start using 3.5 with exactly the same Feed Forward behaviour as you had with the old D weight method, calculate FF as (D/26)*D_Weight, where D is your PID 'D' value, and D_Weight is 100 times your D_Weight slider value, or your exact dterm_setpoint_weight value from the CLI. For example, if your D was 26, and your D weight slider was 1.0, the equivalent FF would be 100. If your D was 52, and D weight was 100, an FF of 200 would fly the same on that axis. Yaw FF is covered further down. You may have to update your transition value manually also, but the units, and behaviour, are the same. Feed Forward provides 'dynamic stick boost' or 'dynamic stick responsiveness'. It pushes the quad quicker into turns when the sticks are moved quickly. With Feed Forward, the faster the sticks are moved, the bigger the push. And it doesn't wait for any error to develop, the response is instantaneous. The Feed Forward effect is attenuated around centre sticks by the transition parameter, so the quad can be made more damped (less twitchy) around centre for freestyle type flying by setting transition to 0.5 or 0.1 as usual, but for racing and for direct responses it's best to leave transition at 0. Zero Feed Forward allows D to dampen the quad all the time, even when the quad is instructed to turn quickly. Too much Feed Forward may make the quad too twitchy, and may cause overshoot. The default FF values of 60 are 'mid-range' values. Typically an FF value around 100 is a reasonable amount for a responsive race oriented quad. Overall responsiveness to stick input depends on both P and FF. It is no longer necessary, or desirable, to keep increasing P to improve transient stick responsiveness. Adding FF is a much better way to achieve stick responsiveness than adding P. "},{"title":"Feed Forward on Yaw​","type":1,"pageTitle":"Betaflight 3.5 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/3.5-tuning-notes#feed-forward-on-yaw","content":"Yaw performance has historically been weaker than pitch and roll, leading people to run high levels of yaw P, leading to noise and wobble on yaw, overshoot and bounce back. Not any more! In 3.5, yaw will typically be just as responsive and precise as pitch and roll. At least 50 of FF on yaw is recommended on all quads. The default is 60. P should not need to be more than 40-60 for great yaw responsiveness, in fact lower P reduces yaw noise and bounce back. Really high yaw I works great on most quads, and (strangely enough) actually reduces bounce back, when combined with yaw feed forward. With those changes, yaw responsiveness will be as good, or better, than pitch and roll. With Feed Forward and high I on yaw, bounce back will be minimal, and there is no need to run iTerm_Relax on these settings.  Yaw D is experimental. For normal quads, do not add any D to yaw, or you'll likely get mad yaw oscillation. Yaw D may be useful for tricopters. These are the yaw related values I'd personally recommend for a typical quad: set iterm_relax = RP set p_yaw = 40 set i_yaw = 120 set d_yaw = 0 set f_yaw = 100  Smoother Anti_Gravity Quadcopters, particularly battery on the bottom designs where the centre of gravity is below the centre of thrust, or those where increasing airflow would tend to rotate the quad backwards, need to accumulate I as forward speed increases to maintain the set pitch angle. When the throttle is moved up and down quickly in forward flight, these kinds of quads may pitch their nose up and down. Anti-Gravity is the Betaflight function that helps I adapt more quickly to the new value required after a quick change in airspeed. Before 3.5, Anti_Gravity used an 'all or none' method. Each time a new throttle value arrived, if that step change in throttle exceeded the threshold value, I was multiplied by the Anti_Gravity_Gain amount. But if the next step was just less than the threshold, nothing would happen. Because the time intervals between RC steps vary significantly from radio to radio, the throttle change amount per step could change a lot. Hence it was a bit of a lottery as to whether or not the anti-gravity effect actually worked or not. The new default set anti_gravity_mode = SMOOTH mode increases I in smooth proportion to the rate of change of throttle. There are no sudden steps and no threshold values to worry about - the old threshold is ignored. The overall strength of the effect can be altered by increasing or decreasing the anti_gravity_gain parameter. Your old values should be a good starting point, but the default of 5000 is recommended. Note: When chopping throttle hard to zero, inflow to the props can get reversed, causing marked pitch and roll instability, so don't expect the quad to stay rock solid under those conditions. The old method can be selected by choosing set anti_gravity_mode = STEP. Dynamic Notch Filter tuning The Dynamic Notch has been a vital factor in effective noise management. 3.5 improves the algorithms and allows tuning via the CLI. Appropriate changes can, on many setups, result in less delay and/or even better noise control. Using the defaults preserves the old behaviour. Quadcopters with relatively stiff frames, good motors and new props typically have a clean noise profile, apart from one noise peak that increases as the motor noise goes up. On these quads, the old dynamic notch code tended to go too low during high throttle periods, adding significantly to delay without removing the noise. For noisy quads, the old dynamic notch ended up staying tightly in a range between 200 and 300Hz, acting more like a fixed notch. The code was changed to: operate on post-filter, post-notch input data, so that if you added a notch, the dynamic would not end up on the same pointignore low frequency inputs that sometimes pushed it too lowbetter track peaksgo up to the highest value if there was no peak, to minimise delayallow the user to configure the quality factor so that it could to track a wider range of input dataallow the user to set how wide the notch would be, narrower causing less delay. IMPORTANT NOTE: Noisy quads with warm motors should be left at the defaults. "},{"title":"Tuning the dynamic filter - for clean quads​","type":1,"pageTitle":"Betaflight 3.5 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/3.5-tuning-notes#tuning-the-dynamic-filter---for-clean-quads","content":"dyn_notch_quality is the CLI value that sets how widely the notch filter is allowed to move. Technically, this sets the Q factor of the input bandpass filter. The old dynamic notch Q factor, and the current default, was 70. This restricted the range of movement of the dynamic to relatively narrow band, typically between 240 and 300 Hz. Setting dyn_notch_quality to 5 opens the bandwidth up to a range between 150 and 600Hz. This works really well on clean quads with a dominant well defined motor speed related peak that runs up to 600Hz. dyn_notch_width_percent sets how wide the dynamic notch will be. If set to 20, the notch will be +/- 20% of center frequency. If the algorithm would have set centre frequency to 300, a 20% wide notch would cover the range 240 to 360. The current default is 50%, which is about how wide the old dynamic filter was. Given the typical centre values of the old filter, this resulted in a wide notch, which caused meaningful additional delay. On clean quads, the dynamic can be narrowed to say 20% and still work really well. For medium clean quads, try: set dyn_notch_quality = 15 set dyn_notch_width_percent = 30  For really clean quads, try: set dyn_notch_quality = 5 set dyn_notch_width_percent = 20  To see what the centre frequency of the notch is doing on each axis in blackbox, and log raw gyro: set debug_mode = FFT_FREQ  "},{"title":"More detail about Feed Forward in 3.5​","type":1,"pageTitle":"Betaflight 3.5 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/3.5-tuning-notes#more-detail-about-feed-forward-in-35","content":"Prior to 3.5, the feed forward factor was included within the D calculation, and increased whenever you added D. The old D weight approach was undesirable for the following reasons: Conceptually, it was confusing. We were linking a factor that improved stick responsiveness to a factor that was supposed to dampen reactions. There were good reasons for this, but it sure complicated things. Previously, when adding D to tune out wobble after quick stick inputs, there was a simultaneous increase in turn rate, so it was not possible to 'just add more D'. Now, when adding more D, all you get is... more D. So D can be tuned in the classical method of adding it to control P wobble much more easily. Previously, any change in D would change how much feed forward or stick responsiveness you got. Now they are entirely independent. We can now plot the Feed Forward and D elements independently in the Blackbox Log Viewer, showing exactly what D does, and how much D and FF contribute, independently, to pidSum. This simplifies blackbox-assisted tuning. Feed Forward requires RC smoothing to be enabled (the Filter method is best). Without RC smoothing, Feed Forward will generate spikes in the motor traces and to prevent this the firmware will disable Feed Forward on any channels not smoothed. So the default has been changed to enable smoothing on all channels (rc_interp_ch = RPYT). "},{"title":"Betaflight 4.1 Tuning Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/tuning/4.1-Tuning-Notes","content":"","keywords":""},{"title":"NOTE 1: DO NOT paste in a diff from any prior software build into the 4.1 CLI. Not even 4.0.x. Doing so WILL carry over inappropriate settings!​","type":1,"pageTitle":"Betaflight 4.1 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.1-Tuning-Notes#note-1-do-not-paste-in-a-diff-from-any-prior-software-build-into-the-41-cli-not-even-40x-doing-so-will-carry-over-inappropriate-settings","content":""},{"title":"NOTE 2: Please start with stock filters and PIDs, unless you know for sure that your quad really needs something unusual. The default PIDs are really, really good.​","type":1,"pageTitle":"Betaflight 4.1 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.1-Tuning-Notes#note-2-please-start-with-stock-filters-and-pids-unless-you-know-for-sure-that-your-quad-really-needs-something-unusual-the-default-pids-are-really-really-good","content":"The 4.1 lowpass filters are now all PT1's. They have been configured to reduce delay and reduce the likelihood of flyaways on arming. They are very effective, but are probably stronger than needed for most good builds. Configurator 10.6 provides a simple way to reduce filter delay. We strongly recommend enabling RPM based filtering. This is now easier than ever. RPM filtering almost completely removes motor-dependent noise from the PID loop. The dynamic notch can then seek out and remove any remaining resonant noise peaks. The lowpass filters then have very little left to do, and usually can be shifted, as a group, to cutoff values 1.5 to 2 times higher than usual, reducing filter delay in the same proportion, resulting in better propwash handling than ever.The new feed forward features are described in detail later, but the defaults are very solid and should not require any tuning. In most cases 4.1 should be a flash and fly upgrade, the defaults are seriously good in all respects. For a VTX to be controlled by betaflight, a suitable VTX table must be configured by the user in a way that complies with local regulations. Bitbanged Dshot is very new; please report bugs during the RC phase to GitHub. If you have an issue with your ESC, try set dshot_bitbang = OFF rather than AUTO. For more information see the rpm telemetry page "},{"title":"Simpler RPM Filter Configuration​","type":1,"pageTitle":"Betaflight 4.1 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.1-Tuning-Notes#simpler-rpm-filter-configuration","content":"Enabling rpm based filtering is now easier than before. With the default dshot_bitbang = AUTO, there is no need for custom timer and DMA changes on F4 and F7 boards. RPM telemetry will be automatically activated when dshot_bidir is enabled, and this can be done in the 10.6 Configurator. The older method is active when dshot_bitbang = OFF. For more information check the updated rpm_telemetry wiki page. We still recommend keeping the dynamic notch filter active after enabling the rpm filtering. See the next section for how to adjust filters after activating the rpm filter. "},{"title":"New Filter Settings​","type":1,"pageTitle":"Betaflight 4.1 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.1-Tuning-Notes#new-filter-settings","content":"Betaflight 4.1 returns to the 3.5.x proven dual PT1 lowpass filters on gyro and dual PT1's on D. On gyro, the default filtering is relatively light. Gyro lowpass1 is dynamic, ranging from 200 to 500hz. Gyro lowpass2 is static at 250hz. D filtering, in contrast, is quite strong. D lowpass1 is dynamic, ranging from 70-170hz. D lowpass 2 is static at 150hz. The reason for strong, low-throttle, D lowpass filtering is to prevent D related 'fly to the moon' events that occasionally happened in 4.0.x with quads that were highly susceptible to D resonance. With 4.1 filters this should be far less likely. Even though the default filtering is quite strong, resulting in cool motors on any reasonable build, propwash suppression should be alright, especially if throttle is maintained in the turns. This is because PT1 filters have less delay than biquad fiters for the same cutoff frequency, and because the filter cutoffs rise quickly as throttle increases. If your quad flies well with cool motors on the default filter settings, propwash can be reduced by shifting the lowpass filtering higher. Configurator version 10.6 makes it really easy to do this. Just move both filter sliders to the right, and the cutoffs will move higher, reducing delay, and improving propwash. "},{"title":"NOTE: we do not recommend turning entire filters off to reduce filter delay. We strongly recommend using the sliders and keeping all four filters on at all times.​","type":1,"pageTitle":"Betaflight 4.1 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.1-Tuning-Notes#note-we-do-not-recommend-turning-entire-filters-off-to-reduce-filter-delay-we-strongly-recommend-using-the-sliders-and-keeping-all-four-filters-on-at-all-times","content":"Without RPM filtering, shifting the lowpass filters higher should be done cautiously. Most good quads should fly really well, with cool motors, up to 1.5x higher filters, but only very clean quads will be happy at 2x, unless the rpm filtering is enabled. With RPM filtering, most quads will still have cool motors with filters at 2x normal. At 2x, the delay attributable to lowpass filtering is halved compared to normal, so long as the dynamic is kept on (see below), and propwash will be noticeably better compared to defaults. Some clean quads may tolerate up to 3x filtering with dynamic and rpm on. The sliders stop at 2x so to go higher you have to enter the numbers yourself. To revert to default filtering, just put the filter sliders back to the centre. "},{"title":"Changes to the Dynamic Notch filter​","type":1,"pageTitle":"Betaflight 4.1 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.1-Tuning-Notes#changes-to-the-dynamic-notch-filter","content":"The dynamic notch filter now defaults to MEDIUM range. When rpm filtering is enabled, the dynamic notch filter has a different role. It no longer has to track and remove the motor peaks - rpm filtering does that. Instead, it can focus on whatever residual resonant peaks exist on the quad. Not all quads have resonance issues, but many do. We recommend keeping the dynamic notch filter enabled on all quads, even those with rpm filtering. When the rpm filter is in use, the dynamic notch can be a single, narrower, notch, rather than the usual wider, dual notches that are needed when the rpm filter isn't active. The following snippet makes those changes, and cuts delay arising from the dynamic notch to about 1.4 of normal. It should be applied when using the rpm filter: set dyn_notch_width_percent = 0 set dyn_notch_q = 250  And this restores the default values for use without RPM filtering set dyn_notch_width_percent = 8 set dyn_notch_q = 120  If RPM filtering is being used, and a narrower notch works well without hot motors, you can try turning it off altogether. Be sure to make a cautious test flight and check motor temperatures! If the quad later develops frame resonances from carbon flex, or from soft / bent props, you may get burnt motors when the dynamic filter completely off. Don't do this unless you are confident about your build integrity and are sure the RPM filtering is working well. If you have logging capabilities, a log made with the dynamic notch on vs off can show whether it is contributing usefully to the overall noise control situation. To reduce delay, or to focus on specific resonance bands, the dynamic notch can be configured to operate over a limited range of frequencies. Three ranges are possible, LOW, MEDIUM and HIGH. In 4.0.x, the default range setting was AUTO, in which the code chose a range based on the user-configured value of dyn_lpf_gyro_max_hz. The idea was that high max values would only be used on high rpm quads. But now high max values may be used on normal quads, when moving the sliders up, for example. In 4.1, the dynamic notch now defaults to MEDIUM mode, and it stays there regardless of dyn_lpf_gyro_max_hz. In MEDIUM mode it can deal with resonance bands from about 140hz to about 600hz. This is appropriate for most normal quads. For large quads - 7&quot; or greater - with lower than 150hz resonance lines, LOW may be more appropriate. HIGH can be useful on high-rpm quads, in combination with a higher than normal dyn_notch_min_hz value, to keep the dynamic notch tracking a specific and relatively high resonant peak, and not going any lower than needed. This can reduce its delay contribution. "},{"title":"Feed Forward Interpolation​","type":1,"pageTitle":"Betaflight 4.1 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.1-Tuning-Notes#feed-forward-interpolation","content":"Until now, the feed forward factor was derived from the slope of the setpoint line. Each new RC step would cause a sharp step up in the setpoint, which would result in a sharper feed forward spike. To attenuate these spikes, a carefully adjusted low-pass filter on the incoming setpoint data (rc_smoothing_input_hz) was followed by a second low-pass on the feed-forward value (rc_smoothing_derivative_hz). In 4.0x, with rc_smoothing in auto mode (set rc_smoothing_input_hz = 0, set rc_smoothing_derivative_hz = 0), these filter values were set dynamically according to the step intervals between successive incoming RC data points. In 4.1, the feed forward amount is calculated from the change in successive setpoint values, using an interpolation method, and outputs a clean step up in feed forward without spiking. This doesn't need a lot of filtering. The new command is ff_interpolate_sp and it has three options: OFF : normal 4.0x lowpass RC filteringON : new 4.1 interpolated feed forward, 4.0 style lowpass filtering on setpointAVERAGED : same as ON but with two-point moving average over the feed forward signal. This is the new default. With non OpenTx radios or OpenTx 2.3+ with systems that do not dynamically change the transmission rate, a good low-delay set of RC smoothing values for interpolated feed forward in 4.1 would be: set rc_smoothing_input_hz = 40 set rc_smoothing_derivative_hz = 100 set rc_smoothing_input_type = PT1 set rc_smoothing_derivative_type = PT1  When using with TBS Crossfire or Frsky R9 on OpenTx radios these settings will dampen aliasing artifacts that currently happen with those systems (and probably any external module on OpenTx radios). set rc_smoothing_derivative_hz = 20 set rc_smoothing_derivative_type = PT1  The following will return to the default 4.0 auto lowpass settings: set rc_smoothing_input_hz = 0 set rc_smoothing_derivative_hz = 0 set rc_smoothing_input_type = BIQUAD set rc_smoothing_derivative_type = BIQUAD  These changes were originally described in the ff_2.0 documentation. There we explained the basics of what feed-forward and ff_boost are. "},{"title":"Feed forward interpolation averaging​","type":1,"pageTitle":"Betaflight 4.1 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.1-Tuning-Notes#feed-forward-interpolation-averaging","content":"A very effective method of smoothing out feed forward with an erratic RC trace is to apply a simple two-point moving average over the entire feed forward signal. This is particularly effective in reducing sudden up/down movements when single RC steps are missed. FF averaging is enabled by default, with the line set ff_interpolate_sp = AVERAGED  Although averaging attenuates single spikes by about half, and eliminates spikes from alternating missed steps, it adds a delay equal to half the current RC step interval to the FF signal. This slight extra delay is very small and is only noticeable in very fast direction reversals. While some Rx systems are better than others, the majority lose data packets frequently. The amount of FF jitter from these erratic Rx signals is so bad that we strongly recommend keeping the averaging active. If you know your Rx signal is stable with few dropped packets, the averaging delay can be avoided by disabling it with: set ff_interpolate_sp = ON  To return to the older low-pass filter method of smoothing feed forward, use: set ff_interpolate_sp = OFF  "},{"title":"Feed Forward Boost​","type":1,"pageTitle":"Betaflight 4.1 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.1-Tuning-Notes#feed-forward-boost","content":"This provides an extra feed forward component, based on stick acceleration, which helps the motors spin up more quickly, the moment you change stick speed. When commencing a move, stick acceleration is positive. We now provide positive 'boost' that gets added to the feed forward signal, proportional to that acceleration. At the end of a move, as soon as the sticks decelerate, we will actively reduce the amount of feed forward, reducing overshoot. The default ff_boost amount is 15. This amplifies the strength of the normal feed forward overall, but particularly early on, reducing lag when making quick turns. It backs off the feed forward when the sticks slow down, reducing overshoot. Overall the effect is of greater accuracy when making fast direction changes. If the quad is tracking well, overall, but still has a bit of lag at the beginning of fast inputs, and if the RC signal is quite good, up to 30 of ff_boost may be used. The main limiting factor with boost is when RC input packets are delayed, absent, or too early. This can cause large steps in the RC setpoint, leading to even greater steps in the boost component of FF. We have two ways of attenuating these spikes. The first is a very effective, zero-delay attenuation method, based on inhibiting peak boost values due to spikes, and letting smaller 'real' stick-related boost values through. So long as the boost element is well below the ff_spike_limit threshold, it passes through largely unchanged; the larger boost signals arising from spikes are attenuated very strongly. The default ff_spike_limit threshold of 50 works well in most cases. If the Rx trace is clean with mostly regular steps, a higher threshold, eg 60-80, will allow a quicker response to fast stick inputs. However if the Rx signal has many steps, moving the threshold higher may result in an unacceptably noisy FF and/or motor trace. The second method is by averaging successive feed forward data points. This has been described above in the section on feed forward interpolation. It does add delay equal to half the normal RC interval. "},{"title":"Feed Forward Limiting​","type":1,"pageTitle":"Betaflight 4.1 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.1-Tuning-Notes#feed-forward-limiting","content":"ff_max_rate_limit is a CLI variable, enabled by default at 100, that cuts feed forward when outgoing stick speed is likely to hit the mechanical limit of its travel. This minimises the overshoot we often see at the start of a flip. The default value of 100 works well. The value may be tweaked to perfection. Get the quad tuned properly first, with whatever FF and boost works best. Look at the start of a hard flip in BlackBox Explorer and see if there is any overshoot. If with ff_max_rate_limit = 100 there is still too much overshoot, try ff_max_rate_limit = 95. If the overshoot is too well controlled, try 105 to 110. The range of adjustment is quite tight. ff_max_rate_limit does not deal with overshoot when the sticks return to centre. It can be useful for racers who have such low rates that they often hit max travel when making tight turns. "},{"title":"Optimised PID and TPA defaults​","type":1,"pageTitle":"Betaflight 4.1 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.1-Tuning-Notes#optimised-pid-and-tpa-defaults","content":"The primary PIDs are largely unchanged from 4.0.x. Stick responsiveness has been improved with slightly higher default I and feed forward (FF) values on pitch and roll. ff_boost is enabled by default, and in combination with the higher default feed-forward value and the reduced delay from feed forward interpolation, stick responsiveness should be significantly stronger. If your quad seems too twitchy, lower FF using the stick responsiveness slider. Throttle PID Attenuation (TPA) now defaults to 0.65 starting at 1250 throttle units. This means more TPA at full throttle, but with a smoother range of D reduction. Combined with the changes to PT1 filtering, this seems to improve mid throttle oscillations compared to 4.0.x in most cases. The biggest change is the provision of sliders to simplify tuning the PID values. Quads with low authority (heavy 4S GoPro machines or 7&quot; with slightly over-propped motors) will usually do better with the master PID slider moved to the right a bit, maybe as high as 1.5x. High-authority machines, eg lightweight LOS quads, will usually do better with the master PID slider to the left, say 0.7 - 0.8. The amount of feed forward is easily adjusted with the 'stick responsiveness' slider. Cinematic type HD quads may prefer a lower amount of feed forward especially if their long-range radio makes frequent large glitches. Racers may prefer a higher amount of feed forward. To get more D damping of P, move the PD balance slider to the left. You might do this if you get P wobbles on tight turns. Generally I wouldn't change this other than in exceptional circumstances, normally the defaults are best. A 6S racing quad typically needs the default amounts of I and FF, the only slider change needed is usually to drop the P and D gain slider back to 0.7. A 4S racing quad can be quite good with the master slider at 1.2 and the P and D gain slider at 0.7. The sliders greatly simplify tuning the PIDs. To go back to defaults, put them all back in the middle. DO NOT move them all the way to the right to see if it flies great, you'll likely just melt the motors :-)  Credits: myriad improvements, fixes, advice, and all the underlying code - mikeller, eTracer, and multiple contributors dynamic idle, rpm telemetry, bit banged Dshot, feed forward limiting - JoeLucid configurator sliders - IvoFPV feed forward boost, filter and PID changes - ctzsnooze "},{"title":"Betaflight 4.0 Tuning Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes","content":"","keywords":""},{"title":"WARNING :​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#warning-","content":""},{"title":"4.0 is sensitive to high P and D values! The defaults are OK for a normal 4S 2400-2600kV 5\" quad. For high thrust to weight ratio quads, eg 6S or ultralight builds, cut all the PID values by at least a third for your first flights.​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#40-is-sensitive-to-high-p-and-d-values-the-defaults-are-ok-for-a-normal-4s-2400-2600kv-5-quad-for-high-thrust-to-weight-ratio-quads-eg-6s-or-ultralight-builds-cut-all-the-pid-values-by-at-least-a-third-for-your-first-flights","content":""},{"title":"What should I notice if I fly defaults?​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#what-should-i-notice-if-i-fly-defaults","content":"Cooler motorsSimilar propwash at low rpm, improved propwash control when throttle is maintained through turnsA wider tuning envelope across a range of different types of quads.Greater precision in tight, fast turnsA 'smoother' feel and cleaner sound to the motors "},{"title":"I'm a freestyle pilot, what should I paste into the CLI?​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#im-a-freestyle-pilot-what-should-i-paste-into-the-cli","content":"The goal is smoothness. Using your old PID's is fine, set D_MIN to about 75% of your previous D value, and take a bit off your old P and D values. Warning: default PIDs assume the slightly heavy 4S type freestyle quads (heavy GoPro, heavy battery). If used with 6S quads or lighter weight freestyle quads, cut the PIDs by about a third before trying to take off. It may otherwise shake and head to the moon! If starting from defaults, on a normal 4S freestyle quad, try: set dterm_lowpass2_type = PT1 set dterm_lowpass2_hz = 200 set feedforward_transition = 30 set iterm_relax_type = gyro set iterm_relax_cutoff = 10 set transient_throttle_limit = 15 set i_pitch = 85 set i_roll = 80 set d_min_roll = 25 set d_min_pitch = 28 set d_min_boost_gain = 30 set d_min_advance = 50 set d_pitch = 38 set d_roll = 30 set tpa_rate = 50 set tpa_breakpoint = 1500 set tpa_mode = D set p_yaw = 35 set i_yaw = 100 set d_yaw = 0 set f_yaw = 35 set iterm_rotation = OFF  "},{"title":"My freestyle quad has a single slow bounce-back after a flip...​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#my-freestyle-quad-has-a-single-slow-bounce-back-after-a-flip","content":"This is usually caused by the iterm_relax_cutoff value being too high for your quad. Test by increasing the value in the CLI to confirm that a higher value makes it worse, then try progressively lower values until it no longer bothers you. The optimal value is the highest value that doesn't give you the bounce-back. If it's a freestyle quad, also set iterm_relax_type = gyro, which prolongs the I inhibition and is better for freestyle quads with this particular issue. The snippet above should be sufficient for most freestyle machines. The downside of using gyro type iterm_relax, and low cutoff values, is that the quad will tend to run wide and not keep a clean turn radius during very tight sustained turns, eg pirouettes around trees etc. This isn't usually an issue for cruisy freestyle flying, but is a big problem for race pilots or people who push the freestyle envelope a bit. Race pilots usually prefer setpoint with the cutoff at 30-35, and accept some bounce back. The defaults are a bit of a compromise; use the snippets as starting points. "},{"title":"I'm more of a race pilot... or 6S/lightweight responsive machines​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#im-more-of-a-race-pilot-or-6slightweight-responsive-machines","content":"Here the goal is responsiveness, lots of I, the least D possible to better handle bent props, with propwash and flip control of lesser importance. set dterm_lowpass2_type = BIQUAD set dterm_lowpass2_hz = 150 set feedforward_transition = 0 set iterm_relax_type = setpoint set iterm_relax_cutoff = 35 set transient_throttle_limit = 10 set p_pitch = 30 set p_roll = 28 set i_pitch = 90 set i_roll = 84 set d_pitch = 27 set d_min_pitch = 18 set d_roll = 25 set d_min_roll = 16 set d_min_boost_gain = 27 set d_min_advance = 0 set f_pitch = 90 set f_roll = 84 set tpa_rate = 75 set tpa_breakpoint = 1400 set tpa_mode = D set p_yaw = 30 set i_yaw = 90 set d_yaw = 0 set f_yaw = 30 set iterm_rotation = OFF set thrust_linear = 0  "},{"title":"Help! It just took off straight up when I armed!​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#help-it-just-took-off-straight-up-when-i-armed","content":"This is hypersensitivity to D that has as the underlying cause either flexy arms, high power to weight ratio, faulty gyros or other prop/frame resonance issues. For 6S quads you should first cut PIDs by about a third. The settings below cut D a lot and P a bit, and filter D a bit more strongly lower down. They may get you in the air without drama, from which point you can sort out the underlying problem/s: set d_min_roll = 14 set d_roll = 20 set d_min_pitch = 15 set d_pitch = 22 set d_min_boost_gain = 20 set tpa_rate = 75 set tpa_breakpoint = 1400 set tpa_mode = D set p_roll = 30 set p_pitch = 30 set d_yaw = 0 set dterm_lowpass2_type = PT1 set dterm_lowpass2_hz = 100  "},{"title":"I'm flying large props - 7\" or bigger to X class​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#im-flying-large-props---7-or-bigger-to-x-class","content":"Betaflight 4.0 filter settings will typically be too high for quads with larger props. Try the following, which allows the dynamic notches and low passes to go low enough for these lower rpm setups: set dyn_lpf_gyro_min_hz = 70 set dyn_lpf_gyro_max_hz = 350 set dyn_notch_range = LOW set iterm_relax_type = gyro set iterm_relax_cutoff = 7 set dyn_notch_min_hz = 100 set dyn_lpf_dterm_min_hz = 70 set dyn_lpf_dterm_max_hz = 150 set dterm_lowpass2_hz = 120 set d_yaw = 0  Sometimes prop / arm resonance requires a fixed D notch as well, but usually not. RPM based multiple notch filtering should be great for these machines. "},{"title":"I've already got a perfect tune on 3.5, I just want it to fly the same​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#ive-already-got-a-perfect-tune-on-35-i-just-want-it-to-fly-the-same","content":"The snippet below configures the 4.0 filtering to match 3.5. Provided you have a really good tune in 3.5, these settings should have your quad flying almost exactly the same in 4.0. Latency will be slightly reduced at higher rpm and motors may be a little bit cooler, but overall it should be much the same. Try these settings if you're having trouble getting a good result in 4.0 and know it was good in 3.5. Do not just paste a 3.5 diff or dump into 4.0! YAW I-term is 2.5x stronger in 4.0. To exactly match 3.5 PIDs, the 3.5 I value for Yaw should be divided by 2.5. set gyro_lowpass_type = PT1 set gyro_lowpass_hz = 300 set gyro_lowpass2_type = PT1 set gyro_lowpass2_hz = 100 set dyn_lpf_gyro_min_hz = 300 set dyn_lpf_gyro_max_hz = 450 set gyro_notch1_hz = 0 set gyro_notch1_cutoff = 0 set gyro_notch2_hz = 0 set gyro_notch2_cutoff = 0 set dyn_notch_range = AUTO set dyn_notch_width_percent = 0 set dyn_notch_q = 70 set dyn_notch_min_hz = 130 set dterm_lowpass_type = PT1 set dterm_lowpass_hz = 200 set dterm_lowpass2_type = PT1 set dterm_lowpass2_hz = 100 set dyn_lpf_dterm_min_hz = 200 set dyn_lpf_dterm_max_hz = 250 set dterm_notch_hz = 0 set dterm_notch_cutoff = 0 set d_min_roll = 0 set d_min_pitch = 0 set d_min_yaw = 0 set abs_control_gain = 0 set use_integrated_yaw = OFF set d_yaw = 0  "},{"title":"Tuning 4.0 for propwash minimisation​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#tuning-40-for-propwash-minimisation","content":"The short answer is: fly smoother lineskeep throttle on during turnsmore D (increase D itself, d_min, d_min_gain, some or all of those)reduce filter delaygreater turn authority / responsivenesssometimes add a bit more P The long answer is more complex: Propwash happens when, after throttling down and turning very fast, the pilot then throttles up, and the quad falls backwards/downwards into dirty air. Reversed airflow generates tip vortexes that greatly reduce thrust. 'Dirty' air is turbulent and may buffet the quad as we fly out through it. Whenever we cut throttle in a 180 reversal, any motors that start at zero throttle will be much slower to spin up than the others, leading to very unequal thrust development, crosstalk between axes, secondary PID reactions, and worsening the instability. Hence the need to always keep throttle on during propwash, avoid dropping to zero as much as possible. The end result is highly non-linear motor responses, rendering normal PID control relatively ineffective. The best solution for propwash is flying style. A good pilot can fly a quad with terrible propwash so smoothly that it looks perfect. The key piloting factors are: keep the props moving forward in clean airavoid sharp 180 degree flight reversalskeep some throttle on at all timesnever cut throttle to zero (except during flips, inverted drops and the like)fly smooth arcing turns During propwash, the quad shakes at relatively low frequencies that are easily seen in video, eg 20-30hz. These shakes cannot be filtered out. Quads that deal best with propwash have the following characteristics: able to rapidly change thrust on demand, ie high turn authority, from: -- higher cell count, eg 6S is better than 4S -- lighter, easily spun props (don't over-prop)heavier centre mass (more stable)battery on top (less wobble momentum) From the software perspective: minimise filter delay (warning: less filter delay = less noise filtering = hotter motors) more D is usually better (lots of D can cause hotter motors) -- D_min is the parameter to increase, and/or d_min_gain there is a 'sweet spot' for P, neither too low nor too high = experiment improving PID responsiveness at very low rpm can be useful on some quads (thrust linear) D_min will only make propwash worse, not better 4.0 has been focused on stronger low rpm filtering to avoid jello on HD setups and to keep motors cool. Compared to 3.5, it has less high rpm filter delay, but more low rpm filter delay. In 4.0, D is running at a much lower value - the D_min value - most of the time. The D_min value is active when you are flying smoothly. D_min will only rise to the normal D value during active stick inputs. D will also rise some of the way towards the full D value during propwash events, but not completely. From a propwash perspective, the D_Min value is more important than the D value. Note that although the default 'max' D value is higher in 4.0, this value is only active during flips and rolls and other quick inputs. Hence for propwash, which typically happens at low stick inputs, d_min is what matters most. Overall, in 4.0, propwash is typically less than 3.5 if throttle is sustained, especially above one-third to one-half throttle. Pilots who drop throttle to zero and fly with reverse 180's are likely to get more propwash in 4.0 than 3.5, but pilots who keep throttle up during turns are likely to find it better. If you find that 4.0 has more propwash than before, these are the kinds of changes that may help: use a D value from your old tune, plus about 20%set D_mins to 20% below the D values from your old tune (get min and max D closer together)increase d_min_boost_gain say to 30 Once D is as good as you can get it, try higher or lower P to find the optimal P valuetry adding some thrust_linear (10-20 on a 5&quot;, and look out for wobbles on idle)to reduce filter delay, move the filter minimums a bit higher, carefully. Now to filtering. The default minimum filter minimums are all around 150hz. eg: dyn_lpf_gyro_min_hz, the dynamic gyro lowpass minimumdyn_notch_min_hz, the dynamic notch minimumdyn_lpf_dterm_min_hz, the dynamic D minimum, anddterm_lowpass_hz, the second D lowpass (not a dynamic, but also can go up) If the motors are cool, try increasing all those values say to 170, say, and fly again. Pushing them higher should be done slowly, in small steps, cautiously. Note that on a typical 5&quot;, 250hz equals mid-throttle rpm. Be aware that the higher you go, the more likely the quad is to burn your motors if you fly with a bent prop or as your motors get bearing wobble. Carefully check motor temps on moving these filter values. You may also find that jello suddenly gets worse, or that motor temps abruptly get worse, as you increase these values. RPM based filtering is likely to give less delay and should be considered. Note that this is still experimental at this point. Be aware that the root cause of propwash is flight style. Of the technical causes, the biggest factor, by far, is the delay arising from motor/prop thrust generation delay. Only 10% of the problem is filter delay related. Even if there was zero filter delay, there would still be propwash. Most people will notice some improvement in propwash by lifting D, increasing D_min and pushing the filters higher, or turning some off. At some point, however, the 'returns' get less and less, and the risks of burning motors, and lost power, efficiency, and flight time, get greater. Everybody's situation will be slightly different, and the optimal compromise depends very much on what is most important to us, and what we want to use the quad for. "},{"title":"Dynamic lowpass filtering​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#dynamic-lowpass-filtering","content":""},{"title":"Introduction​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#introduction","content":"Stick inputs for a quadcopter, and the required motor responses, all happen at low frequencies, typically less than 50 times a second (50hz). However the noise generated by the motors extends well above 500Hz, and can be 'louder' than our stick inputs. This noise is detected by the gyros, amplified by the PIDs, D in particular, and fed back to the motors. Since the motors cannot spin as quickly as the noise frequencies, the electricity going backwards and forwards from noise just generates heat. The goal with filtering is to remove the noise and ensure the motors are sent only noise-free clean inputs. All filters induce some delay, and the greater the delay, the greater the tendency for the quad to oscillate in propwash worse and dulling handling. The challenge with filtering is to remove as much noise as possible above the cutoff frequency, retain as much signal as possible below the cutoff frequency, and cause the least delay. But all filters add delay, and the stronger the filtering, the greater the delay. Most noise arises from the rotation of each motor, which shakes the frame a little bit every rotation. This generates an rpm-dependent noise signal at the fundamental frequency of the motor (rpm * 60 in hz), and secondary integral multiples of that frequency (harmonics). All propeller blades also have natural resonant frequencies, and can abruptly and suddenly generate bad oscillations at their resonant frequency when it matches the motor rotation frequency. All this noise is directly related to motor rpm. Although there is some non-rpm related broad band random noise from air turbulence and bearing rattle, the vast majority of the noise is directly rpm related. Using bi-directional DShot, and a BLHeli32 ESC with suitable code, the new betaflight rpm notch filters identify the fundamental and harmonic frequencies of every motor, and target the related noise peaks with very narrow notch filters that almost totally remove motor-frequency-related noise. Usually less filtering is required, resulting in about half to two-thirds the filter delay of 'standard' filtering. credit: JoeLucid. For those of us who can't use rpm filtering, the dynamic notch and the lowpass filtering have been improved so that both work better and with less delay. "},{"title":"Changes to noise filtering in 4.0​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#changes-to-noise-filtering-in-40","content":"Betaflight 4.0 now provides a means to smoothly shift the lowpass filter cutoff to a higher value at full throttle, compared to low throttle. The cutoff frequency assigned to the first gyro and D lowpass filter now dynamically increases, with increasing throttle, along a curve that effectively emulates motor rpm. This reduces delay at higher throttle, and allows the dynamic notch to better track the motor peak. At low throttle the dynamic notch can now go lower than before, to assist with removal of fundamental motor oscillations that sometimes cause jello on freestyle quads. The new dynamic lowpass defaults let the dynamic notch can now track motor noise more precisely and over a wider range of frequencies, and clean up noise above the motor fundamental frequency much more cleanly than before. Delay, and propwash, may be no better than 3.4 at low rpm, but typically is significantly improved at higher rpm. Noise suppression across the board will be signficiantly improved. "},{"title":"Enabling / disabling dynamic lowpass filtering​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#enabling--disabling-dynamic-lowpass-filtering","content":"The dynamic lowpass filter min and max values are configured independently of the classical static gyro lowpass 1 value. When active, the dynamic lowpass filter settings override the value of the static lowpass 1 filter. The static lowpass 2 filter, and the static notch filters, remain available and work as before. Not all boards have the flash size to support dynamic lowpass filtering; if your board doesn't show CLI entries for dyn_lpf_gyro_min_hz and the like, it's not supported. Dynamic lowpass filtering becomes active, and the static lowpass 1 value is ignored, when the dynamic maximum is greater than the dynamic minimum, and when the dynamic minimum is greater than zero. For example, these settings will ignore the value in gyro_lowpass_hz and enable dynamic lowpass filtering with a minimum of 150 and maximum of 600hz: set dyn_lpf_gyro_min_hz = 150 set dyn_lpf_gyro_max_hz = 600  The following will disable dynamic lowpass filtering and return the quad to a static lowpass at whatever value is set in gyro_lowpass_hz: set dyn_lpf_gyro_min_hz = 0 set dyn_lpf_gyro_max_hz = 600  Dynamic lowpass filtering works best when configured as a biquad. That single dynamic biquad will provide all the filtering done previously by both static PT1's of 3.5. Typically static secondary gyro lowpass 2 filter, and no static notches, are required. It is strongly recommended to use defaults for the lowpass filtering in 4.0. "},{"title":"Dynamic lowpass filter settings​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#dynamic-lowpass-filter-settings","content":"dyn_lpf_gyro_min_hz sets the lowest frequency below which the dynamic lowpass filter cannot pass. It doesn't shift the throttle to cutoff curve upwards, rather it puts a 'floor' below which the cutoff cannot go as rpm falls. dyn_lpf_gyro_max_hz, sets the highest frequency the lowpass can rise to, following a smooth curve from zero throttle. Ideally dyn_lpf_gyro_max_hz should be set close to the quad's actual max rpm in hz. For a typical 5&quot; this is about 450-500hz, equivalent to 27,000 to 30,000 rpm. Smaller props typically rev faster, eg 600-650hz for 3&quot;-4&quot;, and larger quads rev slower, eg 300-350hz. Max frequency can be determined by displaying an rpm debug in the OSD as you fly, or making a log and performing blackbox or plasmatree analysis. Displaying the max value in the stats screen after disarming can be enabled via set osd_stat_max_fft = ON, make sure to set dyn_lpf_gyro_max_hz to at least 610 however as otherwise the dynamic notch will not be able to go high enough and the max FFT reading will be bogus. If on full throttle, the dynamic lowpass doesn't go high enough, it attenuates the motor peak so much that the dynamic notch FFT can't track the motor peak properly, which makes for worse noise overall. Likewise, if the lowpass doesn't go low enough, the FFT may jump up to the first harmonic, leaving a large fundamental frequency to get through. Logging with set debug_mode = DYN_LPF will show the centre frequency of the FFT that drives the dynamic notch (recorded into debug 0). The FFT value should smoothly track the motor frequency from low to high. If the FFT cannot stay stable on the high throttle motor peak, dyn_lpf_gyro_max_hz might be able to go a bit higher. If the FFT jumps around a lot at low throttle, you can help it track the primary motor peak better by adjusting dyn_lpf_gyro_min_hz. Betaflight 4.0 uses a single dynamic biquad lowpass on gyro by default, rather than the two fixed PT1's of 3.5, because the biquad has a cleaner pass-band and much steeper cut above the cutoff point. It very effectively attenuates all noise above the anticipated motor peak and allows the dynamic notch to remove that. The end result should be very clean noise spectrum, with the fundamental motor peak, the harmonics, and most ordinary noise removed. Delay is about the same as 3.5 at low rpm but reduced above mid rpm. The default settings pass a lot more gyro data through below cutoff than in 3.5, leading to sharper responses generally, but particularly so at higher rpm. "},{"title":"Dynamic D filtering​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#dynamic-d-filtering","content":"The same dynamic approach is used on D, but in a slightly different way. D actively amplifies higher frequency noise, but we need as much D as possible to help control un-commanded events like overshoot and propwash. Propwash happens in a range around 30-80hz on a well-tuned quad. So we need as much D as possible up to 100hz, and as little as possible above that. At the same time, delay on D really reduces its effectiveness, so we want the least D delay possible. This is almost an impossible challenge! After extensive emulation, we found that the default 4.0 biquad dynamic lowpass settings provide the best outcome. We filter D quite hard, with a dynamic biquad lowpass ranging from 150 - 250hz, and a second fixed static lowpass higher up at 250hz. This setup maximizes D at propwash frequencies around 40-80hz and attenuates D hard above that point. This is the main reason for the cool motors seen with betaflight 4.0, despite functionally less gyro filtering. The second static D filter doesn't absolutely have to be a biquad, a PT1 works well and is preferred if the quad is fairly clean and there's not a lot of high-frequency D noise. The first dynamic D lowpass filter should always be left as a biquad. "},{"title":"Tuning the dynamic lowpass filters​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#tuning-the-dynamic-lowpass-filters","content":"Making sensible changes to these complex filters isn't easy. A blackbox log in set debug_mode = FFT_FREQ mode is the only practical way. We need to check that the FFT is tracking well, analyze the amount of noise and its frequency content at different throttle points, think about where it might be coming from, and how best to deal with it. PID-Analyzer and the Blackbox spectrum analyzer are two very useful tools. In principle: set dyn_lpf_gyro_max_hz to your approximate maximum motor rpm expressed in hzset dyn_lpf_gyro_min_hz no higher than 200hz in practice, varying it up and down depending on motor temps at low throttleif motors are warm and bearings not so good, add a static PT1 filter on gyroalways retain the dynamic biquad on D, and only cautiously move the minimum higher, or you may suddenly get very hot motors if the D cut point is high enough that it cannot control prop resonancethe second static lowpass on D is very useful; only move it higher if a log shows not much D noise up high. In practice: just stick with the defaults; if the motors are cool, bring all filters up by about the same percentage, leaving the dynamic maximum for gyro always around the max rpm. credit: ctzsnooze, iCr4sh, gvhLaw and the skunkworks team "},{"title":"Improved dynamic notch code​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#improved-dynamic-notch-code","content":"The FFT based dynamic notch we've been using cannot track every motor individually. The FFT algorithm gives us only one single notch frequency to suppress, even if the motors diverge and make noise on multiple slightly different frequencies. The 3.5 dynamic notch had a Q factor of 0.7 (70 in CLI), which was very wide, resulting in significant filter delay when low. During the 4.0 development period, we found that two, closely spaced, narrower notches, would achieve better noise results with less delay, than one single wider notch. The value dyn_notch_width_percent sets how far apart, in percentage either side of the centre frequency, these paired notches will be. The dyn_notch_q factor of 120 sets them to almost half the width of the dynamic notch in 3.5. For clean quads, or where filter delay is critical, setting dyn_notch_width_percent to 0 runs only one single narrow notch. Motor temperatures are likely to be higher, but filter delay, and probably propwash, will be less. This is not recommended for normal quads but can be helpful on high-performance machines that are flown smoothly with clean props. Another approach for clean quads flown smoothly is to narrow the percentage width and increase the Q factor. For instance, setting width to 4% and Q to 200 results in a very narrow notch with much less delay. Conversely, if the quad is to be flown aggressively with motor speeds all over the place, and if it is noisy, the width percentage can be increased and the Q factor reduced. Any changes should be proportional, eg if the width is increased by a factor of 50%, the Q factor should be 50% lower also, to avoid a big 'gap in the middle' between the pair of notches. The dynamic notch has three frequency ranges in which it can operate, LOW, MEDIUM and HIGH. An AUTO option selects the range depending on the value of dyn_lpf_gyro_max_hz, as follows: When dyn_lpf_gyro_max_hz is set to zero (disabled), or below 334hz, LOW is selected.When dyn_lpf_gyro_max_hz is set from 334 to 610hz, MEDIUM is selected.When dyn_lpf_gyro_max_hz is set above 610hz, HIGH is selected. The approximate real world frequency ranges of these modes are: LOW: 80-330hz (best for lower revving machines, or when low frequency resonance is an issue)MEDIUM: 140-550hz (well suited to 5&quot; quads)HIGH: 230-800hz (for very high revving 2.5 - 3&quot; quads) In addition, 4.0 provides a dyn_notch_min_hz value below which the dynamic notch cannot go, regardless of the selected range. The default of 150hz. To hit 100hz resonance peaks, the LOW range option must be active, and dyn_notch_min_hz must be set below 100hz, eg 80hz. This may be useful to avoid jello on some quads. Targeting resonance much below 80hz is unlikely to be successful with the dynamic notch, a fixed notch probably will need to be used. Without rpm filtering, dyn_lpf_gyro_max_hz should be set to that frequency expressed in hz, and if the mode is left in AUTO, an appropriate range will be automatically selected. The user can override this by manually choosing the range. It should be high enough to include the maximum motor rpm frequency. The defaults work well with most mini quads. When rpm filtering is active, the dynamic notch and the dynamic lowpass don't need to track and remove motor noise. Typically only one fixed 250hz PT1 gyro lowpass filter is required to remove the small amount of residual high frequency noise once the motor noise is removed by the rpm notches. To disable the first gyro lowpass, gyro_lowpass_hz must be zero, and dyn_lpf_gyro_max_hz must also be zero. As noted before, if the dynamic lowpass mode is AUTO, and dyn_lpf_gyro_max_hz is zero, the dynamic notch will be forced into LOW mode automatically. If the dynamic notch range needs to range higher than LOW mode's upper limit of 330hz, the dynamic notch mode must be manually set to either MEDIUM or HIGH. Typically, in rpm mode, the rpm filter removes the motor noise very effectively, allowing the dynamic filter to deal with frame resonances, which are not uncommon in well used quads. Very clean quads often don't have significant resonant noise peaks, and won't need or benefit from having the dynamic notch active. Turning the dynamic notch off saves CPU usage and reduces overall filter delay. The only way to know if you do, or don't, have resonant noise peaks, is to perform spectral analysis of a blackbox log using PID Toolbox or equivalent. The log should be recorded with dynamic notch off with set debug_mode = gyro_scaled so the incoming gyro noise picture, resonance and all, can be clearly seen. If resonant peaks are present, and you want to configure the dynamic notch to deal with them, but otherwise stop it going low and adding delay, choose the highest range that includes the resonant peak line, and set dyn_notch_min_hz to about 10% below that peak. Some examples: for a single resonant peak at 300hz: LOW range with dyn_notch_min_hz at 270hz,for a single resonant peak at 400hz, choose MEDIUM with dyn_notch_min_hz at 370hz,for a low frequency resonant peak of 100hz, choose LOW with dyn_notch_min_hz at 80hz. If the resonance peak is narrow, a highish Q value (120 to 200) with width = 0 will minimise delay. When the dynamic notch tracks into very low frequencies, its associated delay becomes significant, particularly if Q is wide. Sometimes for very low, very fixed frequency resonances, a single fixed notch can be a better solution. Certainly that is the only way to deal with resonant peaks below about 70hz. The 3.4 dynamic notch was a single Q=0.7 notch that moved in a relative frequency band between about 220hz and 300hz. The 4.0 notch can be similarly configured if desired, but it won't work as well as the default settings. Tuning the dynamic notch is best done with the aid of logging. credit: iCr4sh, ctzsnooze, the skunkworks team "},{"title":"D Only TPA​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#d-only-tpa","content":"Throttle PID Attenuation (TPA) has been around a long time. It attenuates the PIDs linearly start at the threshold throttle value, reaching the set percentage attenuation at full throttle. The original purpose was to reduce wobble on full throttle in highly tuned quads. I was removed from TPA around 2.9, and since then TPA operated on both P and D. In 3.5, D was split into D and FF, and we then started wondering about what TPA should do to those individual factors. We noted that D mediated noise was often much worse at high throttle, and, a bit to our surprise, that we could cut D as much as 70-80% D cut on full throttle without P wobbles. By not attenuating P or FF with throttle, TPA on D alone maintain stick responsiveness at high throttle, and markedly reduce full-throttle noise and motor heat. Hence, TPA has been configured by default to be active only on D in 4.0. These are my current settings: set tpa_rate = 75 set tpa_breakpoint = 1400 set tpa_mode = D  To return TPA to classic P and D attenuation, as in 3.5 and earlier, paste into the CLI: set tpa_rate = 10 set tpa_breakpoint = 1650 set tpa_mode = PD  Typically a freestyle quad might use less 'TPA on D' and a race quad say 75% from 1400. Credit: ctzsnooze and the skunkworks team, eTracer "},{"title":"Improved setpoint mode iterm_relax​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#improved-setpoint-mode-iterm_relax","content":"iterm_relax cuts the rate of growth of I during very fast moves. This reduces I related bounce-back or overshoot after fast inputs. We now use high I values on pitch and roll to enhance stability on windy days, so setting iterm_relax properly is more important than before. The iterm_relax_cutoff frequency determines how quickly iterm relax will start, and how quickly it will unwind. For racing we want quick, responsive I accumulation, with faster release, so that I will be sustained and strong in very tight turns, yet release quickly. This will help the quad hold the set radius in tight, fast spiral turns or slaloms. We would set the cutoff to higher frequencies, eg 30-40hz. Higher frequencies suit more responsive machines and tracks with many sustained turns. The downside of setpoint mode with high cutoff values is that there probably will be some I mediated overshoot with flips and rolls, but that's not usually a concern while racing. The more freestyle / LOS oriented GYRO type of iterm_relax has not changed. It comes on a bit later and lasts longer, controlling bounce-back after hard flips and rolls better than setpoint mode. In gyro mode, iterm_relax_cutoff should be set according to the authority of the quad. 20hz is good for a reasonably strong 5&quot; freestyle setup, 10hz for a 6&quot; or lower authority machine, and 5hz for larger props and heavier machines. Gyro mode with excessively low cutoff frequencies aren't ideal for racing, or very tight spiral turns around flags or gates, because the quad will become a bit unpredictable in how it handles tight turns. Credit: ctzsnooze "},{"title":"Transient throttle limit​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#transient-throttle-limit","content":"When airmode is active, if any single motor trace would exceed either 0 or 100%, airmode will automatically adjust throttle to maintain motor differential. For example, if the flight controller required a 40% motor differential to make a turn, but at low throttle, this would need one motor to go 10% below zero, airmode will increase throttle by by 10%, retaining normal responsiveness. Airmode works great like that, at low and high throttle. But, if there are noise spikes superimposed on any one motor trace, big enough to make that motor to exceed 100%, airmode will cut the peaks off the noise and 'reflect' the chopped off spikes into the other three motors, upside down. This causes sharp downing spikes on the other motor signals and harsh digital clipping of the 'overshooting' motor signal. Which adds to the frequency content and amount of the noise. That's the last thing you want on full throttle. This is a problem at both ends of the throttle range, contributing to hot motors on full throttle, and bad grinding noises or instability on arming. By measuring the amount of noise in the motor signals, an additional throttle lift (or cut) can be dynamically provided, based on the magnitude of the noise, and hence only as much as needed, to stop the noise reflection problem. There is one CLI adjustment, transient_throttle_limit, which sets the maximum amount of throttle boost or cut allowed in percent. 15% is quite generous and rarely needed in most quads. As far as I know, there's no downside to having it this high under normal conditions. Having it set this high may, however, help you fly home with a bent prop and not cook the motors. credit: JoeLucid "},{"title":"Improved yaw PIDs​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#improved-yaw-pids","content":""},{"title":"The following notes apply ONLY to un-integrated yaw configuration! If you're flying integrated yaw, the tuning process is completely different!​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#the-following-notes-apply-only-to-un-integrated-yaw-configuration-if-youre-flying-integrated-yaw-the-tuning-process-is-completely-different","content":"Yaw is primarily driven by the rate of acceleration of the motor, especially at lower rpm. As the motors accelerate, a counter-force is applied to the frame. This gives instant, un-delayed yaw acceleration. The driving force for yaw from acceleration is greater the higher the rate of change of rpm, and is greater with heavier motors and props. Acceleration is reduced linearly by motor/arm inertial mass and the square of arm length. Acceleration-driven yaw rate of change can be very quick, since changes in motor acceleration are near-instant. At higher rpm a simple rpm dependent air-drag yaw factor becomes relevant and sustains the yaw at a steady rate. This is very different from pitch and roll, where thrust is basically linearly related to rpm, and is always a bit delayed since it takes a while to change rpm. And our standard PID controller assumes a linear relationship between rpm and thrust, which is very definitely not the case with yaw. Hence tuning yaw for optimal performance using classical PIDs is very different from pitch and roll. That's why JoeLucid developed the experimental integrated yaw concept, which is intended to permit a more traditional method of tuning yaw. When tuning classical PIDs on yaw, keep these things in mind: D must always be zero. Non-zero D values are unhelpful and cause oscillation. iterm_relax should not be enabled on yaw; it should be set iterm_relax = RP P provides rapid changes to motor signals but rarely overshoots. P is a quick responder to stick inputs, and also responds quickly to overshoots, wind shear, collisions etc. The main problem with P on yaw is that it readily generates noise on the yaw axis, and yaw oscillation from P is quite common, both of which limit how much P can be used. Typically it's not a great plan to use more than 35 of yaw P on a standard quad. FF acts very much like P, in that it adds push to stick inputs. But that's all it does. It does not add noise to the motor traces, and it does not stabilize the quad against un-commanded inputs. Adding FF reduces reliance on P and I during yaw spin initiation. Too much FF will cause a fast overshoot at peak input rate, and sudden under-shoot the moment the sticks go still. That's been the typical appearance in 3.5 yaw logs. The value entered for 'I' in the PIDs changes only how quickly I accumulates. It doesn't change the amount of I you get in the PID traces, it only changes how quickly you get to that amount. The amount depends only on how much sustained error there is for it to fix. We have found that the amount of I that works best on yaw is very, very high. Hence Betaflight 4.0 now multiplies yaw I internally by 2.5 times. If you set yaw I to 100, you will get yaw I of 250 internally. This greatly improves yaw performance, with less overshoot because less FF is needed. The 4.0 yaw defaults, with zero FF, will work extremely well for most typical yaw moves, with smooth noise-free accurate rendition of setpoint to response. For higher rate yaw spins, some tuning may be required. If the amount of P and I isn't enough to achieve the yaw rate during the move, the sustained error will result in a high accumulated I signal, leading to some overshoot. If the motors are not maxing out, increasing I further, and adding more FF may help track the yaw input more closely, reducing the amount error during the move, and thereby reducing the amount of I overshoot. If the motors are maxing out during rapid yaw changes, the best solution is to just target a lower peak yaw rate, or be a bit more gentle in acquiring that rate. The alternative solution is to enable iterm_relax on yaw, which will block most of the I accumulation, and push the yaw move with a lot of FF. Typically this won't provide as good yaw control for slower rate moves, though. "},{"title":"Bonus Section: Note about the OpenTx ADC filter​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#bonus-section-note-about-the-opentx-adc-filter","content":"OpenTx has a specialised way of filtering stick inputs, that only transmits changes that are above a certain size, the ADC filter. It sends no data for variable periods of time when the sticks move slowly, until the amount of stick movement becomes big enough to send a new value. This is intended to reduce jitter. Unfortunately, anytime no data is sent, FF drops abruptly to zero. The result is a very steppy FF trace during small inputs, and a reduction in fine control. Disabling the ADC filter will force the radio to transmit whatever data it has, new data every packet, no matter how small the change. This means transmitting some jitter but improves fine control and cleans up the FF trace a lot. The Hall effect gimbals have very little jitter and the ADC can be turned off without problems. Potentiometer based gimbals may be OK but old ones often have a lot of jitter. If you have a FrSky radio with Hall gimbals: In the hardware tab of the radio configuration menu, uncheck the ADC filter box. Note: The special edition radios often come with a firmware build that has the ADC filter off already.In the BetaFlight Configurator Receiver tab, set RC Deadband and Yaw Deadband to 0. This will keep quad control smooth as you cross through the deadband. "},{"title":"Bonus Section: For Filter Noobs​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#bonus-section-for-filter-noobs","content":"Filters in BF4.0 have become quite complex, so for some less experienced users it's hard to really discriminate between all available options. Here is a little summary writeup on the available filters and how/where to configure them, including the new dynamic rpm notch filters: DYNAMIC_FILTER feature in Betaflight Configurator (BFC) GUI switches dynamic NOTCH on or off, settings are configured via CLI dyn_notch... commands. No associated BFC GUI fields to edit values yet.Dynamic LOWPASS needs no further feature switch, it is enabled by entering numbers into the last screenshot's fields OR configuring via CLI dyn_lpf... commandsrpm filter (with its 36 filter banks) is completely independent of both dynamic notch and dynamic lowpass filters and is configured via CLI rpm_notch... commands. No associated BFC GUI edit fields yet.Static glpf and dlpf and static gyro and dterm notches: Parametrized via BFC GUI edit fields OR CLI dterm_lowpass/notch..., gyro_lowpass/notch... commands Note: Lowpass1 for gyro or dterm can be either dynamic or static, Lowpass2 is always static (reflected in the BFC GUI)  "},{"title":"THANK YOU to all the amazing ideas people, testers and programmers who helped make this release so amazing!​","type":1,"pageTitle":"Betaflight 4.0 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.0-Tuning-Notes#thank-you-to-all-the-amazing-ideas-people-testers-and-programmers-who-helped-make-this-release-so-amazing","content":" "},{"title":"Betaflight 4.2 Tuning Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes","content":"","keywords":""},{"title":"Quick settings​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#quick-settings","content":"These snippets are suggestions for how some of the less common settings might be adjusted to suit a certain type of flying. The defaults should be fine for fast freestyle and general racing requirements. I can't say that they will be perfect on your quad, and they do not include PID tuning or filter values, but they might show the kind of ranges for some of these numbers. ProRace (aggressive feed forward, requires a really clean RC signal or might jitter from RC steps and get hot motors) set iterm_relax_cutoff = 30 set rc_smoothing_auto_smoothness = 5 set ff_interpolate_sp = ON set ff_smooth_factor = 0 set ff_spike_limit = 60 set ff_boost = 20 set feedforward_transition = 0 set yaw_lowpass_hz = 100 set throttle_boost = 7 set throttle_boost_cutoff = 25 set dyn_lpf_dterm_curve_expo = 7 set gyro_rpm_notch_q = 600  (enable sag compensation, as high as suits you, and D expo also) Race/Fast Freestyle (strong feed forward, tolerates a typical RC signal, very responsive) set iterm_relax_cutoff = 20 set rc_smoothing_auto_smoothness = 7 set ff_interpolate_sp = AVERAGED_2 set ff_smooth_factor = 20 set ff_spike_limit = 70 set ff_boost = 15 set feedforward_transition = 0 set yaw_lowpass_hz = 100 set throttle_boost = 7 set throttle_boost_cutoff = 25 set dyn_lpf_dterm_curve_expo = 7 set gyro_rpm_notch_q = 700  HD (smoothed FF for HD cameras, strong low turn rate smoothness, low iterm relax to minimise bounce back) set iterm_relax_cutoff = 10 set rc_smoothing_auto_smoothness = 20 set ff_interpolate_sp = AVERAGED_3 set ff_smooth_factor = 40 set ff_spike_limit = 55 set ff_boost = 0 set feedforward_transition = 40 set yaw_lowpass_hz = 70 set throttle_boost = 5 set throttle_boost_cutoff = 10 set dyn_lpf_dterm_curve_expo = 7 set gyro_rpm_notch_q = 800  Cinematic (For slow rate turns only, may feel a bit 'dull' otherwise) set iterm_relax_cutoff = 5 set rc_smoothing_auto_smoothness = 40 set ff_interpolate_sp = AVERAGED_4 set ff_smooth_factor = 50 set ff_spike_limit = 50 set ff_boost = 0 set feedforward_transition = 70 set yaw_lowpass_hz = 50 set throttle_boost = 2 set throttle_boost_cutoff = 10 set dyn_lpf_dterm_curve_expo = 8 set gyro_rpm_notch_q = 900 set iterm_windup = 75  The following tuning suggestions may help minimise minor random wobbles in HD footage: disable D_min,set D about 20% above P, using the P:D ratio sliderset TPA to D only, to start at your cruising throttle value, and increase the cut percentage a littleset the D lowpass expo value as high as possible (you'll be limited by mid-throttle D noise) (with the extra D, you may need more D filtering, e.g. 2 clicks left on the D filter slider)use about 20% less P than your normal freestyle tune, just barely enough to provide basic P stability.and about half the default I on pitch and rollhigh FF transition eg 0.7make sure the ADC is not ticked in the hardware settings of OpenTxuse Actual Rates with centre set to 10-50, expo to 0, and your usual max rate. Actual with zero expo gives a soft centre with quicker return to normal responsiveness out of centre. Transition and/or deadband may not be required when the centre sensitivity is very low. For zero throttle instability go back to 24kHZ PWM if you've set the ESc to 48kHzraise DShot idle progressively until it becomes floaty, and tune dynamic idle appropriatelytry thrust linear at 25try disabling Dmin and slightly higher overall PIDs Return to defaults (zero values mean 'off') set iterm_relax_cutoff = 15 set rc_smoothing_auto_smoothness = 10 set ff_interpolate_sp = AVERAGED_2 set ff_smooth_factor = 37 set ff_spike_limit = 60 set ff_boost = 15 set feedforward_transition = 0 set yaw_lowpass_hz = 0 set throttle_boost = 5 set throttle_boost_cutoff = 15 set dyn_lpf_dterm_curve_expo = 5 set gyro_rpm_notch_q = 500 set iterm_windup = 100  To enable all the other recommended new features all in one go: set dyn_lpf_dterm_curve_expo = 6 set vbat_sag_compensation = 100 set vbat_pid_gain = OFF set rc_smoothing_type = FILTER set rc_smoothing_input_hz = 0 set rc_smoothing_derivative_hz = 0 set rc_smoothing_input_type = BIQUAD set rc_smoothing_derivative_type = PT1 set rc_smoothing_auto_smoothness = 10  To enable dynamic battery sag compensation: set vbat_sag_compensation = 100 set vbat_pid_gain = OFF  "},{"title":"Settings to minimise bounceback​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#settings-to-minimise-bounceback","content":"Betaflight defaults currently are intended to fly great on medium high performance quads - most lightweight, responsive 5&quot; and smaller machines. 'Low-authority' quads, such as low-power whoops, ducted HD quads, heavy 4S freestyle builds, and many 7&quot; and larger builds, and endurance builds, all share the common problem of being slower to respond to quick inputs than 'normal' quads. They tend to get bounce-back after quick flips or rolls, and after quick yaw inputs. This paragraph explains why these kinds of quads get bounce-back, and how to fix it. The PID I term, in Betaflight, provides precision in tight turns, pitch accuracy in fast forward flight, stability on windy days, stability in drops and mid-flip, controls asymmetric aero drag effects, and generally cleans up the myriad small persistent residual errors that P can't entirely deal with. It accumulates a correction for small residual errors over time, and that correction keeps the quad exactly on track. Higher I values will do this faster and more completely, especially in tight turns and on windy days, where there are small persistent residual errors that P, D or FF are unable to control. Relatively high I is one of the reasons that Betaflight 4.x tracks so accurately in tight turns and on long straights. If the pilot requests a change in turn rate that is too quick for the quad to deliver, the gyro signal will lag setpoint, and will be a large error signal. I will start to accumulate to help correct this. iTerm_relax will try to control this accumulation. If iterm relax is inadequate for the amount of error, a large amount of I may accumulate, and when the pilot stops the flip, all that accumulated I will drives a movement in the reverse direction, which slowly fades away, until it gets back to zero. That's the single, fairly slow, 'bounce-back' event that the pilot sees when they terminate the flip. This phenomenon is called 'iterm windup'. We use the iterm_relax and iterm_windup settings to control iTerm related bounce back. The defaults for these parameters work very well in 4.2 for 'normal authority' builds. iterm_relax, at default of 15, strongly suppresses I accumulation during normal flip and roll inputs. iterm_windup works for yaw problems, and since it usually isn't needed at all, it is off by default. 'Low-authority' quads, however, will tend to get bounce-back after quick flips or rolls, and after quick yaw inputs, because they have much more delay and error than normal in relation to the stick input. Betaflight's iterm_relax and iterm_windup values will need to be adjusted for these machines. You know you have a low authority quad when you get an annoying bounce-back after a 600 degree/s flip or roll, and/or a bounce-back after a quick yaw input. Other clues are that you require a higher than normal hover throttle value (ie your hover throttle is more than 25%), or you get slow wobbles in drops or at low throttle. For yaw, any machine with longer arms - anything bigger than 6&quot; - will lose yaw authority and typically have issues with yaw bounce-back and yaw jump. Bounce-back problems due to iTerm windup can be addressed in three ways. The best way is to change the tune or modify the hardware of the quad to make it more responsive. Ideally the quad gets a tune that responds so quickly that the defaults work properly. This will have the added benefit of improving the overall handling of the machine as well. Let's think about how we could do this. Low-authority machines typically require higher P and FF. Maybe up to double the default P and triple the default FF in some cases. There is a limit to how high you can go, but you need to go high. Most likely D needs to go up as well as P, or you'll get P wobbles, and D noise may be the limiting factor on how high you can go. You should push FF hard, and move the 'P and D gain' slider progressively to the right. These changes should reduce the wobble and the bounce back because it will get the machine turning more quickly and reduce error magnitude and duration. Note that very high D will delay responsiveness and make bounce-back worse. Getting the right P and D values is really important on these quads. If you still have wobble and bounce-back despite tuning P and FF, you should then try reducing I, trying half of normal or a third of normal. Very low I will make the quad less stable overall, so don't go too low. On the hardware side, over-propped quads will have difficulty changing thrust quickly. Always try smaller or lighter props that the motors can spin up more readily. Optimising the prop to the motors can make a huge difference to authority related issues such as bounce-back. On very large quads, beast or X-class, rotating the motors inwards will improve yaw authority. Any change that improves bounce-back means that you've got the quad responding more quickly and precisely, and that's a good metric of the success - or otherwise - of your tuning efforts. The next best way is to reduce your maximum pitch, roll or yaw rate, or just fly more smoothly, entering or leaving the flips or yaws a little more slowly. By not pushing harder than your hardware can deliver, you'll get a good overall performance envelope without extreme tuning. Tuning the provided iterm_relax and iterm_windup functions. iterm_relax is what Betaflight uses to prevent unwanted I accumulation for really fast pitch and roll inputs. The associated iterm_relax_cutoff value determines the strength of the suppression effect and how long it lasts for. Lower values suppress I accumulation more strongly and for longer, and are what you need to control iTerm related bounce-back. Try stepwise reducing iterm_relax_cutoff from the default of 15 to 10, then 7, then 5, noting the improvement in bounce-back each time. Settle on the highest value that 'works'. The lower you go, the less accurate your tighter turns will become. So there is a bit of a trade-off to consider. You want the highest number that controls your bounce-back. We strongly recommend keeping iterm relax in the default setpoint mode. There is no need to change to gyro mode in 4.2. Iterm relax will likely perform better in setpoint mode than gyro mode in 4.2. For yaw bounce-back, optimising yaw PIDs can improve matters, and should be attempted first. On yaw, FF will provide the initial push as the sticks move, P a kind of boost soon after, and I does most of the work. For good yaw performance, all three elements are needed. Ideally you get a log and adjust yaw P, FF and I so that for small to medium yaw inputs you get responsiveness that matches your pitch and roll lag. You will see that for big, fast yaw inputs, the motors quickly get driven to a very high differential, with one pair at 100% and the other at zero. This means the quad cannot deliver what you are asking it to do. iterm windup and bounce back are inevitable when this happens. iterm_windup is what fixes this problem on yaw. In 4.2 iterm_windup applies exclusively to yaw, previously it applied on all axes. It suppresses I accumulation whenever the motor differential exceeds the set percentage. Default is 100, meaning 'off'. 70 is good value to prevent yaw bounce back on low authority quads. By stopping yaw accumulation at 70% motor differential, iterm windup won't happen whenever we command yaws that the quad cannot achieve, and I mediated yaw bounce-back won't be a problem. The great thing about iterm_windup is that it doesn't impair reactions to smaller inputs - they will be completely unaffected. acc_limit and acc_limit_yaw are settings that selectively suppress I accumulation when the pilot is requesting a rate of change of setpoint (ie, an acceleration) that is too high for the quad to achieve. By default they are off. They only suppress I only while the setpoint is changing rapidly, and that is only briefly. Since bad iterm windup can happen over a prolonged period, including after the sticks stop moving, they are not recommended. "},{"title":"That's all you really need to know... go fly!​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#thats-all-you-really-need-to-know-go-fly","content":""},{"title":"For hard-core tuners, here are the technical details:​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#for-hard-core-tuners-here-are-the-technical-details","content":""},{"title":"More accurate loop times​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#more-accurate-loop-times","content":"Gyro and PID loop scheduling has been completely rewritten, resulting in less PID loop jitter and reduced CPU utilisation. No special configuration is required; it just works. You get improved filter accuracy, cooler motors, longer flights; RPM Q factor can usually be set higher without problems. The RC input handling code has also been improved and is significantly more precise, leading to smoother FF traces than before. The gyro loop rate is now locked at the 'native' gyro sampling rate and cannot be adjusted by the user. Usually this is 8k. The PID loop rate can, and should, be adjusted to suit the capabilities of the processor. The PID loop time is displayed at the bottom of the Configurator. The most important thing for rpm filtered setups is stability of that loop time. One percent loop time error means that the rpm notch filters will be 1% away from their correct positions. Without RPM filtering, most F4 and F7 boards will run perfectly fine with 8k PID loops. WIth RPM filtering, F405 and F7xx boards should also be OK with 8k PID loops, but F405's are more accurate at 4k. We recommend 4k, then try 8k; only stay with 8k if it seems at least as stable as 4k. F411's should be set to 4k and typically will require overclocking to get optimal results. To keep jitter at the lowest possible value, disable blackbox logging. While logging, use 1k unless higher rates are essential, and disable debugging unless a debug is needed. When running 4k or 2k PID loops, aliasing artefacts can arise from the down-sampling process. These are usually prevented by the gyro lowpass 2 filter, which runs in the gyro loop. It is the only lowpass filter running at gyro loop speed. If it is disabled, a simple 2-point averaging filter is automatically enabled in its place when 4k or lower PID loop rates are selected. 2-point averaging reduces aliasing artefacts reasonably well for 4k PID loops, though not as well as a lowpass 2 at 1000hz, but does not fully prevent aliasing at 2k. Hence gyro lowpass 2 should not be disabled with 2k PID loops. 8k PID loops have no aliasing issues, so gyro lowpass 2 can be freely configured for noise reduction, or disabled if it's not needed, without concerns relating to aliasing. With a 4k PID loop, if you don't need gyro lowpass 2 for noise reduction purposes, set it as high as it can go (currently to 1000Hz), or turn it off. With a 2k PID loop, don't disable gyro lowpass 2. "},{"title":"DShot settings:​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#dshot-settings","content":"With rpm enabled, use DShot300 with 4k PID loops and Dshot600 with 8k PIDloops. With bidirectional / rpm filtering enabled: dshot150 -&gt; 2k max pidloopdshot300 -&gt; 4k max pidloop (at 8k, Dshot 300 data only gets sent every second PID loop)dshot600 -&gt; 8k max pidloop Without bidirectional enabled: dshot150 -&gt; 4k max pidloopdshot300 -&gt; 8k max pidloppdshot600 -&gt; up to 16k max pidloop (8k is the max configurable PID loop rate in 4.2) "},{"title":"Improved Feed Forward​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#improved-feed-forward","content":"4.2 provides feed forward optimisations to suit everything from hard-core racing to cinematic HD. When configured aggressively, Feed Forward reacts immediately to any stick input. The basic feed forward component is proportional to the speed with which the sticks move, and the boost component is proportional to the instantaneous acceleration of the sticks. Aggressive feed forward can reduce setpoint to gyro delay to zero for most inputs, leading the high levels of control and immediacy required by the very best racers. Softer feed forward, including with Feed Forward Transition of 30, can make for a very smooth centre feel with quick responses to flick inputs, ideal for modern freestyle or cinematic purposes. The primary downside of aggressive feed forward is jitter when trying to fly smooth lines. Most radios have some jitter in their signal, many drop packets or send duplicate packets, and we all have some finger/thumb shake. If the quad reacts immediately to the tiniest input, it may 'tremble' or be a bit nervous when it should be in smooth forward flight or during gentle long radius turns. The needs of the race pilot differ greatly from those of a person wanting super smooth HD footage, so in 4.2 we've put a lot of thought into how best address these differing requirements. Feed forward depends greatly on the stability of the RC link, and the smoothness of the steps between incoming packets. We strongly recommend that Crossfire users update to the latest CRSF_Shot software (including the update to OpenTx that provides external module sync for CRSF). FrSky Tx users should upgrade to OpenTx 2.3 and disable ADC. "},{"title":"Mode: ff_interpolate_sp​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#mode-ff_interpolate_sp","content":"The most important feed forward parameter is the 'mode' in which feed forward operates, which can be set as follows using the set ff_interpolate_sp command in the CLI as follows: OFF: the older linear interpolation method, with no boost or glitch reductionON: the newer setpoint based interpolation mode, with immediate response to every change in RC, with boost and glitch reduction, intended for racingAVERAGED_2: as above, but with two point moving averaging for glitch reduction and for elimination of alternating up/down FF jitter, but with reduced jitter when flying straight ahead or in smooth arcs. For general purpose use, including racing and modern freestyle (default)AVERAGED_3: three point moving average glitch reduction, providing strong jitter reduction in smooth arcs or when flying straight ahead. Intended for freestyle with HD cameras. Effectively reduces 3-step (20ms) jitter in locked 150hz Crossfire setups that haven't been upgraded to CRSF shot.AVERAGED_4: four point moving average smoothing and strongest jitter reduction, best for smooth cinematic HD recordings. Can also be effective in smoothing jittery R9 traces. "},{"title":"Smoothness: ff_smooth_factor​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#smoothness-ff_smooth_factor","content":"Next most important is the 'smoothness' factor, which limits the amount of change that any one incoming radio step can make. It acts like an exponential or lowpass type smoothing function. The cli parameter is ff_smooth_factor. Default is 37, max is 75. Withset ff_smooth_factor = 0, there is no smoothing of outgoing FF steps. The full FF and boost amount for any given incoming RC step will be applied immediately. This is probably what a racer with a clean radio setup would prefer. At the default of 37, 63% of the incoming feed forward step will be applied immediately. The response is like a first order lowpass filter with a time constant of one RC interval, i.e. a cutoff of (1000 / 2 pi RCinterval) Hz, or about 24Hz for 6.66ms RC steps. This parameter smooths out sharp steps in the FF signal, reducing some of the jitter component that is common with many radios. Values above default will provide a smoother FF signal, but may cause so much delay as to make feed forward a bit useless. Not recommended except on perhaps slow cinematic HD rigs. "},{"title":"Boost: ff_boost​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#boost-ff_boost","content":"This hasn't changed since 4.1; please read the 4.1 tuning notes To summarise, boost responds to stick acceleration, and helps overcome motor lag with quick stick inputs. It also generates RC jitter and glitch artefact better than anything else. The default settings in 4.2 attempt to strike a good balance. Default boost is 15, and that works for nearly all quads. Racers may prefer 20. Higher values are likely to cause micro overshoots, jitter and excessive sensitivity on normal quads, but up to 30 may be useful on low authority quads. "},{"title":"Spike limiting: ff_spike_limit​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#spike-limiting-ff_spike_limit","content":"ff_spike_limit provides simple soft cliping method, to chop the tops off large FF spikes. The default should be acceptable for most radios. Most people should leave this value at defaults. Higher numbers will allow progressively bigger spikes through. Racers or people with clean radios who want full feed forward aggression can increase this value, but should look closely at their feed forward trace to see what happens. The biggest normal single FF step change that a pilot ever generates is when they suddenly return from full stick deflection, ie on terminating a fast flip. If having the least possible delay at this point is important, maye try shifting the spike limit higher. "},{"title":"Overshoot limiting: ff_max_rate_limit​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#overshoot-limiting-ff_max_rate_limit","content":"ff_max_rate_limit also hasn't changed since 4.1, please read the 4.1 tuning notes . Leave this at 100. "},{"title":"RC smoothing improvements​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#rc-smoothing-improvements","content":"Following extensive testing, the default RC smoothing values were simplified and optimised. Usually no changes from defaults are needed. The default auto smoothing method will dynamically calculate RC smoothing time constants from the identified RC packet intervals. This works really well with most radio systems and with interpolated feed forward. The default input filter type is BIQUAD, it smooths setpoint and P. The derivative filter type is PT1, which smooths the sharp corners off the interpolated feed forward trace. Most pilots should stick with the defaults. rc_smoothing_auto_smoothness sets how 'smooth' the RC traces will be. Higher values result in greater smoothness, but add RC delay. 10 is optimal for most general purpose flying. Racers may prefer 8, or even 5, but will get more jumpy motor traces as a result, often not improving performance much if at all; for old jittery radios, 20 or even 40 may smooth out things a bit. These are the new default settings: set rc_smoothing_type = FILTER set rc_smoothing_input_hz = 0 set rc_smoothing_derivative_hz = 0 set rc_smoothing_input_type = BIQUAD set rc_smoothing_derivative_type = PT1 set rc_smoothing_auto_smoothness = 10  "},{"title":"Dynamic D filtering expo​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#dynamic-d-filtering-expo","content":"dyn_lpf_dterm_curve_expo now makes the D lowpass filter cutoff value rise more quickly with throttle increases than it used to. The rise in D lowpass now starts from the moment the throttle is increased. Values of 5 or above may improve propwash control. The end-points, dyn_lpf_dterm_min_hz and dyn_lpf_dterm_max_hz, remain the same, the difference is that we get closer to max more quickly. Default is a useful rise (6).A value of 1 provides a very gentle curve - nearly linear - from min to max Hz over the full throttle range.A value of 6 results in a curved increase with throttle with a more rapid rise from min by mid-throttle.The maximum of 10 results in a very quick rise. For graphs see PR9486. "},{"title":"Dynamic battery sag compensation​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#dynamic-battery-sag-compensation","content":"This PR applies an initial motor output reduction when the battery is full, and boosts motor output upwards during the flight, to quickly compensate for sagging battery voltage as it happens. This gives a more consistent stick feel, both for throttle and PID, over the usable battery voltage range, compensating for the usual loss of performance as the battery sags. The quad will not feel super aggressive at the start of a flight, or dull at the end. It is best enabled with: set vbat_sag_compensation = 100 set vbat_pid_gain = OFF  This means '100% compensation for voltage sag'. NOTE 1: The quad must have an on-board battery voltage sensor. It can't be enabled with ESC based serial voltage telemetry, because the voltage values change too slowly. NOTE 2: The older vbat_pid_gain method of battery sag compensation should not be used at the same time. NOTE 3: Only use this if you have active battery monitoring via telemetry or OSD!** You will get no loss of 'stick feel' until the battery starts falling below 3.5V. NOTE 4: It won't work in 3D mode. The code compensates for voltage changes from 4.2V down to the user's configured warning voltage of 3.5V. A fall from 4.2V to 3.5V is about a 16% reduction in voltage. Withs 100% compensation, a motor output reduction of about 16% will be applied when the battery is full. As the battery voltage falls, motor output is dynamically boosted back towards normal, canceling out the effect of the sag. Once the battery falls to 3.5V or lower, motor output will be normal, or back to 100%, and no further compensation is possible. Both throttle and motor limits may need to be adjusted after enabling sag compensation. If you already have a static motor_output_limit value below 100, this code further reduces motor output below that value. You may want to lift motor_output_limit by about 10 for similar overall performance. If you have a throttle limit, there is usually no need to change it. To keep a bit more aggression at the start, at the cost of having a bit more 'sag' during the flight, apply less than full compensation, eg 50% compensation is set vbat_sag_compensation = 50. Setting more than 100% compensation can help whoops that sag really badly, but usually isn't needed. There are two kinds of battery sags: Slow falls, over minutes, as the battery loses overall voltage and capacityQuick sags due to transient high current loads during throttle blips To only cover the slow fall, set vbat_sag_lpf_period to 200 (20 seconds period, or a time constant of about 3.3 seconds). This will not compensate for quick transient drops. High values make sense for slow flyers or cinematic type flying. To respond quickly, stick with the default vbat_sag_lpf_period of 2, or 200ms. This has a time constant of about 33ms, fast enough to respond very quickly to fast throttle blips and quick split-S turn type sags. Whoops tend to be flown at lower voltages than mini quads, so the warning voltage is often set lower, eg 3.3V. The attenuation range, and the initial maximum motor output suppression value, will be a bit bigger. In this case, slightly reduceing the compensation amount, eg to say 80%, will stop it feeling very dull at the start. However, some whoops sag a lot, and on some a value above 100 may be useful to get a constant feeling across the battery range. No adjustments are required when using HV cells. Enabling the BATTERY debug will show the compensation amounts, as they happen, in the OSD, or in a log. Battery debug 2 is 'compensationStrength, a value between 0 and 100. Zero means you're at the low end of the battery range, and no further compensation is available. 100 means you've got a fresh battery and your maximum configured compensation is active. It can be used as a simple 0-100 battery status indicator, if you like. Battery debug 3 carries the actual percentage reduction applied to motor output. A normal value for a full battery would be about 160 (16%). If you were to apply only 50% compensation, your would see only about 8% attenuation when full. "},{"title":"New Rates modes​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#new-rates-modes","content":"We've introduced two new Rates configuration modes, and have updated the Configurator to graphically display the results of all Rates configurations. Using the latest Configurator is essential. Actual rates with zero expo and a low centre sensitivity is strongly recommended for cinematic or freestyle flying. The two new rates modes are named ACTUAL and QUICK. They allow direct and completely independent configuration of centre stick feel, expo, and max roll rate. Centre stick 'feel' or 'sensitivity' is determined by the angle of the rates curve around the centre stick position. In both new methods, this is set directly and not affected by any other rate parameter. QUICK rates retains the traditional rcRate value as used in previous Betaflight versions to set centre sensitivity; you can keep the same value you've always used. ACTUAL rates lets you set your target centre rate is set in degrees/second. To convert your old rcRate value to degrees/second, multiply it by 200. For example, an rcRate of 1.0 would be entered as a centre sensitivity of 200 in ACTUAL rates. In ACTUAL rates, the centre and max numbers have the same units, and are directly comparable in terms of 'how it feels' in the centre compared to further out. In both the new models, expo shifts the curve further out, but doesn't change either the centre sensitivity (slope of the RC rate curve at centre), or the max rate. Higher expo extends the centre rate further out, so the quad won't spin fast until your sticks are a long way out. This is often favoured for freestyle or LOS acro. Lower expo keeps your low-sensitivity range more to the centre, and gives you more predictable reactions across the stick travel range once you leave centre. This is favoured by racers, with relatively high centre sensitivity, and by cinematic HD pilots, who want extremely low centre sensitivity without losing too much authority when they bring the sticks further out. In ACTUAL rates, the amount of expo can be reduced below what was previously possible. This is really good for cinematic freestyle, where we want strong softness at centre, but a fairly early transition to strong authority. For LOS acro, high expo in Actual mode gives a more linear stick feel over a wider range, then a sudden increase for high-speed flips only when the sticks are pushed well out. In QUICK rates, expo has a more traditional curve. The different curves can be visualised in Configurator. Finally, maximum rate now will be unchanged when the user adds deadband. This online calculator allows visualisation of Betaflight vs Actual Rates, making it easy to convert your old rates. This online calculator helps with Quick Rates. "},{"title":"Automatic anti-yaw spin configuration​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#automatic-anti-yaw-spin-configuration","content":"Betaflight 4.2 now defaults to auto configure the yaw_spin_threshold to a value a small amount above the maximum configured yaw rate. For most users this will allow yaw spin corrections to activate more quickly after hitting a gate and spinning. Also, a user can now switch profiles from race (low rates) to freestyle (higher rates) to LOS (very high yaw rates) and the yaw_spin_threshold will always be appropriate. The mode configuration is set in the CLI by yaw_spin_recovery. This can be OFF, ON, or AUTO, with default to AUTO. To manually configure the threshold, choose ON and set the value you want in yaw_spin_threshold. We hope that AUTO to be best for all users. More info here "},{"title":"Antigravity gain independent of I values​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#antigravity-gain-independent-of-i-values","content":"Previously, the anti-gravity gain value acted as a multiplier of the PID I value. This means that when PID I was increased, the strength of the anti-gravity effect also increased, and vice versa. This could lead to I mediated wobbles on rapid changes of throttle if the user increased their PID I to high values, or, lead to inadequate anti-gravity effect if the user decreased PID I. In 4.2, the anti-gravity effect is independent of the user's PID I value, and is modified by anti-gravity gain alone. If a user previously ran higher PID I values than default, they will need to increase their anti-gravity gain value, and vice versa, if they want the same anti-gravity effect as before. The change should be in proportion to the ratio of their previous I value to the 4.1 and 4.2 default value. "},{"title":"Improved Dynamic Notch filter​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#improved-dynamic-notch-filter","content":"The dynamic notch filter has been extensively revised. It now identifies and tracks peaks more accurately, and over a wider frequency range. Performance will be better on most quads. It will also be more accurate with non-standard gyro rates. Instead of choosing a range using AUTO, LOW, MEDIUM or HIGH, the user now sets the actual maximum frequency that they want the dynamic notch to cover, using dyn_notch_max_hz. The dynamic notch will then help control noise between its minimum and maximum frequency values. The default dyn_notch_max_hz value of 600Hz works best for most quads, but can be tweaked. The optimal value depends on whether or not you're using rpm filtering, and the rpm range of the quad. If you were using LOW, dyn_notch_max_hz around 350hz should be roughly equivalent. If you were using HIGH, probably around 700hz will be enough, I've not seen many quads actually get much higher in rpm that that. When rpm filtering isn't being used, the dynamic notch needs to cover the full range of possible motor generated frequencies. The value required can be determined accurately by logging with debug GYROSCALED and looking at the highest frequency reported in spectral analysis. Alternatively it can be estimated as 70% of the peak theoretical no-load rpm. For example, a 2000KV motor with 6S has no load rpm of 2000 6 _ 4 = 48000 rpm. 70% of that is 33,600rpm, divide by 60 and you get 560hz. Slow fliers and X-class quads should use dyn_notch_max_hz at say 350-400hz, and a lower dyn_notch_min_hz than defaults. Lower maximum values will improve resolution over defaults. With rpm filtering, the motor noise lines usually get removed completely, and the dynamic notch has little to do. In many cases it can be turned off. However, it can be useful for attenuating residual noise or frame resonance. If there is no particular frame resonance, it will sort of hover around the middle of its range. With the defaults, this keeps it out of the way, causing relatively little delay. If there is a specific resonance at some particular frequency, the min and max values can be centered either side of the resonance line. For example, if you have 150hz resonance, try setting minimum to 100 and max to 200. No matter how low you set the max value, the value used internally will never be less than twice the minimum value. This is necessary to ensure the code works properly. The 4.1 tuning guide notes about notch width and Q factor still apply... in short, when using the rpm filter: set dyn_notch_width_percent = 0 set dyn_notch_q = 250  And this restores the default values for use without RPM filtering set dyn_notch_width_percent = 8 set dyn_notch_q = 120  "},{"title":"Iterm Relax works properly in setpoint mode​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#iterm-relax-works-properly-in-setpoint-mode","content":"There was a bug in 4.0 and 4.1 that affected of iterm relax setpoint mode. Setpoint mode worked fine with defaults, but changing the iterm_relax_cutoff had almost no effect. Gyro mode of iterm_relax was not affected. That's why bounce back seemed to be better controlled by lowering iterm_relax_cutoff in gyro mode only. Now, setpoint mode works correctly for all iterm_relax_cutoff values. We recommend that most users go back to setpoint mode in 4.2. When tuning iterm_relax_cutoff, to reduce I mediated bounce back after a flip or roll, aim for highest value consistent with adequate bounce back control. To be sure that bounce-back in a freestyle quad is I related, and not due to something else, temporarily set iterm_relax_cutoff to a high value, eg 40, and make a test flight. If the bounce-back definitely worsens, reduce the iterm_relax_cutoff value until it is adequately controlled. For most GoPro carrying modern freestyle quads, lowering iterm_relax_cutoff to around 10 should be enough. For 7&quot; builds perhaps 5-7. X Class may need 5 or less. "},{"title":"NFE Race Mode​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#nfe-race-mode","content":"This feature is active only in self-levelling modes. When active, the self-levelling occurs only on the Roll axis. The Pitch axis behaves like it is in acro mode. To enable, use this CLI command set level_race_mode = ON. "},{"title":"OSD improvements​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#osd-improvements","content":"Your custom logo can now appear each time you arm. Show it on race days :-) with set osd_logo_on_arming = ONOptions are OFF, ON, FIRST_ARMING. CRSF link quality now displayed as A:BB where A is the RF mode (2=150hz, 1 = 50hz), and BB is link quality. This change allows link quality alarms to work properly. The following new elements have been added to the OSD: camera frame (#9261)distance from home alarm, blinks the distance. NB: distance is in metres. (#8862)efficiency in mAh/km or mAh/mi (#9601) "},{"title":"Configurator improvements​","type":1,"pageTitle":"Betaflight 4.2 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#configurator-improvements","content":"The RC Rates configuration tab now fully supports graphical display of the shape of the curve for all supported rates method, with cool icons. The P:D balance slider now changes D, not P, making it easier to test out how small changes in D. Dynamic idle can be enabled and adjusted via the PIDs tab. When Dmin is enabled, the D column is re-named to Dmax to better indicate what it does. Yaw P changes in the same way as pitch and roll. The default is a little higher.   Credits: Looptime, scheduler, RC timing - eTracerRC smoothing - eTracer and ctzsnoozeInterpolated setpoint, feed forward improvements - JoeLucid and ctzsnoozeDynamic notch improvements - ctzsnoozeExpo on DLPF, independent anti-gravity gain - IllusionFPVQuick rates method - IllusionFPVActual rates method - ctzsnoozeRates models configurables - fgiudice98Battery sag compensation - ctzsnoozeAuto yaw spin threshold - eTracer and ctzsnoozeNFE Race mode port - Phobos, NotFastEnufOSD Logo on arming, distance from home - eTracerOSD battery efficiency - DavidBooneH7 and G4 mcu implementation - jflyperConfigurator brilliance - mikeller, McGiverGim, AsizonLUA Script - klutvott123 Bugfixes - eTracer, jFlyper, mikeller, many, many others Keeping everyone and everything on track - mikeller Encouragement and testing - bizmar, iCr4sh, SugarK, BigRuss, BMSThomas, many others : thank you! "},{"title":"Betaflight 4.3 Tuning Notes","type":0,"sectionRef":"#","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes","content":"","keywords":""},{"title":"Betaflight 4.3 features​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#betaflight-43-features","content":"A smoother, more precise flight experience with better propwash perfomance 'and' also an easier setup and tuning experience - to release the full potential of Betaflight 4. 4.3 is a significant evolutionary step thanks to a slew of diligently coded and carefully tested updates representing thousands of hours of work from the voluntary development and test team. Credits at the end of the page. New PID based tuning sliders - Whether you need to tweak the tune or build it from scratch, we now have simpler, more comprehensive, firmware based tuning sliders in the Configurator. These are active by default. Slider positions are stored with the quad, and can be modified via the OSD or LUA. New expert sliders allow fine-tuning of Pitch:Roll balance, DMax:Dmin, and I relative to P. Presets - A fantastic, comprehensive new preset system! Whether a whoop, a twig, a 5&quot; racer, a freestyle setup, or an X-class, you can now easily apply a great tune for your quad, out of the box. Presets also exist for radio setups, vtx configurations, and so on. Users can choose from 'official' Betaflight Presets and 'community' presets. Both are checked by Betaflight developers. Access to external Preset repositories is also provided, but take care when using these, since Betaflight has no control over their content. Less gyro filtering with higher P and D, providing better 'out of the box' performance. We've changed how D is configured. We now have Derivative and D_Max settings. The Derivative value is what sets the D value in smooth flying. When you turn fast, D rises to Dmax, providing more effective damping for fast movements, and when going straight, D back to Derivative and reduce D noise and motor heat. The difference between the two values has been reduced, and the Derivative value is significantly higher. Unlike 4.2, you usually won't need to push the D slider higher, unless you are seeking stronger straight-line stability in a clean HD or cinematic build. More accurate loop times - We've made massive scheduler and DMA code improvements, including EXTI triggered SPI gyro reads (on supported boards), giving super stable looptimes, smoother filter performance, faster logging and improved CPU efficiency. NOTE: The CPU load reported in 4.3 is higher than reported in 4.2 due to a change in the way it is calculated. It now reports the % of time that the processor is busy running tasks, rather than a figure based on load average. Multi dynamic notch - We have a completely rewritten, much improved, SDFT based multi-dynamic notches. More than one resonant peak can be tracked at the same time, more accurately and more quickly than before, with low latency cost. This allows for lower overall low pass filtering and better performance. The above two changes have significantly improved incoming 'gyro noise'. This has allowed us to push the default gyro filtering higher than before. Coupled with higher D, this improves propwash. Many quads can now fly with the gyro filter slider hard right. PT3 based RC smoothing - RC smoothing has been completely revised, and is now entirely filter based, using optimised PT3 (third order) smoothing. RC Smoothing now has the ideal filter shape applied with no overshoot and very smooth response. The auto smoothing value provides anything from low-latency to exceptional buttery cinematic smoothness. RPM crossfading - we now can smoothly disable overlapping RPM filtering notches entirely at low RPM. This greatly reduces filter delay at low throttle. You’ll hear an immediate difference in the sound of the motors, and experience less propwash around low throttle. PT2 and PT3 lowpass filtering options - The old biquad lowpass filter option is no longer available on Gyro, due to delay, overshoot and resonance issues. Previous Gyro biquad lowpass users should change to PT2, but more likely will find that, in 4.3, single or dual first order filtering is optimal for Gyro. Biquad filtering is still available for D, where a harder cut than PT2 can be useful. Feedforward jitter reduction - 4.3 introduces feedforward jitter reduction, which is an improvement on feedforward transition. It delivers a ‘dynamic transition’ effect to the feedforward, where you can get silky smooth responses while making slow stick inputs, and immediate, snappy feedforward responses to quick inputs. Usually, Transition is not required any more. Jitter reduction provides the Transition type effect, but at any stick angle. Jitter reduction also attenuates RC link noise during slow movements, especially for the newer higher rate Rx links. Racers will tend to use lower jitter reduction values than Freestylers, since that will attenuate link noise without delaying stick responses. Other feedforward improvements - We now have second order smoothing on boost, soft interpolation during slow stick moves, and more accurate duplicate packet interpolation. Most slower radio links won't need averaging, which is now off by default. High speed radio links (250hz and higher) will typically benefit from 2 point averaging and stronger smoothing. Presets to suit most common link types make Radio link configuration easy. AntiGravity improvements - P boost has been added, along with I boost timing optimisation to peak when it is most needed. This provides greater stability during rapid throttle changes. The default value of 3.5 should not be increased without careful testing. Dynamic gyro filter expo curve - Adjusting filter expo curves improves propwash by raising dynamic gyro filter cutoff values more quickly as you throttle up. Improved dynamic idle - The dynamic idle code has been heavily revised, and can now keep RPM at a more stable value, more quickly and more precisely than before, and can be fine-tuned with its new single sided PID controller. It is now much simpler to set up. There is no need to measure RPM or change your D_Shot idle percentage value - leave that value at your normal setting. Just enable DShot Telemetry (and check it is working), and set a suitable idle RPM value in the PID Tuning page. Typically 3000-4000 rpm works great. This improves motor spin-up-from-low-rpm behaviour, enhancing low throttle input responsiveness, and reduces the risk of desyncs, while allowing motor drive to go all the way to zero for enhanced braking when appropriate and for longer inverted hang times. Linear and Dynamic mixer options - These are alternatives to the stock Betaflight mixer code. The dynamic option may result in less aggressive bump and landing responses for level mode or cinematic flights. Feedforward in Level and Horizon Modes - Feedforward is now active in Horizon, Level, and Level Race modes, leading to quicker level mode angle changes, and making Horizon mode as responsive as Acro for flips and other fast moves. The amount of feedforward in these modes can be adjusted and saved in the profile, like for the other PID parameters. Actual Rates is the new Betaflight default - Actual rates provide a simpler and more intuitive way to set your Rates, and are now the default. Default rates are less aggressive in the centre, but more progressive around mid-stick, than the previous defaults. Full-stick default max roll rate is the same as before. Betaflight rates are optional and can still be used. Take care when updating! If you copy and paste your old rates values, be sure to copy and paste the rates type also! Use this calculator to convert your old rates to Actual rates. CrossfireV3 and Ghost RC link improvements - As well as support for the latest Crossfire, ELRS and Ghost protocols, the internal betaflight RC code now supports 12bit or higher RC data in a float data path, handles very low RC Links (down to 16hz) better than before, fully supports high speed links to 1000hz, and better attenuates feedforward glitches when the RC link returns after dropouts. ELRS over SPI support for ELRS V2 on-board receivers. Many thanks to Phobos and the other ELRS devs for helping make this happen. FrSky OSD fix - Asizon fixed it! Lua script updates - we now have RSSI in your OSD via LUA, Slider control from the radio, and lots of other changes. Changed CLI command names - many CLI parameters are re-named. As a result, a lot of copy and paste efforts will fail to make all the changes you intended. Using the CLI 'get' command now finds related values more easily. For example, get gyro_lp will find all gyro lowpass filter settings, get feed will find all feedforward values, etc. **4.3 should fly really well on defaults. Start there, or with a Preset that suits your purposes. Most likely if there is a good match for your hardware, the Preset will fly great, with no additional adjustments. Advanced tuners can experiment with the easy slider tuning, and use sliders at the field via OSD or LUA. If you're new to Betaflight, please read the previous tuning notes (4.2, 4.1 for any topic that isn't covered here.  "},{"title":"Problem Solving​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#problem-solving","content":""},{"title":"Bounceback​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#bounceback","content":"Please refer to the 4.2 tuning guide. Most bounce-back is due to too much I on a low authority quad, and is usually best fixed by lowering the iterm_relax cutoff value, and increasing tracking and D values. Random wobbles at the end of some, but not all, flip or rolls, especially the faster ones towards the end of the flight, are usually caused by delayed motor start-up from excessively low idle, being over-propped, or weak ESC startup from low RPM (48kHz or dynamic ESC modes). These are best dealt with by enabling dynamic idle with a reasonably high minimum RPM value (eg 3500-4000 RPM). "},{"title":"Random wobbles in HD footage​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#random-wobbles-in-hd-footage","content":"This is typically an issue for cinematic HD applications. There is low level, random instability of the horizon when flying straight forward. Usually the frame is too soft or flexy, or it is being shaken by slightly out of balance props or worn bearings. The following suggestions may help minimise this problem: get a really rigid frame, check bearings and shaft play, balance the props, don't let anything wobble aroundtune for the highest possible D that the setup will tolerate, and avoid setting P too highget the Derivative value close to P, or up to 20% above P. You may need more D filtering than usual - check the motor temperatures and listen for idle grinding or other signs of D resonance.set TPA to start just below the cruising throttle value, so you don't have too much D at higher throttle values.once you have D as high as you can get it, experiment with more vs less P. Too much P will cause wobbling and audible fluttering in fast turns, and may make the random wobble issue worse. If you never turn fast, you may be able to get higher P than otherwise.if the quad lacks authority, attenuate I using the expert mode I adjustment slidermake sure the ADC is not ticked in the hardware settings of OpenTx!!make sure the frame is super stiff and nothing is able to wobble or flap aroundbe sure your capacitor is bigsometimes the gyro chip isn't working properly, and some ESCs just don't play nice, if all else fails, try changing these parts from a quad that does fly perfectly.use a jitter reduction factor of 10-12. To test if feed-forward is making it worse, do a test flight with feedforward at zero. If there is no change, feed-forward isn't the problem, and can be used at normal settings.high level RC smoothing (auto smoothing of 90 or higher) will attenuate the erratic behaviour of old gimbals or 'thumb shake'. To test whether your RC link is the problem, temporarily set a wide deadband. We don't recommend deadband much, but a high deadband test will eliminate all random noise on the RC link, when sticks are centred. If that makes no difference, your RC link isn't the cause of the problem.use very soft mounting for the camera. "},{"title":"Zero throttle instability​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#zero-throttle-instability","content":"go back to 24kHZ PWM if you've set the ESC to 48kHzenable dynamic idle at 3500- 4000 RPMtry thrust linear at 25try slightly higher overall PIDs  "},{"title":"Presets​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#presets","content":"The new Preset tab is probably the most useful improvement to Configurator in a long time. Betaflight's defaults originally were made to suit 5&quot; freestyle machines for fun flying in the park. These days there are huge performance differences between 5&quot; race, freestyle and cinematic builds, and even greater differences between whoops, twigs, heavy camera builds, 7-10&quot; and X-class builds. They all have very different performance envelopes. The 4.3 Configurator release (10.8) now provides a Preset system, make it easy to find one or more sets of CLI commands that make it easy to find a tune that suits your quad, your flying 'style', your Radio or VTx setup, and so on. Once you've applied those Presets, hit Save and go fly! Presets often include 'options', and can be used to reset parts of the machine to defaults. Read the instructions carefully before applying. The Preset page also provides an easy way to backup and restore your configuration. WARNING: Always backup your quad's default configuration BEFORE changing anything, and again before 'saving' a Preset! Once you've saved a Preset, the changes are permanent. There is no 'easy way' to reverse saved changes! Feel free to check out as many different Presets as you like, but once you save one, there is not going back if you failed to backup the previous configuration! Presets are 'approved' after evaluation via the GitHub 'pull request' method, and are not included in Configurator unless we are confident that they are 'good enough'. To add a new Preset to Betaflight, open a pull request. External Preset repositories are supported, but are not checked or validated by Betaflight. Comments or feedback on any given preset should be provided via the originating pull request. A link button is provided in the Preset manager. "},{"title":"New tuning sliders​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#new-tuning-sliders","content":"We've completely overhauled the PID tuning sliders! They provide a very quick and simple way to tune the quad, whether at the field or at your computer. Slider positions are now stored in the flight controller, and can be updated via the OSD or Lua, at the field. P and D are now set independently with their own specific sliders. No more P:D ratio and P&amp;D gain. Basic mode users only see the three most important sliders (PI, D and Feedforward), with limited adjustment range. Expert mode shows additional allow fine-tuning sliders for I, Dmax, and pitch:roll ratio for D and P, and overall master gain. When an Expert mode slider is not at its default position, or a Basic slider is outside the basic adjustment range, it is visible, but greyed out, in basic view. To adjust a 'greyed out' slider, switch to Expert view. P:D ratio can, approximately, be retained by moving both PI and D sliders together, keeping similar relative positions The master gain slider can be used to increase or decrease overall PID strength, keeping everything in exact proportions Sliders are ON by default. Numeric parameter entry is blocked in Configurator when Sliders are controlling a value. If you want to use the older non-slider method of direct number entry, you MUST first disable the Sliders by setting them OFF. The normal PID slider ON mode is RPY. This means all three axes, Roll, Pitch and Yaw, are controlled. If the quad requires special Yaw settings, you can choose RP mode, and use direct numeric entry for yaw alone. The balance and overall strength of P and D is now visually obvious from their respective slider positions. WARNING: Do not make manual changes to the PID or lowpass numbers when Sliders are enabled! Turn the Slider/s OFF first (most easily done in Configurator. CAUTION: When using Sliders in Configurator, be sure to make your on-field tuning changes using Sliders also! If you change numeric values using the CLI, OSD or LUA, while Sliders are active, you can create conflicting slider and number setups. If you save numbers, you can fly those numbers - they won't go away. But, if you save PIDs or Filters from a screen where Sliders are ON, your custom values will be over-written by those calculated from the Sliders. They will just vanish. Hence, it's really important to avoid these conflicts. If you use Sliders, stick with them, tune with them at the field, and don't use the numbers. If you want to use numbers, disable the sliders. We're confident that these sliders will work effectively for both beginners and experienced tuners. They simplify the transition from 'basic' to 'expert' tuning methods. Most people, experienced tuners included, should now be able to use the sliders for nearly all their tuning requirements, both on and off the field. "},{"title":"Tuning methods​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#tuning-methods","content":"The new PID Sliders support whatever tuning 'method' the user prefers, including most of the familiar YouTube tuning methods. "},{"title":"Simple tuning​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#simple-tuning","content":"The quickest, simplest way to tune with the new sliders, is to move both the P and D sliders together to the right until something 'bad' happens. This retains P:D ratio, roughly. Stop, or pull back slightly, when either the motors get hot or you hear bad noises in high-speed turns, or on arming, then back off a bit. For quick and simple tuning, this is very likely to give you a really good result. Then adjust the Stick Response (feedforward) slider to your liking. Alternatively, we can quickly get our gains 'in the ballpark' with the Expert-mode 'Master Slider'. This increases or decreases all PID in strict proportion. Once we have it about right, individual sliders can fine-tune the result. "},{"title":"The \"D-first\" tuning method​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#the-d-first-tuning-method","content":"The 'D first' tuning method involves stepwise increases in D until something bad happens, then easing back a click or two, and not going higher. After that, the process is repeated for P, then you're done. This is based on two fundamental concepts: the more D you can apply, the more P you can use;generally, a quad will track best with the highest P and D it can tolerate. The following are common indications, while increasing D, that it's time to drop back a bit: motors getting hot,we hear grinding or humming sounds on armingthe quad noisily 'flies to the moon' on armingbent props make the motors really hot really quickly We know that the primary limit on how much D you can run is how clean the build is. Builds with good bearings, well balanced and well centred motors, stiff frames, stiff props, etc, will accept more D. Different props or ESC settings can have an influence. Once you've set D as high as it can reasonably go, bring P up until something bad happens, e.g.: a fluttering sound from P oscillation in hard mid to high throttle turns, orunder-damped short duration overshoots or resonances in step responses, orstraight out P oscillation. Usually most quads end up with P around the D value, or a bit higher. "},{"title":"The 'classical' tuning method​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#the-classical-tuning-method","content":"In this method, the user pushes P upwards, in steps, to its limit, with the D slider set a bit lower than usual for the build (eg, ⅔ of P). Typically we stop when the quad starts to 'wobble', 'flutter' or 'shake' at the end of flips or rolls, or on hard fast turns. We then bring P back until there is a bare hint of that wobble, and gradually bring D up, stepwise, as much as we can, but usually not higher than P, in an attempt to block that residual wobble. We may be limited in how much D we can apply, by motor heat or noise. If we do control the wobble, we can sometimes bring P one click higher, and again add a click or two of D to see if we can control that. The goal is to get both parameters as high as you can without the unwanted issues of flutter, resonance or excessive motor heat. "},{"title":"More accurate loop times​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#more-accurate-loop-times","content":"Steve C Evans has made massive changes that almost completely eliminate PID loop jitter and improve the overall efficiency of the scheduler. No special configuration is required in most cases; it just works. You'll get better filter accuracy, cooler motors and longer flights. "},{"title":"Scheduler and task changes for more accurate timing​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#scheduler-and-task-changes-for-more-accurate-timing","content":"Betaflight uses a cooperative multi-tasking scheme, which means that the scheduler needs to know how long a task will take to run, so it will call it only when there is time before a vital operation such as running the gyro/filter/pid tasks. If a task takes longer to execute than predicted, then other vital tasks will be late. This was frequently the case in 4.2 especially for the RX and OSD tasks. Tasks in 4.3 are restructured to increase the probability of them completing within the expected time, so that the scheduler can make better scheduling decisions. In 4.3 it's best to run F405 and F411 boards at 4k, not 8k, if RPM filtering is enabled. For F411 processors this is enforced. F411's may be overclocked to 120Mhz.. They don't run hot like F405's, most run perfectly well at 120Mhz. Some may be erratic at 120Mhz, but OK at 108Mhz, perhaps depending on the grade of the chip used on the board or other board related factors; if they are more stable at 108Mhz, use that. Let us know via GitHub and we may be able to update the Target info for the board. DShot300 should be always used at 4K. While there may be no errors reported, using DShot600 can cause loop instability at 4k. "},{"title":"Gyro Sync and DMA Gyro data transfers​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#gyro-sync-and-dma-gyro-data-transfers","content":"In 4.2 there were a number of issues in reading data from the gyro. The processor read data from the gyro in the gyro task using polled access, which means it had to wait for the read to complete, unable to do anything else.The MPU6000 gyro has irregular updates. Every 8th update takes not 125us, but 170us, followed by another of 80us. As a result the gyro task would occasionally read two samples, 125us apart, within the 170us interval and miss the update in the 80us cycle completely.Because the gyro update rate and the gyro loop were asynchronous, there was a random delay of up to 125us between the gyro data being updated (in the gyro) and the data being received and read/processed by the flight controller. In 4.3, these issues are fixed, by: Transferring data using Direct Memory Access (DMA), where the processor initiates the transfer and can do other things while waiting for the data transfer to complete. This will reduce CPU load.Syncing the scheduler to gyro updates, using a hardware interrupt line from the gyro to the flight controller. This FC pin used is set by the GYRO1_EXTI resource. When this sync is active, we reliably capture every single gyro update.Reading data from the gyro immediately after being notified by EXTI that an update is available, and processing the data a consistent amount of time afterwards. A hardware external interrupt line from gyro to FC is required to synchronise the gyro updates to the FC. Not all boards have this. Not all boards can use DMA for gyro data requests. The status CLI command reports dma in the Gyros detected line if DMA is being used (benefit 1 above), and if the gyro is locked to the FC by EXTI (benefits 2 and 3 above), it will show locked. For example, with both DMA and locked you will see: Gyros detected: gyro 1 locked dma  For more details see PR #10525, PR #10573, PR #10813 and PR #11033. "},{"title":"Blackbox logging over SPI is now much more efficient​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#blackbox-logging-over-spi-is-now-much-more-efficient","content":"Higher logging rates will work with fewer gaps. Logging is now handled using DMA rather than polled access as described above. In 4.2 the processor would have to wait up to 90us for a block of data to be written to FLASH memory. In 4.3, it takes under 5us to kick off the write, then the transfer completes in the background whilst the processor gets on with other tasks. Even so, logging is a significant time consumer, so turn it off if you don't need it, and only log as fast as is needed, eg 1kHz for normal purposes, 2Khz for filter tuning. "},{"title":"Technical notes​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#technical-notes","content":"In order for the above gyro and FLASH improvements to work, SPI DMA is needed. In the following example from an F745 FC it can be seen that SPI_MOSI/SPI_MISO are both defined for SPI bus 3 (both are required for FLASH access) and for SPI bus 1 (both are required for gyro access). Only SPI_MOSI is defined for bus 4, but that's OK as that's only used for the OSD which doesn't use SPI_MISO. # dma show Currently active DMA: -------------------- DMA1 Stream 0: LED_STRIP DMA1 Stream 1: FREE DMA1 Stream 2: SPI_MISO 3 DMA1 Stream 3: FREE DMA1 Stream 4: FREE DMA1 Stream 5: SPI_MOSI 3 DMA1 Stream 6: FREE DMA1 Stream 7: FREE DMA2 Stream 0: SPI_MISO 1 DMA2 Stream 1: SPI_MOSI 4 DMA2 Stream 2: DSHOT_BITBANG 2 DMA2 Stream 3: SPI_MOSI 1 DMA2 Stream 4: ADC DMA2 Stream 5: FREE DMA2 Stream 6: DSHOT_BITBANG 5 DMA2 Stream 7: FREE  Unfortunately, due to an errata in the F4 processors ONLY (see [https://www.st.com/resource/en/errata_sheet/dm00037591-stm32f405407xx-and-stm32f415417xx-device-limitations-stmicroelectronics.pdf], section 2.1.10) it is not possible to use DMA on SPI bus 1 and bit-banged DSHOT at the same time. Therefore, if bit-banged DSHOT is enabled, you may see locked in the status output, but not dma. If you try disabling bit-banged DSHOT, to enable DMA, you may get DMA resource conflicts due to the MOTOR 1 through MOTOR 4 DMA descriptors conflicting with the SPI used for FLASH, OSD and sometimes LED functions. RPM filtering, Flash, LEDs or OSD may then not work. When DMA is not available for OSD, a very simple OSD configuration is recommended, to minimise the time taken for the data transfer. The following give examples of how an advanced user can optimise their setup. For example, on a MATEKF411 with bit-banged DSHOT enabled we see SPI bus 1 and 2 enabled, but no gyro DMA. # status MCU F411 Clock=108MHz (PLLP-HSE), Vref=3.30V, Core temp=30degC ... Gyros detected: gyro 1 locked GYRO=MPU6000, ACC=MPU6000 ... # dma show Currently active DMA: -------------------- DMA1 Stream 0: FREE DMA1 Stream 1: FREE DMA1 Stream 2: FREE DMA1 Stream 3: SPI_MISO 2 DMA1 Stream 4: SPI_MOSI 2 DMA1 Stream 5: FREE DMA1 Stream 6: FREE DMA1 Stream 7: FREE DMA2 Stream 0: SPI_MISO 1 DMA2 Stream 1: DSHOT_BITBANG 2 DMA2 Stream 2: FREE DMA2 Stream 3: SPI_MOSI 1 DMA2 Stream 4: ADC 1 DMA2 Stream 5: FREE DMA2 Stream 6: FREE DMA2 Stream 7: FREE  With bit-banged DSHOT enabled we see only SPI bus 1 enabled, with gyro DMA. SPI bus 2, used for the OSD can't use DMA as the necessary resources are being used for MOTOR 4 and MOTOR 1. Thus, whilst flight performance will improve in this configuration, the OSD updates won't run as fast, so only a simple OSD display should be used. # status MCU F411 Clock=108MHz (PLLP-HSE), Vref=3.30V, Core temp=30degC ... Gyros detected: gyro 1 locked dma GYRO=MPU6000, ACC=MPU6000 ... # dma show Currently active DMA: -------------------- DMA1 Stream 0: MOTOR 3 DMA1 Stream 1: FREE DMA1 Stream 2: FREE DMA1 Stream 3: MOTOR 4 DMA1 Stream 4: MOTOR 1 DMA1 Stream 5: MOTOR 2 DMA1 Stream 6: FREE DMA1 Stream 7: FREE DMA2 Stream 0: SPI_MISO 1 DMA2 Stream 1: FREE DMA2 Stream 2: FREE DMA2 Stream 3: SPI_MOSI 1 DMA2 Stream 4: ADC 1 DMA2 Stream 5: FREE DMA2 Stream 6: FREE DMA2 Stream 7: FREE  On a FURYF4OSD if bit-banged DSHOT is enabled then gyro DMA won't be available, but both busses 2 and 3, used for OSD and FLASH respectively are available. # status MCU F40X Clock=168MHz (PLLP-HSE), Vref=3.26V, Core temp=51degC ... Gyros detected: gyro 1 locked GYRO=MPU6000, ACC=MPU6000 ... # dma show Currently active DMA: -------------------- DMA1 Stream 0: SPI_MISO 3 DMA1 Stream 1: FREE DMA1 Stream 2: LED_STRIP DMA1 Stream 3: SPI_MISO 2 DMA1 Stream 4: SPI_MOSI 2 DMA1 Stream 5: SPI_MOSI 3 DMA1 Stream 6: FREE DMA1 Stream 7: FREE DMA2 Stream 0: SPI_MISO 1 DMA2 Stream 1: DSHOT_BITBANG 1 DMA2 Stream 2: DSHOT_BITBANG 2 DMA2 Stream 3: SPI_MOSI 1 DMA2 Stream 4: ADC 1 DMA2 Stream 5: FREE DMA2 Stream 6: FREE DMA2 Stream 7: FREE  If it is disabled, thanks to the careful consideration of which pins are used for the motor outputs, all SPI busses support DMA giving optimal flight performance. Note though that LED_STRIP can no longer be allocated DMA1 Stream 2 as it is used by MOTOR 3. Given the choice between flashing LEDs and optimal flight performance this is an easy decision to make, but it illustrates some compromises which may need to be made for the best flight performance. # status MCU F40X Clock=168MHz (PLLP-HSE), Vref=3.26V, Core temp=51degC ... Gyros detected: gyro 1 locked dma GYRO=MPU6000, ACC=MPU6000 ... # dma show Currently active DMA: -------------------- DMA1 Stream 0: SPI_MISO 3 DMA1 Stream 1: MOTOR 4 DMA1 Stream 2: MOTOR 3 DMA1 Stream 3: SPI_MISO 2 DMA1 Stream 4: SPI_MOSI 2 DMA1 Stream 5: SPI_MOSI 3 DMA1 Stream 6: MOTOR 1 DMA1 Stream 7: MOTOR 2 DMA2 Stream 0: SPI_MISO 1 DMA2 Stream 1: FREE DMA2 Stream 2: FREE DMA2 Stream 3: SPI_MOSI 1 DMA2 Stream 4: ADC 1 DMA2 Stream 5: FREE DMA2 Stream 6: FREE DMA2 Stream 7: FREE  "},{"title":"Anti-aliasing of gyro data for 4k PID loops​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#anti-aliasing-of-gyro-data-for-4k-pid-loops","content":"When running a 4k PID loop, we strongly recommend keeping the gyro lowpass 2 filter active. If you want to drop to a single gyro lowpass filter, keep lowpass 2. The reason is that lowpass 2 is a very effective anti-aliasing filter, when downsampling the gyro from 8k to 4k. If gyro lowpass 2 is disabled, and the board is running at 4k, a simple 2-point averaging filter will be enabled in its place. This is not as good an anti-aliasing filter as a PT1 filter at 1000hz, and nowhere near as good as 500hz. For 2k PID loops, a 500hz PT1 lowpass 2 gyro filter is absolutely essential. Most clean 4k quads will run great with gyro lowpass 1 turned off, and just a single gyro lowpass 2 filter at 500hz. 8k PID loops have no aliasing issues, so gyro lowpass 2 can be disabled without aliasing concerns, however the quad must be 'clean' to turn off all gyro filtering. "},{"title":"Multi dynamic notch​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#multi-dynamic-notch","content":"The new SDFT (Sliding Discrete Fourier Transform) based dynamic notch filter can track multiple independent noise peaks, and will assign an independent notch filter to each peak. The user can specify up to 5 notches per axis. Usually no more than two or three are needed, depending on the build, and often only one. The SDFT tracks noise sources much more effectively than before. The code is completely different. It has been optimised to control resonance problems when used in association with RPM filtering. The RPM filter is still best for RPM related noise. Q values around 300-450 work well for freestyle applications. Keeping the minimum value as high as practical (eg 200hz), and only using the minimum number of notches, will minimise notch related filter 'delay'. To tune the dynamic notch properly, make a log with the dynamic notch off, do a spectrum analysis and see if there is resonance that needs to be controlled, and what the resonant frequencies are. Set the dynamic notch range to include the resonant peaks including 20hz additional range each side of the noise so as to be sure to fully filter the necessary frequencies. Then fly again, and check that the incoming resonance lines have gone from your gyro traces. Then repeat with higher Q values to find the highest Q value that adequately control those resonances. For quads that cannot run RPM filtering, the SDFT code will work reasonably effectively if configured with three or four notches and Q values around 120-150. These wider notches help account for rapidly changing center frequencies of motor frequency driven oscillations observed by the gyro, as the multi dynamic notch cannot respond as quickly as the bidirectional DShot driven RPM filter notches, but do perform remarkably well on a wide variety of craft. The multi dynamic notch can still be used alongside static notches applied to gyro and D-Term values. Static notches work best at targeting constant frequency resonance. If you find you have a strong constant frequency resonance you may be required to apply a narrow static notch over the frequency resonance in the gyro or D Term to capture any residue noise left over from SDFT. For craft with specific known static frequencies, such as frame resonance, a manually added static notch with the correct cutoff should outperform the multi-dynamic notch, and also allow for using the multi dynamic notch frequency range of regard to be larger. If a craft has a specific resonance that is present at exactly one frequency across the entire throttle and flight condition envelope, adding static notch and reducing the multi dynamic notch count by one is a recommendation. Adjusting the range of the multi dynamic notch does result in adjusting the bin sizes that the SDFT algorithm uses, although as second quadratic estimation step is included that centers each dynamic notch on the most accurate estimate of center frequency using data from both adjacent bins. Increasing the range between the MinHz value and MaxHz value will trade off some resolution for a wider frequency range of regard, and can have the dynamic notch system respond faster to changes in frequency, which can be helpful in suppressing quickly changing resonances at higher frequency. For more detail see PR #10554 "},{"title":"PT3 based RC smoothing​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#pt3-based-rc-smoothing","content":"The RC smoothing system has been simplified and improved. Cinematic or HD pilots can now get amazingly smooth results that were impossible before. The old linear interpolation method has been removed because the PT3 filter-based method works better (no overshooting, lower latency, better tunability). We very strongly recommend keeping rc smoothing 'on' at all times - ie with set rc_smoothing = ON. If you turn it off, your motors will get very notchy drive signals, run hotter and noisier, and lower link speeds will shake the quad at link frequency. The auto smoothing algorithm hasn't changed, It detects your RC link speed on arming, sets the RC smoothing cutoffs automatically, and changes their values if the link speed changes in-flight (though it takes a while to do so). The default auto smoothing value is now 30, which gives a reasonably well-smoothed setpoint line and very little delay when compared to the un-smoothed signal. For HD freestyle, an auto value of 60 will provide greater smoothness and not a whole lot of extra delay. For cinematic video, where absolute smoothness is needed, auto values around 90-120 will give that silky effortless smoothness you are after, at the cost of obvious stick delay. In association with jitter reduction and feedforward smoothing, most cinematic footage will be incredibly smooth. The auto smoothing function adjusts the filters to give the least delay for the given link speed. At higher link speeds, the smoothing filters run faster, and give quicker stick responses. For cinematic flying with a fast radio link, and for crossfire in a non-locked mode, it may be best to manually over-ride the auto smoothing, to get a consistent amount of smoothness throughout the flight, and across builds with different radio links. This can be done by by setting fixed, non-auto, values in the CLI. For cinematic purposes, 10-15hz works well, regardless of link speeds. This snippet should work: set rc_smoothing_setpoint_cutoff = 10 set rc_smoothing_feedforward_cutoff = 10  The same applies to non-locked crossfire, which can swap between 50Hz and 150Hz, randomly. Here a value of 20-30hz will give reasonably consistent stick feel and reasonable smoothness even in 50hz mode: set rc_smoothing_setpoint_cutoff = 25 set rc_smoothing_feedforward_cutoff = 25  We generally don't advise going below 30 for auto smoothness, though at high link speeds, eg 250 or 500hz, a value of 20 may be good for racing, by keeping delay to the absolute minimum. There will be some transfer of the RC link frequencies into your motors, but not much. If you can hear a difference, or your motors run warmer, go back to 30. In most cases, stick with the default auto smoothing, and once you've decided on your radio link speed, or after changing radios, adjust the auto smoothing value to get the result your after. RC smoothing value for throttle is independently adjustable, automatically or manually. Its best left at 30, unless you are a high link speed racer and want to try 20. To avoid throttle jumps on a cinematic build, go higher, but be wary of throttle lag when you need to pull up from a dive :-) RC smoothing is now applied equally to setpoint and feedforward in Auto mode. The log header will show the actual frequencies being used with your link. In the CLI you can manually configure the amount of smoothing on feedforward relative to setpoint. Testing to date has not shown this option to be clearly useful, in any practical sense, and likely it will be removed down the track. It makes more sense to control stepping in feedforward by using feedforward smoothing (feedforward_smooth_factor); heavy RC smoothing on feedforward is ineffective against link jitter and will add a lot of delay. For more detail see PR #10650 "},{"title":"RPM crossfading​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#rpm-crossfading","content":"This is a brilliant improvement over normal RPM filtering, which gives much cleaner motor signals at low to mid-throttle, and improves propwash considerably. Basically we now can have the RPM filtering benefits when we need them, with none of the drawbacks when they are not needed. We discovered that notch filters operate by generating an 'anti-noise' signal at their specified cutoff frequency. They don't generate 'delay' in the conventional sense. Not in the same way that a lowpass filter does. They make a signal which, when mixed with the original, 'cancels out' the noise in the original signal. This means that we can attenuate a notch filter in a linear fashion, by 'cross-fading', or 'mixing', it's 'anti-noise' signal in, or out, like an audio mixer. This is extremely useful for RPM filtering. Previously, when any motor went below the minimum RPM frequency, its three RPM notches would all remain active, but be held at their minimum frequency. While there was no noise to remove, they generated 'delay' and reacted to nearby frequencies, and causing a form of intermodulation distortion, and worsening propwash. Now, we can essentially 'turn the RPM filters off' when they aren't needed, and bring them back on smoothly over a 'cross-fade' range above the minimum rpm value. Once the rpm filters are completely 'off', they cause no delay or interference of any kind, resulting in cleaner and better gyro traces than before. In most builds, significant RPM related noise doesn't start to happen until about 100hz (6000 rpm). So we can start the RPM filtering at say 80hz and cross-fade it over 50hz, so that by 130hz, or 10,000 rpm, you have full RPM filtering active again. eg: set rpm_filter_min_hz = 80 set rpm_filter_fade_range_hz = 50  We have found a cross-fade range of 50hz to be optimal in most cases. The default minimum RPM value, where RPM first starts to 'switch on', at 80hz, also works well for most quads. Machines with very clean props and very little intrinsic RPM noise can have this value shifted higher, eg set rpm_filter_min_hz = 100 set rpm_filter_fade_range_hz = 70  Very large quads with low RPM we would choose proportionally lower values since they operate at low RPM. Tuning for Crossfade requires enabling the dshot_telemetry debug, doing some smooth steady throttle-ups, from zero to 50%, with no other stick inputs, and then add throttle cuts. It's best to set PIDs low with heavy filtering on D to take out D noise. Using the debug traces, look at the point where the motor RPM falls into the cross-fade region, and see if motor RPM related noise is getting into the gyro trace. If the minimum rpm is set too high, you'll get significant motor noise leaking through the crossfade region. If you're not sure what you're seeing, set the cross-fade minimum very high. This will effectively disable RPM filtering at lower RPM and let the noise through. If you set the minimum with a very low crossfade value, eg 10; there will be a sudden change when the rpm filtering kicks in. The minimum should be set to a point below where rpm noise becomes an issue, and the crossfade range can be extended upwards until it too allows some, but not too much bleed-through, in the upper cross-over region. The goal is the highest values consistent with reasonable attenuation of the motor noise. For more detail see PR #10757 "},{"title":"Feedforward jitter reduction​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#feedforward-jitter-reduction","content":"This is a really exciting change that gives real smoothness when you want it, while giving as much feedforward 'snap' as you could want with quick stick inputs. Perfect for smooth fast racing and for 'flick' freestyle inputs. It completely removes the need to use the old Dterm/feedforward 'transition' function, which provided feedforward attenuation only when sticks are centred. This provides similar attenuation at any position while the sticks are still, or moving slowly. Feedforward, especially with boost, is known as the 'stick responsiveness' parameter, and for good reason. It provides a strong and immediate reaction to stick inputs. A good amount of feedforward (say 120-130) will make the quad super responsive, without adding overshoot. It gives those 'snap' freestyle inputs extra zing, and gives race pilots near-zero setpoint-to-gyro lag. However, it accentuates even the tiniest of RC inputs, and can make for twitchy flight and jerkiness in HD video. It doesn't matter if those RC twitches come from nervousness, slightly sticky or noisy gimbals, RC link connection problems, they all get exaggerated by feedforward... Until now. The 'old' way to handle these 'jitters' was to use feedforward transition, which linearly attenuated feedforward down to zero when your sticks were close to the center position. This solved the problem of 'too much feedforward' at centre stick position - but nowhere else. Transition has a number of limitations. It only works when the sticks are centred; if you are in a smooth turn, with sticks off-centre, but still, you want smooth flight also. However transition is much less effective in this setting. Also, when moving the sticks across the centre, in a smooth move, transition will cut the feedforward out abruptly at centre, causing a wobble, worst with narrow transition ranges. If you do make the transition range wide, all feedforward benefit is lost in the middle, and 'snap flicks' become hard to achieve. Jitter reduction attenuates feedforward strongly when the sticks are moving slowly, regardless of their absolute position. Think of it as a kind of 'dynamic transition' function. The default jitter_reduction_factor of 7 works best for most quads with normal radio links, and is suitable for racing, ensuring that tight turns, and high-speed straights, are both smooth and responsive. Experienced race pilots with higher speed links will find that the straight-line sensitivity will be a bit less than normal, because for very small inputs, their feedforward 'push' is attenuated. They may prefer a value of 5. After a few flights we find that the quad 'stays on the intended line' a fair bit better than before, especially during tighter turns, which feel more 'on rails' than before. A value of 12-15 pretty much removes all feedforward from slow smooth inputs, and is what we suggest for freestyle/cinematic. The quad will be equally smooth in straight centred flight and in a sustained tight turns. However, if you flick the sticks, the response will be immediate. How it does this magic is simple, in principle. We look at how much the RC command values change from packet to packet, average the two most recent change amounts, and compare that average to a user-configured threshold. We then fade out the feedforward values when the recent rate of RC change is below the threshold. But when the RC command changes are bigger than the threshold, we let feedforward through, unchanged and without any delay, to give immediate snap responses when we move the sticks quickly. The jitter_reduction_factor value is the threshold for the RC Command change, in tenths of a percent of stick travel, below which feed-forward is attenuated. A value of 10 means feedforward will be attenuated progressively for RC command changes of less than 1% per step. Attenuation below the threshold follows a kind of exponential curve, so that with a value of 10, there will be barely 10-20% of the normal feedforward for rcCommand change steps of 0.1% to 0.2% of the full RC range. Both link frequency and link bit depth have an impact on a suitable jitter reduction value. At low link frequencies, eg 50hz, most RC steps are large, and there really isn't much of a jitter issue to worry about. So the defaults and the suggested freestyle values actually do OK for 50hz to 150hz. Higher link speeds, 250Hz and above, run into a problem where there is only a limited number of steps available, and not much time for a change to be detected. Crossfire and FrSky protocals only provide 800 steps across the full RC range, or only 400 steps from centre to max position. If the pilot moves the stick slowly over one second to max, some RC steps will be one, and others two, packets high. Small steps like that vary by 100% from step to step, leading to a lot of jitter in feedforward, which thinks that the sticks are shaking massively. The person's intrinsic jitter and the gimbal itself makes jitter noise of at least this magnitude, and feedforward would ordinarily amplify it - just like D amplifies gyro noise. This is where the jitter reduction code helps remove that residual noise in higher speed links; its kind of like a dynamic, zero delay filter, applied to feedforward when the signal to noise ratio would be bad. It applies first order filtering to the simple setpoint derivative and second order filtering to the boost element. Hence the jitter reduction system markedly reduces gimbal jitter on all systems, but is most effective, and important, in higher link rate systems with only 800 steps. For that reason we suggest keeping it at the default value on all RC links, increasing it for freeestyle and cinematic, and maybe dropping back to 5 but only on clean RC links for race purposes. The newer 11 and 12 bit RC link protocols with 2000 steps will provide better resolution, however gimbal noise will remain a problem, and hence the jitter reduction code is likely to remain needed for the forseeable future. For more detail see PR #10670 "},{"title":"Feedforward smoothing settings for faster Rx links​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#feedforward-smoothing-settings-for-faster-rx-links","content":"The old ff_smooth_factor code has been updated, and it is now named feedforward_smooth_factor. It provides second order step height smoothing for boost, as well as the usual first order smoothing to the simple derivative. This gives more effective smoothing of the boost signal with less delay to the simple derivative. A suitable starting value of 25 is adequate for most builds. For 250hz RC links, you should set feedforward_smooth_factor to 40-50, and feedforward_averaging to 2_point. For 500hx RC links, you must set feedforward_smooth_factor to 65-70, and feedforward_averaging to 2_point. "},{"title":"Other Feedforward changes​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#other-feedforward-changes","content":"A number of small, but significant, feedforward changes result in a smoother signal with less delay. All parameters in the CLI that relate to feedforward now start with feedforward, not ff_. Go get feed to list them all. feedforward_averaging is now set to 'off' by default, since most builds won't require it. It should be set to 3_POINT to provide three point moving averaging for old Crossfire 150 links. All 500hz RC links and nearly all 250hz RC links benefit from 2_POINT feedforward averaging, but the new jitter reduction code means that most links running below 250hz (FrSky, Crossfire, etc) do not require any feedforward averaging. feedforward_max_rate_limit replaces ff_max_rate_limit and is the value that pulls back on feedforward as the sticks approach their maximum rate, minimising overshoot when hitting max stick position. A bug that limited its usefulness has been fixed. The default value of 90 works best for most quads. Under-powered quads may need 100. Duplicate packet interpolation has been improved. Since duplicates occur frequently at slow stick movement speeds, we now use the jitter reduction value to attenuate the interpolation process, so that we interpolate very little when the sticks are moving very slowly. These changes give us a much smoother but super responsive feedforward system. "},{"title":"AntiGravity improvements​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#antigravity-improvements","content":"Antigravity now increases P during hard throttle chops, since the abrupt change in pitch angle needs more than I term response to control it. Additionally, the timing of the I boost has been changed to better match the timing of the wobble. The default is now only 3.5, reflecting the greater efficiency of the new code. CAUTION: it is unwise to run very high AntiGravity values in 4.3, because you run the risk of significant P and I wobble during throttle chops. Stick to values close to defaults. If you do want to increase AntiGravity, test it methodically. High values, eg 5 or more, may not achieve much more than normal values; use the lowest value consistent with reasonable control. See #10163 for more detail. "},{"title":"Dynamic gyro filter expo curve​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#dynamic-gyro-filter-expo-curve","content":"dyn_lpf_gyro_curve_expo allows the dynamic lowpass filter cutoff value to rise more quickly with throttle increases than it used to. It works much the same as the D lowpass expo. This reduces delay at higher throttle positions. If you get significantly more high frequency noise at higher throttle, reduce the amount of expo, or reduce the upper value of the dynamic lowpass cutoff. For graphs see PR9486. "},{"title":"Improved dynamic idle​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#improved-dynamic-idle","content":"The new dynamic idle code now uses a full PID controller, and is much simpler to configure. It improves desync resistance and low throttle authority. Do not follow the old 4.2 instructions. You don't need to measure RPM in the motors tab any more. All you have to do is: enable DShot Telemetrygo to the PID tuning tab and set Dynamic Idle Min RPM to a value between 30 and 40 (ie, a minimum idle speed of 3000 to 4000 RPM). NOTES: If DShot Telemetry is enabled, but it isn't working properly, you won't be able to arm.DShot Telemetry must be enabled for RPM filtering or Dynamic Idle to work.If DShot Telemetry is not enabled, Dynamic Idle will be disabled, and the 'static' DShot Idle percentage will be used.When Dynamic Idle is active, DShot Idle is rendered inactive, and is greyed out.There is no need to adjust DShot Idle to use Dynamic Idle. Leave it at whatever value you find works best.If the ESC supports DShot telemetry, you can now use Dynamic Idle even if you prefer not to use RPM filtering The new code in 4.3 does not require any special adjustments to the DShot Idle percent value; just leave it at whatever value works best in the non-dynamic idle setting. On arming, and until airmode is active, you will not get the full Dynamic Idle minimum RPM. Your motors won't spin super fast on first arming, because there is a limit on the drive to the motors until Airmode activates. Dynamic Idle therefore acts as a kind of sophisticated 'idle up' function that provides all the benefits of the old manual in-flight idle-up switches, but without the drawbacks. With high minimum RPM, the motors retain RPM at all times, leading to more responsiveness at zero throttle, cleaner flips and rolls, and neater turns. At high values, the slowest motors will provide thrust during flips, rather than almost stalling, and the quad will tend to perform a kind of circle in the sky. The same happens on 180 degree turns, which become little arcs. Also, with high minimum RPM high, the quad will be slower to lose altitude in 'right-side-up' flat throttle chops, because the motors will generate some upwards thrust all the time. This isn't all that bad, and will also enhance stability and authority in these moves, which can otherwise suffer badly from propwash. In both cases, high minimum RPM helps avoid propwash since you tend to always move through clean air; this make a lot of sense when flying freestyle or fast racing. With high minimum RPM, a big punch upwards followed by a 180 turn to inverted, and a hard throttle cut, will not float upwards quite as high, because the motors will deliver more downwards thrust because RPM will be higher than otherwise. However, when the quad starts falling downwards, and the airflow into to the props allows dynamic idle to cut drive to the motors, the motor drive can fall to zero, and the inverted hang should be not much different from usual. For maximum inverted hang time, and probably for Line Of Sight flying, use the lowest minimum RPM value that avoids desyncs. Most users with desync-prone setups will find that Dynamic Idle solves their problems. As you move the minimum RPM upwards, the chance of a desync decreases, and vice versa. If Dynamic Idle doesn't work for you, set it to zero and you will revert to the static DShot Idle Percent method. The new code is so good that many of my quads can fly with only 1000 rpm as a minimum dynamic idle RPM. The prop blades are visible turning slowly during LOS flips and rolls, but they don't desync. I wouldn't recommend going that low unless you had a particular curiosity to see how low you can go. For most general freestyle or racing applications, a minimum RPM of 4000 usually works really well. Tuning: In place of the idle_adjustment_speed and idle_p tuning settings, we now have a PID controller. This provides more precise RPM control. Typically higher power quads will need lower P values, eg 40 for a strong 6S build, and those with lower authority may benefit from higher PID values. The best way to check RPM control stability is to log with the appropriate Debug, and do some flat drops at zero throttle. If the RPM value oscillates, try less P. If it is stable during the drop, but transiently drops below target on the chop, add more D and/or more P. For more detail see PR #10294 "},{"title":"Linear and Dynamic mixer options​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#linear-and-dynamic-mixer-options","content":"When airmode is active, the default betaflight mixer prioritises PID authority over throttle. Anytime a motor might need to be driven 'below zero' in order to maintain authority, throttle is increased by airmode so that the requested motor differential can be achieved. This airmode-driven throttle increase is the only reason why we can flip and roll 'normally' at zero throttle. However, there are downsides. Airmode leads to strong reactions on impacts; the quad will get more throttle and climb. There is a fairly abrupt change in authority once the limits that Airmode can provide are reached. These alternate mixer models change the relative emphasis between throttle authority and PID control. They may have some use in smooth cinematic flying styles, providing a kind of partial airmode effect with less bounce on landing at the expense of limited low throttle PID performance in quicker moves. If interested, just fly and see if you like them or not. For more detail see PR #10370 "},{"title":"Feedforward in Level and Horizon Modes​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#feedforward-in-level-and-horizon-modes","content":"In 4.3, feedforward now is available in Level, Level Race, and Horizon modes. In Level Mode, this results in a more immediate response when moving the sticks to change the angle of the quad. The quad should more promptly assume your new intended angle. In Horizon Mode, while flying aggressively, the behaviour is now nearly exactly the same as acro, with all the benefits that feedforward brings in terms of immediate stick response and reduced overshoot. It feels great! If you're a beginner and you find Level too twitchy, reduce the feedforward value in the PIDs. For more detail see PR #10778 "},{"title":"Actual Rates as the new Betaflight default​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#actual-rates-as-the-new-betaflight-default","content":"Starting from 4.3, Actual Rates will be the new Betaflight default. See PR #10724 for graphs and more information. ACTUAL rates lets you set both the target centre sensitivity and the maximum roll rate in degrees/second. The two values are independent of each other. Expo shifts the transition point between the two rates to be closer to centre (at zero) or further out (at max). This online calculator allows visualisation of Betaflight rates vs Actual Rates. The new defaults are NOT exactly the same as the old Betaflight rates. Although the max rate is the same (670 deg/s), the new defaults are softer in the centre (centre sensitivity of 70, compared to about 200 in Betaflight's old defaults), and more responsive further out. See the image in the pull request. It is hoped that these will be easier to learn on and better suited to freestyle. Some experienced race pilots use 200deg/s centre sensitivity and 620 max, with no expo. With the jitter reduction code, 200deg/s gives very quick turn-in but remains smooth and controllable in tight turns. Others prefer lower values. Betaflight rates users can use this rates calculator to find an Actual rates equivalent to what they currently fly. For instance, centre of 200, max 670, and expo of 0.58 results in the original default Betaflight rates curve. If a user pastes in their Betaflight rates numbers from say a 'diff all', the rates_type information will not be included. The result will be that Actual Rates will be active, but with Betaflight CLI numbers. The quad will be un-flyable! That's why its a bad idea to copy and paste diff all's. Be sure to recreate your Rates manually, or, if you do a copy and paste, be sure to include the rates_type line from the CLI dump command when pasting your rates in. For more detail see PR #10724 "},{"title":"PT2 and PT3 lowpass filtering options​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#pt2-and-pt3-lowpass-filtering-options","content":"In the past, the second-order Biquad filter was available as an option for gyro and D smoothing, when first-order filtering wasn't enough. Sometimes this was the case with Bosch gyros. However, we have learned that the Biquad can oscillate with step inputs and will overshoot some inputs with frequency content near cutoff. 4.3 no longer uses the Biquad for any lowpass filtering. Biquad filtering is still an option for both gyro and D lowpass filtering for those who feel it has specific benefit there. If your craft needed second order gyro filtering, we recommend the PT2 option, which works much the same as stacked PT1 filters, but with the cutoff adjusted to be correct. The PT2 filtering option provides less delay than the equivalent Biquad filter, though a bit less filtering, and is recommended to be used instead of the Biquad filter. PT3 filtering provides more filtering and delay than the equivalent Biquad filter and is not normally needed for gyro or D filtering. Compared to a PT1, filter delay increases by about 60% with a PT2 and doubles with a PT3. For more detail see PR #10727 "},{"title":"CrossfireV3 and Ghost RC link improvements​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#crossfirev3-and-ghost-rc-link-improvements","content":"4.3 has a fully float based internal RC data path, resulting in no aliasing or loss of resolution regardless of RC packet contents. We also support Crossfire V3 and 11bit Ghost protocols. We also better support very low frequency link rates - down to 16hz - by constraining the RC smoothing, and avoiding false packet timeout errors which would otherwise trash feedforward And we support up to 1000hz links by allowing deviations to 950ns without declaring an error. Blackbox logs now show un-smoothed rcCommand, and the RC and feedforward debugs show un-smoothed Roll setpoint and other useful data for RC link quality and resolution checking. "},{"title":"Improved altitude estimation with baro and gps​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#improved-altitude-estimation-with-baro-and-gps","content":"When you have both GPS and baro and fly without waiting for GPS fix, there was wrong altitude estimation (up to 100 meters error). Now it's fixed. Baro is used untill GPS captures required number of sats. New cli options introduced to configure behavior: position_alt_gps_min_sats - the required number of sats to start using both GPS and baro.position_alt_baro_fallback_sats - the required number of sats to stop using GPS and switch back to baro. You can increase those values if you have a good GPS receiver that quickly receives many sats. Or decrease them if you have not so good hardware / zone. Also you should lower values if you have a bad baro and want to switch to GPS as early as possible. "},{"title":"Configurator improvements​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#configurator-improvements","content":"Configurator has been overhauled with support for the new Sliders and the new Presets tab. New motor mapping and motor rotation functions in the Motors tab make those frustrating tasks much easier. Before flashing, we have a new &quot;Auto-Detect&quot; function that selects the correct firmware for your board, with the ability to re-check The interface itself has been tidied up, and a bunch of bugs have been fixed.  "},{"title":"Credits​","type":1,"pageTitle":"Betaflight 4.3 Tuning Notes","url":"/betaflight.com/docs/wiki/tuning/4.3-Tuning-Notes#credits","content":"- Firmware PR management - Mikeller - Configurator and Blackbox - Haslinghuis, Limon, Asizon, ctzsnooze, McGiverGim, Mikeller, Blckmn  - Presets - Limon, Mikeller, ctzsnooze - Sliders - Haslinghuis, UAVTech/spatzengr, IllusionFPV, Asizon, ctzsnooze - Looptime, scheduler, DMA, Gyro EXTI, improved logging and OSD efficiency - Steve C Evans, many massive PR's :-) - Multi dynamic SDFT notch, filters - Karatebrot #10554 - RPM crossfading - Karatebrot #10757 - RC smoothing - ctzsnooze #10629, #10650 - Feedforward jitter reduction - ctzsnooze #10670 - Feedforward smoothing - ctzsnooze - #10164 - Antigravity - ctzsnooze #10163 - Expo on Gyro LPF - IllusionFPV #10239 - Linear and Dynamic mixer options - TylerCorleone, BorisB #10370 - Dynamic idle improvements - ctzsnooze #10294 **- ELRS over SPI - Phobos, Joe, Alessandro - Configurator brilliance - Haslinghuis, McGiverGim, Limon, Asizon - LUA Script - klutvott123, kristjanbjarni, codecae - Feedforward in level and horizon - ctzsnooze #10778 - PT2 and PT3 lowpass filter options - ctzsnooze #10727 - RC Link improvements - TBS #10675, Stepan Dalecky #10801 - default to Actual rates - ctzsnooze #10724 - 4.3 Tuning Notes - ctzsnooze, editing by SupaflyFPV - Bugfixes - lots of people! - Keeping everyone and everything on track - blckmn, mikeller Encouragement and testing - Brian White, James, SugarK, Cory Ibanez, Tehllama42, SupaflyFPV, UAVTech, QuadMcFly, Limon, bizmar, and so many others : thank you! "}]