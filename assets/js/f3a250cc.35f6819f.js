"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4966],{3905:(e,t,n)=>{n.d(t,{Zo:()=>m,kt:()=>k});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},s="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=d(n),c=r,k=s["".concat(p,".").concat(c)]||s[c]||u[c]||i;return n?a.createElement(k,l(l({ref:t},m),{},{components:n})):a.createElement(k,l({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[s]="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},32980:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>s,frontMatter:()=>i,metadata:()=>o,toc:()=>d});var a=n(87462),r=(n(67294),n(3905));const i={},l="Resource Remapping Command",o={unversionedId:"wiki/archive/Resource-remapping",id:"wiki/archive/Resource-remapping",title:"Resource Remapping Command",description:"NOTE: this command is only available in version 3.1 and newer of Betaflight.",source:"@site/docs/wiki/archive/Resource-remapping.md",sourceDirName:"wiki/archive",slug:"/wiki/archive/Resource-remapping",permalink:"/betaflight.com/docs/wiki/archive/Resource-remapping",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"wiki",previous:{title:"Remapping Motors with Resource Command",permalink:"/betaflight.com/docs/wiki/archive/Remapping-Motors-with-Resource-Command"},next:{title:"Running with reversed motors",permalink:"/betaflight.com/docs/wiki/archive/Reversed-motor-direction"}},p={},d=[{value:"Available functions, values and constraints",id:"available-functions-values-and-constraints",level:2},{value:"Wiki pages with examples of using the Resource Commands:",id:"wiki-pages-with-examples-of-using-the-resource-commands",level:2}],m={toc:d};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"resource-remapping-command"},"Resource Remapping Command"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"NOTE: this command is only available in version 3.1 and newer of Betaflight.")),(0,r.kt)("p",null,"The IO remapping allows you to configure the pins on the MCU to be utilised for various functions. This is the starting framework - more work can be done."),(0,r.kt)("p",null,"Pins are remapped using the resources command line interface command."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"resource [function name] [index] [pin]")," (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"resource MOTOR 1 A1"),")"),(0,r.kt)("p",null,"Where MOTOR is the function, 1 is the motor index (1 based e.g. 1-4 on a quad) and A1 is Port A pin 1 or more commonly referred to as PA1 in STM datasheet documentation."),(0,r.kt)("p",null,"To remove a mapping, use ",(0,r.kt)("inlineCode",{parentName:"p"},"NONE")," in place of PIN, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"resource MOTOR 5 NONE")),(0,r.kt)("p",null,"Where a function does not require an index (i.e. there is only 1 possible pin assignment), e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"BEEPER"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"SONAR_ECHO")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"SONAR_TRIGGER")," then the index ",(0,r.kt)("strong",{parentName:"p"},"must")," be omitted (e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"resource BEEPER B6"),")"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"resource")," on its own will list all the available configurable options, and their current setting. This is the output to be added to the ",(0,r.kt)("inlineCode",{parentName:"p"},"dump")," for use in backing up and restoring configuration. Note that this command will list all configured that would be allocated if used."),(0,r.kt)("p",null,"As an example ",(0,r.kt)("inlineCode",{parentName:"p"},"resource")," will show motors 1-8, but if your mixer is set to QuadX then only motors 1-4 will actually be used, if you change to Oct as the mixer (and reboot) then all 8 motors will be configured."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"resource list")," (or ",(0,r.kt)("inlineCode",{parentName:"p"},"resource show")," in more recent versions of Betaflight) will list all pins and their current assignments, including all those in use by system components and ",(0,r.kt)("strong",{parentName:"p"},"not")," configurable by the user. It will also list the currently active DMA utilisation. Note for any adjustments made a save and reboot is required in order for those changes to be visible here. Consider this command the output of the currently active state."),(0,r.kt)("p",null,"Note that the ",(0,r.kt)("inlineCode",{parentName:"p"},"save")," command must be used after changing pin mapping via the CLI."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsx"},'<center>\n<img src="https://cloud.githubusercontent.com/assets/14850998/21921215/c5d3521c-d9a9-11e6-8ed8-c53afdbda50f.jpg" width="70%"><br>\nFigure: How different resource command variation works\n</center>\n')),(0,r.kt)("h2",{id:"available-functions-values-and-constraints"},"Available functions, values and constraints"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Function"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Index"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Constraints"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ADC_BATT")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"Battery voltage sensor"),(0,r.kt)("td",{parentName:"tr",align:null},"Can only be mapped to other ADC pin")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ADC_CURR")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"Battery current sensor"),(0,r.kt)("td",{parentName:"tr",align:null},"Can only be mapped to other ADC pin")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ADC_RSSI")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"Analog RSSI input from receiver"),(0,r.kt)("td",{parentName:"tr",align:null},"Can only be mapped to other ADC pin")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"BEEPER")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"Signal buzzer"),(0,r.kt)("td",{parentName:"tr",align:null},"Usually hard-wired to the base of a transistor to switch the buzzer.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"CAMERA_CONTROL")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"FPV camera OSD control"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("a",{parentName:"td",href:"FPV-Camera-Control-(Joystick-Emulation)"},"Emulates joystick key presses"),". Needs hard-wired resistor and/or capacitor.",(0,r.kt)("br",null),"Therefore existing CAMERA",(0,r.kt)("em",{parentName:"td"},"CONTROL pin ","_","may")," only be usable for certain low frequency applications, like SmartAudio.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"ESCSERIAL")),(0,r.kt)("td",{parentName:"tr",align:"center"},"?"),(0,r.kt)("td",{parentName:"tr",align:null},"?"),(0,r.kt)("td",{parentName:"tr",align:null},"?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"I2C_SCL")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"1-n")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"I2C_SDA")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"1-n")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"INVERTER")),(0,r.kt)("td",{parentName:"tr",align:"center"}),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LED")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"1-3")),(0,r.kt)("td",{parentName:"tr",align:null},"Indicator LEDs"),(0,r.kt)("td",{parentName:"tr",align:null},"Don't confuse with LED_STRIP!")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"LED_STRIP")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"WS2812 LED data"),(0,r.kt)("td",{parentName:"tr",align:null},"Usually very good choice for alternative usage, if no WS2812-LEDs are connected/used")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"MOTOR")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"1-n")),(0,r.kt)("td",{parentName:"tr",align:null},"Motor signal"),(0,r.kt)("td",{parentName:"tr",align:null},"Mapping between other ",(0,r.kt)("a",{parentName:"td",href:"Remapping-Motors-with-Resource-Command"},"motor pins"),") (swapping) should always work fine. Other pins may not work (DMA conflict with DShot).")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PPM")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:null},"Receiver PPM input"),(0,r.kt)("td",{parentName:"tr",align:null},"Usually good choice for alternative usage")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"PWM")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"1-n")),(0,r.kt)("td",{parentName:"tr",align:null},"Receiver PWM input"),(0,r.kt)("td",{parentName:"tr",align:null},"?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SERIAL_RX")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"1-n")),(0,r.kt)("td",{parentName:"tr",align:null},"Serial receive pin"),(0,r.kt)("td",{parentName:"tr",align:null},"Can not be remapped to any other pins, but can be used for different functions (including ",(0,r.kt)("a",{parentName:"td",href:"Single-Wire-Software-Serial"},"software serial ports"),").")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SERIAL_TX")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"1-n")),(0,r.kt)("td",{parentName:"tr",align:null},"Serial send pin"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SERIAL_RX"),"/",(0,r.kt)("inlineCode",{parentName:"td"},"SERIAL_TX")," ",(0,r.kt)("inlineCode",{parentName:"td"},"11-12")," are software serial ports #1 and #2")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SERVO")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"1-n")),(0,r.kt)("td",{parentName:"tr",align:null},"Servo signal"),(0,r.kt)("td",{parentName:"tr",align:null},"?")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SONAR_ECHO")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SONAR_TRIGGER")),(0,r.kt)("td",{parentName:"tr",align:"center"},"-"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SPI_MISO")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"1-n")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SPI_MOSI")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"1-n")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"SPI_SCK")),(0,r.kt)("td",{parentName:"tr",align:"center"},(0,r.kt)("inlineCode",{parentName:"td"},"1-n")),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"wiki-pages-with-examples-of-using-the-resource-commands"},"Wiki pages with examples of using the Resource Commands:"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"Remapping-Motors-with-Resource-Command"},"Remapping Motor outputs"),"\n",(0,r.kt)("a",{parentName:"p",href:"Servos-&-SERVO_TILT-for-3.1"},"Using Servos & SERVO_TILT"),"\n",(0,r.kt)("a",{parentName:"p",href:"CHANNEL_FORWARDING-for-3.1"},"Using CHANNEL_FORWARDING"),"\n",(0,r.kt)("a",{parentName:"p",href:"Setup-for-a-Fixed-Wing-Aircraft"},"Setup on a Fixed Wing Aircraft")))}s.isMDXComponent=!0}}]);