"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3701],{3905:(t,e,r)=>{r.d(e,{Zo:()=>s,kt:()=>m});var a=r(67294);function l(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function n(t,e){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),r.push.apply(r,a)}return r}function i(t){for(var e=1;e<arguments.length;e++){var r=null!=arguments[e]?arguments[e]:{};e%2?n(Object(r),!0).forEach((function(e){l(t,e,r[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(r,e))}))}return t}function o(t,e){if(null==t)return{};var r,a,l=function(t,e){if(null==t)return{};var r,a,l={},n=Object.keys(t);for(a=0;a<n.length;a++)r=n[a],e.indexOf(r)>=0||(l[r]=t[r]);return l}(t,e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);for(a=0;a<n.length;a++)r=n[a],e.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(l[r]=t[r])}return l}var c=a.createContext({}),u=function(t){var e=a.useContext(c),r=e;return t&&(r="function"==typeof t?t(e):i(i({},e),t)),r},s=function(t){var e=u(t.components);return a.createElement(c.Provider,{value:e},t.children)},p="mdxType",h={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},f=a.forwardRef((function(t,e){var r=t.components,l=t.mdxType,n=t.originalType,c=t.parentName,s=o(t,["components","mdxType","originalType","parentName"]),p=u(r),f=l,m=p["".concat(c,".").concat(f)]||p[f]||h[f]||n;return r?a.createElement(m,i(i({ref:e},s),{},{components:r})):a.createElement(m,i({ref:e},s))}));function m(t,e){var r=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var n=r.length,i=new Array(n);i[0]=f;var o={};for(var c in e)hasOwnProperty.call(e,c)&&(o[c]=e[c]);o.originalType=t,o[p]="string"==typeof t?t:l,i[1]=o;for(var u=2;u<n;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}f.displayName="MDXCreateElement"},94818:(t,e,r)=>{r.r(e),r.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>n,metadata:()=>o,toc:()=>u});var a=r(87462),l=(r(67294),r(3905));const n={},i="Rate Calculator",o={unversionedId:"wiki/archive/Rate-Calculator",id:"wiki/archive/Rate-Calculator",title:"Rate Calculator",description:"In order to convert between Betaflight, RaceFlight and FlightOne rates, the converters below can be used. There is also now a converter for Betaflight, Raceflight, KISS, Actual and QuickRates below. Please note that not every curve can be recreated perfectly in a different rate model.",source:"@site/docs/wiki/archive/Rate-Calculator.md",sourceDirName:"wiki/archive",slug:"/wiki/archive/Rate-Calculator",permalink:"/betaflight.com/docs/wiki/archive/Rate-Calculator",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"wiki",previous:{title:"Presets Quick Start for Authors",permalink:"/betaflight.com/docs/wiki/archive/Quick-Start-for-Preset-Authors"},next:{title:"Remapping Motors with Resource Command",permalink:"/betaflight.com/docs/wiki/archive/Remapping-Motors-with-Resource-Command"}},c={},u=[],s={toc:u};function p(t){let{components:e,...r}=t;return(0,l.kt)("wrapper",(0,a.Z)({},s,r,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"rate-calculator"},"Rate Calculator"),(0,l.kt)("p",null,"In order to convert between Betaflight, RaceFlight and FlightOne rates, the converters below can be used. There is also now a converter for Betaflight, Raceflight, KISS, Actual and QuickRates below. Please note that not every curve can be recreated perfectly in a different rate model."),(0,l.kt)("p",null,"Actual and Quick rates use max velocity directly as a variable (velocity in degree/sec at maximum stick deflection). If you put rates of a different rate model into the configurator it shows you the corresponding max velocity."),(0,l.kt)("p",null,"RaceFlight/Betaflight/KISS rate chart (converter is not working anymore):"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://apocolipse.github.io/RotorPirates/"},"https://apocolipse.github.io/RotorPirates/"))),(0,l.kt)("p",null,"Betaflight/Actual rates chart:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://www.desmos.com/calculator/r5pkxlxhtb"},"https://www.desmos.com/calculator/r5pkxlxhtb")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://kmitchel.github.io/"},"https://kmitchel.github.io/")," (divide Center and Max by 1000)")),(0,l.kt)("p",null,"Betaflight rate tuner and RaceFlight/Betaflight converter:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://erikspen.github.io/betaflightratestuner"},"https://erikspen.github.io/betaflightratestuner"))),(0,l.kt)("p",null,"Betaflight/Quick rates chart:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://illusionfpv.github.io/"},"https://illusionfpv.github.io/"))),(0,l.kt)("p",null,"FlightOne/Betaflight rate converter:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://flightone.com/rates/"},"https://flightone.com/rates/"))),(0,l.kt)("p",null,"Collection of rate presets and rates of established pilots:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://gist.github.com/microraptor/52f01490f1c7aa86d91e8710556f123b"},"https://gist.github.com/microraptor/52f01490f1c7aa86d91e8710556f123b"))),(0,l.kt)("p",null,"More about Actual and Quick rates:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#New-Rates-modes"},"https://betaflight.com/docs/wiki/tuning/4.2-Tuning-Notes#New-Rates-modes")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/betaflight/betaflight/pull/9495"},"https://github.com/betaflight/betaflight/pull/9495")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://github.com/betaflight/betaflight/pull/9506"},"https://github.com/betaflight/betaflight/pull/9506"))),(0,l.kt)("p",null,"Automatically convert Betaflight, Raceflight, KISS, Actual and Quick rates from one type to another"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("a",{parentName:"li",href:"https://rates.metamarc.com/"},"https://rates.metamarc.com/"))))}p.isMDXComponent=!0}}]);