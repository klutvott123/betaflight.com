"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6932],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var i=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,o=function(e,t){if(null==e)return{};var n,i,o={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var u=i.createContext({}),d=function(e){var t=i.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=d(e.components);return i.createElement(u.Provider,{value:t},e.children)},p="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,u=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(n),g=o,f=p["".concat(u,".").concat(g)]||p[g]||c[g]||r;return n?i.createElement(f,a(a({ref:t},s),{},{components:n})):i.createElement(f,a({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,a=new Array(r);a[0]=g;var l={};for(var u in t)hasOwnProperty.call(t,u)&&(l[u]=t[u]);l.originalType=e,l[p]="string"==typeof e?e:o,a[1]=l;for(var d=2;d<r;d++)a[d]=n[d];return i.createElement.apply(null,a)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},34351:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>a,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var i=n(87462),o=(n(67294),n(3905));const r={},a="Building in Ubuntu",l={unversionedId:"development/development/Building in Ubuntu",id:"development/development/Building in Ubuntu",title:"Building in Ubuntu",description:"Building for Ubuntu platform is remarkably easy.",source:"@site/docs/development/development/Building in Ubuntu.md",sourceDirName:"development/development",slug:"/development/development/Building in Ubuntu",permalink:"/betaflight.com/docs/development/development/Building in Ubuntu",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"development",previous:{title:"Building in Mac OS X",permalink:"/betaflight.com/docs/development/development/Building in Mac OS X"},next:{title:"Building in windows",permalink:"/betaflight.com/docs/development/development/Building in Windows"}},u={},d=[{value:"Clone betaflight repository and install toolchain",id:"clone-betaflight-repository-and-install-toolchain",level:3},{value:"Updating and Rebuilding Firmware",id:"updating-and-rebuilding-firmware",level:3},{value:"Building Betaflight Configurator",id:"building-betaflight-configurator",level:3},{value:"Flashing a target with Betaflight Configurator on Ubuntu 22.04",id:"flashing-a-target-with-betaflight-configurator-on-ubuntu-2204",level:3}],s={toc:d};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"building-in-ubuntu"},"Building in Ubuntu"),(0,o.kt)("p",null,"Building for Ubuntu platform is remarkably easy.\nThis document is tested and based on the latest Ubuntu 22.04 LTS release and can also be used for WSL(2)."),(0,o.kt)("h3",{id:"clone-betaflight-repository-and-install-toolchain"},"Clone betaflight repository and install toolchain"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ sudo apt update && apt upgrade\n$ sudo apt install build-essential libblocksruntime-dev git curl clang\n$ git clone https://github.com/betaflight/betaflight.git\n$ cd betaflight\n$ make arm_sdk_install\n")),(0,o.kt)("h3",{id:"updating-and-rebuilding-firmware"},"Updating and Rebuilding Firmware"),(0,o.kt)("p",null,"Navigate to your local betaflight repository and use the following steps to pull the latest changes and rebuild your version of betaflight:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ git pull\n$ make MATEKF405 [OPTIONS=RANGEFINDER] [DEBUG=DBG]\n")),(0,o.kt)("p",null,"Using the optional OPTIONS parameters you can specify options like RANGEFINDER.\nUsing the optional DEBUG parameter you can specify the debugger."),(0,o.kt)("p",null,"You'll see a set of files being compiled, and finally linked, yielding both an ELF and then a HEX.\nYou can use the Betaflight-Configurator to flash the ",(0,o.kt)("inlineCode",{parentName:"p"},"obj/betaflight_MATEKF405.hex")," file.\nMake sure to remove ",(0,o.kt)("inlineCode",{parentName:"p"},"obj/")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"make clean"),", before building again."),(0,o.kt)("h3",{id:"building-betaflight-configurator"},"Building Betaflight Configurator"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"$ sudo apt update && apt upgrade\n$ sudo apt install libatomic1 npm\n$ sudo npm install -g gulp-cli yarn\n$ curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash\n$ source ~/.bashrc\n$ nvm install v16.15.1 (for exact version please check link below)\n")),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/betaflight/betaflight-configurator#development"},"Betaflight Configurator Development")," for how to build the Betaflight Configurator."),(0,o.kt)("h3",{id:"flashing-a-target-with-betaflight-configurator-on-ubuntu-2204"},"Flashing a target with Betaflight Configurator on Ubuntu 22.04"),(0,o.kt)("p",null,"In most Linux distributions the user won't have access to serial interfaces by default. Flashing a target requires configuration of usb for dfu mode. To add this access right type the following command in a terminal:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'$ sudo usermod -a -G dialout $USER\n$ sudo usermod -a -G plugdev $USER\n$ sudo apt-get remove modemmanager\n$ (echo \'# DFU (Internal bootloader for STM32 MCUs)\'\n echo \'ACTION=="add", SUBSYSTEM=="usb", ATTRS{idVendor}=="0483", ATTRS{idProduct}=="df11", MODE="0664", GROUP="plugdev"\') | sudo tee /etc/udev/rules.d/45-stdfu-permissions.rules > /dev/null\n')),(0,o.kt)("p",null,"Please log out and log in to active the settings. You should now be able to flash your target using Betaflight Configurator."),(0,o.kt)("p",null,"Credit goes to K.C. Budd, AKfreak for testing, and pulsar for doing the long legwork that yielded the original content of this document."))}p.isMDXComponent=!0}}]);