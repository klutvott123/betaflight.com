"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6009],{3905:(t,e,n)=>{n.d(e,{Zo:()=>d,kt:()=>N});var a=n(67294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function l(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?l(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},l=Object.keys(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(a=0;a<l.length;a++)n=l[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),u=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},d=function(t){var e=u(t.components);return a.createElement(p.Provider,{value:e},t.children)},m="mdxType",k={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},s=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,l=t.originalType,p=t.parentName,d=o(t,["components","mdxType","originalType","parentName"]),m=u(n),s=r,N=m["".concat(p,".").concat(s)]||m[s]||k[s]||l;return n?a.createElement(N,i(i({ref:e},d),{},{components:n})):a.createElement(N,i({ref:e},d))}));function N(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=n.length,i=new Array(l);i[0]=s;var o={};for(var p in e)hasOwnProperty.call(e,p)&&(o[p]=e[p]);o.originalType=t,o[m]="string"==typeof t?t:r,i[1]=o;for(var u=2;u<l;u++)i[u]=n[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},21485:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>p,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>o,toc:()=>u});var a=n(87462),r=(n(67294),n(3905));const l={},i="Board - Paris Air Hero 32 / Acro Naze 32 Mini",o={unversionedId:"wiki/boards/PARISAIRHERO32",id:"wiki/boards/PARISAIRHERO32",title:"Board - Paris Air Hero 32 / Acro Naze 32 Mini",description:"This board uses the same firmware as the Naze32 board.",source:"@site/docs/wiki/boards/PARISAIRHERO32.md",sourceDirName:"wiki/boards",slug:"/wiki/boards/PARISAIRHERO32",permalink:"/betaflight.com/docs/wiki/boards/PARISAIRHERO32",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"wiki",previous:{title:"OPENPILOT-REVOLUTION",permalink:"/betaflight.com/docs/wiki/boards/OPENPILOT-REVOLUTION"},next:{title:"PIKOBLX",permalink:"/betaflight.com/docs/wiki/boards/PIKOBLX"}},p={},u=[{value:"Sensors",id:"sensors",level:2},{value:"Ports",id:"ports",level:2},{value:"Pinouts",id:"pinouts",level:2},{value:"Serial Ports",id:"serial-ports",level:2}],d={toc:u};function m(t){let{components:e,...n}=t;return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"board---paris-air-hero-32--acro-naze-32-mini"},"Board - Paris Air Hero 32 / Acro Naze 32 Mini"),(0,r.kt)("p",null,"This board uses the same firmware as the Naze32 board."),(0,r.kt)("h2",{id:"sensors"},"Sensors"),(0,r.kt)("p",null,"MPU6500 via SPI interface."),(0,r.kt)("h2",{id:"ports"},"Ports"),(0,r.kt)("p",null,"6 x 3pin ESC / Servo outputs\n1 x 8pin JST connector (PPM/PWM/UART2)\n1 x 4pin JST connector (UART3/I2C)"),(0,r.kt)("h2",{id:"pinouts"},"Pinouts"),(0,r.kt)("p",null,"The 10 pin RC I/O connector has the following pinouts when used in RX_PPM/RX_SERIAL mode."),(0,r.kt)("p",null,"From right to left when looking at the socket from the edge of the board."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Pin"),(0,r.kt)("th",{parentName:"tr",align:null},"Function"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"Ground"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"+5V"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"RX_PPM"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable ",(0,r.kt)("inlineCode",{parentName:"td"},"feature RX_PPM"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"RSSI_ADC"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable ",(0,r.kt)("inlineCode",{parentName:"td"},"feature RSSI_ADC"),". Connect to the output of a PWM-RSSI conditioner, 0v-3.3v input")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"5"),(0,r.kt)("td",{parentName:"tr",align:null},"USART2 TX"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"6"),(0,r.kt)("td",{parentName:"tr",align:null},"USART2 RX"),(0,r.kt)("td",{parentName:"tr",align:null},"Built-in inverter")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},"LED_STRIP"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable ",(0,r.kt)("inlineCode",{parentName:"td"},"feature LED_STRIP"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"unused"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("p",null,"When SOFTSERIAL is enabled, LED_STRIP and CURRENT_METER are unavailable, but one SoftSerial port is made available to use instead."),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Pin"),(0,r.kt)("th",{parentName:"tr",align:null},"Function"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"7"),(0,r.kt)("td",{parentName:"tr",align:null},"SOFTSERIAL1 RX"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable ",(0,r.kt)("inlineCode",{parentName:"td"},"feature SOFTSERIAL"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"8"),(0,r.kt)("td",{parentName:"tr",align:null},"SOFTSERIAL1 TX"),(0,r.kt)("td",{parentName:"tr",align:null})))),(0,r.kt)("h2",{id:"serial-ports"},"Serial Ports"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Identifier"),(0,r.kt)("th",{parentName:"tr",align:null},"RX"),(0,r.kt)("th",{parentName:"tr",align:null},"TX"),(0,r.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"1"),(0,r.kt)("td",{parentName:"tr",align:null},"USART1"),(0,r.kt)("td",{parentName:"tr",align:null},"RX / PA10"),(0,r.kt)("td",{parentName:"tr",align:null},"TX / PA9 / TELEM"),(0,r.kt)("td",{parentName:"tr",align:null},"TELEM output is always inverted (for FrSky). Internally connected to USB port via CP2102 IC")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"2"),(0,r.kt)("td",{parentName:"tr",align:null},"USART2"),(0,r.kt)("td",{parentName:"tr",align:null},"RC4 / PA3"),(0,r.kt)("td",{parentName:"tr",align:null},"RC3 / PA2"),(0,r.kt)("td",{parentName:"tr",align:null})),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"3"),(0,r.kt)("td",{parentName:"tr",align:null},"USART3"),(0,r.kt)("td",{parentName:"tr",align:null},"F3 / PB11"),(0,r.kt)("td",{parentName:"tr",align:null},"F2 / PB10"),(0,r.kt)("td",{parentName:"tr",align:null},"Flex port is configured as UART3 when port is configured")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"4"),(0,r.kt)("td",{parentName:"tr",align:null},"SOFTSERIAL1"),(0,r.kt)("td",{parentName:"tr",align:null},"RC5 / PA6"),(0,r.kt)("td",{parentName:"tr",align:null},"RC6 / PA7"),(0,r.kt)("td",{parentName:"tr",align:null})))))}m.isMDXComponent=!0}}]);