"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3016],{3905:(t,e,n)=>{n.d(e,{Zo:()=>u,kt:()=>k});var a=n(67294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function o(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var d=a.createContext({}),m=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},u=function(t){var e=m(t.components);return a.createElement(d.Provider,{value:e},t.children)},s="mdxType",p={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},h=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,d=t.parentName,u=o(t,["components","mdxType","originalType","parentName"]),s=m(n),h=l,k=s["".concat(d,".").concat(h)]||s[h]||p[h]||r;return n?a.createElement(k,i(i({ref:e},u),{},{components:n})):a.createElement(k,i({ref:e},u))}));function k(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,i=new Array(r);i[0]=h;var o={};for(var d in e)hasOwnProperty.call(e,d)&&(o[d]=e[d]);o.originalType=t,o[s]="string"==typeof t?t:l,i[1]=o;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},21687:(t,e,n)=>{n.r(e),n.d(e,{assets:()=>d,contentTitle:()=>i,default:()=>s,frontMatter:()=>r,metadata:()=>o,toc:()=>m});var a=n(87462),l=(n(67294),n(3905));const r={},i="MSP Extensions",o={unversionedId:"development/API/MSP-Extensions",id:"development/API/MSP-Extensions",title:"MSP Extensions",description:"Cleanflight includes a number of extensions to the MultiWii Serial Protocol (MSP). This document describes",source:"@site/docs/development/API/MSP-Extensions.mdx",sourceDirName:"development/API",slug:"/development/API/MSP-Extensions",permalink:"/betaflight.com/docs/development/API/MSP-Extensions",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"development",previous:{title:"DisplayPort MSP Extensions",permalink:"/betaflight.com/docs/development/API/DisplayPort"},next:{title:"Battery Monitoring",permalink:"/betaflight.com/docs/development/Battery"}},d={},m=[{value:"Mode Ranges",id:"mode-ranges",level:2},{value:"MSP_MODE_RANGES",id:"msp_mode_ranges",level:3},{value:"MSP_MODE_RANGES_EXTRA",id:"msp_mode_ranges_extra",level:3},{value:"MSP_SET_MODE_RANGE",id:"msp_set_mode_range",level:3},{value:"Implementation Notes",id:"implementation-notes",level:3},{value:"Adjustment Ranges",id:"adjustment-ranges",level:2},{value:"MSP_ADJUSTMENT_RANGES",id:"msp_adjustment_ranges",level:3},{value:"MSP_SET_ADJUSTMENT_RANGE",id:"msp_set_adjustment_range",level:3},{value:"MSP_SET_1WIRE",id:"msp_set_1wire",level:3},{value:"AdjustmentIndex",id:"adjustmentindex",level:4},{value:"AdjustmentFunction",id:"adjustmentfunction",level:4},{value:"Implementation Notes",id:"implementation-notes-1",level:3},{value:"Deprecated MSP",id:"deprecated-msp",level:2},{value:"See also",id:"see-also",level:2}],u={toc:m};function s(t){let{components:e,...n}=t;return(0,l.kt)("wrapper",(0,a.Z)({},u,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"msp-extensions"},"MSP Extensions"),(0,l.kt)("p",null,"Cleanflight includes a number of extensions to the MultiWii Serial Protocol (MSP). This document describes\nthose extensions in order that 3rd party tools may identify cleanflight firmware and react appropriately."),(0,l.kt)("p",null,"Issue the MSP_API_VERSION command to find out if the firmware supports them."),(0,l.kt)("h2",{id:"mode-ranges"},"Mode Ranges"),(0,l.kt)("h3",{id:"msp_mode_ranges"},"MSP_MODE_RANGES"),(0,l.kt)("p",null,"The MSP_MODE_RANGES returns the current auxiliary mode settings from the flight controller. It should be invoked\nbefore any modification is made to the configuration."),(0,l.kt)("p",null,"The message returns a group of 4 unsigned bytes for each 'slot' available in the flight controller. The number of\nslots should be calculated from the size of the returned message."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Msg Id"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MSP_MODE_RANGES"),(0,l.kt)("td",{parentName:"tr",align:null},"34"),(0,l.kt)("td",{parentName:"tr",align:null},"to FC"),(0,l.kt)("td",{parentName:"tr",align:null},"Following this command, the FC returns a block of 4 bytes for each auxiliary mode 'slot'")))),(0,l.kt)("p",null,"Unassigned slots have rangeStartStep == rangeEndStep. Each element contains the following fields."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Data"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"permanentId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"See Modes.md for a definition of the permanent ids")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"auxChannelIndex"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The Aux switch number (indexed from 0)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rangeStartStep"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The start value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rangeEndStep"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The end value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100")))),(0,l.kt)("p",null,"Thus, for a cleanflight firmware with 40 slots 160 bytes would be returned in response to MSP_MODE_RANGES."),(0,l.kt)("h3",{id:"msp_mode_ranges_extra"},"MSP_MODE_RANGES_EXTRA"),(0,l.kt)("p",null,"The MSP_MODE_RANGES_EXTRA returns the extra mode setting parameters from the flight controller. It should be invoked\nin conjunction with MSP_MODE_RANGES before any modification is made to the configuration."),(0,l.kt)("p",null,"The message returns the number of extra elements followed by a group of bytes for each 'slot' available in the flight\ncontroller. The number of slots should be the same as for MSP_MODE_RANGES, calculated from the size of the returned\nmessage and the number of bytes per group."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Msg Id"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MSP_MODE_RANGES_EXTRA"),(0,l.kt)("td",{parentName:"tr",align:null},"238"),(0,l.kt)("td",{parentName:"tr",align:null},"to FC"),(0,l.kt)("td",{parentName:"tr",align:null},"Following this command, the FC returns a block of bytes for each auxiliary mode 'slot'")))),(0,l.kt)("p",null,"The return message is prepended with the number of bytes per element (3 bytes). Each element contains the\nfollowing fields:"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Data"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"permanentId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"See Modes.md for a definition of the permanent ids")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"modeLogic"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"0 = Logic AND; 1 = Logic OR")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"linkedTo"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"Permanent id to which this mode is linked.")))),(0,l.kt)("p",null,"Thus, for a cleanflight firmware with 20 slots, 61 bytes (including prepended size) would be returned in response to\nMSP_MODE_RANGES_EXTRA."),(0,l.kt)("h3",{id:"msp_set_mode_range"},"MSP_SET_MODE_RANGE"),(0,l.kt)("p",null,"The MSP",(0,l.kt)("em",{parentName:"p"},"SET_MODE_RANGE is used to inform the flight controller of\nauxiliary mode settings. The client _must")," return all auxiliary\nelements, including those that have been disabled or are undefined, by\nsending this message for all auxiliary slots."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Msg Id"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MSP_SET_MODE_RANGE"),(0,l.kt)("td",{parentName:"tr",align:null},"35"),(0,l.kt)("td",{parentName:"tr",align:null},"to FC")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Data"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sequence id"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"A monotonically increasing ID, from 0 to the number of slots -1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"permanentId"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"See Modes.md for a definition of the permanent ids")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"auxChannelIndex"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The Aux channel number (indexed from 0)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rangeStartStep"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The start value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rangeEndStep"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The end value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100")))),(0,l.kt)("h3",{id:"implementation-notes"},"Implementation Notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The client should make no assumptions about the number of slots available. Rather, the number should be computed\nfrom the size of the MSP_MODE_RANGES message divided by the size of the returned data element (4 bytes);"),(0,l.kt)("li",{parentName:"ul"},"The client should ensure that all changed items are returned to the flight controller, including those where a\nswitch or range has been disabled;"),(0,l.kt)("li",{parentName:"ul"},"A 'null' return, with all values other than the sequence id set to 0, must be made for all unused slots, up to\nthe maximum number of slots calculated from the initial message.")),(0,l.kt)("h2",{id:"adjustment-ranges"},"Adjustment Ranges"),(0,l.kt)("h3",{id:"msp_adjustment_ranges"},"MSP_ADJUSTMENT_RANGES"),(0,l.kt)("p",null,"The MSP_ADJUSTMENT_RANGES returns the current adjustment range settings from\nthe flight controller. It should be invoked before any modification is\nmade to the configuration."),(0,l.kt)("p",null,"The message returns a group of 6 unsigned bytes for each 'slot'\navailable in the flight controller. The number of slots should be\ncalculated from the size of the returned message."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Msg Id"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MSP_ADJUSTMENT_RANGES"),(0,l.kt)("td",{parentName:"tr",align:null},"52"),(0,l.kt)("td",{parentName:"tr",align:null},"to FC"),(0,l.kt)("td",{parentName:"tr",align:null},"Following this command, the FC returns a block of 6 bytes for each adjustment range 'slot'")))),(0,l.kt)("p",null,"Unassigned slots have rangeStartStep == rangeEndStep. Each element contains the following fields."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Data"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"adjustmentStateIndex"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"See below")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"auxChannelIndex"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The Aux channel number (indexed from 0) used to activate the adjustment")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rangeStartStep"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The start value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rangeEndStep"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The end value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"adjustmentFunction"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"See below")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"auxSwitchChannelIndex"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The Aux channel number used to perform the function (indexed from 0)")))),(0,l.kt)("p",null,"Thus, for a cleanflight firmware with 12 slots 72 bytes would be returned in response to MSP_ADJUSTMENT_RANGES,"),(0,l.kt)("h3",{id:"msp_set_adjustment_range"},"MSP_SET_ADJUSTMENT_RANGE"),(0,l.kt)("p",null,"The MSP",(0,l.kt)("em",{parentName:"p"},"SET_ADJUSTMENT_RANGE is used to inform the flight controller of\nadjustment range settings. The client _must")," return all adjustment range\nelements, including those that have been disabled or are undefined, by\nsending this message for all adjustment range slots."),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Msg Id"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MSP_SET_ADJUSTMENT_RANGE"),(0,l.kt)("td",{parentName:"tr",align:null},"53"),(0,l.kt)("td",{parentName:"tr",align:null},"to FC")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Data"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"sequence id"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"A monotonically increasing ID, from 0 to the number of slots -1")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"adjustmentStateIndex"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"See below")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"auxChannelIndex"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The Aux channel number (indexed from 0)")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rangeStartStep"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The start value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"rangeEndStep"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The end value for this element in 'blocks' of 25 where 0 == 900 and 48 == 2100")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"adjustmentFunction"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"See below")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"auxSwitchChannelIndex"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"The Aux channel number used to perform the function (indexed from 0)")))),(0,l.kt)("h3",{id:"msp_set_1wire"},"MSP_SET_1WIRE"),(0,l.kt)("p",null,"The MSP_SET_1WIRE is used to enable serial1wire passthrough\nnote: it would be ideal to disable this when armed"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Command"),(0,l.kt)("th",{parentName:"tr",align:null},"Msg Id"),(0,l.kt)("th",{parentName:"tr",align:null},"Direction"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"MSP_SET_1WIRE"),(0,l.kt)("td",{parentName:"tr",align:null},"243"),(0,l.kt)("td",{parentName:"tr",align:null},"to FC")))),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Data"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"),(0,l.kt)("th",{parentName:"tr",align:null},"Notes"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"esc id"),(0,l.kt)("td",{parentName:"tr",align:null},"uint8"),(0,l.kt)("td",{parentName:"tr",align:null},"A monotonically increasing ID, from 0 to the number of escs -1")))),(0,l.kt)("h4",{id:"adjustmentindex"},"AdjustmentIndex"),(0,l.kt)("p",null,"The FC maintains internal state for each adjustmentStateIndex, currently 4 simultaneous adjustment states are maintained. Multiple adjustment ranges\ncan be configured to use the same state but care should be taken not to send multiple adjustment ranges that when active would confict."),(0,l.kt)("p",null,"e.g. Configuring two identical adjustment ranges using the same slot would conflict, but configuring two adjustment ranges that used\nonly one half of the possible channel range each but used the same adjustmentStateIndex would not conflict."),(0,l.kt)("p",null,"The FC does NOT check for conflicts."),(0,l.kt)("h4",{id:"adjustmentfunction"},"AdjustmentFunction"),(0,l.kt)("p",null,"There are many adjustments that can be made, the numbers of them and their use is found in the documentation of the cli ",(0,l.kt)("inlineCode",{parentName:"p"},"adjrange")," command in the 'Inflight Adjustents' section."),(0,l.kt)("h3",{id:"implementation-notes-1"},"Implementation Notes"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"The client should make no assumptions about the number of slots available. Rather, the number should be computed\nfrom the size of the MSP_ADJUSTMENT_RANGES message divided by the size of the returned data element (6 bytes);"),(0,l.kt)("li",{parentName:"ul"},"The client should ensure that all changed items are returned to the flight controller, including those where a\nswitch or range has been disabled;"),(0,l.kt)("li",{parentName:"ul"},"A 'null' return, with all values except for the sequence id set to 0, must be made for all unused slots,\nup to the maximum number of slots calculated from the initial message.")),(0,l.kt)("h2",{id:"deprecated-msp"},"Deprecated MSP"),(0,l.kt)("p",null,"The following MSP commands are replaced by the MSP_MODE_RANGES and\nMSP_SET_MODE_RANGE extensions, and are not recognised by\ncleanflight."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"MSP_BOX"),(0,l.kt)("li",{parentName:"ul"},"MSP_SET_BOX")),(0,l.kt)("h2",{id:"see-also"},"See also"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"/betaflight.com/docs/development/Modes"},"Modes.md")," describes the user visible implementation for the cleanflight\nmodes extension."))}s.isMDXComponent=!0}}]);