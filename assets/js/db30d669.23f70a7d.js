"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[47],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>f});var n=t(67294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var u=n.createContext({}),s=function(e){var r=n.useContext(u),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=s(e.components);return n.createElement(u.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,u=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=s(t),d=a,f=p["".concat(u,".").concat(d)]||p[d]||m[d]||o;return t?n.createElement(f,i(i({ref:r},c),{},{components:t})):n.createElement(f,i({ref:r},c))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var u in r)hasOwnProperty.call(r,u)&&(l[u]=r[u]);l.originalType=e,l[p]="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=t[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},97871:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>u,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=t(87462),a=(t(67294),t(3905));const o={},i=void 0,l={unversionedId:"wiki/boards/OMNIBUS-F4-Pro-Corners",id:"wiki/boards/OMNIBUS-F4-Pro-Corners",title:"OMNIBUS-F4-Pro-Corners",description:"OMNIBUS F4 Pro Corners",source:"@site/docs/wiki/boards/OMNIBUS-F4-Pro-Corners.md",sourceDirName:"wiki/boards",slug:"/wiki/boards/OMNIBUS-F4-Pro-Corners",permalink:"/betaflight.com/docs/wiki/boards/OMNIBUS-F4-Pro-Corners",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"wiki",previous:{title:"Board - Nucleo H743 - RAM based image",permalink:"/betaflight.com/docs/wiki/boards/NUCLEOH743 RAM based"},next:{title:"OMNIBUS",permalink:"/betaflight.com/docs/wiki/boards/OMNIBUS"}},u={},s=[{value:"OMNIBUS F4 Pro Corners",id:"omnibus-f4-pro-corners",level:2},{value:"Notes",id:"notes",level:2},{value:"Hardware",id:"hardware",level:2},{value:"Configuration Example 1",id:"configuration-example-1",level:2},{value:"Configuration Example 2",id:"configuration-example-2",level:2}],c={toc:s};function p(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"omnibus-f4-pro-corners"},"OMNIBUS F4 Pro Corners"),(0,a.kt)("h2",{id:"notes"},"Notes"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"3.2.0: Programmable inverter on UART3 (controlled by PC9) is configured, but not activated by default as it interfere with other usages of PC9; users must activate it by ",(0,a.kt)("inlineCode",{parentName:"li"},"resource INVERTER 3 C09")," (see example below).")),(0,a.kt)("h2",{id:"hardware"},"Hardware"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Variant of OMNIBUS F4 Pro (OMNIBUSF4SD target). Please refer to OMNIBUS F4 wiki page for additional information."),(0,a.kt)("li",{parentName:"ul"},"Still uses OMNIBUSF4SD target."),(0,a.kt)("li",{parentName:"ul"},"Two dual inverters, on UART3 (controlled by PC9) and UART6 (controlled by PC8); supports SBUS and native SmartPort (requires a diode for SmartPort)."),(0,a.kt)("li",{parentName:"ul"},"UART1_RX can be connected to ESC telemetry via jumper.")),(0,a.kt)("h2",{id:"configuration-example-1"},"Configuration Example 1"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"UART1 ESC Telemetry"),(0,a.kt)("li",{parentName:"ul"},"UART3 SBUS"),(0,a.kt)("li",{parentName:"ul"},"UART6 SmartPort (Inverted, TX-Inline-Diode)"),(0,a.kt)("li",{parentName:"ul"},"SOFTSERIAL1 SmartAudio")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://user-images.githubusercontent.com/14850998/29904533-3ec5c1f6-8e44-11e7-879f-e1b433b4d8f1.jpg",alt:null})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Betaflight / OMNIBUSF4SD (OBSD) 3.2.0 Aug 28 2017 / 12:02:37 (b2cd7294e)\n\n# resources\nresource SERIAL_TX 1 NONE\nresource SERIAL_TX 11 A09\nresource INVERTER 3 C09\n\n# feature\nfeature SOFTSERIAL\nfeature TELEMETRY\nfeature ESC_SENSOR\n\n# serial\nserial 0 1024 115200 57600 0 115200\nserial 2 64 115200 57600 0 115200\nserial 5 32 115200 57600 0 115200\nserial 30 2048 115200 57600 0 115200\n\n# master\nset serialrx_provider = SBUS\nset current_meter = ESC\nset battery_meter = ADC\nset tlm_halfduplex = OFF\n")),(0,a.kt)("h2",{id:"configuration-example-2"},"Configuration Example 2"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"UART1 ESC Telemetry"),(0,a.kt)("li",{parentName:"ul"},"UART3 SBUS"),(0,a.kt)("li",{parentName:"ul"},"UART6 Free (for e.g. GPS)"),(0,a.kt)("li",{parentName:"ul"},"SOFTSERIAL1 Smartport (UART TX1 pad)"),(0,a.kt)("li",{parentName:"ul"},"SOFTSERIAL2 IRC Tramp (M5 pad)")),(0,a.kt)("p",null,(0,a.kt)("img",{parentName:"p",src:"https://github.com/stsa64/Quadcopter/blob/master/Omnibus%20F4%20pro%20corner%20diagram.jpg",alt:"Omnibus F4 Pro Corner wiring diagram"})),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"# Betaflight / OMNIBUSF4SD (OBSD) 3.2.5 Feb 11 2018 / 00:49:36 (6e69ff00c) MSP API: 1.36\n\n# resources\nresource MOTOR 5 NONE\nresource SERIAL_TX 1 NONE\nresource SERIAL_TX 11 A09\nresource SERIAL_TX 12 A01\n\n# feature\nfeature MOTOR_STOP\nfeature SOFTSERIAL\nfeature TELEMETRY\nfeature ESC_SENSOR\n\n# serial\nserial 0 1024 115200 57600 0 115200\nserial 2 64 115200 57600 0 115200\nserial 30 32 115200 57600 0 115200\nserial 31 8192 115200 57600 0 115200\n\n# master\nset serialrx_provider = SBUS\n")))}p.isMDXComponent=!0}}]);