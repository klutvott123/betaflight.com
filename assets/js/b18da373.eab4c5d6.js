"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[3325],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>f});var a=r(67294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),c=u(r),m=n,f=c["".concat(s,".").concat(m)]||c[m]||d[m]||i;return r?a.createElement(f,o(o({ref:t},p),{},{components:r})):a.createElement(f,o({ref:t},p))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:n,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}m.displayName="MDXCreateElement"},69717:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>l,toc:()=>u});var a=r(87462),n=(r(67294),r(3905));const i={},o=void 0,l={unversionedId:"wiki/boards/BLUEJAYF4",id:"wiki/boards/BLUEJAYF4",title:"BLUEJAYF4",description:"Description",source:"@site/docs/wiki/boards/BLUEJAYF4.md",sourceDirName:"wiki/boards",slug:"/wiki/boards/BLUEJAYF4",permalink:"/betaflight.com/docs/wiki/boards/BLUEJAYF4",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"wiki",previous:{title:"AIO Betaflight F3 Flight controller",permalink:"/betaflight.com/docs/wiki/boards/BETAFLIGHTF3"},next:{title:"CC3D",permalink:"/betaflight.com/docs/wiki/boards/CC3D"}},s={},u=[{value:"Description",id:"description",level:2},{value:"MCU, Sensors and Features",id:"mcu-sensors-and-features",level:2},{value:"Hardware",id:"hardware",level:3},{value:"Features",id:"features",level:3},{value:"Manufacturers and Distributors",id:"manufacturers-and-distributors",level:2},{value:"Hardware Designs (if available)",id:"hardware-designs-if-available",level:2},{value:"Variants",id:"variants",level:2},{value:"Configuration Information",id:"configuration-information",level:2},{value:"Wiring Diagrams",id:"wiring-diagrams",level:3},{value:"Frsky Smartport",id:"frsky-smartport",level:3},{value:"Serial Wire Debug",id:"serial-wire-debug",level:3},{value:"Example",id:"example",level:3}],p={toc:u};function c(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,a.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h2",{id:"description"},"Description"),(0,n.kt)("p",null,"Beautifully simple STM32F4 based flightcontroller. An F4 replacement for the Naze."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://cloud.githubusercontent.com/assets/6168871/21573427/4e0d21f2-cf38-11e6-893d-73e1eb90bfd0.png",alt:"BlueJayF4 - rev3"})),(0,n.kt)("p",null,"Two variants (in multiple revisions). The full size, 36x36mm (30.5x30.5 mounting holes) and a 25x25mm (20x20 mounting holes) mini version."),(0,n.kt)("h2",{id:"mcu-sensors-and-features"},"MCU, Sensors and Features"),(0,n.kt)("h3",{id:"hardware"},"Hardware"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"MCU: STM32F405RTG6"),(0,n.kt)("li",{parentName:"ul"},"IMU: ICM-20602 (SPI) rev4, ICM-20608-G (SPI) rev3 (and mini), and MPU9250 (SPI) rev1 and rev2"),(0,n.kt)("li",{parentName:"ul"},"IMU Interrupt: Yes"),(0,n.kt)("li",{parentName:"ul"},"BARO: Optional on full size, not available on mini."),(0,n.kt)("li",{parentName:"ul"},"VCP: Yes"),(0,n.kt)("li",{parentName:"ul"},"Hardware UARTS: 3 (4 on full size with Quad motor remapping)"),(0,n.kt)("li",{parentName:"ul"},"OSD: Compatible pinouts for MinimOSD on UART3 (stackable) on full size board"),(0,n.kt)("li",{parentName:"ul"},"Blackbox: Yes (16mb rev3, 2mb rev1), SD card for rev2 and rev3 full size (no SD card on mini)"),(0,n.kt)("li",{parentName:"ul"},"PPM/UART Shared: UART6"),(0,n.kt)("li",{parentName:"ul"},"Battery Voltage Sensor: Yes, directly connected, no wiring necessary (if using pololu on full size), wiring required to vbat supply on PDB if using mini"),(0,n.kt)("li",{parentName:"ul"},"Integrated Voltage Regulator: Pololu piggy back option on full size rev3 and rev4"),(0,n.kt)("li",{parentName:"ul"},"Button for putting board into DFU mode")),(0,n.kt)("h3",{id:"features"},"Features"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Current Sensor: available as ADC input, but requires shunt circuit on PDB or battery cable."),(0,n.kt)("li",{parentName:"ul"},"BlHeli passthrough: Yes"),(0,n.kt)("li",{parentName:"ul"},"WS2811 Led Strip: Yes (on motor output Pin 5)"),(0,n.kt)("li",{parentName:"ul"},"Transponder: No")),(0,n.kt)("h2",{id:"manufacturers-and-distributors"},"Manufacturers and Distributors"),(0,n.kt)("p",null,"These boards (full and mini) are available at some online RC stores, and directly from the manufacturer BlueJayRC."),(0,n.kt)("p",null,"Available here: ",(0,n.kt)("a",{parentName:"p",href:"https://bluejayrc.com"},"BlueJayRC.com")),(0,n.kt)("h2",{id:"hardware-designs-if-available"},"Hardware Designs (if available)"),(0,n.kt)("p",null,"The hardware is currently closed source. It may be in the future that older revisions will be made publicly available."),(0,n.kt)("h2",{id:"variants"},"Variants"),(0,n.kt)("p",null,"BlueJayF4 rev1, 2 and 3 - including mini."),(0,n.kt)("p",null,"Rev3 (mini) (there is also a PDB available)\n",(0,n.kt)("img",{parentName:"p",src:"https://cloud.githubusercontent.com/assets/6168871/21573442/6dd9f65e-cf38-11e6-979c-87ccb497e97d.png",alt:"bluejayf4-mini"})),(0,n.kt)("p",null,"Rev3 (Full Size)\n",(0,n.kt)("img",{parentName:"p",src:"https://cloud.githubusercontent.com/assets/6168871/21573427/4e0d21f2-cf38-11e6-893d-73e1eb90bfd0.png",alt:"BlueJayF4 - rev3"})),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://cloud.githubusercontent.com/assets/6168871/21573428/4e11abfa-cf38-11e6-9fb7-0153eaf0ff61.jpg",alt:"BlueJayF4 - rev3 - bottom"})),(0,n.kt)("p",null,"Rev2 (Full Size)\n",(0,n.kt)("img",{parentName:"p",src:"https://cloud.githubusercontent.com/assets/6168871/21573437/6458d622-cf38-11e6-9195-baab4166d8d4.jpg",alt:"BlueJayF4 - rev2"})),(0,n.kt)("h2",{id:"configuration-information"},"Configuration Information"),(0,n.kt)("h3",{id:"wiring-diagrams"},"Wiring Diagrams"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://betaflight.com/assets/img/boards/bluejayf4/bluejayf4-rev4-wiring.png",alt:"Wiring Diagram - rev4"})),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://betaflight.com/assets/img/boards/bluejayf4/bluejayf4-rev3-wiring.jpg",alt:"Wiring Diagram - rev3"})),(0,n.kt)("h3",{id:"frsky-smartport"},"Frsky Smartport"),(0,n.kt)("p",null,"Frysky smartport (or s-port) is inverted, and half duplex. You can modify your X4R or XSR by following the procedure here ",(0,n.kt)("a",{parentName:"p",href:"https://blck.mn/2016/06/smartport-the-frsky-x4rs-and-betaflight/"},"https://blck.mn/2016/06/smartport-the-frsky-x4rs-and-betaflight/")," and here (for a cleaner modification thats easily switchable between inverted and non-inverted) ",(0,n.kt)("a",{parentName:"p",href:"https://blck.mn/2016/12/smartport-frsky-x4rs-and-betaflight-part-2/"},"https://blck.mn/2016/12/smartport-frsky-x4rs-and-betaflight-part-2/")),(0,n.kt)("p",null,"For rev3 users, the addition of a diode on UART1, and the use of the builds in BF3.1 or later allow direct connection of s-port without modifying your RX unit."),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://cloud.githubusercontent.com/assets/6168871/21573182/a800cbbc-cf35-11e6-90a5-ccdb9159eec1.png",alt:null})),(0,n.kt)("p",null,"You will need to run the following in the CLI:"),(0,n.kt)("p",null,(0,n.kt)("inlineCode",{parentName:"p"},"set sport_halfduplex=OFF")),(0,n.kt)("h3",{id:"serial-wire-debug"},"Serial Wire Debug"),(0,n.kt)("p",null,"Serial Wire Debug output is located on the bottom of the board, and provides a pin out compatible with STM32Fx discovery boards to be used as a SWD adapter:"),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://betaflight.com/assets/img/boards/bluejayf4/bluejayf4-rev4-wiring-swd.png",alt:"Wiring Diagram - rev4 SWD"})),(0,n.kt)("p",null,(0,n.kt)("img",{parentName:"p",src:"https://betaflight.com/assets/img/boards/bluejayf4/bluejayf4-rev2-wiring-swd.jpg",alt:"bjf4-swd-rev2"})),(0,n.kt)("h1",{id:"known-issues"},"Known Issues:"),(0,n.kt)("p",null,"The rev2 requires a resistor mod to prevent the issue of crashing on power up. The rev3 does not have this issue."),(0,n.kt)("p",null,"Following the picture below to perform the Rev2 resistor modification:\n",(0,n.kt)("img",{parentName:"p",src:"https://cloud.githubusercontent.com/assets/6168871/17614652/3daa257c-60ab-11e6-8567-ab51625e8e89.png",alt:"resistor-mod"})),(0,n.kt)("p",null,"The rev2 onboard regulator is limited in current capacity, and has been replaced with a pololu piggy back option for greater flexibility.\n",(0,n.kt)("img",{parentName:"p",src:"https://cloud.githubusercontent.com/assets/6168871/17614559/abe4d650-60aa-11e6-8c85-93ed35a8b04f.jpg",alt:"soldered-pololu"})),(0,n.kt)("h1",{id:"other-resources"},"Other Resources"),(0,n.kt)("p",null,"Rcgroups Thread: ",(0,n.kt)("a",{parentName:"p",href:"http://www.rcgroups.com/forums/showthread.php?t=2593106"},"http://www.rcgroups.com/forums/showthread.php?t=2593106")),(0,n.kt)("h1",{id:"configuring-4th-uart-32-and-later"},"Configuring 4th UART (3.2 and later)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"4th hardware UART (UART4) is supported on motor outputs 1 and 2, but it is hidden until explicitly turned on by resource commands."),(0,n.kt)("li",{parentName:"ul"},"Motor outputs 1 and 2 must be remapped to avoid collision with UART4.")),(0,n.kt)("h3",{id:"example"},"Example"),(0,n.kt)("p",null,"Below is a sequence of resource commands to configure UART4, shift motor outputs by two (Motor 1 to motor output 3, motor 2 to motor output 4 and so on) and use DEBUG pad for LED strip."),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"# Disable functions on motor outputs 5 and 6 so motors can be shifted by two\nresource SERIAL_TX 11 NONE\nresource SERIAL_RX 11 NONE\nresource MOTOR 5 NONE\nresource MOTOR 6 NONE\n\n# Remap LED\nresource LED_STRIP 1 B03\n\n# Remap motors\nresource MOTOR 3 B00\nresource MOTOR 4 B01\nresource MOTOR 1 A02\nresource MOTOR 2 A03\n\n# Configure UART4\nresource SERIAL_TX 4 A00\nresource SERIAL_RX 4 A01\n")))}c.isMDXComponent=!0}}]);